// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	io "io"

	s3 "github.com/aws/aws-sdk-go/service/s3"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// Delete provides a mock function with given fields: key
func (_m *IClient) Delete(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Download provides a mock function with given fields: key, w
func (_m *IClient) Download(key string, w io.WriterAt) error {
	ret := _m.Called(key, w)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, io.WriterAt) error); ok {
		r0 = rf(key, w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListObjects provides a mock function with given fields: prefix
func (_m *IClient) ListObjects(prefix string) ([]*s3.Object, error) {
	ret := _m.Called(prefix)

	var r0 []*s3.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*s3.Object, error)); ok {
		return rf(prefix)
	}
	if rf, ok := ret.Get(0).(func(string) []*s3.Object); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*s3.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Upload provides a mock function with given fields: key, body
func (_m *IClient) Upload(key string, body io.Reader) error {
	ret := _m.Called(key, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, io.Reader) error); ok {
		r0 = rf(key, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIClient(t mockConstructorTestingTNewIClient) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
