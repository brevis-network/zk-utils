// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package eth

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// AnchorBlocksBlockHashWitness is an auto generated low-level Go binding around an user-defined struct.
type AnchorBlocksBlockHashWitness struct {
	Left  []byte
	Right []byte
}

// BeaconBlockHeader is an auto generated low-level Go binding around an user-defined struct.
type BeaconBlockHeader struct {
	Slot          uint64
	ProposerIndex uint64
	ParentRoot    [32]byte
	StateRoot     [32]byte
	BodyRoot      [32]byte
}

// BrevisExtractInfos is an auto generated low-level Go binding around an user-defined struct.
type BrevisExtractInfos struct {
	SmtRoot  [32]byte
	Receipts []BrevisReceiptInfo
	Stores   []BrevisStorageInfo
	Txs      []BrevisTransactionInfo
}

// BrevisLogExtraInfo is an auto generated low-level Go binding around an user-defined struct.
type BrevisLogExtraInfo struct {
	ValueFromTopic  uint8
	ValueIndex      uint64
	ContractAddress common.Address
	LogTopic0       [32]byte
}

// BrevisLogInfo is an auto generated low-level Go binding around an user-defined struct.
type BrevisLogInfo struct {
	LogExtraInfo BrevisLogExtraInfo
	LogIndex     uint64
	Value        [32]byte
}

// BrevisProofChainZKVerifier is an auto generated low-level Go binding around an user-defined struct.
type BrevisProofChainZKVerifier struct {
	ContractAppZkVerifier common.Address
	CircuitAppZkVerifier  common.Address
}

// BrevisProofData is an auto generated low-level Go binding around an user-defined struct.
type BrevisProofData struct {
	CommitHash    [32]byte
	Length        *big.Int
	VkHash        [32]byte
	AppCommitHash [32]byte
	AppVkHash     [32]byte
	SmtRoot       [32]byte
}

// BrevisReceiptInfo is an auto generated low-level Go binding around an user-defined struct.
type BrevisReceiptInfo struct {
	BlkNum       uint64
	ReceiptIndex uint64
	Logs         [5]BrevisLogInfo
}

// BrevisStorageInfo is an auto generated low-level Go binding around an user-defined struct.
type BrevisStorageInfo struct {
	BlockHash   [32]byte
	Account     common.Address
	Slot        [32]byte
	SlotValue   [32]byte
	BlockNumber uint64
}

// BrevisTransactionInfo is an auto generated low-level Go binding around an user-defined struct.
type BrevisTransactionInfo struct {
	LeafHash      [32]byte
	BlockHash     [32]byte
	BlockNumber   uint64
	BlockTime     uint64
	LeafRlpPrefix []byte
}

// ExecutionPayload is an auto generated low-level Go binding around an user-defined struct.
type ExecutionPayload struct {
	StateRoot   LeafWithBranch
	BlockHash   LeafWithBranch
	BlockNumber LeafWithBranch
}

// HeaderWithExecution is an auto generated low-level Go binding around an user-defined struct.
type HeaderWithExecution struct {
	Beacon        BeaconBlockHeader
	Execution     ExecutionPayload
	ExecutionRoot LeafWithBranch
}

// HooksCalls is an auto generated low-level Go binding around an user-defined struct.
type HooksCalls struct {
	BeforeInitialize     bool
	AfterInitialize      bool
	BeforeModifyPosition bool
	AfterModifyPosition  bool
	BeforeSwap           bool
	AfterSwap            bool
	BeforeDonate         bool
	AfterDonate          bool
}

// IBeaconVerifierProof is an auto generated low-level Go binding around an user-defined struct.
type IBeaconVerifierProof struct {
	A          [2]*big.Int
	B          [2][2]*big.Int
	C          [2]*big.Int
	Commitment [2]*big.Int
}

// IBlockChunksBlockHashWitness is an auto generated low-level Go binding around an user-defined struct.
type IBlockChunksBlockHashWitness struct {
	ChainId        uint64
	BlkNum         uint32
	ClaimedBlkHash [32]byte
	PrevHash       [32]byte
	NumFinal       uint32
	MerkleProof    [7][32]byte
}

// IPoolManagerModifyPositionParams is an auto generated low-level Go binding around an user-defined struct.
type IPoolManagerModifyPositionParams struct {
	TickLower      *big.Int
	TickUpper      *big.Int
	LiquidityDelta *big.Int
}

// IPoolManagerSwapParams is an auto generated low-level Go binding around an user-defined struct.
type IPoolManagerSwapParams struct {
	ZeroForOne        bool
	AmountSpecified   *big.Int
	SqrtPriceLimitX96 *big.Int
}

// IReceiptVerifierLogInfo is an auto generated low-level Go binding around an user-defined struct.
type IReceiptVerifierLogInfo struct {
	Addr   common.Address
	Topics [][32]byte
	Data   []byte
}

// IReceiptVerifierReceiptInfo is an auto generated low-level Go binding around an user-defined struct.
type IReceiptVerifierReceiptInfo struct {
	Success bool
	ChainId uint64
	BlkHash [32]byte
	BlkNum  uint32
	BlkTime uint64
	Logs    []IReceiptVerifierLogInfo
}

// ISMTSmtUpdate is an auto generated low-level Go binding around an user-defined struct.
type ISMTSmtUpdate struct {
	NewSmtRoot          [32]byte
	EndBlockNum         uint64
	EndBlockHash        [32]byte
	NextChunkMerkleRoot [32]byte
	Proof               IVerifierProof
	CommitPub           [32]byte
}

// ISlotValueVerifierSlotInfo is an auto generated low-level Go binding around an user-defined struct.
type ISlotValueVerifierSlotInfo struct {
	ChainId     uint64
	AddrHash    [32]byte
	BlkHash     [32]byte
	SlotKeyHash [32]byte
	SlotValue   [32]byte
	BlkNum      uint32
}

// ITxVerifierTxInfo is an auto generated low-level Go binding around an user-defined struct.
type ITxVerifierTxInfo struct {
	ChainId   uint64
	Nonce     uint64
	GasTipCap *big.Int
	GasFeeCap *big.Int
	Gas       *big.Int
	To        common.Address
	Value     *big.Int
	Data      []byte
	From      common.Address
	BlkNum    uint32
	BlkHash   [32]byte
	BlkTime   uint64
}

// IVerifierProof is an auto generated low-level Go binding around an user-defined struct.
type IVerifierProof struct {
	A          [2]*big.Int
	B          [2][2]*big.Int
	C          [2]*big.Int
	Commitment [2]*big.Int
}

// LeafWithBranch is an auto generated low-level Go binding around an user-defined struct.
type LeafWithBranch struct {
	Leaf   [32]byte
	Branch [][32]byte
}

// LightClientOptimisticUpdate is an auto generated low-level Go binding around an user-defined struct.
type LightClientOptimisticUpdate struct {
	AttestedHeader HeaderWithExecution
	SyncAggregate  SyncAggregate
	SignatureSlot  uint64
}

// LightClientUpdate is an auto generated low-level Go binding around an user-defined struct.
type LightClientUpdate struct {
	AttestedHeader                    HeaderWithExecution
	FinalizedHeader                   HeaderWithExecution
	FinalityBranch                    [][32]byte
	NextSyncCommitteeRoot             [32]byte
	NextSyncCommitteeBranch           [][32]byte
	NextSyncCommitteePoseidonRoot     [32]byte
	NextSyncCommitteeRootMappingProof IBeaconVerifierProof
	SyncAggregate                     SyncAggregate
	SignatureSlot                     uint64
}

// PoolKey is an auto generated low-level Go binding around an user-defined struct.
type PoolKey struct {
	Currency0   common.Address
	Currency1   common.Address
	Fee         *big.Int
	TickSpacing *big.Int
	Hooks       common.Address
}

// PositionInfo is an auto generated low-level Go binding around an user-defined struct.
type PositionInfo struct {
	Liquidity                *big.Int
	FeeGrowthInside0LastX128 *big.Int
	FeeGrowthInside1LastX128 *big.Int
}

// SyncAggregate is an auto generated low-level Go binding around an user-defined struct.
type SyncAggregate struct {
	Participation uint64
	PoseidonRoot  [32]byte
	Commitment    *big.Int
	Proof         IBeaconVerifierProof
}

// TxTxInfo is an auto generated low-level Go binding around an user-defined struct.
type TxTxInfo struct {
	ChainId   uint64
	Nonce     uint64
	GasTipCap *big.Int
	GasFeeCap *big.Int
	Gas       *big.Int
	To        common.Address
	Value     *big.Int
	Data      []byte
	From      common.Address
}

// AddressMetaData contains all meta data concerning the Address contract.
var AddressMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220a279b0fd0903327fd9926649cfed61881a17672c8235aa9614d08f15aa175ab164736f6c63430008150033",
}

// AddressABI is the input ABI used to generate the binding from.
// Deprecated: Use AddressMetaData.ABI instead.
var AddressABI = AddressMetaData.ABI

// AddressBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AddressMetaData.Bin instead.
var AddressBin = AddressMetaData.Bin

// DeployAddress deploys a new Ethereum contract, binding an instance of Address to it.
func DeployAddress(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Address, error) {
	parsed, err := AddressMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AddressBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Address{AddressCaller: AddressCaller{contract: contract}, AddressTransactor: AddressTransactor{contract: contract}, AddressFilterer: AddressFilterer{contract: contract}}, nil
}

// Address is an auto generated Go binding around an Ethereum contract.
type Address struct {
	AddressCaller     // Read-only binding to the contract
	AddressTransactor // Write-only binding to the contract
	AddressFilterer   // Log filterer for contract events
}

// AddressCaller is an auto generated read-only Go binding around an Ethereum contract.
type AddressCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AddressTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AddressFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AddressSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AddressSession struct {
	Contract     *Address          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AddressCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AddressCallerSession struct {
	Contract *AddressCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// AddressTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AddressTransactorSession struct {
	Contract     *AddressTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// AddressRaw is an auto generated low-level Go binding around an Ethereum contract.
type AddressRaw struct {
	Contract *Address // Generic contract binding to access the raw methods on
}

// AddressCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AddressCallerRaw struct {
	Contract *AddressCaller // Generic read-only contract binding to access the raw methods on
}

// AddressTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AddressTransactorRaw struct {
	Contract *AddressTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAddress creates a new instance of Address, bound to a specific deployed contract.
func NewAddress(address common.Address, backend bind.ContractBackend) (*Address, error) {
	contract, err := bindAddress(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Address{AddressCaller: AddressCaller{contract: contract}, AddressTransactor: AddressTransactor{contract: contract}, AddressFilterer: AddressFilterer{contract: contract}}, nil
}

// NewAddressCaller creates a new read-only instance of Address, bound to a specific deployed contract.
func NewAddressCaller(address common.Address, caller bind.ContractCaller) (*AddressCaller, error) {
	contract, err := bindAddress(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AddressCaller{contract: contract}, nil
}

// NewAddressTransactor creates a new write-only instance of Address, bound to a specific deployed contract.
func NewAddressTransactor(address common.Address, transactor bind.ContractTransactor) (*AddressTransactor, error) {
	contract, err := bindAddress(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AddressTransactor{contract: contract}, nil
}

// NewAddressFilterer creates a new log filterer instance of Address, bound to a specific deployed contract.
func NewAddressFilterer(address common.Address, filterer bind.ContractFilterer) (*AddressFilterer, error) {
	contract, err := bindAddress(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AddressFilterer{contract: contract}, nil
}

// bindAddress binds a generic wrapper to an already deployed contract.
func bindAddress(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AddressMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Address *AddressRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Address.Contract.AddressCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Address *AddressRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.Contract.AddressTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Address *AddressRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Address.Contract.AddressTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Address *AddressCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Address.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Address *AddressTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Address.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Address *AddressTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Address.Contract.contract.Transact(opts, method, params...)
}

// AggregationVerifierMetaData contains all meta data concerning the AggregationVerifier contract.
var AggregationVerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"ProofInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PublicInputNotInField\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"}],\"name\":\"compressProof\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"compressed\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"compressedProof\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[8]\",\"name\":\"input\",\"type\":\"uint256[8]\"}],\"name\":\"verifyCompressedProof\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"proof\",\"type\":\"uint256[8]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commit\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[8]\",\"name\":\"input\",\"type\":\"uint256[8]\"}],\"name\":\"verifyProofWithCommit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"}],\"name\":\"verifyRaw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// AggregationVerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use AggregationVerifierMetaData.ABI instead.
var AggregationVerifierABI = AggregationVerifierMetaData.ABI

// AggregationVerifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AggregationVerifierMetaData.Bin instead.
var AggregationVerifierBin = AggregationVerifierMetaData.Bin

// DeployAggregationVerifier deploys a new Ethereum contract, binding an instance of AggregationVerifier to it.
func DeployAggregationVerifier(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *AggregationVerifier, error) {
	parsed, err := AggregationVerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AggregationVerifierBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AggregationVerifier{AggregationVerifierCaller: AggregationVerifierCaller{contract: contract}, AggregationVerifierTransactor: AggregationVerifierTransactor{contract: contract}, AggregationVerifierFilterer: AggregationVerifierFilterer{contract: contract}}, nil
}

// AggregationVerifier is an auto generated Go binding around an Ethereum contract.
type AggregationVerifier struct {
	AggregationVerifierCaller     // Read-only binding to the contract
	AggregationVerifierTransactor // Write-only binding to the contract
	AggregationVerifierFilterer   // Log filterer for contract events
}

// AggregationVerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type AggregationVerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AggregationVerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AggregationVerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AggregationVerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AggregationVerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AggregationVerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AggregationVerifierSession struct {
	Contract     *AggregationVerifier // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// AggregationVerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AggregationVerifierCallerSession struct {
	Contract *AggregationVerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// AggregationVerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AggregationVerifierTransactorSession struct {
	Contract     *AggregationVerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// AggregationVerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type AggregationVerifierRaw struct {
	Contract *AggregationVerifier // Generic contract binding to access the raw methods on
}

// AggregationVerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AggregationVerifierCallerRaw struct {
	Contract *AggregationVerifierCaller // Generic read-only contract binding to access the raw methods on
}

// AggregationVerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AggregationVerifierTransactorRaw struct {
	Contract *AggregationVerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAggregationVerifier creates a new instance of AggregationVerifier, bound to a specific deployed contract.
func NewAggregationVerifier(address common.Address, backend bind.ContractBackend) (*AggregationVerifier, error) {
	contract, err := bindAggregationVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AggregationVerifier{AggregationVerifierCaller: AggregationVerifierCaller{contract: contract}, AggregationVerifierTransactor: AggregationVerifierTransactor{contract: contract}, AggregationVerifierFilterer: AggregationVerifierFilterer{contract: contract}}, nil
}

// NewAggregationVerifierCaller creates a new read-only instance of AggregationVerifier, bound to a specific deployed contract.
func NewAggregationVerifierCaller(address common.Address, caller bind.ContractCaller) (*AggregationVerifierCaller, error) {
	contract, err := bindAggregationVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AggregationVerifierCaller{contract: contract}, nil
}

// NewAggregationVerifierTransactor creates a new write-only instance of AggregationVerifier, bound to a specific deployed contract.
func NewAggregationVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*AggregationVerifierTransactor, error) {
	contract, err := bindAggregationVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AggregationVerifierTransactor{contract: contract}, nil
}

// NewAggregationVerifierFilterer creates a new log filterer instance of AggregationVerifier, bound to a specific deployed contract.
func NewAggregationVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*AggregationVerifierFilterer, error) {
	contract, err := bindAggregationVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AggregationVerifierFilterer{contract: contract}, nil
}

// bindAggregationVerifier binds a generic wrapper to an already deployed contract.
func bindAggregationVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AggregationVerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AggregationVerifier *AggregationVerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AggregationVerifier.Contract.AggregationVerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AggregationVerifier *AggregationVerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AggregationVerifier.Contract.AggregationVerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AggregationVerifier *AggregationVerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AggregationVerifier.Contract.AggregationVerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AggregationVerifier *AggregationVerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AggregationVerifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AggregationVerifier *AggregationVerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AggregationVerifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AggregationVerifier *AggregationVerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AggregationVerifier.Contract.contract.Transact(opts, method, params...)
}

// CompressProof is a free data retrieval call binding the contract method 0x44f63692.
//
// Solidity: function compressProof(uint256[8] proof) view returns(uint256[4] compressed)
func (_AggregationVerifier *AggregationVerifierCaller) CompressProof(opts *bind.CallOpts, proof [8]*big.Int) ([4]*big.Int, error) {
	var out []interface{}
	err := _AggregationVerifier.contract.Call(opts, &out, "compressProof", proof)

	if err != nil {
		return *new([4]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([4]*big.Int)).(*[4]*big.Int)

	return out0, err

}

// CompressProof is a free data retrieval call binding the contract method 0x44f63692.
//
// Solidity: function compressProof(uint256[8] proof) view returns(uint256[4] compressed)
func (_AggregationVerifier *AggregationVerifierSession) CompressProof(proof [8]*big.Int) ([4]*big.Int, error) {
	return _AggregationVerifier.Contract.CompressProof(&_AggregationVerifier.CallOpts, proof)
}

// CompressProof is a free data retrieval call binding the contract method 0x44f63692.
//
// Solidity: function compressProof(uint256[8] proof) view returns(uint256[4] compressed)
func (_AggregationVerifier *AggregationVerifierCallerSession) CompressProof(proof [8]*big.Int) ([4]*big.Int, error) {
	return _AggregationVerifier.Contract.CompressProof(&_AggregationVerifier.CallOpts, proof)
}

// VerifyCompressedProof is a free data retrieval call binding the contract method 0x48306671.
//
// Solidity: function verifyCompressedProof(uint256[4] compressedProof, uint256[8] input) view returns()
func (_AggregationVerifier *AggregationVerifierCaller) VerifyCompressedProof(opts *bind.CallOpts, compressedProof [4]*big.Int, input [8]*big.Int) error {
	var out []interface{}
	err := _AggregationVerifier.contract.Call(opts, &out, "verifyCompressedProof", compressedProof, input)

	if err != nil {
		return err
	}

	return err

}

// VerifyCompressedProof is a free data retrieval call binding the contract method 0x48306671.
//
// Solidity: function verifyCompressedProof(uint256[4] compressedProof, uint256[8] input) view returns()
func (_AggregationVerifier *AggregationVerifierSession) VerifyCompressedProof(compressedProof [4]*big.Int, input [8]*big.Int) error {
	return _AggregationVerifier.Contract.VerifyCompressedProof(&_AggregationVerifier.CallOpts, compressedProof, input)
}

// VerifyCompressedProof is a free data retrieval call binding the contract method 0x48306671.
//
// Solidity: function verifyCompressedProof(uint256[4] compressedProof, uint256[8] input) view returns()
func (_AggregationVerifier *AggregationVerifierCallerSession) VerifyCompressedProof(compressedProof [4]*big.Int, input [8]*big.Int) error {
	return _AggregationVerifier.Contract.VerifyCompressedProof(&_AggregationVerifier.CallOpts, compressedProof, input)
}

// VerifyProofWithCommit is a free data retrieval call binding the contract method 0xcc73d2a3.
//
// Solidity: function verifyProofWithCommit(uint256[8] proof, uint256[2] commit, uint256[8] input) view returns(bool)
func (_AggregationVerifier *AggregationVerifierCaller) VerifyProofWithCommit(opts *bind.CallOpts, proof [8]*big.Int, commit [2]*big.Int, input [8]*big.Int) (bool, error) {
	var out []interface{}
	err := _AggregationVerifier.contract.Call(opts, &out, "verifyProofWithCommit", proof, commit, input)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyProofWithCommit is a free data retrieval call binding the contract method 0xcc73d2a3.
//
// Solidity: function verifyProofWithCommit(uint256[8] proof, uint256[2] commit, uint256[8] input) view returns(bool)
func (_AggregationVerifier *AggregationVerifierSession) VerifyProofWithCommit(proof [8]*big.Int, commit [2]*big.Int, input [8]*big.Int) (bool, error) {
	return _AggregationVerifier.Contract.VerifyProofWithCommit(&_AggregationVerifier.CallOpts, proof, commit, input)
}

// VerifyProofWithCommit is a free data retrieval call binding the contract method 0xcc73d2a3.
//
// Solidity: function verifyProofWithCommit(uint256[8] proof, uint256[2] commit, uint256[8] input) view returns(bool)
func (_AggregationVerifier *AggregationVerifierCallerSession) VerifyProofWithCommit(proof [8]*big.Int, commit [2]*big.Int, input [8]*big.Int) (bool, error) {
	return _AggregationVerifier.Contract.VerifyProofWithCommit(&_AggregationVerifier.CallOpts, proof, commit, input)
}

// VerifyRaw is a free data retrieval call binding the contract method 0x457726e6.
//
// Solidity: function verifyRaw(bytes proofData) view returns(bool)
func (_AggregationVerifier *AggregationVerifierCaller) VerifyRaw(opts *bind.CallOpts, proofData []byte) (bool, error) {
	var out []interface{}
	err := _AggregationVerifier.contract.Call(opts, &out, "verifyRaw", proofData)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyRaw is a free data retrieval call binding the contract method 0x457726e6.
//
// Solidity: function verifyRaw(bytes proofData) view returns(bool)
func (_AggregationVerifier *AggregationVerifierSession) VerifyRaw(proofData []byte) (bool, error) {
	return _AggregationVerifier.Contract.VerifyRaw(&_AggregationVerifier.CallOpts, proofData)
}

// VerifyRaw is a free data retrieval call binding the contract method 0x457726e6.
//
// Solidity: function verifyRaw(bytes proofData) view returns(bool)
func (_AggregationVerifier *AggregationVerifierCallerSession) VerifyRaw(proofData []byte) (bool, error) {
	return _AggregationVerifier.Contract.VerifyRaw(&_AggregationVerifier.CallOpts, proofData)
}

// AnchorBlocksMetaData contains all meta data concerning the AnchorBlocks contract.
var AnchorBlocksMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lightClient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"name\":\"AnchorBlockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blocks\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestBlockNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lightClient\",\"outputs\":[{\"internalType\":\"contractIEthereumLightClient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"proposerIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"parentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bodyRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBeaconBlockHeader\",\"name\":\"beacon\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"stateRoot\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"blockHash\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"blockNumber\",\"type\":\"tuple\"}],\"internalType\":\"structExecutionPayload\",\"name\":\"execution\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"executionRoot\",\"type\":\"tuple\"}],\"internalType\":\"structHeaderWithExecution\",\"name\":\"attestedHeader\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"participation\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"poseidonRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"structIBeaconVerifier.Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"internalType\":\"structSyncAggregate\",\"name\":\"syncAggregate\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"signatureSlot\",\"type\":\"uint64\"}],\"internalType\":\"structLightClientOptimisticUpdate\",\"name\":\"hb\",\"type\":\"tuple\"}],\"name\":\"processUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"proposerIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"parentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bodyRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBeaconBlockHeader\",\"name\":\"beacon\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"stateRoot\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"blockHash\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"blockNumber\",\"type\":\"tuple\"}],\"internalType\":\"structExecutionPayload\",\"name\":\"execution\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"executionRoot\",\"type\":\"tuple\"}],\"internalType\":\"structHeaderWithExecution\",\"name\":\"attestedHeader\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"participation\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"poseidonRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"structIBeaconVerifier.Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"internalType\":\"structSyncAggregate\",\"name\":\"syncAggregate\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"signatureSlot\",\"type\":\"uint64\"}],\"internalType\":\"structLightClientOptimisticUpdate\",\"name\":\"hb\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"left\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"right\",\"type\":\"bytes\"}],\"internalType\":\"structAnchorBlocks.BlockHashWitness[]\",\"name\":\"chainProof\",\"type\":\"tuple[]\"}],\"name\":\"processUpdateWithChainProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lightClient\",\"type\":\"address\"}],\"name\":\"setLightClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080346100a457601f61119d38819003918201601f19168301916001600160401b038311848410176100a8578084926020946040528339810103126100a457516001600160a01b0390818116908190036100a4575f5460018060a01b03199033828216175f55604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a360015416176001556110e090816100bd8239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60406080815260049081361015610014575f80fd5b5f91823560e01c9081632e3466f6146105725781633e553bab1461051d578163715018a6146104b05781638da5cb5b1461048a578163b5700e6814610462578163f25b3f991461043a578163f2fde38b14610344578163fb8cfb51146100a4575063fbbea34c14610083575f80fd5b346100a057816003193601126100a0576020906003549051908152f35b5080fd5b8383346100a05760603660031901126100a05767ffffffffffffffff8335818111610340576100d69036908601610796565b9160249485359560449081359585871161033c573660238801121561033c578684013596610103886106a4565b976101108751998a610669565b80895260209784898b019260051b8401019236841161033857858101925b8484106102c35750505050508651156102835761014a90610a37565b97909887518a03998a11610272578099829a5b89518c101561021a57866101718d8c610fef565b515151036101d95789896101ca6101d3938f8361019d826101956101bc9489610fef565b515197610fef565b5101518d519485936101b28286018099611017565b9081520190611017565b03601f198101835282610669565b5190209b610fcd565b9a61015d565b875162461bcd60e51b81528088018a90526010818701527f696e76616c6964206c656674206c656e0000000000000000000000000000000081880152606490fd5b85858a8a8e8b950361023457876102318888610f24565b80f35b5162461bcd60e51b8152938401526012908301527f696e76616c696420636861696e50726f6f66000000000000000000000000000090820152606490fd5b50634e487b7160e01b815260118452fd5b506014906064957f696e76616c69642070726f6f66206c656e6774680000000000000000000000009495519562461bcd60e51b8752860152840152820152fd5b83358381116103345782018a6023198236030112610334578a51906102e782610601565b8881013585811161033057610301908a36918401016109ba565b82528981013585811161033057916103218e94928b8695369201016109ba565b8382015281520193019261012e565b8f80fd5b8d80fd5b8b80fd5b8780fd5b8380fd5b91905034610436576020366003190112610436578135916001600160a01b03908184168094036104325784549182169261037f338514611040565b84156103c957505073ffffffffffffffffffffffffffffffffffffffff1916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8480fd5b8280fd5b9050346104365760203660031901126104365760209282913581526002845220549051908152f35b5050346100a057816003193601126100a0576020906001600160a01b03600154169051908152f35b5050346100a057816003193601126100a0576001600160a01b0360209254169051908152f35b833461051a578060031936011261051a5780805473ffffffffffffffffffffffffffffffffffffffff196001600160a01b038216916104f0338414611040565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b8390346100a05760203660031901126100a057356001600160a01b0380821680920361043657610551908354163314611040565b73ffffffffffffffffffffffffffffffffffffffff19600154161760015580f35b839150346100a05760203660031901126100a057803567ffffffffffffffff8111610436576105a76105ac9136908401610796565b610a37565b9182156105be57509061023191610f24565b606490602086519162461bcd60e51b8352820152600f60248201527f656d70747920626c6f636b4861736800000000000000000000000000000000006044820152fd5b6040810190811067ffffffffffffffff82111761061d57604052565b634e487b7160e01b5f52604160045260245ffd5b6060810190811067ffffffffffffffff82111761061d57604052565b6080810190811067ffffffffffffffff82111761061d57604052565b90601f8019910116810190811067ffffffffffffffff82111761061d57604052565b359067ffffffffffffffff821682036106a057565b5f80fd5b67ffffffffffffffff811161061d5760051b60200190565b91906040838203126106a057604051926106d584610601565b8381358152602091828101359067ffffffffffffffff82116106a057019280601f850112156106a0578335610709816106a4565b946107176040519687610669565b818652848087019260051b8201019283116106a05784809101915b83831061074157505050500152565b8235815291810191859101610732565b9080601f830112156106a0576040519161076a83610601565b8290604081019283116106a057905b8282106107865750505090565b8135815260209182019101610779565b9190828103926101e084126106a0576040908151926107b484610631565b839582359067ffffffffffffffff918281116106a05784019182840360e081126106a05760a08751916107e683610631565b126106a05786519160a083018381108282111761061d5788526108088561068b565b835260209461081886820161068b565b868501528881013589850152606093848201358582015260808201356080820152835260a08101358281116106a057810184818903126106a05789519061085e82610631565b80358481116106a057896108739183016106bc565b8252878101358481116106a0578961088c9183016106bc565b888301528a810135908482116106a0576108a8918a91016106bc565b8a8201528684015260c08101359182116106a0576108c8918791016106bc565b8188015287526101a0601f198301126106a0578551936108e78561064d565b6108f284870161068b565b8552868601358486015281860135878601526101408093607f1901126106a05786519261091e8461064d565b61092b8260808901610751565b84528160df880112156106a057875161094381610601565b80918801918383116106a0578960c08a01915b8483106109a1575050508261097e869488969461098c9461099c9c9a6101c09c9a0152610751565b8a8501526101808701610751565b818301528301528601520161068b565b910152565b88906109ad8785610751565b8152019101908a90610956565b81601f820112156106a05780359067ffffffffffffffff821161061d57604051926109ef601f8401601f191660200185610669565b828452602083830101116106a057815f926020809301838601378301015290565b5f915b60028310610a2057505050565b600190825181526020809101920192019190610a13565b602091828201928351925f94600367ffffffffffffffff8096511602858116908103610f105761040011610ecb57815191604094858401908151936080865101519887865196015195968b975b8751891015610b365760ff8911610b22576001808a1b15610b0e578a918e9160198c1c811603610af657610ac5610ad091610abf8d8d610fef565b5161108b565b8d5191828092611017565b039060025afa15610aec57610ae68c5198610fcd565b97610a84565b89513d8d823e3d90fd5b610ac5610ad091610b078d8d610fef565b519061108b565b634e487b7160e01b8e52601260045260248efd5b634e487b7160e01b8d52601160045260248dfd5b92959a9194975092955003610e87578501938685510151938151519887865196015195968b975b8751891015610bc55760ff8911610b22576001808a1b15610b0e578a918e9160168c1c811603610bb457610ac5610b9891610abf8d8d610fef565b039060025afa15610aec57610bae8c5198610fcd565b97610b5d565b610ac5610b9891610b078d8d610fef565b92959a9194975092955003610e5757859051015192515196858451940151939489955b8551871015610c8d5760ff8711610c7957600180881b15610c655788918c91601c8a1c811603610c5457610c23610c2e91610abf8b8b610fef565b8b5191828092611017565b039060025afa15610c4a57610c448a5196610fcd565b95610be8565b87513d8b823e3d90fd5b610c23610c2e91610b078b8b610fef565b634e487b7160e01b8c52601260045260248cfd5b634e487b7160e01b8b52601160045260248bfd5b929550929790935095949503610e275760016001600160a01b0381541690828686015116938551519051833b15610e23579160608b9492969360808a51988996631ee9fa5560e11b88526004880152888151166024880152888d8201511660448801528b8101516064880152838101516084880152015160a48601528681511660c48601528a81015160e486015289810151610104860152015190610d3761012485018351610a10565b818a0151858b8b61016488015b60028410610df85750610264969450610d7f935060609250859150610d7290889601516101e4870190610a10565b0151610224840190610a10565b5afa8015610dee57610dc7575b50508290510190815101515184905b838210610dab5750505101515190565b600895861b60ff821617951c90610dc190610fcd565b90610d9b565b8196929611610dda57825293825f610d8c565b634e487b7160e01b82526041600452602482fd5b84513d89823e3d90fd5b9091929496985083959750610e0f81889551610a10565b0193019101908c9593918b8b8a9795610d44565b8a80fd5b835162461bcd60e51b81526004810186905260096024820152683130b210383937b7b360b91b6044820152606490fd5b865162461bcd60e51b81526004810187905260096024820152683130b210383937b7b360b91b6044820152606490fd5b865162461bcd60e51b815260048101879052601360248201527f626164206578656320726f6f742070726f6f66000000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260048101849052601260248201527f71756f72756d206e6f74207265616368656400000000000000000000000000006044820152606490fd5b634e487b7160e01b87526011600452602487fd5b90815f52600260205260405f2054610f8857816040917fa9aaf84657c346a7eafe57cf0403ab0be7867b79a5fdd5e5ab3527fbfc739d85935f52600260205280835f20556003548211610f7f575b82519182526020820152a1565b81600355610f72565b60405162461bcd60e51b815260206004820152601960248201527f626c6f636b206861736820616c726561647920657869737473000000000000006044820152606490fd5b5f198114610fdb5760010190565b634e487b7160e01b5f52601160045260245ffd5b80518210156110035760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b908151915f5b83811061102d575050015f815290565b806020809284010151818501520161101d565b1561104757565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b91906040519260208401526040830152604082526110a882610631565b56fea2646970667358221220b13e8acba3b81c0ed10019613933dd540c59031c5c526242e94df9ed322c729964736f6c63430008150033",
}

// AnchorBlocksABI is the input ABI used to generate the binding from.
// Deprecated: Use AnchorBlocksMetaData.ABI instead.
var AnchorBlocksABI = AnchorBlocksMetaData.ABI

// AnchorBlocksBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AnchorBlocksMetaData.Bin instead.
var AnchorBlocksBin = AnchorBlocksMetaData.Bin

// DeployAnchorBlocks deploys a new Ethereum contract, binding an instance of AnchorBlocks to it.
func DeployAnchorBlocks(auth *bind.TransactOpts, backend bind.ContractBackend, _lightClient common.Address) (common.Address, *types.Transaction, *AnchorBlocks, error) {
	parsed, err := AnchorBlocksMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AnchorBlocksBin), backend, _lightClient)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AnchorBlocks{AnchorBlocksCaller: AnchorBlocksCaller{contract: contract}, AnchorBlocksTransactor: AnchorBlocksTransactor{contract: contract}, AnchorBlocksFilterer: AnchorBlocksFilterer{contract: contract}}, nil
}

// AnchorBlocks is an auto generated Go binding around an Ethereum contract.
type AnchorBlocks struct {
	AnchorBlocksCaller     // Read-only binding to the contract
	AnchorBlocksTransactor // Write-only binding to the contract
	AnchorBlocksFilterer   // Log filterer for contract events
}

// AnchorBlocksCaller is an auto generated read-only Go binding around an Ethereum contract.
type AnchorBlocksCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AnchorBlocksTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AnchorBlocksTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AnchorBlocksFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AnchorBlocksFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AnchorBlocksSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AnchorBlocksSession struct {
	Contract     *AnchorBlocks     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AnchorBlocksCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AnchorBlocksCallerSession struct {
	Contract *AnchorBlocksCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// AnchorBlocksTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AnchorBlocksTransactorSession struct {
	Contract     *AnchorBlocksTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// AnchorBlocksRaw is an auto generated low-level Go binding around an Ethereum contract.
type AnchorBlocksRaw struct {
	Contract *AnchorBlocks // Generic contract binding to access the raw methods on
}

// AnchorBlocksCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AnchorBlocksCallerRaw struct {
	Contract *AnchorBlocksCaller // Generic read-only contract binding to access the raw methods on
}

// AnchorBlocksTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AnchorBlocksTransactorRaw struct {
	Contract *AnchorBlocksTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAnchorBlocks creates a new instance of AnchorBlocks, bound to a specific deployed contract.
func NewAnchorBlocks(address common.Address, backend bind.ContractBackend) (*AnchorBlocks, error) {
	contract, err := bindAnchorBlocks(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AnchorBlocks{AnchorBlocksCaller: AnchorBlocksCaller{contract: contract}, AnchorBlocksTransactor: AnchorBlocksTransactor{contract: contract}, AnchorBlocksFilterer: AnchorBlocksFilterer{contract: contract}}, nil
}

// NewAnchorBlocksCaller creates a new read-only instance of AnchorBlocks, bound to a specific deployed contract.
func NewAnchorBlocksCaller(address common.Address, caller bind.ContractCaller) (*AnchorBlocksCaller, error) {
	contract, err := bindAnchorBlocks(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AnchorBlocksCaller{contract: contract}, nil
}

// NewAnchorBlocksTransactor creates a new write-only instance of AnchorBlocks, bound to a specific deployed contract.
func NewAnchorBlocksTransactor(address common.Address, transactor bind.ContractTransactor) (*AnchorBlocksTransactor, error) {
	contract, err := bindAnchorBlocks(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AnchorBlocksTransactor{contract: contract}, nil
}

// NewAnchorBlocksFilterer creates a new log filterer instance of AnchorBlocks, bound to a specific deployed contract.
func NewAnchorBlocksFilterer(address common.Address, filterer bind.ContractFilterer) (*AnchorBlocksFilterer, error) {
	contract, err := bindAnchorBlocks(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AnchorBlocksFilterer{contract: contract}, nil
}

// bindAnchorBlocks binds a generic wrapper to an already deployed contract.
func bindAnchorBlocks(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AnchorBlocksMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AnchorBlocks *AnchorBlocksRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AnchorBlocks.Contract.AnchorBlocksCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AnchorBlocks *AnchorBlocksRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AnchorBlocks.Contract.AnchorBlocksTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AnchorBlocks *AnchorBlocksRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AnchorBlocks.Contract.AnchorBlocksTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AnchorBlocks *AnchorBlocksCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AnchorBlocks.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AnchorBlocks *AnchorBlocksTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AnchorBlocks.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AnchorBlocks *AnchorBlocksTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AnchorBlocks.Contract.contract.Transact(opts, method, params...)
}

// Blocks is a free data retrieval call binding the contract method 0xf25b3f99.
//
// Solidity: function blocks(uint256 ) view returns(bytes32)
func (_AnchorBlocks *AnchorBlocksCaller) Blocks(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _AnchorBlocks.contract.Call(opts, &out, "blocks", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Blocks is a free data retrieval call binding the contract method 0xf25b3f99.
//
// Solidity: function blocks(uint256 ) view returns(bytes32)
func (_AnchorBlocks *AnchorBlocksSession) Blocks(arg0 *big.Int) ([32]byte, error) {
	return _AnchorBlocks.Contract.Blocks(&_AnchorBlocks.CallOpts, arg0)
}

// Blocks is a free data retrieval call binding the contract method 0xf25b3f99.
//
// Solidity: function blocks(uint256 ) view returns(bytes32)
func (_AnchorBlocks *AnchorBlocksCallerSession) Blocks(arg0 *big.Int) ([32]byte, error) {
	return _AnchorBlocks.Contract.Blocks(&_AnchorBlocks.CallOpts, arg0)
}

// LatestBlockNum is a free data retrieval call binding the contract method 0xfbbea34c.
//
// Solidity: function latestBlockNum() view returns(uint256)
func (_AnchorBlocks *AnchorBlocksCaller) LatestBlockNum(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AnchorBlocks.contract.Call(opts, &out, "latestBlockNum")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LatestBlockNum is a free data retrieval call binding the contract method 0xfbbea34c.
//
// Solidity: function latestBlockNum() view returns(uint256)
func (_AnchorBlocks *AnchorBlocksSession) LatestBlockNum() (*big.Int, error) {
	return _AnchorBlocks.Contract.LatestBlockNum(&_AnchorBlocks.CallOpts)
}

// LatestBlockNum is a free data retrieval call binding the contract method 0xfbbea34c.
//
// Solidity: function latestBlockNum() view returns(uint256)
func (_AnchorBlocks *AnchorBlocksCallerSession) LatestBlockNum() (*big.Int, error) {
	return _AnchorBlocks.Contract.LatestBlockNum(&_AnchorBlocks.CallOpts)
}

// LightClient is a free data retrieval call binding the contract method 0xb5700e68.
//
// Solidity: function lightClient() view returns(address)
func (_AnchorBlocks *AnchorBlocksCaller) LightClient(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AnchorBlocks.contract.Call(opts, &out, "lightClient")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LightClient is a free data retrieval call binding the contract method 0xb5700e68.
//
// Solidity: function lightClient() view returns(address)
func (_AnchorBlocks *AnchorBlocksSession) LightClient() (common.Address, error) {
	return _AnchorBlocks.Contract.LightClient(&_AnchorBlocks.CallOpts)
}

// LightClient is a free data retrieval call binding the contract method 0xb5700e68.
//
// Solidity: function lightClient() view returns(address)
func (_AnchorBlocks *AnchorBlocksCallerSession) LightClient() (common.Address, error) {
	return _AnchorBlocks.Contract.LightClient(&_AnchorBlocks.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_AnchorBlocks *AnchorBlocksCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AnchorBlocks.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_AnchorBlocks *AnchorBlocksSession) Owner() (common.Address, error) {
	return _AnchorBlocks.Contract.Owner(&_AnchorBlocks.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_AnchorBlocks *AnchorBlocksCallerSession) Owner() (common.Address, error) {
	return _AnchorBlocks.Contract.Owner(&_AnchorBlocks.CallOpts)
}

// ProcessUpdate is a paid mutator transaction binding the contract method 0x2e3466f6.
//
// Solidity: function processUpdate((((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])),(uint64,bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2])),uint64) hb) returns()
func (_AnchorBlocks *AnchorBlocksTransactor) ProcessUpdate(opts *bind.TransactOpts, hb LightClientOptimisticUpdate) (*types.Transaction, error) {
	return _AnchorBlocks.contract.Transact(opts, "processUpdate", hb)
}

// ProcessUpdate is a paid mutator transaction binding the contract method 0x2e3466f6.
//
// Solidity: function processUpdate((((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])),(uint64,bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2])),uint64) hb) returns()
func (_AnchorBlocks *AnchorBlocksSession) ProcessUpdate(hb LightClientOptimisticUpdate) (*types.Transaction, error) {
	return _AnchorBlocks.Contract.ProcessUpdate(&_AnchorBlocks.TransactOpts, hb)
}

// ProcessUpdate is a paid mutator transaction binding the contract method 0x2e3466f6.
//
// Solidity: function processUpdate((((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])),(uint64,bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2])),uint64) hb) returns()
func (_AnchorBlocks *AnchorBlocksTransactorSession) ProcessUpdate(hb LightClientOptimisticUpdate) (*types.Transaction, error) {
	return _AnchorBlocks.Contract.ProcessUpdate(&_AnchorBlocks.TransactOpts, hb)
}

// ProcessUpdateWithChainProof is a paid mutator transaction binding the contract method 0xfb8cfb51.
//
// Solidity: function processUpdateWithChainProof((((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])),(uint64,bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2])),uint64) hb, bytes32 blockHash, (bytes,bytes)[] chainProof) returns()
func (_AnchorBlocks *AnchorBlocksTransactor) ProcessUpdateWithChainProof(opts *bind.TransactOpts, hb LightClientOptimisticUpdate, blockHash [32]byte, chainProof []AnchorBlocksBlockHashWitness) (*types.Transaction, error) {
	return _AnchorBlocks.contract.Transact(opts, "processUpdateWithChainProof", hb, blockHash, chainProof)
}

// ProcessUpdateWithChainProof is a paid mutator transaction binding the contract method 0xfb8cfb51.
//
// Solidity: function processUpdateWithChainProof((((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])),(uint64,bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2])),uint64) hb, bytes32 blockHash, (bytes,bytes)[] chainProof) returns()
func (_AnchorBlocks *AnchorBlocksSession) ProcessUpdateWithChainProof(hb LightClientOptimisticUpdate, blockHash [32]byte, chainProof []AnchorBlocksBlockHashWitness) (*types.Transaction, error) {
	return _AnchorBlocks.Contract.ProcessUpdateWithChainProof(&_AnchorBlocks.TransactOpts, hb, blockHash, chainProof)
}

// ProcessUpdateWithChainProof is a paid mutator transaction binding the contract method 0xfb8cfb51.
//
// Solidity: function processUpdateWithChainProof((((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])),(uint64,bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2])),uint64) hb, bytes32 blockHash, (bytes,bytes)[] chainProof) returns()
func (_AnchorBlocks *AnchorBlocksTransactorSession) ProcessUpdateWithChainProof(hb LightClientOptimisticUpdate, blockHash [32]byte, chainProof []AnchorBlocksBlockHashWitness) (*types.Transaction, error) {
	return _AnchorBlocks.Contract.ProcessUpdateWithChainProof(&_AnchorBlocks.TransactOpts, hb, blockHash, chainProof)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_AnchorBlocks *AnchorBlocksTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AnchorBlocks.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_AnchorBlocks *AnchorBlocksSession) RenounceOwnership() (*types.Transaction, error) {
	return _AnchorBlocks.Contract.RenounceOwnership(&_AnchorBlocks.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_AnchorBlocks *AnchorBlocksTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _AnchorBlocks.Contract.RenounceOwnership(&_AnchorBlocks.TransactOpts)
}

// SetLightClient is a paid mutator transaction binding the contract method 0x3e553bab.
//
// Solidity: function setLightClient(address _lightClient) returns()
func (_AnchorBlocks *AnchorBlocksTransactor) SetLightClient(opts *bind.TransactOpts, _lightClient common.Address) (*types.Transaction, error) {
	return _AnchorBlocks.contract.Transact(opts, "setLightClient", _lightClient)
}

// SetLightClient is a paid mutator transaction binding the contract method 0x3e553bab.
//
// Solidity: function setLightClient(address _lightClient) returns()
func (_AnchorBlocks *AnchorBlocksSession) SetLightClient(_lightClient common.Address) (*types.Transaction, error) {
	return _AnchorBlocks.Contract.SetLightClient(&_AnchorBlocks.TransactOpts, _lightClient)
}

// SetLightClient is a paid mutator transaction binding the contract method 0x3e553bab.
//
// Solidity: function setLightClient(address _lightClient) returns()
func (_AnchorBlocks *AnchorBlocksTransactorSession) SetLightClient(_lightClient common.Address) (*types.Transaction, error) {
	return _AnchorBlocks.Contract.SetLightClient(&_AnchorBlocks.TransactOpts, _lightClient)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AnchorBlocks *AnchorBlocksTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _AnchorBlocks.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AnchorBlocks *AnchorBlocksSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _AnchorBlocks.Contract.TransferOwnership(&_AnchorBlocks.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_AnchorBlocks *AnchorBlocksTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _AnchorBlocks.Contract.TransferOwnership(&_AnchorBlocks.TransactOpts, newOwner)
}

// AnchorBlocksAnchorBlockUpdatedIterator is returned from FilterAnchorBlockUpdated and is used to iterate over the raw logs and unpacked data for AnchorBlockUpdated events raised by the AnchorBlocks contract.
type AnchorBlocksAnchorBlockUpdatedIterator struct {
	Event *AnchorBlocksAnchorBlockUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AnchorBlocksAnchorBlockUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AnchorBlocksAnchorBlockUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AnchorBlocksAnchorBlockUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AnchorBlocksAnchorBlockUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AnchorBlocksAnchorBlockUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AnchorBlocksAnchorBlockUpdated represents a AnchorBlockUpdated event raised by the AnchorBlocks contract.
type AnchorBlocksAnchorBlockUpdated struct {
	BlockNum  *big.Int
	BlockHash [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterAnchorBlockUpdated is a free log retrieval operation binding the contract event 0xa9aaf84657c346a7eafe57cf0403ab0be7867b79a5fdd5e5ab3527fbfc739d85.
//
// Solidity: event AnchorBlockUpdated(uint256 blockNum, bytes32 blockHash)
func (_AnchorBlocks *AnchorBlocksFilterer) FilterAnchorBlockUpdated(opts *bind.FilterOpts) (*AnchorBlocksAnchorBlockUpdatedIterator, error) {

	logs, sub, err := _AnchorBlocks.contract.FilterLogs(opts, "AnchorBlockUpdated")
	if err != nil {
		return nil, err
	}
	return &AnchorBlocksAnchorBlockUpdatedIterator{contract: _AnchorBlocks.contract, event: "AnchorBlockUpdated", logs: logs, sub: sub}, nil
}

// WatchAnchorBlockUpdated is a free log subscription operation binding the contract event 0xa9aaf84657c346a7eafe57cf0403ab0be7867b79a5fdd5e5ab3527fbfc739d85.
//
// Solidity: event AnchorBlockUpdated(uint256 blockNum, bytes32 blockHash)
func (_AnchorBlocks *AnchorBlocksFilterer) WatchAnchorBlockUpdated(opts *bind.WatchOpts, sink chan<- *AnchorBlocksAnchorBlockUpdated) (event.Subscription, error) {

	logs, sub, err := _AnchorBlocks.contract.WatchLogs(opts, "AnchorBlockUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AnchorBlocksAnchorBlockUpdated)
				if err := _AnchorBlocks.contract.UnpackLog(event, "AnchorBlockUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAnchorBlockUpdated is a log parse operation binding the contract event 0xa9aaf84657c346a7eafe57cf0403ab0be7867b79a5fdd5e5ab3527fbfc739d85.
//
// Solidity: event AnchorBlockUpdated(uint256 blockNum, bytes32 blockHash)
func (_AnchorBlocks *AnchorBlocksFilterer) ParseAnchorBlockUpdated(log types.Log) (*AnchorBlocksAnchorBlockUpdated, error) {
	event := new(AnchorBlocksAnchorBlockUpdated)
	if err := _AnchorBlocks.contract.UnpackLog(event, "AnchorBlockUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AnchorBlocksOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the AnchorBlocks contract.
type AnchorBlocksOwnershipTransferredIterator struct {
	Event *AnchorBlocksOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AnchorBlocksOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AnchorBlocksOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AnchorBlocksOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AnchorBlocksOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AnchorBlocksOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AnchorBlocksOwnershipTransferred represents a OwnershipTransferred event raised by the AnchorBlocks contract.
type AnchorBlocksOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_AnchorBlocks *AnchorBlocksFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*AnchorBlocksOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _AnchorBlocks.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &AnchorBlocksOwnershipTransferredIterator{contract: _AnchorBlocks.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_AnchorBlocks *AnchorBlocksFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *AnchorBlocksOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _AnchorBlocks.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AnchorBlocksOwnershipTransferred)
				if err := _AnchorBlocks.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_AnchorBlocks *AnchorBlocksFilterer) ParseOwnershipTransferred(log types.Log) (*AnchorBlocksOwnershipTransferred, error) {
	event := new(AnchorBlocksOwnershipTransferred)
	if err := _AnchorBlocks.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BalanceDeltaLibraryMetaData contains all meta data concerning the BalanceDeltaLibrary contract.
var BalanceDeltaLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220234eb9ca0b9e4004343a830b2e1177e3c2e5cf4b6fb0a23bfd87b4ffe4b47cb864736f6c63430008150033",
}

// BalanceDeltaLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use BalanceDeltaLibraryMetaData.ABI instead.
var BalanceDeltaLibraryABI = BalanceDeltaLibraryMetaData.ABI

// BalanceDeltaLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BalanceDeltaLibraryMetaData.Bin instead.
var BalanceDeltaLibraryBin = BalanceDeltaLibraryMetaData.Bin

// DeployBalanceDeltaLibrary deploys a new Ethereum contract, binding an instance of BalanceDeltaLibrary to it.
func DeployBalanceDeltaLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BalanceDeltaLibrary, error) {
	parsed, err := BalanceDeltaLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BalanceDeltaLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BalanceDeltaLibrary{BalanceDeltaLibraryCaller: BalanceDeltaLibraryCaller{contract: contract}, BalanceDeltaLibraryTransactor: BalanceDeltaLibraryTransactor{contract: contract}, BalanceDeltaLibraryFilterer: BalanceDeltaLibraryFilterer{contract: contract}}, nil
}

// BalanceDeltaLibrary is an auto generated Go binding around an Ethereum contract.
type BalanceDeltaLibrary struct {
	BalanceDeltaLibraryCaller     // Read-only binding to the contract
	BalanceDeltaLibraryTransactor // Write-only binding to the contract
	BalanceDeltaLibraryFilterer   // Log filterer for contract events
}

// BalanceDeltaLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BalanceDeltaLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BalanceDeltaLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BalanceDeltaLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BalanceDeltaLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BalanceDeltaLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BalanceDeltaLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BalanceDeltaLibrarySession struct {
	Contract     *BalanceDeltaLibrary // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// BalanceDeltaLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BalanceDeltaLibraryCallerSession struct {
	Contract *BalanceDeltaLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// BalanceDeltaLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BalanceDeltaLibraryTransactorSession struct {
	Contract     *BalanceDeltaLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// BalanceDeltaLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BalanceDeltaLibraryRaw struct {
	Contract *BalanceDeltaLibrary // Generic contract binding to access the raw methods on
}

// BalanceDeltaLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BalanceDeltaLibraryCallerRaw struct {
	Contract *BalanceDeltaLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// BalanceDeltaLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BalanceDeltaLibraryTransactorRaw struct {
	Contract *BalanceDeltaLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBalanceDeltaLibrary creates a new instance of BalanceDeltaLibrary, bound to a specific deployed contract.
func NewBalanceDeltaLibrary(address common.Address, backend bind.ContractBackend) (*BalanceDeltaLibrary, error) {
	contract, err := bindBalanceDeltaLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BalanceDeltaLibrary{BalanceDeltaLibraryCaller: BalanceDeltaLibraryCaller{contract: contract}, BalanceDeltaLibraryTransactor: BalanceDeltaLibraryTransactor{contract: contract}, BalanceDeltaLibraryFilterer: BalanceDeltaLibraryFilterer{contract: contract}}, nil
}

// NewBalanceDeltaLibraryCaller creates a new read-only instance of BalanceDeltaLibrary, bound to a specific deployed contract.
func NewBalanceDeltaLibraryCaller(address common.Address, caller bind.ContractCaller) (*BalanceDeltaLibraryCaller, error) {
	contract, err := bindBalanceDeltaLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BalanceDeltaLibraryCaller{contract: contract}, nil
}

// NewBalanceDeltaLibraryTransactor creates a new write-only instance of BalanceDeltaLibrary, bound to a specific deployed contract.
func NewBalanceDeltaLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*BalanceDeltaLibraryTransactor, error) {
	contract, err := bindBalanceDeltaLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BalanceDeltaLibraryTransactor{contract: contract}, nil
}

// NewBalanceDeltaLibraryFilterer creates a new log filterer instance of BalanceDeltaLibrary, bound to a specific deployed contract.
func NewBalanceDeltaLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*BalanceDeltaLibraryFilterer, error) {
	contract, err := bindBalanceDeltaLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BalanceDeltaLibraryFilterer{contract: contract}, nil
}

// bindBalanceDeltaLibrary binds a generic wrapper to an already deployed contract.
func bindBalanceDeltaLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BalanceDeltaLibraryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BalanceDeltaLibrary *BalanceDeltaLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BalanceDeltaLibrary.Contract.BalanceDeltaLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BalanceDeltaLibrary *BalanceDeltaLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BalanceDeltaLibrary.Contract.BalanceDeltaLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BalanceDeltaLibrary *BalanceDeltaLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BalanceDeltaLibrary.Contract.BalanceDeltaLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BalanceDeltaLibrary *BalanceDeltaLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BalanceDeltaLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BalanceDeltaLibrary *BalanceDeltaLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BalanceDeltaLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BalanceDeltaLibrary *BalanceDeltaLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BalanceDeltaLibrary.Contract.contract.Transact(opts, method, params...)
}

// BaseFactoryMetaData contains all meta data concerning the BaseFactory contract.
var BaseFactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"TargetPrefix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_FLAG_MASK\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startSalt\",\"type\":\"uint256\"}],\"name\":\"mineDeploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"}],\"name\":\"mineDeploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startSalt\",\"type\":\"uint256\"}],\"name\":\"mineSalt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// BaseFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseFactoryMetaData.ABI instead.
var BaseFactoryABI = BaseFactoryMetaData.ABI

// BaseFactory is an auto generated Go binding around an Ethereum contract.
type BaseFactory struct {
	BaseFactoryCaller     // Read-only binding to the contract
	BaseFactoryTransactor // Write-only binding to the contract
	BaseFactoryFilterer   // Log filterer for contract events
}

// BaseFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseFactorySession struct {
	Contract     *BaseFactory      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseFactoryCallerSession struct {
	Contract *BaseFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// BaseFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseFactoryTransactorSession struct {
	Contract     *BaseFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// BaseFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseFactoryRaw struct {
	Contract *BaseFactory // Generic contract binding to access the raw methods on
}

// BaseFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseFactoryCallerRaw struct {
	Contract *BaseFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// BaseFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseFactoryTransactorRaw struct {
	Contract *BaseFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseFactory creates a new instance of BaseFactory, bound to a specific deployed contract.
func NewBaseFactory(address common.Address, backend bind.ContractBackend) (*BaseFactory, error) {
	contract, err := bindBaseFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseFactory{BaseFactoryCaller: BaseFactoryCaller{contract: contract}, BaseFactoryTransactor: BaseFactoryTransactor{contract: contract}, BaseFactoryFilterer: BaseFactoryFilterer{contract: contract}}, nil
}

// NewBaseFactoryCaller creates a new read-only instance of BaseFactory, bound to a specific deployed contract.
func NewBaseFactoryCaller(address common.Address, caller bind.ContractCaller) (*BaseFactoryCaller, error) {
	contract, err := bindBaseFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseFactoryCaller{contract: contract}, nil
}

// NewBaseFactoryTransactor creates a new write-only instance of BaseFactory, bound to a specific deployed contract.
func NewBaseFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseFactoryTransactor, error) {
	contract, err := bindBaseFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseFactoryTransactor{contract: contract}, nil
}

// NewBaseFactoryFilterer creates a new log filterer instance of BaseFactory, bound to a specific deployed contract.
func NewBaseFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseFactoryFilterer, error) {
	contract, err := bindBaseFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseFactoryFilterer{contract: contract}, nil
}

// bindBaseFactory binds a generic wrapper to an already deployed contract.
func bindBaseFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BaseFactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseFactory *BaseFactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BaseFactory.Contract.BaseFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseFactory *BaseFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseFactory.Contract.BaseFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseFactory *BaseFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseFactory.Contract.BaseFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseFactory *BaseFactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BaseFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseFactory *BaseFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseFactory *BaseFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseFactory.Contract.contract.Transact(opts, method, params...)
}

// TargetPrefix is a free data retrieval call binding the contract method 0xa707b18a.
//
// Solidity: function TargetPrefix() view returns(address)
func (_BaseFactory *BaseFactoryCaller) TargetPrefix(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseFactory.contract.Call(opts, &out, "TargetPrefix")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TargetPrefix is a free data retrieval call binding the contract method 0xa707b18a.
//
// Solidity: function TargetPrefix() view returns(address)
func (_BaseFactory *BaseFactorySession) TargetPrefix() (common.Address, error) {
	return _BaseFactory.Contract.TargetPrefix(&_BaseFactory.CallOpts)
}

// TargetPrefix is a free data retrieval call binding the contract method 0xa707b18a.
//
// Solidity: function TargetPrefix() view returns(address)
func (_BaseFactory *BaseFactoryCallerSession) TargetPrefix() (common.Address, error) {
	return _BaseFactory.Contract.TargetPrefix(&_BaseFactory.CallOpts)
}

// UNISWAPFLAGMASK is a free data retrieval call binding the contract method 0xc6f61463.
//
// Solidity: function UNISWAP_FLAG_MASK() view returns(uint160)
func (_BaseFactory *BaseFactoryCaller) UNISWAPFLAGMASK(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BaseFactory.contract.Call(opts, &out, "UNISWAP_FLAG_MASK")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UNISWAPFLAGMASK is a free data retrieval call binding the contract method 0xc6f61463.
//
// Solidity: function UNISWAP_FLAG_MASK() view returns(uint160)
func (_BaseFactory *BaseFactorySession) UNISWAPFLAGMASK() (*big.Int, error) {
	return _BaseFactory.Contract.UNISWAPFLAGMASK(&_BaseFactory.CallOpts)
}

// UNISWAPFLAGMASK is a free data retrieval call binding the contract method 0xc6f61463.
//
// Solidity: function UNISWAP_FLAG_MASK() view returns(uint160)
func (_BaseFactory *BaseFactoryCallerSession) UNISWAPFLAGMASK() (*big.Int, error) {
	return _BaseFactory.Contract.UNISWAPFLAGMASK(&_BaseFactory.CallOpts)
}

// MineSalt is a free data retrieval call binding the contract method 0x635d4017.
//
// Solidity: function mineSalt(address poolManager, uint256 startSalt) view returns(bytes32 salt)
func (_BaseFactory *BaseFactoryCaller) MineSalt(opts *bind.CallOpts, poolManager common.Address, startSalt *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _BaseFactory.contract.Call(opts, &out, "mineSalt", poolManager, startSalt)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MineSalt is a free data retrieval call binding the contract method 0x635d4017.
//
// Solidity: function mineSalt(address poolManager, uint256 startSalt) view returns(bytes32 salt)
func (_BaseFactory *BaseFactorySession) MineSalt(poolManager common.Address, startSalt *big.Int) ([32]byte, error) {
	return _BaseFactory.Contract.MineSalt(&_BaseFactory.CallOpts, poolManager, startSalt)
}

// MineSalt is a free data retrieval call binding the contract method 0x635d4017.
//
// Solidity: function mineSalt(address poolManager, uint256 startSalt) view returns(bytes32 salt)
func (_BaseFactory *BaseFactoryCallerSession) MineSalt(poolManager common.Address, startSalt *big.Int) ([32]byte, error) {
	return _BaseFactory.Contract.MineSalt(&_BaseFactory.CallOpts, poolManager, startSalt)
}

// Deploy is a paid mutator transaction binding the contract method 0x32c02a14.
//
// Solidity: function deploy(address poolManager, bytes32 salt) returns(address)
func (_BaseFactory *BaseFactoryTransactor) Deploy(opts *bind.TransactOpts, poolManager common.Address, salt [32]byte) (*types.Transaction, error) {
	return _BaseFactory.contract.Transact(opts, "deploy", poolManager, salt)
}

// Deploy is a paid mutator transaction binding the contract method 0x32c02a14.
//
// Solidity: function deploy(address poolManager, bytes32 salt) returns(address)
func (_BaseFactory *BaseFactorySession) Deploy(poolManager common.Address, salt [32]byte) (*types.Transaction, error) {
	return _BaseFactory.Contract.Deploy(&_BaseFactory.TransactOpts, poolManager, salt)
}

// Deploy is a paid mutator transaction binding the contract method 0x32c02a14.
//
// Solidity: function deploy(address poolManager, bytes32 salt) returns(address)
func (_BaseFactory *BaseFactoryTransactorSession) Deploy(poolManager common.Address, salt [32]byte) (*types.Transaction, error) {
	return _BaseFactory.Contract.Deploy(&_BaseFactory.TransactOpts, poolManager, salt)
}

// MineDeploy is a paid mutator transaction binding the contract method 0x21cde3ec.
//
// Solidity: function mineDeploy(address poolManager, uint256 startSalt) returns(address)
func (_BaseFactory *BaseFactoryTransactor) MineDeploy(opts *bind.TransactOpts, poolManager common.Address, startSalt *big.Int) (*types.Transaction, error) {
	return _BaseFactory.contract.Transact(opts, "mineDeploy", poolManager, startSalt)
}

// MineDeploy is a paid mutator transaction binding the contract method 0x21cde3ec.
//
// Solidity: function mineDeploy(address poolManager, uint256 startSalt) returns(address)
func (_BaseFactory *BaseFactorySession) MineDeploy(poolManager common.Address, startSalt *big.Int) (*types.Transaction, error) {
	return _BaseFactory.Contract.MineDeploy(&_BaseFactory.TransactOpts, poolManager, startSalt)
}

// MineDeploy is a paid mutator transaction binding the contract method 0x21cde3ec.
//
// Solidity: function mineDeploy(address poolManager, uint256 startSalt) returns(address)
func (_BaseFactory *BaseFactoryTransactorSession) MineDeploy(poolManager common.Address, startSalt *big.Int) (*types.Transaction, error) {
	return _BaseFactory.Contract.MineDeploy(&_BaseFactory.TransactOpts, poolManager, startSalt)
}

// MineDeploy0 is a paid mutator transaction binding the contract method 0x2e026a67.
//
// Solidity: function mineDeploy(address poolManager) returns(address)
func (_BaseFactory *BaseFactoryTransactor) MineDeploy0(opts *bind.TransactOpts, poolManager common.Address) (*types.Transaction, error) {
	return _BaseFactory.contract.Transact(opts, "mineDeploy0", poolManager)
}

// MineDeploy0 is a paid mutator transaction binding the contract method 0x2e026a67.
//
// Solidity: function mineDeploy(address poolManager) returns(address)
func (_BaseFactory *BaseFactorySession) MineDeploy0(poolManager common.Address) (*types.Transaction, error) {
	return _BaseFactory.Contract.MineDeploy0(&_BaseFactory.TransactOpts, poolManager)
}

// MineDeploy0 is a paid mutator transaction binding the contract method 0x2e026a67.
//
// Solidity: function mineDeploy(address poolManager) returns(address)
func (_BaseFactory *BaseFactoryTransactorSession) MineDeploy0(poolManager common.Address) (*types.Transaction, error) {
	return _BaseFactory.Contract.MineDeploy0(&_BaseFactory.TransactOpts, poolManager)
}

// BaseHookMetaData contains all meta data concerning the BaseHook contract.
var BaseHookMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hooks\",\"type\":\"address\"}],\"name\":\"HookAddressNotValid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HookNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustUseDynamicFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPoolManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSelf\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"afterDonate\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"afterInitialize\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"int256\",\"name\":\"liquidityDelta\",\"type\":\"int256\"}],\"internalType\":\"structIPoolManager.ModifyPositionParams\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"BalanceDelta\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"afterModifyPosition\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"structIPoolManager.SwapParams\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"BalanceDelta\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"afterSwap\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"beforeDonate\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"beforeInitialize\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"int256\",\"name\":\"liquidityDelta\",\"type\":\"int256\"}],\"internalType\":\"structIPoolManager.ModifyPositionParams\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"beforeModifyPosition\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"structIPoolManager.SwapParams\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"beforeSwap\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHooksCalls\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"beforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"afterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"beforeModifyPosition\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"afterModifyPosition\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"beforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"afterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"beforeDonate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"afterDonate\",\"type\":\"bool\"}],\"internalType\":\"structHooks.Calls\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lockAcquired\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"contractIPoolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// BaseHookABI is the input ABI used to generate the binding from.
// Deprecated: Use BaseHookMetaData.ABI instead.
var BaseHookABI = BaseHookMetaData.ABI

// BaseHook is an auto generated Go binding around an Ethereum contract.
type BaseHook struct {
	BaseHookCaller     // Read-only binding to the contract
	BaseHookTransactor // Write-only binding to the contract
	BaseHookFilterer   // Log filterer for contract events
}

// BaseHookCaller is an auto generated read-only Go binding around an Ethereum contract.
type BaseHookCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseHookTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BaseHookTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseHookFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BaseHookFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BaseHookSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BaseHookSession struct {
	Contract     *BaseHook         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BaseHookCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BaseHookCallerSession struct {
	Contract *BaseHookCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// BaseHookTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BaseHookTransactorSession struct {
	Contract     *BaseHookTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// BaseHookRaw is an auto generated low-level Go binding around an Ethereum contract.
type BaseHookRaw struct {
	Contract *BaseHook // Generic contract binding to access the raw methods on
}

// BaseHookCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BaseHookCallerRaw struct {
	Contract *BaseHookCaller // Generic read-only contract binding to access the raw methods on
}

// BaseHookTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BaseHookTransactorRaw struct {
	Contract *BaseHookTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBaseHook creates a new instance of BaseHook, bound to a specific deployed contract.
func NewBaseHook(address common.Address, backend bind.ContractBackend) (*BaseHook, error) {
	contract, err := bindBaseHook(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BaseHook{BaseHookCaller: BaseHookCaller{contract: contract}, BaseHookTransactor: BaseHookTransactor{contract: contract}, BaseHookFilterer: BaseHookFilterer{contract: contract}}, nil
}

// NewBaseHookCaller creates a new read-only instance of BaseHook, bound to a specific deployed contract.
func NewBaseHookCaller(address common.Address, caller bind.ContractCaller) (*BaseHookCaller, error) {
	contract, err := bindBaseHook(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BaseHookCaller{contract: contract}, nil
}

// NewBaseHookTransactor creates a new write-only instance of BaseHook, bound to a specific deployed contract.
func NewBaseHookTransactor(address common.Address, transactor bind.ContractTransactor) (*BaseHookTransactor, error) {
	contract, err := bindBaseHook(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BaseHookTransactor{contract: contract}, nil
}

// NewBaseHookFilterer creates a new log filterer instance of BaseHook, bound to a specific deployed contract.
func NewBaseHookFilterer(address common.Address, filterer bind.ContractFilterer) (*BaseHookFilterer, error) {
	contract, err := bindBaseHook(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BaseHookFilterer{contract: contract}, nil
}

// bindBaseHook binds a generic wrapper to an already deployed contract.
func bindBaseHook(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BaseHookMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseHook *BaseHookRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BaseHook.Contract.BaseHookCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseHook *BaseHookRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseHook.Contract.BaseHookTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseHook *BaseHookRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseHook.Contract.BaseHookTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BaseHook *BaseHookCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BaseHook.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BaseHook *BaseHookTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseHook.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BaseHook *BaseHookTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BaseHook.Contract.contract.Transact(opts, method, params...)
}

// GetHooksCalls is a free data retrieval call binding the contract method 0x612c39b7.
//
// Solidity: function getHooksCalls() pure returns((bool,bool,bool,bool,bool,bool,bool,bool))
func (_BaseHook *BaseHookCaller) GetHooksCalls(opts *bind.CallOpts) (HooksCalls, error) {
	var out []interface{}
	err := _BaseHook.contract.Call(opts, &out, "getHooksCalls")

	if err != nil {
		return *new(HooksCalls), err
	}

	out0 := *abi.ConvertType(out[0], new(HooksCalls)).(*HooksCalls)

	return out0, err

}

// GetHooksCalls is a free data retrieval call binding the contract method 0x612c39b7.
//
// Solidity: function getHooksCalls() pure returns((bool,bool,bool,bool,bool,bool,bool,bool))
func (_BaseHook *BaseHookSession) GetHooksCalls() (HooksCalls, error) {
	return _BaseHook.Contract.GetHooksCalls(&_BaseHook.CallOpts)
}

// GetHooksCalls is a free data retrieval call binding the contract method 0x612c39b7.
//
// Solidity: function getHooksCalls() pure returns((bool,bool,bool,bool,bool,bool,bool,bool))
func (_BaseHook *BaseHookCallerSession) GetHooksCalls() (HooksCalls, error) {
	return _BaseHook.Contract.GetHooksCalls(&_BaseHook.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseHook *BaseHookCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseHook.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseHook *BaseHookSession) Owner() (common.Address, error) {
	return _BaseHook.Contract.Owner(&_BaseHook.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BaseHook *BaseHookCallerSession) Owner() (common.Address, error) {
	return _BaseHook.Contract.Owner(&_BaseHook.CallOpts)
}

// PoolManager is a free data retrieval call binding the contract method 0xdc4c90d3.
//
// Solidity: function poolManager() view returns(address)
func (_BaseHook *BaseHookCaller) PoolManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BaseHook.contract.Call(opts, &out, "poolManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PoolManager is a free data retrieval call binding the contract method 0xdc4c90d3.
//
// Solidity: function poolManager() view returns(address)
func (_BaseHook *BaseHookSession) PoolManager() (common.Address, error) {
	return _BaseHook.Contract.PoolManager(&_BaseHook.CallOpts)
}

// PoolManager is a free data retrieval call binding the contract method 0xdc4c90d3.
//
// Solidity: function poolManager() view returns(address)
func (_BaseHook *BaseHookCallerSession) PoolManager() (common.Address, error) {
	return _BaseHook.Contract.PoolManager(&_BaseHook.CallOpts)
}

// AfterDonate is a paid mutator transaction binding the contract method 0xe1b4af69.
//
// Solidity: function afterDonate(address , (address,address,uint24,int24,address) , uint256 , uint256 , bytes ) returns(bytes4)
func (_BaseHook *BaseHookTransactor) AfterDonate(opts *bind.TransactOpts, arg0 common.Address, arg1 PoolKey, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _BaseHook.contract.Transact(opts, "afterDonate", arg0, arg1, arg2, arg3, arg4)
}

// AfterDonate is a paid mutator transaction binding the contract method 0xe1b4af69.
//
// Solidity: function afterDonate(address , (address,address,uint24,int24,address) , uint256 , uint256 , bytes ) returns(bytes4)
func (_BaseHook *BaseHookSession) AfterDonate(arg0 common.Address, arg1 PoolKey, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _BaseHook.Contract.AfterDonate(&_BaseHook.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// AfterDonate is a paid mutator transaction binding the contract method 0xe1b4af69.
//
// Solidity: function afterDonate(address , (address,address,uint24,int24,address) , uint256 , uint256 , bytes ) returns(bytes4)
func (_BaseHook *BaseHookTransactorSession) AfterDonate(arg0 common.Address, arg1 PoolKey, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _BaseHook.Contract.AfterDonate(&_BaseHook.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// AfterInitialize is a paid mutator transaction binding the contract method 0xa910f80f.
//
// Solidity: function afterInitialize(address , (address,address,uint24,int24,address) , uint160 , int24 , bytes ) returns(bytes4)
func (_BaseHook *BaseHookTransactor) AfterInitialize(opts *bind.TransactOpts, arg0 common.Address, arg1 PoolKey, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _BaseHook.contract.Transact(opts, "afterInitialize", arg0, arg1, arg2, arg3, arg4)
}

// AfterInitialize is a paid mutator transaction binding the contract method 0xa910f80f.
//
// Solidity: function afterInitialize(address , (address,address,uint24,int24,address) , uint160 , int24 , bytes ) returns(bytes4)
func (_BaseHook *BaseHookSession) AfterInitialize(arg0 common.Address, arg1 PoolKey, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _BaseHook.Contract.AfterInitialize(&_BaseHook.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// AfterInitialize is a paid mutator transaction binding the contract method 0xa910f80f.
//
// Solidity: function afterInitialize(address , (address,address,uint24,int24,address) , uint160 , int24 , bytes ) returns(bytes4)
func (_BaseHook *BaseHookTransactorSession) AfterInitialize(arg0 common.Address, arg1 PoolKey, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _BaseHook.Contract.AfterInitialize(&_BaseHook.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// AfterModifyPosition is a paid mutator transaction binding the contract method 0x30b7cdef.
//
// Solidity: function afterModifyPosition(address , (address,address,uint24,int24,address) , (int24,int24,int256) , int256 , bytes ) returns(bytes4)
func (_BaseHook *BaseHookTransactor) AfterModifyPosition(opts *bind.TransactOpts, arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerModifyPositionParams, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _BaseHook.contract.Transact(opts, "afterModifyPosition", arg0, arg1, arg2, arg3, arg4)
}

// AfterModifyPosition is a paid mutator transaction binding the contract method 0x30b7cdef.
//
// Solidity: function afterModifyPosition(address , (address,address,uint24,int24,address) , (int24,int24,int256) , int256 , bytes ) returns(bytes4)
func (_BaseHook *BaseHookSession) AfterModifyPosition(arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerModifyPositionParams, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _BaseHook.Contract.AfterModifyPosition(&_BaseHook.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// AfterModifyPosition is a paid mutator transaction binding the contract method 0x30b7cdef.
//
// Solidity: function afterModifyPosition(address , (address,address,uint24,int24,address) , (int24,int24,int256) , int256 , bytes ) returns(bytes4)
func (_BaseHook *BaseHookTransactorSession) AfterModifyPosition(arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerModifyPositionParams, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _BaseHook.Contract.AfterModifyPosition(&_BaseHook.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// AfterSwap is a paid mutator transaction binding the contract method 0xb47b2fb1.
//
// Solidity: function afterSwap(address , (address,address,uint24,int24,address) , (bool,int256,uint160) , int256 , bytes ) returns(bytes4)
func (_BaseHook *BaseHookTransactor) AfterSwap(opts *bind.TransactOpts, arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerSwapParams, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _BaseHook.contract.Transact(opts, "afterSwap", arg0, arg1, arg2, arg3, arg4)
}

// AfterSwap is a paid mutator transaction binding the contract method 0xb47b2fb1.
//
// Solidity: function afterSwap(address , (address,address,uint24,int24,address) , (bool,int256,uint160) , int256 , bytes ) returns(bytes4)
func (_BaseHook *BaseHookSession) AfterSwap(arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerSwapParams, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _BaseHook.Contract.AfterSwap(&_BaseHook.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// AfterSwap is a paid mutator transaction binding the contract method 0xb47b2fb1.
//
// Solidity: function afterSwap(address , (address,address,uint24,int24,address) , (bool,int256,uint160) , int256 , bytes ) returns(bytes4)
func (_BaseHook *BaseHookTransactorSession) AfterSwap(arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerSwapParams, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _BaseHook.Contract.AfterSwap(&_BaseHook.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// BeforeDonate is a paid mutator transaction binding the contract method 0xb6a8b0fa.
//
// Solidity: function beforeDonate(address , (address,address,uint24,int24,address) , uint256 , uint256 , bytes ) returns(bytes4)
func (_BaseHook *BaseHookTransactor) BeforeDonate(opts *bind.TransactOpts, arg0 common.Address, arg1 PoolKey, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _BaseHook.contract.Transact(opts, "beforeDonate", arg0, arg1, arg2, arg3, arg4)
}

// BeforeDonate is a paid mutator transaction binding the contract method 0xb6a8b0fa.
//
// Solidity: function beforeDonate(address , (address,address,uint24,int24,address) , uint256 , uint256 , bytes ) returns(bytes4)
func (_BaseHook *BaseHookSession) BeforeDonate(arg0 common.Address, arg1 PoolKey, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _BaseHook.Contract.BeforeDonate(&_BaseHook.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// BeforeDonate is a paid mutator transaction binding the contract method 0xb6a8b0fa.
//
// Solidity: function beforeDonate(address , (address,address,uint24,int24,address) , uint256 , uint256 , bytes ) returns(bytes4)
func (_BaseHook *BaseHookTransactorSession) BeforeDonate(arg0 common.Address, arg1 PoolKey, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _BaseHook.Contract.BeforeDonate(&_BaseHook.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// BeforeInitialize is a paid mutator transaction binding the contract method 0x3440d820.
//
// Solidity: function beforeInitialize(address , (address,address,uint24,int24,address) , uint160 , bytes ) returns(bytes4)
func (_BaseHook *BaseHookTransactor) BeforeInitialize(opts *bind.TransactOpts, arg0 common.Address, arg1 PoolKey, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _BaseHook.contract.Transact(opts, "beforeInitialize", arg0, arg1, arg2, arg3)
}

// BeforeInitialize is a paid mutator transaction binding the contract method 0x3440d820.
//
// Solidity: function beforeInitialize(address , (address,address,uint24,int24,address) , uint160 , bytes ) returns(bytes4)
func (_BaseHook *BaseHookSession) BeforeInitialize(arg0 common.Address, arg1 PoolKey, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _BaseHook.Contract.BeforeInitialize(&_BaseHook.TransactOpts, arg0, arg1, arg2, arg3)
}

// BeforeInitialize is a paid mutator transaction binding the contract method 0x3440d820.
//
// Solidity: function beforeInitialize(address , (address,address,uint24,int24,address) , uint160 , bytes ) returns(bytes4)
func (_BaseHook *BaseHookTransactorSession) BeforeInitialize(arg0 common.Address, arg1 PoolKey, arg2 *big.Int, arg3 []byte) (*types.Transaction, error) {
	return _BaseHook.Contract.BeforeInitialize(&_BaseHook.TransactOpts, arg0, arg1, arg2, arg3)
}

// BeforeModifyPosition is a paid mutator transaction binding the contract method 0xfe9a6f45.
//
// Solidity: function beforeModifyPosition(address , (address,address,uint24,int24,address) , (int24,int24,int256) , bytes ) returns(bytes4)
func (_BaseHook *BaseHookTransactor) BeforeModifyPosition(opts *bind.TransactOpts, arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerModifyPositionParams, arg3 []byte) (*types.Transaction, error) {
	return _BaseHook.contract.Transact(opts, "beforeModifyPosition", arg0, arg1, arg2, arg3)
}

// BeforeModifyPosition is a paid mutator transaction binding the contract method 0xfe9a6f45.
//
// Solidity: function beforeModifyPosition(address , (address,address,uint24,int24,address) , (int24,int24,int256) , bytes ) returns(bytes4)
func (_BaseHook *BaseHookSession) BeforeModifyPosition(arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerModifyPositionParams, arg3 []byte) (*types.Transaction, error) {
	return _BaseHook.Contract.BeforeModifyPosition(&_BaseHook.TransactOpts, arg0, arg1, arg2, arg3)
}

// BeforeModifyPosition is a paid mutator transaction binding the contract method 0xfe9a6f45.
//
// Solidity: function beforeModifyPosition(address , (address,address,uint24,int24,address) , (int24,int24,int256) , bytes ) returns(bytes4)
func (_BaseHook *BaseHookTransactorSession) BeforeModifyPosition(arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerModifyPositionParams, arg3 []byte) (*types.Transaction, error) {
	return _BaseHook.Contract.BeforeModifyPosition(&_BaseHook.TransactOpts, arg0, arg1, arg2, arg3)
}

// BeforeSwap is a paid mutator transaction binding the contract method 0x575e24b4.
//
// Solidity: function beforeSwap(address , (address,address,uint24,int24,address) , (bool,int256,uint160) , bytes ) returns(bytes4)
func (_BaseHook *BaseHookTransactor) BeforeSwap(opts *bind.TransactOpts, arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerSwapParams, arg3 []byte) (*types.Transaction, error) {
	return _BaseHook.contract.Transact(opts, "beforeSwap", arg0, arg1, arg2, arg3)
}

// BeforeSwap is a paid mutator transaction binding the contract method 0x575e24b4.
//
// Solidity: function beforeSwap(address , (address,address,uint24,int24,address) , (bool,int256,uint160) , bytes ) returns(bytes4)
func (_BaseHook *BaseHookSession) BeforeSwap(arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerSwapParams, arg3 []byte) (*types.Transaction, error) {
	return _BaseHook.Contract.BeforeSwap(&_BaseHook.TransactOpts, arg0, arg1, arg2, arg3)
}

// BeforeSwap is a paid mutator transaction binding the contract method 0x575e24b4.
//
// Solidity: function beforeSwap(address , (address,address,uint24,int24,address) , (bool,int256,uint160) , bytes ) returns(bytes4)
func (_BaseHook *BaseHookTransactorSession) BeforeSwap(arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerSwapParams, arg3 []byte) (*types.Transaction, error) {
	return _BaseHook.Contract.BeforeSwap(&_BaseHook.TransactOpts, arg0, arg1, arg2, arg3)
}

// LockAcquired is a paid mutator transaction binding the contract method 0xab6291fe.
//
// Solidity: function lockAcquired(bytes data) returns(bytes)
func (_BaseHook *BaseHookTransactor) LockAcquired(opts *bind.TransactOpts, data []byte) (*types.Transaction, error) {
	return _BaseHook.contract.Transact(opts, "lockAcquired", data)
}

// LockAcquired is a paid mutator transaction binding the contract method 0xab6291fe.
//
// Solidity: function lockAcquired(bytes data) returns(bytes)
func (_BaseHook *BaseHookSession) LockAcquired(data []byte) (*types.Transaction, error) {
	return _BaseHook.Contract.LockAcquired(&_BaseHook.TransactOpts, data)
}

// LockAcquired is a paid mutator transaction binding the contract method 0xab6291fe.
//
// Solidity: function lockAcquired(bytes data) returns(bytes)
func (_BaseHook *BaseHookTransactorSession) LockAcquired(data []byte) (*types.Transaction, error) {
	return _BaseHook.Contract.LockAcquired(&_BaseHook.TransactOpts, data)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BaseHook *BaseHookTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BaseHook.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BaseHook *BaseHookSession) RenounceOwnership() (*types.Transaction, error) {
	return _BaseHook.Contract.RenounceOwnership(&_BaseHook.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BaseHook *BaseHookTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BaseHook.Contract.RenounceOwnership(&_BaseHook.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseHook *BaseHookTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BaseHook.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseHook *BaseHookSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseHook.Contract.TransferOwnership(&_BaseHook.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BaseHook *BaseHookTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BaseHook.Contract.TransferOwnership(&_BaseHook.TransactOpts, newOwner)
}

// BaseHookOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the BaseHook contract.
type BaseHookOwnershipTransferredIterator struct {
	Event *BaseHookOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BaseHookOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BaseHookOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BaseHookOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BaseHookOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BaseHookOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BaseHookOwnershipTransferred represents a OwnershipTransferred event raised by the BaseHook contract.
type BaseHookOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BaseHook *BaseHookFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BaseHookOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BaseHook.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BaseHookOwnershipTransferredIterator{contract: _BaseHook.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BaseHook *BaseHookFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BaseHookOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BaseHook.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BaseHookOwnershipTransferred)
				if err := _BaseHook.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BaseHook *BaseHookFilterer) ParseOwnershipTransferred(log types.Log) (*BaseHookOwnershipTransferred, error) {
	event := new(BaseHookOwnershipTransferred)
	if err := _BaseHook.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BatchZkProofVerifierMetaData contains all meta data concerning the BatchZkProofVerifier contract.
var BatchZkProofVerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commit\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[14]\",\"name\":\"input\",\"type\":\"uint256[14]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"}],\"name\":\"verifyRaw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6080806040523461001657611930908161001b8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f803560e01c908163457726e6146100375750636d628e8b14610032575f80fd5b610261565b346100a55760203660031901126100a55760043567ffffffffffffffff918282116100a557366023830112156100a55781600401359283116100a55736602484840101116100a5576100a161008f84602485016116f6565b60405190151581529081906020820190565b0390f35b80fd5b634e487b7160e01b5f52604160045260245ffd5b604051906040820182811067ffffffffffffffff8211176100dc57604052565b6100a8565b604051906080820182811067ffffffffffffffff8211176100dc57604052565b604051906101c0820182811067ffffffffffffffff8211176100dc57604052565b806023121561015f576101336100bc565b9081604491821161015f576004905b82821061014f5750505090565b8135815260209182019101610142565b5f80fd5b8060e3121561015f576101746100bc565b908161010491821161015f5760c4905b8282106101915750505090565b8135815260209182019101610184565b80610123121561015f576101b36100bc565b908161014491821161015f57610104905b8282106101d15750505090565b81358152602091820191016101c4565b9080601f8301121561015f576101f56100bc565b80926040810192831161015f57905b8282106102115750505090565b8135815260209182019101610204565b80610163121561015f57610233610101565b908161030491821161015f57610144905b8282106102515750505090565b8135815260209182019101610244565b3461015f5761030036600319011261015f5761027c36610122565b366063121561015f5761028d6100bc565b60c48136821161015f576044905b8282106102cc576100a161008f86866102b336610163565b6102bc366101a1565b916102c636610221565b936106e3565b60206040916102db36856101e1565b81520191019061029b565b6102ee6100e1565b906080368337565b604051906060820182811067ffffffffffffffff8211176100dc576040526060368337565b604051906020820182811067ffffffffffffffff8211176100dc576040526020368337565b6103486100bc565b906040368337565b610358610101565b906101c0368337565b6103696100bc565b906103726100bc565b604036823782526103816100bc565b60403682376020830152565b6103956100e1565b9061039e6100bc565b5f9081815281602082015283526103b3610361565b60208401526103c06100bc565b81815281602082015260408401526103d66100bc565b9080825260208201526060830152565b634e487b7160e01b5f52603260045260245ffd5b1561040157565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61582d6774652d7072696d652d710000000000000000006044820152606490fd5b1561044d57565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61592d6774652d7072696d652d710000000000000000006044820152606490fd5b1561049957565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258302d6774652d7072696d652d7100000000000000006044820152606490fd5b156104e557565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259302d6774652d7072696d652d7100000000000000006044820152606490fd5b1561053157565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258312d6774652d7072696d652d7100000000000000006044820152606490fd5b1561057d57565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259312d6774652d7072696d652d7100000000000000006044820152606490fd5b156105c957565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63582d6774652d7072696d652d710000000000000000006044820152606490fd5b1561061557565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63592d6774652d7072696d652d710000000000000000006044820152606490fd5b634e487b7160e01b5f52601160045260245ffd5b5f19811461067c5760010190565b61065a565b90600e8110156106925760051b0190565b6103e6565b1561069e57565b60405162461bcd60e51b815260206004820152601f60248201527f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c64006044820152606490fd5b949394929190926106f261038d565b81516020809301516107026100bc565b9182528382015281526107136100bc565b948051518652610724815160200190565b5183870152610743836107356100bc565b920180515183525160200190565b51838201526107506100bc565b9586528286015281810194855281835193015161076b6100bc565b938452828401526040810192835283519382810194855161078a6100bc565b918252848201526060830190815261083e7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476107c981865151106103fa565b6107d881878751015110610446565b6107e6818a51515110610492565b6107f681878b51015151106104de565b61080d816108068b515160200190565b511061052a565b6108268161081f888c51015160200190565b5110610576565b61083381885151106105c2565b85875101511061060e565b5f5b600e8110610e1c575090610df5979893929161085a611230565b966108636100bc565b925f8452610dbc84878101985f8a52819961087c6102e6565b918a6101a06108896102f6565b927f26397f57fad9e8b4fa680bc442bd89a8e44034a105aa7726696c448fac6204a36108b36100bc565b955f87525f858801527f08ed08d92275175bbd48d00c2ab3cddcf8344d46d333259f7079f355ecd88e068952527f1630cb8e742d0060f0592f12a451c439f2e16195ad87d6d7bbd7a2897b3375d384527f1f6afac52155b5c823e2bad0f65dc375d4b86e1a8aa444c41ece23d5a218cb898385017f21df1685ab713193576cbfdaf0ef7954d91b337e52dd59bca9db0a2631871ab48152825194604087019586526109608a8a8a8a6114ac565b7f15e140c3dfb8139ae95c8aee5f6bd010b436ea7c6ece17f49e75e980e872e24a87527f0b6ae56a700395cae0ec899fbc62fa989f23563c5cab6deaf813de1a6ddba5db825283015185526109b7898989896114ac565b7f22b909b919d744a3cc67c7f8281fe48dc9d5842107bbfe555181e54201ba789386527f0c81ed50b5c22e969f85fa18637397d8557604045c312f4c63c5c347a0d378d7815260408301518552610a10898989896114ac565b7f12c613830a0ac91f131cec36f4ef6a3cf1eb53e9d032b9df46d9e8500a72ca2686527f2fe626502de0ba7ac991925b30242a0f9da9aa89db62f9642420ed3fe45ebefa815260608301518552610a69898989896114ac565b7f247380ed916a2ec02f650a56f2bcf987f419ef30e2a694fc2768fe8912ad968c86527f0bec144a20e6d5ba80d6cc0d9f459e7d73a6f13024b3811d18f945449e26e223815260808301518552610ac2898989896114ac565b7f0cbc7741b9757b3d04e825afc0f29c77d51ed7d8c0ff00b4e4992581cbf3a76586527f2d759b11389582742ef84bb643434b7304b8231f82350b175cef1ebcafd88f22815260a08301518552610b1b898989896114ac565b7f13c334e05955f796e721c973c43333a242d6d24267a717cf8c89905b2e8920fd86527f2e9e0c2f6092e20b475365669f7fbb7a9bb854b7d76352a8afa919a05ede98d0815260c08301518552610b74898989896114ac565b7f1ac9fcbac63db5e783e9470e599502e9e87e7d810920e9faf6a64b7e488a263e86527f0e82decad5e253988c51805b1bd18584028860ce9c9836e531ce526923431a5c815260e08301518552610bcd898989896114ac565b7f0425d166e521708f6e28b0bfd17c57b4934175b0925b3b52326b8170ba1f042886527f262587e7f5c2646581c3ff1b497b9ea675334201698e6673c6e2bae5c9edc88681526101008301518552610c27898989896114ac565b7f03c32ddcb44853f29f935743a9ac7b845caa6cecc1f1f1a430e45c6c41b8f4e086527f15e7d2876f8195e009aac2fe5d0aadb00c525ee34104209019565a8672d6686081526101208301518552610c81898989896114ac565b7f24ae5e024356e42be7660642b0811596c5b0f28f4d604fdfa357fd6ea65fc1ac86527f1214c766e80dbb08f2eb66a8b288b944eb353db1285cbb8f616cacc88de689fc81526101408301518552610cdb898989896114ac565b7f2081aebc8a68e744cabf26c5d227cd05682762aef54f54f22eb4413ea86a96a686527f0a72c5c013ac14d07beef912139319d636e4204c4aa97f8b9aa48095500ae88e81526101608301518552610d35898989896114ac565b7f2a0bf25d17479c1037a2b18257261f71c3c9b03f8a8cea9be6aac258ae13608786527f2eb9fb49e73a033ea1755cbb15b0506c30bccfd32a9a31e19a42be2dec3c6a8981526101808301518552610d8f898989896114ac565b7f1e286e8f9f0f6ca774f2fd49121dc4bb9ce1538798476fa816001f7d64da77a5865252015190526114ac565b511590811591610e11575b50610df8575b5050610dd99051610e5f565b945190845190850151916060604087015195519601519661108d565b90565b51919350610dd991610e0991610f43565b92905f610dcd565b90505115155f610dc7565b80610e557f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610e4e610e5a948e610681565b5110610697565b61066e565b610840565b5f6020610e6a6100bc565b8281520152805190811580610eda575b15610e95575050610e896100bc565b5f81525f602082015290565b602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790819006810390811161067c57610ecf6100bc565b918252602082015290565b50602081015115610e7a565b9060048110156106925760051b0190565b15610efe57565b60405162461bcd60e51b815260206004820152601260248201527f70616972696e672d6164642d6661696c656400000000000000000000000000006044820152606490fd5b60609092919260c0610f536100bc565b915f83525f60208401526020839681610f6a6100e1565b936080368637805185520151828401528051604084015201518482015260066107cf195a01fa8015610fa157610f9f90610ef7565b565bfe5b60405190610320820182811067ffffffffffffffff8211176100dc5760405260188252610300366020840137565b9060068202918083046006149015171561067c57565b906001820180921161067c57565b906002820180921161067c57565b906003820180921161067c57565b906004820180921161067c57565b906005820180921161067c57565b80518210156106925760209160051b010190565b1561104857565b60405162461bcd60e51b815260206004820152601560248201527f70616972696e672d6f70636f64652d6661696c656400000000000000000000006044820152606490fd5b949195969290939661109d6100e1565b958652602097889788880152604087015260608601526110bb6100e1565b93845285840152604083015260608201526110d4610fa3565b915f5b6004811061110f575050506103006110ed61031b565b9384920160086107cf195a01fa8015610fa15761110990611041565b51151590565b6111e1919293945061112081610fd1565b61112a8285610ee6565b5151611136828861102d565b52866111428386610ee6565b51015161115761115183610fe7565b8861102d565b526111628286610ee6565b51515161117161115183610ff5565b5261118761117f8387610ee6565b515160200190565b5161119461115183611003565b52866111a08387610ee6565b510151516111b061115183611011565b526111db6111d56111ce896111c5868a610ee6565b51015160200190565b519261101f565b8761102d565b5261066e565b90849392916110d7565b6111f36100e1565b906111fc6100bc565b5f81525f6020820152825261120f610361565b602083015261121c610361565b6040830152611229610361565b6060830152565b6112386111eb565b906112416100bc565b7f21b093b7c44ad55b2429abd789642f2bd1fd7c946a60f613a8bb815759af1d7d81526020907f169843dfedb6f08750cb2526d76f7ac1771d8cfe75414bed8f8c10507ef0a66d8282015283526112966100bc565b7f24f9e952269d2e2e6af0405643852767182633132e38b186910588074232bbce81527f0cc67bfa5f8ebdef1388c5cf501c98a6d1a69affd505c620b4a142ad0390fb1d828201526112e66100bc565b7f1f14d13690823b09edc6030d404b4fc32d8bfff2816c0581dd1df206f9a1032b81527f1f31a0dd9075800981232aac334f243b55d1cb0d463bb56afdd1a9ce7776b739838201526113366100bc565b91825282820152818401526113496100bc565b7f0ab8a613f2eddd790add2ee2e833bf80487394c2b4d6b13e0637a8053fc5a42a81527f2a723faaf06672598738e5a5e2f674b27a037746cc4096cf066f8db47e3542b9828201526113996100bc565b7f0379f73699538a2c6307bcfd22e353d8357e93981308a469aa26990ef9ae18fb81527f2a537e7fc94c7fbcdd16596f00cb5377ebf78cf7413424d149531bcf933ff6ce838201526113e96100bc565b9182528282015260408401526113fd6100bc565b907f132e0739f47f7497146491c4bac08005b578731a48f2f524f2052a23db872edf82527f2f2aab893fb15e1d5c030f7f747454f74b62db720c2174b31628504f50ee60118183015261144e6100bc565b907f2e00163ef58cf131d8f8721c6c062b830364d70b6867cb8a2c8e339bb522e09482527f2ab72edd191bd7559c6de275a781f60abc273f0cf3bcea73b4b1a2aeb2bb16118183015261149f6100bc565b9283528201526060830152565b90929160608460806107cf19946007865a01fa15610fa157600660c0926020606096865185528187015182860152805160408601520151868401525a01fa8015610fa157610f9f90610ef7565b9060201161015f5790602090565b9060401161015f5760200190602090565b9060601161015f5760400190602090565b9060801161015f5760600190602090565b9060a01161015f5760800190602090565b9060c01161015f5760a00190602090565b9060e01161015f5760c00190602090565b906101001161015f5760e00190602090565b906101201161015f576101000190602090565b906101401161015f576101200190602090565b906101601161015f576101400190602090565b906101801161015f576101780190600890565b906101781161015f576101700190600890565b906101701161015f576101680190600890565b906101681161015f576101600190600890565b906101a01161015f576101980190600890565b906101981161015f576101900190600890565b906101901161015f576101880190600890565b906101881161015f576101800190600890565b906101c01161015f576101a00190602090565b359060208110611671575090565b5f199060200360031b1b1690565b6116876100bc565b905f5b604090818110156116ae576020916116a06100bc565b90368237818501520161168a565b5050565b7fffffffffffffffff00000000000000000000000000000000000000000000000090358181169392600881106116e757505050565b60080360031b82901b16169150565b610df591611702610340565b61171561170f83856114f9565b90611663565b815261172461170f8385611507565b602082015261173161167f565b61173e61170f8486611518565b81515261174e61170f8486611529565b81516020015261176161170f848661153a565b602082019081515261178161177961170f868861154b565b915160200190565b5261178a610340565b9161179861170f858761155c565b83526117a761170f858761156d565b60208401526118ef61170f6117ba610340565b956117c861170f828a61157f565b87526117d761170f828a611592565b60208801526117e4610350565b976117f261170f83836115a5565b6101a08a015261182461181761181161180b85856115b8565b906116b2565b60c01c90565b67ffffffffffffffff1690565b895261183961181761181161180b85856115cb565b60208a015261185161181761181161180b85856115de565b60408a015261186961181761181161180b85856115f1565b60608a01525f60808a01525f60a08a015261188d61181761181161180b8585611604565b60c08a01526118a561181761181161180b8585611617565b60e08a01526118bd61181761181161180b858561162a565b6101008a01526118d661181761181161180b858561163d565b6101208a01525f6101408a01525f6101608a0152611650565b6101808601526106e356fea2646970667358221220c56a2069404003d01b0a29d913a3a7fcc75ebe1f5ca8e843842239914e0756f364736f6c63430008150033",
}

// BatchZkProofVerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use BatchZkProofVerifierMetaData.ABI instead.
var BatchZkProofVerifierABI = BatchZkProofVerifierMetaData.ABI

// BatchZkProofVerifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BatchZkProofVerifierMetaData.Bin instead.
var BatchZkProofVerifierBin = BatchZkProofVerifierMetaData.Bin

// DeployBatchZkProofVerifier deploys a new Ethereum contract, binding an instance of BatchZkProofVerifier to it.
func DeployBatchZkProofVerifier(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BatchZkProofVerifier, error) {
	parsed, err := BatchZkProofVerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BatchZkProofVerifierBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BatchZkProofVerifier{BatchZkProofVerifierCaller: BatchZkProofVerifierCaller{contract: contract}, BatchZkProofVerifierTransactor: BatchZkProofVerifierTransactor{contract: contract}, BatchZkProofVerifierFilterer: BatchZkProofVerifierFilterer{contract: contract}}, nil
}

// BatchZkProofVerifier is an auto generated Go binding around an Ethereum contract.
type BatchZkProofVerifier struct {
	BatchZkProofVerifierCaller     // Read-only binding to the contract
	BatchZkProofVerifierTransactor // Write-only binding to the contract
	BatchZkProofVerifierFilterer   // Log filterer for contract events
}

// BatchZkProofVerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type BatchZkProofVerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BatchZkProofVerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BatchZkProofVerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BatchZkProofVerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BatchZkProofVerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BatchZkProofVerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BatchZkProofVerifierSession struct {
	Contract     *BatchZkProofVerifier // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// BatchZkProofVerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BatchZkProofVerifierCallerSession struct {
	Contract *BatchZkProofVerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// BatchZkProofVerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BatchZkProofVerifierTransactorSession struct {
	Contract     *BatchZkProofVerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// BatchZkProofVerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type BatchZkProofVerifierRaw struct {
	Contract *BatchZkProofVerifier // Generic contract binding to access the raw methods on
}

// BatchZkProofVerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BatchZkProofVerifierCallerRaw struct {
	Contract *BatchZkProofVerifierCaller // Generic read-only contract binding to access the raw methods on
}

// BatchZkProofVerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BatchZkProofVerifierTransactorRaw struct {
	Contract *BatchZkProofVerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBatchZkProofVerifier creates a new instance of BatchZkProofVerifier, bound to a specific deployed contract.
func NewBatchZkProofVerifier(address common.Address, backend bind.ContractBackend) (*BatchZkProofVerifier, error) {
	contract, err := bindBatchZkProofVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BatchZkProofVerifier{BatchZkProofVerifierCaller: BatchZkProofVerifierCaller{contract: contract}, BatchZkProofVerifierTransactor: BatchZkProofVerifierTransactor{contract: contract}, BatchZkProofVerifierFilterer: BatchZkProofVerifierFilterer{contract: contract}}, nil
}

// NewBatchZkProofVerifierCaller creates a new read-only instance of BatchZkProofVerifier, bound to a specific deployed contract.
func NewBatchZkProofVerifierCaller(address common.Address, caller bind.ContractCaller) (*BatchZkProofVerifierCaller, error) {
	contract, err := bindBatchZkProofVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BatchZkProofVerifierCaller{contract: contract}, nil
}

// NewBatchZkProofVerifierTransactor creates a new write-only instance of BatchZkProofVerifier, bound to a specific deployed contract.
func NewBatchZkProofVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*BatchZkProofVerifierTransactor, error) {
	contract, err := bindBatchZkProofVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BatchZkProofVerifierTransactor{contract: contract}, nil
}

// NewBatchZkProofVerifierFilterer creates a new log filterer instance of BatchZkProofVerifier, bound to a specific deployed contract.
func NewBatchZkProofVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*BatchZkProofVerifierFilterer, error) {
	contract, err := bindBatchZkProofVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BatchZkProofVerifierFilterer{contract: contract}, nil
}

// bindBatchZkProofVerifier binds a generic wrapper to an already deployed contract.
func bindBatchZkProofVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BatchZkProofVerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BatchZkProofVerifier *BatchZkProofVerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BatchZkProofVerifier.Contract.BatchZkProofVerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BatchZkProofVerifier *BatchZkProofVerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BatchZkProofVerifier.Contract.BatchZkProofVerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BatchZkProofVerifier *BatchZkProofVerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BatchZkProofVerifier.Contract.BatchZkProofVerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BatchZkProofVerifier *BatchZkProofVerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BatchZkProofVerifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BatchZkProofVerifier *BatchZkProofVerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BatchZkProofVerifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BatchZkProofVerifier *BatchZkProofVerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BatchZkProofVerifier.Contract.contract.Transact(opts, method, params...)
}

// VerifyProof is a free data retrieval call binding the contract method 0x6d628e8b.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[2] commit, uint256[14] input) view returns(bool r)
func (_BatchZkProofVerifier *BatchZkProofVerifierCaller) VerifyProof(opts *bind.CallOpts, a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, commit [2]*big.Int, input [14]*big.Int) (bool, error) {
	var out []interface{}
	err := _BatchZkProofVerifier.contract.Call(opts, &out, "verifyProof", a, b, c, commit, input)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyProof is a free data retrieval call binding the contract method 0x6d628e8b.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[2] commit, uint256[14] input) view returns(bool r)
func (_BatchZkProofVerifier *BatchZkProofVerifierSession) VerifyProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, commit [2]*big.Int, input [14]*big.Int) (bool, error) {
	return _BatchZkProofVerifier.Contract.VerifyProof(&_BatchZkProofVerifier.CallOpts, a, b, c, commit, input)
}

// VerifyProof is a free data retrieval call binding the contract method 0x6d628e8b.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[2] commit, uint256[14] input) view returns(bool r)
func (_BatchZkProofVerifier *BatchZkProofVerifierCallerSession) VerifyProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, commit [2]*big.Int, input [14]*big.Int) (bool, error) {
	return _BatchZkProofVerifier.Contract.VerifyProof(&_BatchZkProofVerifier.CallOpts, a, b, c, commit, input)
}

// VerifyRaw is a free data retrieval call binding the contract method 0x457726e6.
//
// Solidity: function verifyRaw(bytes proofData) view returns(bool)
func (_BatchZkProofVerifier *BatchZkProofVerifierCaller) VerifyRaw(opts *bind.CallOpts, proofData []byte) (bool, error) {
	var out []interface{}
	err := _BatchZkProofVerifier.contract.Call(opts, &out, "verifyRaw", proofData)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyRaw is a free data retrieval call binding the contract method 0x457726e6.
//
// Solidity: function verifyRaw(bytes proofData) view returns(bool)
func (_BatchZkProofVerifier *BatchZkProofVerifierSession) VerifyRaw(proofData []byte) (bool, error) {
	return _BatchZkProofVerifier.Contract.VerifyRaw(&_BatchZkProofVerifier.CallOpts, proofData)
}

// VerifyRaw is a free data retrieval call binding the contract method 0x457726e6.
//
// Solidity: function verifyRaw(bytes proofData) view returns(bool)
func (_BatchZkProofVerifier *BatchZkProofVerifierCallerSession) VerifyRaw(proofData []byte) (bool, error) {
	return _BatchZkProofVerifier.Contract.VerifyRaw(&_BatchZkProofVerifier.CallOpts, proofData)
}

// BeaconVerifierMetaData contains all meta data concerning the BeaconVerifier contract.
var BeaconVerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commit\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[35]\",\"name\":\"input\",\"type\":\"uint256[35]\"}],\"name\":\"verifyBlsSigProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[33]\",\"name\":\"input\",\"type\":\"uint256[33]\"}],\"name\":\"verifyCommitteeRootMappingProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"signingRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"syncCommitteePoseidonRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"participation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"structIBeaconVerifier.Proof\",\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"verifySignatureProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sszRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"poseidonRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"structIBeaconVerifier.Proof\",\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"verifySyncCommitteeRootMappingProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6080806040523461001657613067908161001b8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f803560e01c9081630cc26769146100575750806352356da0146100525780637a5387811461004d5763ab00dde614610048575f80fd5b610662565b6105dd565b61052b565b346100bc576105a03660031901126100bc5761007236610236565b9061007c36610331565b61008536610273565b9061008f366102b1565b923661016312156100bc5760206100b2868686866100ac3661015a565b93610ad1565b6040519015158152f35b80fd5b634e487b7160e01b5f52604160045260245ffd5b604051906080820182811067ffffffffffffffff8211176100f357604052565b6100bf565b604051906040820182811067ffffffffffffffff8211176100f357604052565b60405190610460820182811067ffffffffffffffff8211176100f357604052565b60405190610420820182811067ffffffffffffffff8211176100f357604052565b90610163610118565b91826105a491821161019057610144905b82821061018057505050565b8135815260209182019101610174565b5f80fd5b9061019d6100f8565b918261018491821161019057610144905b8282106101ba57505050565b81358152602091820191016101ae565b906101d36100f8565b91826101c491821161019057610184905b8282106101f057505050565b81358152602091820191016101e4565b906102096100f8565b918261014491821161019057610104905b82821061022657505050565b813581526020918201910161021a565b8060231215610190576102476100f8565b90816044918211610190576004905b8282106102635750505090565b8135815260209182019101610256565b8060e31215610190576102846100f8565b90816101049182116101905760c4905b8282106102a15750505090565b8135815260209182019101610294565b806101231215610190576102c36100f8565b908161014491821161019057610104905b8282106102e15750505090565b81358152602091820191016102d4565b9080601f83011215610190576103056100f8565b80926040810192831161019057905b8282106103215750505090565b8135815260209182019101610314565b8060631215610190576103426100f8565b908160c491808311610190576044915b838310610360575050505090565b602060409161036f84866102f1565b815201920191610352565b8060e312156101905761038b6100f8565b9081610144918083116101905760c4915b8383106103aa575050505090565b60206040916103b984866102f1565b81520192019161039c565b8060a31215610190576103d56100f8565b908161010491808311610190576084915b8383106103f4575050505090565b602060409161040384866102f1565b8152019201916103e6565b90610140608319830112610190576104246100d3565b918060a31215610190576104366100f8565b60c481838211610190576084905b8282106104905750505083526104598161037a565b60208401528061016312156101905761047181610194565b6040840152806101a3121561019057610489906101ca565b6060830152565b8135815260209182019101610444565b90610140604319830112610190576104b66100d3565b918060631215610190576104c86100f8565b608481838211610190576044905b82821061051b5750505083526104eb816103c4565b60208401528061012312156101905761050381610200565b60408401528061016312156101905761048990610194565b81358152602091820191016104d6565b34610190576101c0366003190112610190576105463661040e565b61054e610118565b906104603683375f6004355b602082106105b3576105af61059d858560443561040083015260243561042083015260643561044083015280519060208101516060604083015192015192610ad1565b60405190151581529081906020820190565b0390f35b8060ff6105d792166105cd6105c785610757565b87610779565b5260081c91610749565b9061055a565b3461019057610180366003190112610190576105f8366104a0565b610600610139565b906104203683375f6004355b60208210610638576105af61059d85856024356104008301528051906040602082015191015191611c65565b601f9082820391821161065d57610657916105cd60ff8316918761078f565b9061060c565b610735565b34610190576105203660031901126101905761067d36610236565b61068636610331565b9061069036610273565b91366101231215610190576106a3610139565b9283916105249336851161019057602095610104905b8682106106cc5750506100b29450611c65565b813581529087019087016106b9565b6106e36100d3565b906080368337565b604051906060820182811067ffffffffffffffff8211176100f3576040526060368337565b604051906020820182811067ffffffffffffffff8211176100f3576040526020368337565b634e487b7160e01b5f52601160045260245ffd5b5f19811461065d5760010190565b601f0390601f821161065d57565b634e487b7160e01b5f52603260045260245ffd5b90602381101561078a5760051b0190565b610765565b90602181101561078a5760051b0190565b6107a86100f8565b906107b16100f8565b604036823782526107c06100f8565b60403682376020830152565b6107d46100d3565b906107dd6100f8565b5f9081815281602082015283526107f26107a0565b60208401526107ff6100f8565b81815281602082015260408401526108156100f8565b9080825260208201526060830152565b1561082c57565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61582d6774652d7072696d652d710000000000000000006044820152606490fd5b1561087857565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61592d6774652d7072696d652d710000000000000000006044820152606490fd5b156108c457565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258302d6774652d7072696d652d7100000000000000006044820152606490fd5b1561091057565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259302d6774652d7072696d652d7100000000000000006044820152606490fd5b1561095c57565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258312d6774652d7072696d652d7100000000000000006044820152606490fd5b156109a857565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259312d6774652d7072696d652d7100000000000000006044820152606490fd5b156109f457565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63582d6774652d7072696d652d710000000000000000006044820152606490fd5b15610a4057565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63592d6774652d7072696d652d710000000000000000006044820152606490fd5b15610a8c57565b60405162461bcd60e51b815260206004820152601f60248201527f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c64006044820152606490fd5b94939492919092610ae06107cc565b8151602080930151610af06100f8565b918252838201528152610b016100f8565b948051518652610b12815160200190565b5183870152610b3183610b236100f8565b920180515183525160200190565b5183820152610b3e6100f8565b95865282860152818101948552818351930151610b596100f8565b9384528284015260408101928352835193828101948551610b786100f8565b9182528482015260608301908152610c2c7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610bb78186515110610825565b610bc681878751015110610871565b610bd4818a515151106108bd565b610be481878b5101515110610909565b610bfb81610bf48b515160200190565b5110610955565b610c1481610c0d888c51015160200190565b51106109a1565b610c2181885151106109ed565b858751015110610a39565b5f5b602381106119685750906119419798939291610c486119e9565b96610c516100f8565b925f845261190884878101985f8a528199610c6a6106db565b918a610440610c776106eb565b927f2065b90c648581703a4ef82833653ae713aaf62c2dc4ef26b0a9bbbdf254b48a610ca16100f8565b955f87525f858801527f0da0d09dcc32c2d20c9905307190ffb91538db928804c70e7ed77639f2cee0fe8952527f2fcf362c494439bcae24ab0ab7dd0bd40825ed18725c1d11d25eeb863f24194884527f184edce371c121d112278a4d1239f9d65421fb00e688d7612320bb5f66e7409d8385017f1a7a0f4ef55687795fa98c4585fc66e26ddea1f6e161a837ef4a4f1ae9c8808b815282519460408701958652610d4e8a8a8a8a612c69565b7f159c9e6c6ad47c3114dd4bdc88dc34359cae49de8306c8f56c9ba9d56429755e87527f261a0e3bad2b8c7b4057a7708b68ddaa9684eaa9d458088e7a2fe7813e08d06082528301518552610da589898989612c69565b7f1243c2c01b1a238bd0937eed8a5eb5f962eae681000356540ae1cfb36e1e308b86527e816901d1be816971e5f7e84b32a92c58a9f8971ff921adc37884d47db225e2815260408301518552610dfd89898989612c69565b7f25ebb06beeca9f8b08c511a86423c8f8705f115fe942220b9f8e30d54b016e0686527f1a598b2d183a54a959959d562879ae4b48df2203151d223973543b7d9584c59e815260608301518552610e5689898989612c69565b7f0ede030d344e453627bd0d2e849cd89947ed04b1825b0d4f7d6a8bf8b6ca5bae86527f01e7b010c4ab8cfc4791d0886bb39e1e8785b51a2a2165514d1fe026b8de24ad815260808301518552610eaf89898989612c69565b7f1f81ffd062f9644e01e392d39b8de8e030afd731c770e58f96050ed1d36d553286527f0ac85a9509ed9a6e21c1e933b10794303a4b77d9fd1fb036e966fef320cb4dad815260a08301518552610f0889898989612c69565b7f2d46add97dc6a65ee2f3dd3ea61060bf9fd510929a701e4cec0913f8ab1cafe386527f1e8e47b54e79299b14dfe604a3c8ce10ee4cb2d09be71e23628c13888c29a254815260c08301518552610f6189898989612c69565b7f146a85b7d5644a318ee8d2a44d995f580695fb92ade1dc0bbfc84cb4010ac1c386527f1d3734ea6fc621a0710ba60b024e87e0442525b2c77aff46634f6c5c0035e073815260e08301518552610fba89898989612c69565b7f12664f87a4a89be5df17d8f4cb797e102a083e505835ddfa68bfff968ded011f86527f062c4ef046ea89c77def686012d175292e6cca3adb8dc9e0234bbbe4384e6b188152610100830151855261101489898989612c69565b7f22ecd52df7b85f6392fa550619d401fedebde3332b7c8857f3b26caac17f4b7986527f25696ccea69b88905a95af209f6daa0d638426ae494b1b5800d1bb32aa271c3c8152610120830151855261106e89898989612c69565b7ee5e920eb2bd31bc7480c75e93c11a2a8f421af3e287f37a87453a96b4dd6c086527f2b82a4685f51b881675e3e4958242a11585b1aa2211bef1ba101ade59d484fcb815261014083015185526110c789898989612c69565b7f1bb112783a4bd8e95decec6012a6b0c06d076f07806241e64d5bb279055ce2e386527f03aacbe5b76da6ffe5a38b5f74bb1defdf60afde8f7bed77c2103c7d6d285c458152610160830151855261112189898989612c69565b7e89a49d6c462af5737f4f74e89ee3fd5fcda9b129a6885f4402b7191ce06ecc86527f03670d5e8e16d0f9e9351a53b707cddd87f0df01f7e71f8ef942b35a63c54d808152610180830151855261117a89898989612c69565b7f148203b1cf918d850c2e4eb482623111d69a0d149273d88bd472cc2dc667788886527f09e3685cddd844c117894cf1560ee45625a29890eb111e539598ac6c8510b26f81526101a083015185526111d489898989612c69565b7f038bda99e81e5aee528c18e38ab4a8806508a531d1f22f6618919bffb81f59f686527f14ce622b4ba47284ea8c421b00498ea220fb6f88026998098cbb21d38d8e0b0a81526101c0830151855261122e89898989612c69565b7f0c1641e14f8c4509f0c675448654f877363c981ca8c18363b549cfb115737ea386527f0b8cc9ed761dfbad8b821e125c571ba83a857c405c10df3bdeb64fc9b3248e2a81526101e0830151855261128889898989612c69565b7f14c11b03d9e6d4e5c71174b991b0b1b63f5a8539d4449e10a08275be0454646586527f014e6374d23fc81a10b61fd108e7b0e59003f8d3ed87edd40a722aafbc1c2635815261020083015185526112e289898989612c69565b7f2a195965e3a4ebe550289af22bb4c1118e21dc2c74be94ad6455e8f6eb70c8c486527f12024e0b3b82946c93024f8e1159da64dc1d3c72c49929836a5f2577d5a0ed688152610220830151855261133c89898989612c69565b7f1f679e8223e56ae364c7fe5b1eb44e3b3c66cbf45645c364d308c505539047c986527f2c32d125628fae7d840d3f28e83a7fa88112f60ee52f5f86fba53c08e474ff698152610240830151855261139689898989612c69565b7f1b73d0bdb2a03d112f31e25b60799a767fb82a9d6418db824c632ffba80be47d86527f21b9840d5d347552e43ea2e7bd19560353b633a278b602c6074025ddb9f63a21815261026083015185526113f089898989612c69565b7f16b45c0468819f85893ab1c4877c4fe4f49c146b976419b48aa07a0f6cbfb2e286527f06b26b18879ce8c03298c0302e22e9be3407e4b50aa15e3153b0eea99ce024148152610280830151855261144a89898989612c69565b7f1fe6017431f3e3861894f3e1871a3627f3fc61c832f3e951b3e55c86c4b9615886527f2236d30c0a8738dcac59bc76c975d2ac9c9f1347adfc85c977fc196f4a963f5e81526102a083015185526114a489898989612c69565b7f2fd10aed9958e2d8257e4a70a742fa4774402f36a25babac21c8e0b5f661c12886527f0f8a616d021292af83c9631904c885899f5fe78a5489c14462c97f8472ce5bbf81526102c083015185526114fe89898989612c69565b7f280a41e1efcd026c87f851e0180aad3ac57df1f93286a57f53c400268d8752c386527f1633532825ddc9c0da04246a44b706dcfd57ae2f4c1bb69738ff8433d5b2a8bb81526102e0830151855261155889898989612c69565b7e027cbc9193ee97f7eec57e57cb0ff7347cc0b2586a1637f4ce954bea3ff97186527f1c897b0f8a07cbc7a4b69597227129b4a12ba68e1926ecc7a45a4ec4bdc5bf07815261030083015185526115b189898989612c69565b7f1b1da35eea8e3139d38e9db84386f59853a18040d1a2216b74679e08c191a01c86527f0bfab57806284de52685f6dda04330043efee9399c75b78e48b5b1d7cb80038e8152610320830151855261160b89898989612c69565b7f012154f85b76ea46de9dc3f61d7c053aa9a583e3e2e57d6a076db599b1326a2f86527f1d25427c48b7647c1efe27b5e7da3240ee333d288ebabeb8b45e30c113c6474e8152610340830151855261166589898989612c69565b7f111fb275c27d543c507e0c685728727d2344f736a345419dd396d083296211ed86527f01c636dbb603223ca61aee282e75c2ee554f6639e813f990cc7e045128e9ba6e815261036083015185526116bf89898989612c69565b7f0e3ef51ec2992fd4fd4e08d2fc6c02cb6586ec574edec92b74583bd38cc15cae86527f0eeb3ece8b4b83ce8946832b6dd7f35204669e47ccd8b1fc31cba6c71808f6898152610380830151855261171989898989612c69565b7f0a7e2bd7bb8aeb9e84739db84898a9115aa023c279d2df4536366e445e618b1e86527f0141bc992ed56ad3af847ed62afe254e174e6df8efbc36cf3314adad1244b42381526103a0830151855261177389898989612c69565b7f0f2ecde94b061c256edb823ac557ce52f907f612791c85a2e66fb888ce8a417b86527f1c09474255a3b4c33f9452b362e6352c65acb1406a454a1d4b212538d529ed9a81526103c083015185526117cd89898989612c69565b7f1a2a4a634641112a1b940ba3b089193dfde76611dc7a7c29538a0f93bbdaf83086527f1752d5a3839dedbad8cd819b7b86a82982d1c7663453d236c559353725c2901381526103e0830151855261182789898989612c69565b7f2e9b2e2e4921cd57e24d3215d41cfa43545b0fa8907380f2b4eca856b242ace086527f192ca02d2e86b7636626a919c871396ba8108cc7f2358ded277a32ed4ba10d4b8152610400830151855261188189898989612c69565b7f1266b7cbb61c28d580a6aa8e4a6b3455bf5c925fe9321c0b0afd01596c4a950586527f0f945b9129e6749912477338802d286af2f6aca2e71cdf199f387d570acf5f10815261042083015185526118db89898989612c69565b7f1be6c06af2b7182fc509c0c72a3874173c0e9b8ef208c89a6ffcbe343f74440a86525201519052612c69565b51159081159161195d575b50611944575b50506119259051612cba565b9451908451908501519160606040870151955196015196612ed3565b90565b519193506119259161195591612d8d565b92905f611919565b90505115155f611913565b806119a17f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161199a6119a6948e610779565b5110610a85565b610749565b610c2e565b6119b36100d3565b906119bc6100f8565b5f81525f602082015282526119cf6107a0565b60208301526119dc6107a0565b60408301526104896107a0565b6119f16119ab565b906119fa6100f8565b7f3059a4f6581fbdcc0d5e847306a4862568fbf62d22d49958fc3902e4bc379ef381526020907f1dd7c04824ae7a26cbb4bb2e8e647030df4de01e51764344c9da30b1ac0317c8828201528352611a4f6100f8565b7f0f98f7aa65c680ca7cd4b7f95afc5f6827e95398c599befdd9a9eca741e46b6181527f0a6f18525c7167edf6945aa57ecf8e0dde824c50912f1fe71574e86908579b6882820152611a9f6100f8565b7f1d1dacfe7971320b875aa2dbcdafb33d4141ca0b0435904e1e2ead83b600d26b81527f1e0cdae1aa15580307c121c8518d1b513fb8bfc62718065a60e88eee79d0288d83820152611aef6100f8565b9182528282015281840152611b026100f8565b7f1887c867c4428fd8c7157ac7f5e81a19271ea37ac336aa87203e65bd77cdcad281527f10d21089c03935120870563d17d271a9165f3d541cf4b41a450b8c3741e8442382820152611b526100f8565b7f105ceb8102cb4bd76c903c3f045988d7407aab02a26e2b0ac08c58af1edec5a481527f0b32e41ba74a1a65c885129ca2c3c87475d584c75ebc553cb79d4468de6483a883820152611ba26100f8565b918252828201526040840152611bb66100f8565b907f04e9e06a4684b3f9cfea22a0b5d19239c957ba0b12a17f2d9dc9d1e63f9ae49482527f0ef0df2626365d3222024595b1cd400614d2db4a442bb59f5ab585b4717528f881830152611c076100f8565b907f239dd78f7b5dba6a6d81f994b3060a73e4d7602aeb8909fd9785a0f1e04367e382527f178fb89664e86e6758f974887c6d9d19cd52b518c16d799e75556a7ae9a2582981830152611c586100f8565b9283528201526060830152565b9091939293611c726107cc565b918051602080920151611c836100f8565b918252828201528352611c946100f8565b938051518552611ca5815160200190565b5182860152611cb682610b236100f8565b5182820152611cc36100f8565b94855281850152808301938452808251920151611cde6100f8565b9283528183015260408301918252611d847f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47611d1d8186515110610825565b611d2c81848751015110610871565b611d3a8187515151106108bd565b611d4a8184885101515110610909565b611d5a81610bf488515160200190565b611d6c81610c0d858951015160200190565b611d7981855151106109ed565b828451015110610a39565b5f5b602181106129b25750946119419495611925611da06129e9565b946129ac611dac6100f8565b80955f82528582015f8152611dbf6106db565b91611dc86106eb565b907f305c9c1aa4a3294d7d6f331d65dc097fd9b9011350a6065eed3d56ad4d48a5e2611df26100f8565b935f85525f8b8601527f2d704aa2e65d5ad168e2ebdd814a37bf7f58961077a78e2ce2eea371cf886b0e8752527f05595e70b8c63dfb8fe2f8adb49c225ee5e6f783b5736f3221d423194db5585d8252610400898301917e7f03a8f871280b33c0292e973247afd9cddfa419e978678bde69323baece8383527f0e4ddacfcf167969963d2bb01ca92fa86b4bfd92c37917bad4ab760f0279625081519360408601948552611ea289898989612c69565b7f2cbe10c7c83f6dbe1bc89736f5dc9a9b91e55be6941a4b99b058acd8001fb00486527f1500351867036612a9db15b6f7d4198993f31565af0610ed3fda8d92ffb5e67181528c8301518552611efa89898989612c69565b7f2ff215cfa1c7c99fc0b382d9d7225a0636ccd9a01be83959da430a3a25d4481f86527f2918236b7c008f70fc98cc3bcc41eb60fb8b85d02b4e83100de7a9a7eed34645815260408301518552611f5389898989612c69565b7f0943a399c312616b46deee38e49b364b3449d7bab638b580df78aece26ecedf186527f11c937747adbd7b45585d385c0174241e937dce9fa818ca66d00f550b3f3d128815260608301518552611fac89898989612c69565b7f05dd54c0736f8a8d838a097e3151776cc6f602439ecc7833d223dc6cc69d585186527ee6465472f5b3647daa18848088f62f4fe1e57c401172d39f45b827bcc898f781526080830151855261200489898989612c69565b7f0d64a91e0e28a2e96b12a3211ebd9f66d854efbc1bd17fccc28e33993722b96d86527f0b30126ec8f40991e90ef34a78e10acb9848fe65e84547e64346fbaebafc9a98815260a0830151855261205d89898989612c69565b7f08272a78392bca7c2597f09f39daf6f7129808e6a6b34a49239dbf2a264e4e3b86527f02ac17971af65a980f6ab150b8ebaf573008d90c0af4eeed28d50374e8eed16b815260c083015185526120b689898989612c69565b7f19e3f8ff1265325376056bd2155edf79762433ec7b24c2196701da40ff2e6b3186527f0b33297cf3ae84083dab64e559bccd29e271c3e7d9ba307b7d623d223d091ead815260e0830151855261210f89898989612c69565b7f01341f47e05793a19ea7b92ff3b84c73f7223d56104d070f246e00eb1db7967986527f052fb71e652150885399cfb863b33f0dc0dfe9b279d0bf29df0fc403810fdb178152610100830151855261216989898989612c69565b7f04e2785630031d901e87c72d18c1e526142d7b79ee5b4360f5f9373d385aa1be86527f13fdbcc7f866114bdd363bc99c54b3ea0921b9b5526e46885291a00f8f9feea7815261012083015185526121c389898989612c69565b7f0bc888012014ac70c1692250c46020392de91756724c6c890edbc8d860450b8086527f02ce5d7f6c5c1ec90a48c08531305543ef94f25d0d03f67124280afb560406d48152610140830151855261221d89898989612c69565b7f0aee169033d6ddce5c5dde351a6ce45eb60dc3018752274e14f68e3f19a5359686527f1481dacc3a815550ede26690b83395cb031c17fb4aca75baa0a74acc404233518152610160830151855261227789898989612c69565b7f1c24a404b575734133f0c03bbf71c74c5b03a34f1d0817662c7d9293eaecaad586527f10af37e497d439239dfdab04bce89b1eaeaa12bc5f327129816a7a3841863fdd815261018083015185526122d189898989612c69565b7f14a256de1a2c7bb25672a1acc5406b90543c8a3b8c7c6e0a1895f019171141a886527f08f0539c9fd5ef363053e6560e4769e20e56dd0a510c30dce8adab0230c5fdb181526101a0830151855261232b89898989612c69565b7f082d61eb34a0a6544527e7db6b9bd16a8f6488733c83bee559ec5378191c93ba86527f144b7ab9c8fd2fb71b51c102820f2b08303be60f9fdd313e68f412d3f027a82081526101c0830151855261238589898989612c69565b7f22510e5ce22c30374993b2a360ceed3bdc20bd64b8d14cb3baedf76ddbd8062386527f0c0c88dfbf63ebc976d642a63c3d22288c546570b101f0219b3e2f3af5bedcfb81526101e083015185526123df89898989612c69565b7f2c71d775cc194f6e13408a12a33cb48babccfee137654d1443371de1d0f30c0c86527f1ba219dea8d4ffd8339c1c10cda690451c10fb5058f36ce7e1407118d871cc808152610200830151855261243989898989612c69565b7f14e7d115c5cfbe3c075697f305b8660abf41c5725a40557d3e14c9703aef64c286527f0cbc84b02d09b3f498b122ab5819248195aea678e0a41e744967da6bd8d0ce118152610220830151855261249389898989612c69565b7f0332f7d5660e970f229a174367929acabfa2f9fdab763460fd7acebddd944dde86527f15be1ce817121a7c25340b8d9c50a584a179d3dffd489f54311a12f922a6942f815261024083015185526124ed89898989612c69565b7f0257933903a2e91846df829f8084008ddf5fc35dd8d4acdebd426bff0d97e2a386527f17e9653840e81e1a68076e0c5f8c89f61463791e918991df86c86f63dccd93918152610260830151855261254789898989612c69565b7f106f1170be9c02c979b3d6e1d43737530d6bfc444c16df873400384d39e393be86527f1c2b9f619d809bb543e712ac0ee22cc3c6aa99ae73c97246c9769c9c98713fc5815261028083015185526125a189898989612c69565b7f131eb8c00ed76432c870a74c71365748a51807c021e678beb083b0e7e8b5b61186527f2491a76ab72146d0aeb330815df908ad5dd6cd86201e97d220b63d0d8d0f3ac481526102a083015185526125fb89898989612c69565b7f2561f4abb9fabeeb813dcc6d4d487d8f6e36fdd18805e785cccdf2b0a2ff085786527f2e6269f87539d6b464a25b6bd4522d1e2b78c3918f48e79de55dd640261faa4281526102c0830151855261265589898989612c69565b7f2e485df27f23a93b97e296061758e7dd3d34c4722c6fd7ae249433c55d259adc86527f1614f76a407ac31a5acb91266c2c7f54166ee17112e69f0b5e5fad32dafe5f6581526102e083015185526126af89898989612c69565b7f153af4e0fe4af748819ca675d8781da95111510763de4bec8abf25bca637703b86527f0b1f5a812c51999ebc7ac97de6ab2409b894ad5fb02d45f0798acc2548344cb98152610300830151855261270989898989612c69565b7f2c69e0646f6bfc70dfd02cf64d0b781ab481cafbd190dba9ee603f8160c44dcd86527f126015936956b109beba47938f9808cd9eed7ba5fc4531e6f6f267cadb13f4f88152610320830151855261276389898989612c69565b7f22c6d8b6cf6965d431abf72b985b44f1d0831026a43d6dc8cbcb9ca85ab4a0bc86527f19fd6ce3da2b55331cdd361a63f29e95c52f07bcf9cbe355077e5141bf020d83815261034083015185526127bd89898989612c69565b7f0cc996a6a427bcf59dad5cb6a2da92164e142372347a8ca5b1b3b32d8b20a0ef86527f232f08e45f51e15d57617fc960278b4dd236ed78e9014d43950751ea862841f18152610360830151855261281789898989612c69565b7f1e03c25c13870ae3e127e009be017aa0f47c7b53fc8636bd519ad68f035aa55c86527f04d8795eee1d4bcb8a4042ed861d91024ec5ce76c4fdac892d0c0047987451998152610380830151855261287189898989612c69565b7f2690cf34bdf3837f3036c3c61e73f94f8026f6a6e9be13695cf81ccebbac7ca886527f0db77d728541f6ab723d2dc8389a97864f9e61349120d35d76c004579c3fc10881526103a083015185526128cb89898989612c69565b7f10f3808b8fb7eb5be9d22fa5e7b4599e94116d5803607ae38bd3c637c10224f286527f06cb766b59e904c5b47098c0f98af9c4444f614cf303f1c939fd24b6bd60cc9c81526103c0830151855261292589898989612c69565b7f1610f9fbade90d90feada79ae229d67175dee93355fbbf229133ce0d6e75e3a186527f1a3084c2af6e7f823d2044866e00b80af74b5586f26c9685943786f355712ddd81526103e0830151855261297f89898989612c69565b7f1b88a7f08e12e3e28b9b10c0c0cbfd8d7df8b8a8fae1840b33c1cd4d24c8b23c86525201519052612c69565b51612cba565b806119a17f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161199a6129e4948b61078f565b611d86565b6129f16119ab565b906129fa6100f8565b7f0a3a3884405b8d1fe46693685f02ba163634fd63d14bf91b6a433825b9ed6b5a81526020907f111fc830b029cfb2c94e450b570cf3be3eac81076213c2dcb1e1059330c605bf828201528352612a4f6100f8565b7f23ab779b99bf99c421500d8fe70c4e84fc1ff6eefdf3e92d8f581d046cb3eab781527f1611f26f3d9d6b19c4a418d02f19f6796be688f08507bc59ee5f9862dd46fa5b82820152612a9f6100f8565b7f2d34a3d654ca9ea36195f8167d653fa7240b0af8acad4b224aed268f9d8756ff81527f178cda417a663a79267fba64b28caf8fc8484866bfe0f423cb8d3b7da164d7f983820152612aef6100f8565b9182528282015281840152612b026100f8565b7f1f682eee4eeb25b38c3bff07fad9aaeb8c1ae87a95472a7819a57fd8b37a6e1581527f0db20bc4434468f4ce7f5888da80c6013c5392645400eee1ddbb77b0696ea1a782820152612b526100f8565b7f01979b2d16e0fb974244f72e399fd4d24be132523f4aeb010c75f26b6452d53c81527f21900fdcdfde4102dbbcd9525e925c0f4ea5317aefc7a1c350753b5c9741ebd583820152612ba26100f8565b918252828201526040840152612bb66100f8565b907f04969a13dd24e7586c1e7e668f9be1cfab2bfb7baf9e48cd94428a55b4cfb89882527f3026f4334a515ea181839681e5a601e08615013a7355b0a0ad1c6ffce279eb1681830152612c076100f8565b907f0987e27c310f4a785adc7dfc5324848dc4b1b4957907733a04c889777c88a78582527f13c07cb3a59387f85f315e9b41060f8a993a3c3d22113439d63f9be212afc23481830152611c586100f8565b90600481101561078a5760051b0190565b90929160608460806107cf19946007865a01fa15612cb857600660c0926020606096865185528187015182860152805160408601520151868401525a01fa8015612cb857612cb690612d41565b565bfe5b5f6020612cc56100f8565b8281520152805190811580612d35575b15612cf0575050612ce46100f8565b5f81525f602082015290565b602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790819006810390811161065d57612d2a6100f8565b918252602082015290565b50602081015115612cd5565b15612d4857565b60405162461bcd60e51b815260206004820152601260248201527f70616972696e672d6164642d6661696c656400000000000000000000000000006044820152606490fd5b60609092919260c0612d9d6100f8565b915f83525f60208401526020839681612db46100d3565b936080368637805185520151828401528051604084015201518482015260066107cf195a01fa8015612cb857612cb690612d41565b60405190610320820182811067ffffffffffffffff8211176100f35760405260188252610300366020840137565b9060068202918083046006149015171561065d57565b906001820180921161065d57565b906002820180921161065d57565b906003820180921161065d57565b906004820180921161065d57565b906005820180921161065d57565b805182101561078a5760209160051b010190565b15612e8e57565b60405162461bcd60e51b815260206004820152601560248201527f70616972696e672d6f70636f64652d6661696c656400000000000000000000006044820152606490fd5b9491959692909396612ee36100d3565b95865260209788978888015260408701526060860152612f016100d3565b9384528584015260408301526060820152612f1a612de9565b915f5b60048110612f5557505050610300612f33610710565b9384920160086107cf195a01fa8015612cb857612f4f90612e87565b51151590565b6130279192939450612f6681612e17565b612f708285612c58565b5151612f7c8288612e73565b5286612f888386612c58565b510151612f9d612f9783612e2d565b88612e73565b52612fa88286612c58565b515151612fb7612f9783612e3b565b52612fcd612fc58387612c58565b515160200190565b51612fda612f9783612e49565b5286612fe68387612c58565b51015151612ff6612f9783612e57565b5261302161301b6130148961300b868a612c58565b51015160200190565b5192612e65565b87612e73565b52610749565b9084939291612f1d56fea26469706673582212205a579a8d7691c716a1a98a9cff178b4cc3253e35abb70aefdd02e54c9ac23c6b64736f6c63430008150033",
}

// BeaconVerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use BeaconVerifierMetaData.ABI instead.
var BeaconVerifierABI = BeaconVerifierMetaData.ABI

// BeaconVerifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BeaconVerifierMetaData.Bin instead.
var BeaconVerifierBin = BeaconVerifierMetaData.Bin

// DeployBeaconVerifier deploys a new Ethereum contract, binding an instance of BeaconVerifier to it.
func DeployBeaconVerifier(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BeaconVerifier, error) {
	parsed, err := BeaconVerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BeaconVerifierBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BeaconVerifier{BeaconVerifierCaller: BeaconVerifierCaller{contract: contract}, BeaconVerifierTransactor: BeaconVerifierTransactor{contract: contract}, BeaconVerifierFilterer: BeaconVerifierFilterer{contract: contract}}, nil
}

// BeaconVerifier is an auto generated Go binding around an Ethereum contract.
type BeaconVerifier struct {
	BeaconVerifierCaller     // Read-only binding to the contract
	BeaconVerifierTransactor // Write-only binding to the contract
	BeaconVerifierFilterer   // Log filterer for contract events
}

// BeaconVerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type BeaconVerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BeaconVerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BeaconVerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BeaconVerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BeaconVerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BeaconVerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BeaconVerifierSession struct {
	Contract     *BeaconVerifier   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BeaconVerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BeaconVerifierCallerSession struct {
	Contract *BeaconVerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// BeaconVerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BeaconVerifierTransactorSession struct {
	Contract     *BeaconVerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// BeaconVerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type BeaconVerifierRaw struct {
	Contract *BeaconVerifier // Generic contract binding to access the raw methods on
}

// BeaconVerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BeaconVerifierCallerRaw struct {
	Contract *BeaconVerifierCaller // Generic read-only contract binding to access the raw methods on
}

// BeaconVerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BeaconVerifierTransactorRaw struct {
	Contract *BeaconVerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBeaconVerifier creates a new instance of BeaconVerifier, bound to a specific deployed contract.
func NewBeaconVerifier(address common.Address, backend bind.ContractBackend) (*BeaconVerifier, error) {
	contract, err := bindBeaconVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BeaconVerifier{BeaconVerifierCaller: BeaconVerifierCaller{contract: contract}, BeaconVerifierTransactor: BeaconVerifierTransactor{contract: contract}, BeaconVerifierFilterer: BeaconVerifierFilterer{contract: contract}}, nil
}

// NewBeaconVerifierCaller creates a new read-only instance of BeaconVerifier, bound to a specific deployed contract.
func NewBeaconVerifierCaller(address common.Address, caller bind.ContractCaller) (*BeaconVerifierCaller, error) {
	contract, err := bindBeaconVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BeaconVerifierCaller{contract: contract}, nil
}

// NewBeaconVerifierTransactor creates a new write-only instance of BeaconVerifier, bound to a specific deployed contract.
func NewBeaconVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*BeaconVerifierTransactor, error) {
	contract, err := bindBeaconVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BeaconVerifierTransactor{contract: contract}, nil
}

// NewBeaconVerifierFilterer creates a new log filterer instance of BeaconVerifier, bound to a specific deployed contract.
func NewBeaconVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*BeaconVerifierFilterer, error) {
	contract, err := bindBeaconVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BeaconVerifierFilterer{contract: contract}, nil
}

// bindBeaconVerifier binds a generic wrapper to an already deployed contract.
func bindBeaconVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BeaconVerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BeaconVerifier *BeaconVerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BeaconVerifier.Contract.BeaconVerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BeaconVerifier *BeaconVerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BeaconVerifier.Contract.BeaconVerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BeaconVerifier *BeaconVerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BeaconVerifier.Contract.BeaconVerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BeaconVerifier *BeaconVerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BeaconVerifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BeaconVerifier *BeaconVerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BeaconVerifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BeaconVerifier *BeaconVerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BeaconVerifier.Contract.contract.Transact(opts, method, params...)
}

// VerifyBlsSigProof is a free data retrieval call binding the contract method 0x0cc26769.
//
// Solidity: function verifyBlsSigProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[2] commit, uint256[35] input) view returns(bool r)
func (_BeaconVerifier *BeaconVerifierCaller) VerifyBlsSigProof(opts *bind.CallOpts, a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, commit [2]*big.Int, input [35]*big.Int) (bool, error) {
	var out []interface{}
	err := _BeaconVerifier.contract.Call(opts, &out, "verifyBlsSigProof", a, b, c, commit, input)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyBlsSigProof is a free data retrieval call binding the contract method 0x0cc26769.
//
// Solidity: function verifyBlsSigProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[2] commit, uint256[35] input) view returns(bool r)
func (_BeaconVerifier *BeaconVerifierSession) VerifyBlsSigProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, commit [2]*big.Int, input [35]*big.Int) (bool, error) {
	return _BeaconVerifier.Contract.VerifyBlsSigProof(&_BeaconVerifier.CallOpts, a, b, c, commit, input)
}

// VerifyBlsSigProof is a free data retrieval call binding the contract method 0x0cc26769.
//
// Solidity: function verifyBlsSigProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[2] commit, uint256[35] input) view returns(bool r)
func (_BeaconVerifier *BeaconVerifierCallerSession) VerifyBlsSigProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, commit [2]*big.Int, input [35]*big.Int) (bool, error) {
	return _BeaconVerifier.Contract.VerifyBlsSigProof(&_BeaconVerifier.CallOpts, a, b, c, commit, input)
}

// VerifyCommitteeRootMappingProof is a free data retrieval call binding the contract method 0xab00dde6.
//
// Solidity: function verifyCommitteeRootMappingProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[33] input) view returns(bool r)
func (_BeaconVerifier *BeaconVerifierCaller) VerifyCommitteeRootMappingProof(opts *bind.CallOpts, a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [33]*big.Int) (bool, error) {
	var out []interface{}
	err := _BeaconVerifier.contract.Call(opts, &out, "verifyCommitteeRootMappingProof", a, b, c, input)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyCommitteeRootMappingProof is a free data retrieval call binding the contract method 0xab00dde6.
//
// Solidity: function verifyCommitteeRootMappingProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[33] input) view returns(bool r)
func (_BeaconVerifier *BeaconVerifierSession) VerifyCommitteeRootMappingProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [33]*big.Int) (bool, error) {
	return _BeaconVerifier.Contract.VerifyCommitteeRootMappingProof(&_BeaconVerifier.CallOpts, a, b, c, input)
}

// VerifyCommitteeRootMappingProof is a free data retrieval call binding the contract method 0xab00dde6.
//
// Solidity: function verifyCommitteeRootMappingProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[33] input) view returns(bool r)
func (_BeaconVerifier *BeaconVerifierCallerSession) VerifyCommitteeRootMappingProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [33]*big.Int) (bool, error) {
	return _BeaconVerifier.Contract.VerifyCommitteeRootMappingProof(&_BeaconVerifier.CallOpts, a, b, c, input)
}

// VerifySignatureProof is a free data retrieval call binding the contract method 0x52356da0.
//
// Solidity: function verifySignatureProof(bytes32 signingRoot, bytes32 syncCommitteePoseidonRoot, uint256 participation, uint256 commitment, (uint256[2],uint256[2][2],uint256[2],uint256[2]) p) view returns(bool)
func (_BeaconVerifier *BeaconVerifierCaller) VerifySignatureProof(opts *bind.CallOpts, signingRoot [32]byte, syncCommitteePoseidonRoot [32]byte, participation *big.Int, commitment *big.Int, p IBeaconVerifierProof) (bool, error) {
	var out []interface{}
	err := _BeaconVerifier.contract.Call(opts, &out, "verifySignatureProof", signingRoot, syncCommitteePoseidonRoot, participation, commitment, p)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifySignatureProof is a free data retrieval call binding the contract method 0x52356da0.
//
// Solidity: function verifySignatureProof(bytes32 signingRoot, bytes32 syncCommitteePoseidonRoot, uint256 participation, uint256 commitment, (uint256[2],uint256[2][2],uint256[2],uint256[2]) p) view returns(bool)
func (_BeaconVerifier *BeaconVerifierSession) VerifySignatureProof(signingRoot [32]byte, syncCommitteePoseidonRoot [32]byte, participation *big.Int, commitment *big.Int, p IBeaconVerifierProof) (bool, error) {
	return _BeaconVerifier.Contract.VerifySignatureProof(&_BeaconVerifier.CallOpts, signingRoot, syncCommitteePoseidonRoot, participation, commitment, p)
}

// VerifySignatureProof is a free data retrieval call binding the contract method 0x52356da0.
//
// Solidity: function verifySignatureProof(bytes32 signingRoot, bytes32 syncCommitteePoseidonRoot, uint256 participation, uint256 commitment, (uint256[2],uint256[2][2],uint256[2],uint256[2]) p) view returns(bool)
func (_BeaconVerifier *BeaconVerifierCallerSession) VerifySignatureProof(signingRoot [32]byte, syncCommitteePoseidonRoot [32]byte, participation *big.Int, commitment *big.Int, p IBeaconVerifierProof) (bool, error) {
	return _BeaconVerifier.Contract.VerifySignatureProof(&_BeaconVerifier.CallOpts, signingRoot, syncCommitteePoseidonRoot, participation, commitment, p)
}

// VerifySyncCommitteeRootMappingProof is a free data retrieval call binding the contract method 0x7a538781.
//
// Solidity: function verifySyncCommitteeRootMappingProof(bytes32 sszRoot, bytes32 poseidonRoot, (uint256[2],uint256[2][2],uint256[2],uint256[2]) p) view returns(bool)
func (_BeaconVerifier *BeaconVerifierCaller) VerifySyncCommitteeRootMappingProof(opts *bind.CallOpts, sszRoot [32]byte, poseidonRoot [32]byte, p IBeaconVerifierProof) (bool, error) {
	var out []interface{}
	err := _BeaconVerifier.contract.Call(opts, &out, "verifySyncCommitteeRootMappingProof", sszRoot, poseidonRoot, p)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifySyncCommitteeRootMappingProof is a free data retrieval call binding the contract method 0x7a538781.
//
// Solidity: function verifySyncCommitteeRootMappingProof(bytes32 sszRoot, bytes32 poseidonRoot, (uint256[2],uint256[2][2],uint256[2],uint256[2]) p) view returns(bool)
func (_BeaconVerifier *BeaconVerifierSession) VerifySyncCommitteeRootMappingProof(sszRoot [32]byte, poseidonRoot [32]byte, p IBeaconVerifierProof) (bool, error) {
	return _BeaconVerifier.Contract.VerifySyncCommitteeRootMappingProof(&_BeaconVerifier.CallOpts, sszRoot, poseidonRoot, p)
}

// VerifySyncCommitteeRootMappingProof is a free data retrieval call binding the contract method 0x7a538781.
//
// Solidity: function verifySyncCommitteeRootMappingProof(bytes32 sszRoot, bytes32 poseidonRoot, (uint256[2],uint256[2][2],uint256[2],uint256[2]) p) view returns(bool)
func (_BeaconVerifier *BeaconVerifierCallerSession) VerifySyncCommitteeRootMappingProof(sszRoot [32]byte, poseidonRoot [32]byte, p IBeaconVerifierProof) (bool, error) {
	return _BeaconVerifier.Contract.VerifySyncCommitteeRootMappingProof(&_BeaconVerifier.CallOpts, sszRoot, poseidonRoot, p)
}

// BitMathMetaData contains all meta data concerning the BitMath contract.
var BitMathMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212209ec64034fc56684b1f2b93ec66a292f982eaf1f2796c607da62d650d8689d61f64736f6c63430008150033",
}

// BitMathABI is the input ABI used to generate the binding from.
// Deprecated: Use BitMathMetaData.ABI instead.
var BitMathABI = BitMathMetaData.ABI

// BitMathBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BitMathMetaData.Bin instead.
var BitMathBin = BitMathMetaData.Bin

// DeployBitMath deploys a new Ethereum contract, binding an instance of BitMath to it.
func DeployBitMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BitMath, error) {
	parsed, err := BitMathMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BitMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BitMath{BitMathCaller: BitMathCaller{contract: contract}, BitMathTransactor: BitMathTransactor{contract: contract}, BitMathFilterer: BitMathFilterer{contract: contract}}, nil
}

// BitMath is an auto generated Go binding around an Ethereum contract.
type BitMath struct {
	BitMathCaller     // Read-only binding to the contract
	BitMathTransactor // Write-only binding to the contract
	BitMathFilterer   // Log filterer for contract events
}

// BitMathCaller is an auto generated read-only Go binding around an Ethereum contract.
type BitMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BitMathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BitMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BitMathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BitMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BitMathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BitMathSession struct {
	Contract     *BitMath          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BitMathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BitMathCallerSession struct {
	Contract *BitMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// BitMathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BitMathTransactorSession struct {
	Contract     *BitMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// BitMathRaw is an auto generated low-level Go binding around an Ethereum contract.
type BitMathRaw struct {
	Contract *BitMath // Generic contract binding to access the raw methods on
}

// BitMathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BitMathCallerRaw struct {
	Contract *BitMathCaller // Generic read-only contract binding to access the raw methods on
}

// BitMathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BitMathTransactorRaw struct {
	Contract *BitMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBitMath creates a new instance of BitMath, bound to a specific deployed contract.
func NewBitMath(address common.Address, backend bind.ContractBackend) (*BitMath, error) {
	contract, err := bindBitMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BitMath{BitMathCaller: BitMathCaller{contract: contract}, BitMathTransactor: BitMathTransactor{contract: contract}, BitMathFilterer: BitMathFilterer{contract: contract}}, nil
}

// NewBitMathCaller creates a new read-only instance of BitMath, bound to a specific deployed contract.
func NewBitMathCaller(address common.Address, caller bind.ContractCaller) (*BitMathCaller, error) {
	contract, err := bindBitMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BitMathCaller{contract: contract}, nil
}

// NewBitMathTransactor creates a new write-only instance of BitMath, bound to a specific deployed contract.
func NewBitMathTransactor(address common.Address, transactor bind.ContractTransactor) (*BitMathTransactor, error) {
	contract, err := bindBitMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BitMathTransactor{contract: contract}, nil
}

// NewBitMathFilterer creates a new log filterer instance of BitMath, bound to a specific deployed contract.
func NewBitMathFilterer(address common.Address, filterer bind.ContractFilterer) (*BitMathFilterer, error) {
	contract, err := bindBitMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BitMathFilterer{contract: contract}, nil
}

// bindBitMath binds a generic wrapper to an already deployed contract.
func bindBitMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BitMathMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BitMath *BitMathRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BitMath.Contract.BitMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BitMath *BitMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BitMath.Contract.BitMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BitMath *BitMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BitMath.Contract.BitMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BitMath *BitMathCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BitMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BitMath *BitMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BitMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BitMath *BitMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BitMath.Contract.contract.Transact(opts, method, params...)
}

// BlockChunksMetaData contains all meta data concerning the BlockChunks contract.
var BlockChunksMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdateAnchorBlockProvider\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"startBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"prevHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numFinal\",\"type\":\"uint32\"}],\"name\":\"UpdateEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdateVerifierAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"anchorBlockProviders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"startBlockNumber\",\"type\":\"uint32\"}],\"name\":\"historicalRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"blkNum\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"claimedBlkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"prevHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"numFinal\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[7]\",\"name\":\"merkleProof\",\"type\":\"bytes32[7]\"}],\"internalType\":\"structIBlockChunks.BlockHashWitness\",\"name\":\"witness\",\"type\":\"tuple\"}],\"name\":\"isBlockHashValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"updateAnchorBlockProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nextRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"nextNumFinal\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"}],\"name\":\"updateOld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"}],\"name\":\"updateRecent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_verifierAddress\",\"type\":\"address\"}],\"name\":\"updateVerifierAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"verifierAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6080806040523461005a575f8054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3610f16908161005f8239f35b5f80fdfe60406080815260049081361015610014575f80fd5b5f91823560e01c9081631d8441a1146109f557816350a26d48146107ac57816352cfc560146105a5578163544f73a4146103985781635d727e9714610357578163715018a6146102f75781638da5cb5b146102d1578163b551a1871461027a578163ec4ffc52146101c5578163f2fde38b146100dc575063f5cec6af14610099575f80fd5b346100d85760203660031901126100d8576001600160a01b038160209367ffffffffffffffff6100c7610aa4565b168152600185522054169051908152f35b5080fd5b919050346101c15760203660031901126101c1578135916001600160a01b03908184168094036101bd57845491821692610117338514610b03565b84156101545750506001600160a01b031916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8480fd5b8280fd5b5050346100d857806003193601126100d8577ffd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f90610201610aa4565b61027461020c610abf565b926001600160a01b03610223818854163314610b03565b67ffffffffffffffff8416875260016020528187209085166001600160a01b031982541617905551928392839092916001600160a01b0360209167ffffffffffffffff604085019616845216910152565b0390a180f35b5050346100d857806003193601126100d857610294610aa4565b6024359063ffffffff82168092036102cd5792829167ffffffffffffffff60209516825260038552828220908252845220549051908152f35b8380fd5b5050346100d857816003193601126100d8576001600160a01b0360209254169051908152f35b83346103545780600319360112610354578080546001600160a01b03196001600160a01b0382169161032a338414610b03565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b5050346100d85760203660031901126100d8576001600160a01b038160209367ffffffffffffffff610387610aa4565b168152600285522054169051908152f35b839150346100d8576101803660031901126100d857604435801561056257607f6103c0610ea7565b16936103d3856103ce610ea7565b610b4e565b833567ffffffffffffffff8116810361055e57906104149167ffffffffffffffff165f52600360205263ffffffff60405f2091165f5260205260405f205490565b91821561051b579184925b60ff841660078110156104b55787811c6001166104875761043f90610eba565b35835190602082019283528482015283815261045a81610c10565b519020925b60ff809116908114610474576001019261041f565b634e487b7160e01b865260118552602486fd5b61049090610eba565b359083519060208201928352848201528381526104ac81610c10565b5190209261045f565b5060843593508563ffffffff8516850361035457506105026105106020958551928391888301956064358791604493918352602083015263ffffffff60e01b9060e01b1660408201520190565b03601f198101835282610c40565b519020149051908152f35b815162461bcd60e51b8152602081860152601a60248201527f626c6b20686973746f7279206e6f742073746f726564207965740000000000006044820152606490fd5b8580fd5b835162461bcd60e51b8152602081840152601a60248201527f636c61696d6564426c6b48617368206e6f742070726573656e740000000000006044820152606490fd5b8383346100d85760803660031901126100d8576105c0610aa4565b60443563ffffffff9283821682036101bd5767ffffffffffffffff6064358181116107a857859291906105f69036908a01610ad5565b61060281839993610e12565b8682607f819f979d969c94161561061890610bc4565b6106229083610b4e565b16607f1461062f90610b78565b16600101858111610794576102749896948b9a98969461070a6106ed957fa946b3d79b3150fec8e4d9ccc6100de98308a472f1ba57d23aeda162bb86e33e9f9e956106a4610710966107159867ffffffffffffffff165f52600360205263ffffffff60405f2091165f5260205260405f205490565b8b5160208101928352602435604082015260e09390931b7fffffffff00000000000000000000000000000000000000000000000000000000166060840152919788906064820190565b0397610701601f19998a8101835282610c40565b51902014610c62565b8b610cfa565b610cae565b83516020810186815260408201889052600160e71b606083015260649283018252916107419082610c40565b5190209187168a526003602052828a209088168a5260205281892055519485948590949360809363ffffffff859467ffffffffffffffff60a0860199168552166020840152604083015260608201520152565b50634e487b7160e01b8c5260118d5260248cfd5b8680fd5b919050346101c157806003193601126101c1576107c7610aa4565b67ffffffffffffffff9260243584811161055e576107e89036908301610ad5565b9190936107f58386610e12565b929593969163ffffffff9991999a8b8b1694608086018d81116109e2578d165f1901908d82116109e2578d169c8e959493929161083491168e14610b78565b610841607f8d1615610bc4565b8a169586855287602095600287526001600160a01b039182912054161561099f579085918f808a8c92526002855220541689519e8f9263f25b3f9960e01b8452830152815a91602492fa9b8c15610995578d9c61094a575b50610274989796959493926108d79261070a610710937fa946b3d79b3150fec8e4d9ccc6100de98308a472f1ba57d23aeda162bb86e33e9f14610c62565b835181810186815260208101889052600160e71b6040820152906108fe8160448401610502565b519020928b5260038152838b20918b525281892055519485948590949360809363ffffffff859467ffffffffffffffff60a0860199168552166020840152604083015260608201520152565b9198979695949380939c5082813d831161098e575b6109698183610c40565b8101031261098a5790519a9697959694959394929391929190610274610899565b8c80fd5b503d61095f565b87513d8f823e3d90fd5b885162461bcd60e51b8152808301879052601d60248201527f636861696e20616e63686f722070726f7669646572206e6f74207365740000006044820152606490fd5b634e487b7160e01b8f526011885260248ffd5b5050346100d857806003193601126100d8577f4b8c49e37c813f3cbe140bc7b6a5662bd14e48311b5864c106ca3f9c4a2bc02b90610a31610aa4565b610274610a3c610abf565b926001600160a01b03610a53818854163314610b03565b67ffffffffffffffff8416875260026020528187209085166001600160a01b031982541617905551928392839092916001600160a01b0360209167ffffffffffffffff604085019616845216910152565b6004359067ffffffffffffffff82168203610abb57565b5f80fd5b602435906001600160a01b0382168203610abb57565b9181601f84011215610abb5782359167ffffffffffffffff8311610abb5760208381860195010111610abb57565b15610b0a57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b63ffffffff9182169082160391908211610b6457565b634e487b7160e01b5f52601160045260245ffd5b15610b7f57565b60405162461bcd60e51b815260206004820152600d60248201527f6e6565642031323820626c6b73000000000000000000000000000000000000006044820152606490fd5b15610bcb57565b60405162461bcd60e51b815260206004820152601460248201527f6e6565642073746172742066726f6d20313238780000000000000000000000006044820152606490fd5b6060810190811067ffffffffffffffff821117610c2c57604052565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff821117610c2c57604052565b15610c6957565b60405162461bcd60e51b815260206004820152601360248201527f656e6448617368206e6f7420636f7272656374000000000000000000000000006044820152606490fd5b15610cb557565b60405162461bcd60e51b815260206004820152600f60248201527f70726f6f66206e6f742076616c696400000000000000000000000000000000006044820152606490fd5b67ffffffffffffffff16915f91838352602093600185526001600160a01b03908160408620541615610dcd5791839186938652600184526040862054169060446040518096819582946322bb937360e11b8452886004850152816024850152848401378181018301899052601f01601f191681010301915afa928315610dc2578293610d87575b50505090565b9080929350813d8311610dbb575b610d9f8183610c40565b810103126100d8575190811515820361035457505f8080610d81565b503d610d95565b6040513d84823e3d90fd5b60405162461bcd60e51b815260048101879052601660248201527f636861696e207665726966696572206e6f7420736574000000000000000000006044820152606490fd5b8161016011610abb5760809161018093818511610abb57610170830135841c610140840135851b1794826101a011610abb576101c090838211610abb576101b0850135861c90850135861b1794836101e011610abb578361020011610abb576101f0850135811c91850135901b17928261022011610abb5761021c81013560e01c9261024011610abb5761023c013560e01c90565b60243563ffffffff81168103610abb5790565b6007811015610ecc5760051b60a40190565b634e487b7160e01b5f52603260045260245ffdfea264697066735822122036a604354677dbc091be0839b069105be6de2f243c97f995e5561bc41724daf464736f6c63430008150033",
}

// BlockChunksABI is the input ABI used to generate the binding from.
// Deprecated: Use BlockChunksMetaData.ABI instead.
var BlockChunksABI = BlockChunksMetaData.ABI

// BlockChunksBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BlockChunksMetaData.Bin instead.
var BlockChunksBin = BlockChunksMetaData.Bin

// DeployBlockChunks deploys a new Ethereum contract, binding an instance of BlockChunks to it.
func DeployBlockChunks(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BlockChunks, error) {
	parsed, err := BlockChunksMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BlockChunksBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BlockChunks{BlockChunksCaller: BlockChunksCaller{contract: contract}, BlockChunksTransactor: BlockChunksTransactor{contract: contract}, BlockChunksFilterer: BlockChunksFilterer{contract: contract}}, nil
}

// BlockChunks is an auto generated Go binding around an Ethereum contract.
type BlockChunks struct {
	BlockChunksCaller     // Read-only binding to the contract
	BlockChunksTransactor // Write-only binding to the contract
	BlockChunksFilterer   // Log filterer for contract events
}

// BlockChunksCaller is an auto generated read-only Go binding around an Ethereum contract.
type BlockChunksCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BlockChunksTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BlockChunksTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BlockChunksFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BlockChunksFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BlockChunksSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BlockChunksSession struct {
	Contract     *BlockChunks      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BlockChunksCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BlockChunksCallerSession struct {
	Contract *BlockChunksCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// BlockChunksTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BlockChunksTransactorSession struct {
	Contract     *BlockChunksTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// BlockChunksRaw is an auto generated low-level Go binding around an Ethereum contract.
type BlockChunksRaw struct {
	Contract *BlockChunks // Generic contract binding to access the raw methods on
}

// BlockChunksCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BlockChunksCallerRaw struct {
	Contract *BlockChunksCaller // Generic read-only contract binding to access the raw methods on
}

// BlockChunksTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BlockChunksTransactorRaw struct {
	Contract *BlockChunksTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBlockChunks creates a new instance of BlockChunks, bound to a specific deployed contract.
func NewBlockChunks(address common.Address, backend bind.ContractBackend) (*BlockChunks, error) {
	contract, err := bindBlockChunks(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BlockChunks{BlockChunksCaller: BlockChunksCaller{contract: contract}, BlockChunksTransactor: BlockChunksTransactor{contract: contract}, BlockChunksFilterer: BlockChunksFilterer{contract: contract}}, nil
}

// NewBlockChunksCaller creates a new read-only instance of BlockChunks, bound to a specific deployed contract.
func NewBlockChunksCaller(address common.Address, caller bind.ContractCaller) (*BlockChunksCaller, error) {
	contract, err := bindBlockChunks(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BlockChunksCaller{contract: contract}, nil
}

// NewBlockChunksTransactor creates a new write-only instance of BlockChunks, bound to a specific deployed contract.
func NewBlockChunksTransactor(address common.Address, transactor bind.ContractTransactor) (*BlockChunksTransactor, error) {
	contract, err := bindBlockChunks(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BlockChunksTransactor{contract: contract}, nil
}

// NewBlockChunksFilterer creates a new log filterer instance of BlockChunks, bound to a specific deployed contract.
func NewBlockChunksFilterer(address common.Address, filterer bind.ContractFilterer) (*BlockChunksFilterer, error) {
	contract, err := bindBlockChunks(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BlockChunksFilterer{contract: contract}, nil
}

// bindBlockChunks binds a generic wrapper to an already deployed contract.
func bindBlockChunks(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BlockChunksMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BlockChunks *BlockChunksRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BlockChunks.Contract.BlockChunksCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BlockChunks *BlockChunksRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlockChunks.Contract.BlockChunksTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BlockChunks *BlockChunksRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BlockChunks.Contract.BlockChunksTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BlockChunks *BlockChunksCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BlockChunks.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BlockChunks *BlockChunksTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlockChunks.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BlockChunks *BlockChunksTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BlockChunks.Contract.contract.Transact(opts, method, params...)
}

// AnchorBlockProviders is a free data retrieval call binding the contract method 0x5d727e97.
//
// Solidity: function anchorBlockProviders(uint64 ) view returns(address)
func (_BlockChunks *BlockChunksCaller) AnchorBlockProviders(opts *bind.CallOpts, arg0 uint64) (common.Address, error) {
	var out []interface{}
	err := _BlockChunks.contract.Call(opts, &out, "anchorBlockProviders", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AnchorBlockProviders is a free data retrieval call binding the contract method 0x5d727e97.
//
// Solidity: function anchorBlockProviders(uint64 ) view returns(address)
func (_BlockChunks *BlockChunksSession) AnchorBlockProviders(arg0 uint64) (common.Address, error) {
	return _BlockChunks.Contract.AnchorBlockProviders(&_BlockChunks.CallOpts, arg0)
}

// AnchorBlockProviders is a free data retrieval call binding the contract method 0x5d727e97.
//
// Solidity: function anchorBlockProviders(uint64 ) view returns(address)
func (_BlockChunks *BlockChunksCallerSession) AnchorBlockProviders(arg0 uint64) (common.Address, error) {
	return _BlockChunks.Contract.AnchorBlockProviders(&_BlockChunks.CallOpts, arg0)
}

// HistoricalRoots is a free data retrieval call binding the contract method 0xb551a187.
//
// Solidity: function historicalRoots(uint64 chainId, uint32 startBlockNumber) view returns(bytes32)
func (_BlockChunks *BlockChunksCaller) HistoricalRoots(opts *bind.CallOpts, chainId uint64, startBlockNumber uint32) ([32]byte, error) {
	var out []interface{}
	err := _BlockChunks.contract.Call(opts, &out, "historicalRoots", chainId, startBlockNumber)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// HistoricalRoots is a free data retrieval call binding the contract method 0xb551a187.
//
// Solidity: function historicalRoots(uint64 chainId, uint32 startBlockNumber) view returns(bytes32)
func (_BlockChunks *BlockChunksSession) HistoricalRoots(chainId uint64, startBlockNumber uint32) ([32]byte, error) {
	return _BlockChunks.Contract.HistoricalRoots(&_BlockChunks.CallOpts, chainId, startBlockNumber)
}

// HistoricalRoots is a free data retrieval call binding the contract method 0xb551a187.
//
// Solidity: function historicalRoots(uint64 chainId, uint32 startBlockNumber) view returns(bytes32)
func (_BlockChunks *BlockChunksCallerSession) HistoricalRoots(chainId uint64, startBlockNumber uint32) ([32]byte, error) {
	return _BlockChunks.Contract.HistoricalRoots(&_BlockChunks.CallOpts, chainId, startBlockNumber)
}

// IsBlockHashValid is a free data retrieval call binding the contract method 0x544f73a4.
//
// Solidity: function isBlockHashValid((uint64,uint32,bytes32,bytes32,uint32,bytes32[7]) witness) view returns(bool)
func (_BlockChunks *BlockChunksCaller) IsBlockHashValid(opts *bind.CallOpts, witness IBlockChunksBlockHashWitness) (bool, error) {
	var out []interface{}
	err := _BlockChunks.contract.Call(opts, &out, "isBlockHashValid", witness)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBlockHashValid is a free data retrieval call binding the contract method 0x544f73a4.
//
// Solidity: function isBlockHashValid((uint64,uint32,bytes32,bytes32,uint32,bytes32[7]) witness) view returns(bool)
func (_BlockChunks *BlockChunksSession) IsBlockHashValid(witness IBlockChunksBlockHashWitness) (bool, error) {
	return _BlockChunks.Contract.IsBlockHashValid(&_BlockChunks.CallOpts, witness)
}

// IsBlockHashValid is a free data retrieval call binding the contract method 0x544f73a4.
//
// Solidity: function isBlockHashValid((uint64,uint32,bytes32,bytes32,uint32,bytes32[7]) witness) view returns(bool)
func (_BlockChunks *BlockChunksCallerSession) IsBlockHashValid(witness IBlockChunksBlockHashWitness) (bool, error) {
	return _BlockChunks.Contract.IsBlockHashValid(&_BlockChunks.CallOpts, witness)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BlockChunks *BlockChunksCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BlockChunks.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BlockChunks *BlockChunksSession) Owner() (common.Address, error) {
	return _BlockChunks.Contract.Owner(&_BlockChunks.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BlockChunks *BlockChunksCallerSession) Owner() (common.Address, error) {
	return _BlockChunks.Contract.Owner(&_BlockChunks.CallOpts)
}

// VerifierAddresses is a free data retrieval call binding the contract method 0xf5cec6af.
//
// Solidity: function verifierAddresses(uint64 ) view returns(address)
func (_BlockChunks *BlockChunksCaller) VerifierAddresses(opts *bind.CallOpts, arg0 uint64) (common.Address, error) {
	var out []interface{}
	err := _BlockChunks.contract.Call(opts, &out, "verifierAddresses", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VerifierAddresses is a free data retrieval call binding the contract method 0xf5cec6af.
//
// Solidity: function verifierAddresses(uint64 ) view returns(address)
func (_BlockChunks *BlockChunksSession) VerifierAddresses(arg0 uint64) (common.Address, error) {
	return _BlockChunks.Contract.VerifierAddresses(&_BlockChunks.CallOpts, arg0)
}

// VerifierAddresses is a free data retrieval call binding the contract method 0xf5cec6af.
//
// Solidity: function verifierAddresses(uint64 ) view returns(address)
func (_BlockChunks *BlockChunksCallerSession) VerifierAddresses(arg0 uint64) (common.Address, error) {
	return _BlockChunks.Contract.VerifierAddresses(&_BlockChunks.CallOpts, arg0)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BlockChunks *BlockChunksTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlockChunks.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BlockChunks *BlockChunksSession) RenounceOwnership() (*types.Transaction, error) {
	return _BlockChunks.Contract.RenounceOwnership(&_BlockChunks.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BlockChunks *BlockChunksTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BlockChunks.Contract.RenounceOwnership(&_BlockChunks.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BlockChunks *BlockChunksTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BlockChunks.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BlockChunks *BlockChunksSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BlockChunks.Contract.TransferOwnership(&_BlockChunks.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BlockChunks *BlockChunksTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BlockChunks.Contract.TransferOwnership(&_BlockChunks.TransactOpts, newOwner)
}

// UpdateAnchorBlockProvider is a paid mutator transaction binding the contract method 0x1d8441a1.
//
// Solidity: function updateAnchorBlockProvider(uint64 _chainId, address _provider) returns()
func (_BlockChunks *BlockChunksTransactor) UpdateAnchorBlockProvider(opts *bind.TransactOpts, _chainId uint64, _provider common.Address) (*types.Transaction, error) {
	return _BlockChunks.contract.Transact(opts, "updateAnchorBlockProvider", _chainId, _provider)
}

// UpdateAnchorBlockProvider is a paid mutator transaction binding the contract method 0x1d8441a1.
//
// Solidity: function updateAnchorBlockProvider(uint64 _chainId, address _provider) returns()
func (_BlockChunks *BlockChunksSession) UpdateAnchorBlockProvider(_chainId uint64, _provider common.Address) (*types.Transaction, error) {
	return _BlockChunks.Contract.UpdateAnchorBlockProvider(&_BlockChunks.TransactOpts, _chainId, _provider)
}

// UpdateAnchorBlockProvider is a paid mutator transaction binding the contract method 0x1d8441a1.
//
// Solidity: function updateAnchorBlockProvider(uint64 _chainId, address _provider) returns()
func (_BlockChunks *BlockChunksTransactorSession) UpdateAnchorBlockProvider(_chainId uint64, _provider common.Address) (*types.Transaction, error) {
	return _BlockChunks.Contract.UpdateAnchorBlockProvider(&_BlockChunks.TransactOpts, _chainId, _provider)
}

// UpdateOld is a paid mutator transaction binding the contract method 0x52cfc560.
//
// Solidity: function updateOld(uint64 chainId, bytes32 nextRoot, uint32 nextNumFinal, bytes proofData) returns()
func (_BlockChunks *BlockChunksTransactor) UpdateOld(opts *bind.TransactOpts, chainId uint64, nextRoot [32]byte, nextNumFinal uint32, proofData []byte) (*types.Transaction, error) {
	return _BlockChunks.contract.Transact(opts, "updateOld", chainId, nextRoot, nextNumFinal, proofData)
}

// UpdateOld is a paid mutator transaction binding the contract method 0x52cfc560.
//
// Solidity: function updateOld(uint64 chainId, bytes32 nextRoot, uint32 nextNumFinal, bytes proofData) returns()
func (_BlockChunks *BlockChunksSession) UpdateOld(chainId uint64, nextRoot [32]byte, nextNumFinal uint32, proofData []byte) (*types.Transaction, error) {
	return _BlockChunks.Contract.UpdateOld(&_BlockChunks.TransactOpts, chainId, nextRoot, nextNumFinal, proofData)
}

// UpdateOld is a paid mutator transaction binding the contract method 0x52cfc560.
//
// Solidity: function updateOld(uint64 chainId, bytes32 nextRoot, uint32 nextNumFinal, bytes proofData) returns()
func (_BlockChunks *BlockChunksTransactorSession) UpdateOld(chainId uint64, nextRoot [32]byte, nextNumFinal uint32, proofData []byte) (*types.Transaction, error) {
	return _BlockChunks.Contract.UpdateOld(&_BlockChunks.TransactOpts, chainId, nextRoot, nextNumFinal, proofData)
}

// UpdateRecent is a paid mutator transaction binding the contract method 0x50a26d48.
//
// Solidity: function updateRecent(uint64 chainId, bytes proofData) returns()
func (_BlockChunks *BlockChunksTransactor) UpdateRecent(opts *bind.TransactOpts, chainId uint64, proofData []byte) (*types.Transaction, error) {
	return _BlockChunks.contract.Transact(opts, "updateRecent", chainId, proofData)
}

// UpdateRecent is a paid mutator transaction binding the contract method 0x50a26d48.
//
// Solidity: function updateRecent(uint64 chainId, bytes proofData) returns()
func (_BlockChunks *BlockChunksSession) UpdateRecent(chainId uint64, proofData []byte) (*types.Transaction, error) {
	return _BlockChunks.Contract.UpdateRecent(&_BlockChunks.TransactOpts, chainId, proofData)
}

// UpdateRecent is a paid mutator transaction binding the contract method 0x50a26d48.
//
// Solidity: function updateRecent(uint64 chainId, bytes proofData) returns()
func (_BlockChunks *BlockChunksTransactorSession) UpdateRecent(chainId uint64, proofData []byte) (*types.Transaction, error) {
	return _BlockChunks.Contract.UpdateRecent(&_BlockChunks.TransactOpts, chainId, proofData)
}

// UpdateVerifierAddress is a paid mutator transaction binding the contract method 0xec4ffc52.
//
// Solidity: function updateVerifierAddress(uint64 _chainId, address _verifierAddress) returns()
func (_BlockChunks *BlockChunksTransactor) UpdateVerifierAddress(opts *bind.TransactOpts, _chainId uint64, _verifierAddress common.Address) (*types.Transaction, error) {
	return _BlockChunks.contract.Transact(opts, "updateVerifierAddress", _chainId, _verifierAddress)
}

// UpdateVerifierAddress is a paid mutator transaction binding the contract method 0xec4ffc52.
//
// Solidity: function updateVerifierAddress(uint64 _chainId, address _verifierAddress) returns()
func (_BlockChunks *BlockChunksSession) UpdateVerifierAddress(_chainId uint64, _verifierAddress common.Address) (*types.Transaction, error) {
	return _BlockChunks.Contract.UpdateVerifierAddress(&_BlockChunks.TransactOpts, _chainId, _verifierAddress)
}

// UpdateVerifierAddress is a paid mutator transaction binding the contract method 0xec4ffc52.
//
// Solidity: function updateVerifierAddress(uint64 _chainId, address _verifierAddress) returns()
func (_BlockChunks *BlockChunksTransactorSession) UpdateVerifierAddress(_chainId uint64, _verifierAddress common.Address) (*types.Transaction, error) {
	return _BlockChunks.Contract.UpdateVerifierAddress(&_BlockChunks.TransactOpts, _chainId, _verifierAddress)
}

// BlockChunksOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the BlockChunks contract.
type BlockChunksOwnershipTransferredIterator struct {
	Event *BlockChunksOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlockChunksOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlockChunksOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlockChunksOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlockChunksOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlockChunksOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlockChunksOwnershipTransferred represents a OwnershipTransferred event raised by the BlockChunks contract.
type BlockChunksOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BlockChunks *BlockChunksFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BlockChunksOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BlockChunks.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BlockChunksOwnershipTransferredIterator{contract: _BlockChunks.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BlockChunks *BlockChunksFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BlockChunksOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BlockChunks.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlockChunksOwnershipTransferred)
				if err := _BlockChunks.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BlockChunks *BlockChunksFilterer) ParseOwnershipTransferred(log types.Log) (*BlockChunksOwnershipTransferred, error) {
	event := new(BlockChunksOwnershipTransferred)
	if err := _BlockChunks.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BlockChunksUpdateAnchorBlockProviderIterator is returned from FilterUpdateAnchorBlockProvider and is used to iterate over the raw logs and unpacked data for UpdateAnchorBlockProvider events raised by the BlockChunks contract.
type BlockChunksUpdateAnchorBlockProviderIterator struct {
	Event *BlockChunksUpdateAnchorBlockProvider // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlockChunksUpdateAnchorBlockProviderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlockChunksUpdateAnchorBlockProvider)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlockChunksUpdateAnchorBlockProvider)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlockChunksUpdateAnchorBlockProviderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlockChunksUpdateAnchorBlockProviderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlockChunksUpdateAnchorBlockProvider represents a UpdateAnchorBlockProvider event raised by the BlockChunks contract.
type BlockChunksUpdateAnchorBlockProvider struct {
	ChainId    uint64
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateAnchorBlockProvider is a free log retrieval operation binding the contract event 0x4b8c49e37c813f3cbe140bc7b6a5662bd14e48311b5864c106ca3f9c4a2bc02b.
//
// Solidity: event UpdateAnchorBlockProvider(uint64 chainId, address newAddress)
func (_BlockChunks *BlockChunksFilterer) FilterUpdateAnchorBlockProvider(opts *bind.FilterOpts) (*BlockChunksUpdateAnchorBlockProviderIterator, error) {

	logs, sub, err := _BlockChunks.contract.FilterLogs(opts, "UpdateAnchorBlockProvider")
	if err != nil {
		return nil, err
	}
	return &BlockChunksUpdateAnchorBlockProviderIterator{contract: _BlockChunks.contract, event: "UpdateAnchorBlockProvider", logs: logs, sub: sub}, nil
}

// WatchUpdateAnchorBlockProvider is a free log subscription operation binding the contract event 0x4b8c49e37c813f3cbe140bc7b6a5662bd14e48311b5864c106ca3f9c4a2bc02b.
//
// Solidity: event UpdateAnchorBlockProvider(uint64 chainId, address newAddress)
func (_BlockChunks *BlockChunksFilterer) WatchUpdateAnchorBlockProvider(opts *bind.WatchOpts, sink chan<- *BlockChunksUpdateAnchorBlockProvider) (event.Subscription, error) {

	logs, sub, err := _BlockChunks.contract.WatchLogs(opts, "UpdateAnchorBlockProvider")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlockChunksUpdateAnchorBlockProvider)
				if err := _BlockChunks.contract.UnpackLog(event, "UpdateAnchorBlockProvider", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateAnchorBlockProvider is a log parse operation binding the contract event 0x4b8c49e37c813f3cbe140bc7b6a5662bd14e48311b5864c106ca3f9c4a2bc02b.
//
// Solidity: event UpdateAnchorBlockProvider(uint64 chainId, address newAddress)
func (_BlockChunks *BlockChunksFilterer) ParseUpdateAnchorBlockProvider(log types.Log) (*BlockChunksUpdateAnchorBlockProvider, error) {
	event := new(BlockChunksUpdateAnchorBlockProvider)
	if err := _BlockChunks.contract.UnpackLog(event, "UpdateAnchorBlockProvider", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BlockChunksUpdateEventIterator is returned from FilterUpdateEvent and is used to iterate over the raw logs and unpacked data for UpdateEvent events raised by the BlockChunks contract.
type BlockChunksUpdateEventIterator struct {
	Event *BlockChunksUpdateEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlockChunksUpdateEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlockChunksUpdateEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlockChunksUpdateEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlockChunksUpdateEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlockChunksUpdateEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlockChunksUpdateEvent represents a UpdateEvent event raised by the BlockChunks contract.
type BlockChunksUpdateEvent struct {
	ChainId          uint64
	StartBlockNumber uint32
	PrevHash         [32]byte
	Root             [32]byte
	NumFinal         uint32
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterUpdateEvent is a free log retrieval operation binding the contract event 0xa946b3d79b3150fec8e4d9ccc6100de98308a472f1ba57d23aeda162bb86e33e.
//
// Solidity: event UpdateEvent(uint64 chainId, uint32 startBlockNumber, bytes32 prevHash, bytes32 root, uint32 numFinal)
func (_BlockChunks *BlockChunksFilterer) FilterUpdateEvent(opts *bind.FilterOpts) (*BlockChunksUpdateEventIterator, error) {

	logs, sub, err := _BlockChunks.contract.FilterLogs(opts, "UpdateEvent")
	if err != nil {
		return nil, err
	}
	return &BlockChunksUpdateEventIterator{contract: _BlockChunks.contract, event: "UpdateEvent", logs: logs, sub: sub}, nil
}

// WatchUpdateEvent is a free log subscription operation binding the contract event 0xa946b3d79b3150fec8e4d9ccc6100de98308a472f1ba57d23aeda162bb86e33e.
//
// Solidity: event UpdateEvent(uint64 chainId, uint32 startBlockNumber, bytes32 prevHash, bytes32 root, uint32 numFinal)
func (_BlockChunks *BlockChunksFilterer) WatchUpdateEvent(opts *bind.WatchOpts, sink chan<- *BlockChunksUpdateEvent) (event.Subscription, error) {

	logs, sub, err := _BlockChunks.contract.WatchLogs(opts, "UpdateEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlockChunksUpdateEvent)
				if err := _BlockChunks.contract.UnpackLog(event, "UpdateEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateEvent is a log parse operation binding the contract event 0xa946b3d79b3150fec8e4d9ccc6100de98308a472f1ba57d23aeda162bb86e33e.
//
// Solidity: event UpdateEvent(uint64 chainId, uint32 startBlockNumber, bytes32 prevHash, bytes32 root, uint32 numFinal)
func (_BlockChunks *BlockChunksFilterer) ParseUpdateEvent(log types.Log) (*BlockChunksUpdateEvent, error) {
	event := new(BlockChunksUpdateEvent)
	if err := _BlockChunks.contract.UnpackLog(event, "UpdateEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BlockChunksUpdateVerifierAddressIterator is returned from FilterUpdateVerifierAddress and is used to iterate over the raw logs and unpacked data for UpdateVerifierAddress events raised by the BlockChunks contract.
type BlockChunksUpdateVerifierAddressIterator struct {
	Event *BlockChunksUpdateVerifierAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BlockChunksUpdateVerifierAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BlockChunksUpdateVerifierAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BlockChunksUpdateVerifierAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BlockChunksUpdateVerifierAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BlockChunksUpdateVerifierAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BlockChunksUpdateVerifierAddress represents a UpdateVerifierAddress event raised by the BlockChunks contract.
type BlockChunksUpdateVerifierAddress struct {
	ChainId    uint64
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateVerifierAddress is a free log retrieval operation binding the contract event 0xfd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f.
//
// Solidity: event UpdateVerifierAddress(uint64 chainId, address newAddress)
func (_BlockChunks *BlockChunksFilterer) FilterUpdateVerifierAddress(opts *bind.FilterOpts) (*BlockChunksUpdateVerifierAddressIterator, error) {

	logs, sub, err := _BlockChunks.contract.FilterLogs(opts, "UpdateVerifierAddress")
	if err != nil {
		return nil, err
	}
	return &BlockChunksUpdateVerifierAddressIterator{contract: _BlockChunks.contract, event: "UpdateVerifierAddress", logs: logs, sub: sub}, nil
}

// WatchUpdateVerifierAddress is a free log subscription operation binding the contract event 0xfd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f.
//
// Solidity: event UpdateVerifierAddress(uint64 chainId, address newAddress)
func (_BlockChunks *BlockChunksFilterer) WatchUpdateVerifierAddress(opts *bind.WatchOpts, sink chan<- *BlockChunksUpdateVerifierAddress) (event.Subscription, error) {

	logs, sub, err := _BlockChunks.contract.WatchLogs(opts, "UpdateVerifierAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BlockChunksUpdateVerifierAddress)
				if err := _BlockChunks.contract.UnpackLog(event, "UpdateVerifierAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateVerifierAddress is a log parse operation binding the contract event 0xfd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f.
//
// Solidity: event UpdateVerifierAddress(uint64 chainId, address newAddress)
func (_BlockChunks *BlockChunksFilterer) ParseUpdateVerifierAddress(log types.Log) (*BlockChunksUpdateVerifierAddress, error) {
	event := new(BlockChunksUpdateVerifierAddress)
	if err := _BlockChunks.contract.UnpackLog(event, "UpdateVerifierAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BlsSigVerifierMetaData contains all meta data concerning the BlsSigVerifier contract.
var BlsSigVerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commit\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[35]\",\"name\":\"input\",\"type\":\"uint256[35]\"}],\"name\":\"verifyBlsSigProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6080806040523461001657611bfb908161001b8239f35b5f80fdfe6040608081526004361015610012575f80fd5b5f803560e01c630cc2676914610026575f80fd5b346100c4576105a03660031901126100c45761004136610120565b9036606312156100c4576100536100db565b908160c4913683116100c457506044905b8282106100ab576100a786610096878761007d36610161565b6100863661019f565b916100903661021f565b93610651565b905190151581529081906020820190565b0390f35b602086916100b936856101df565b815201910190610064565b80fd5b634e487b7160e01b5f52604160045260245ffd5b604051906040820182811067ffffffffffffffff8211176100fb57604052565b6100c7565b604051906080820182811067ffffffffffffffff8211176100fb57604052565b806023121561015d576101316100db565b9081604491821161015d576004905b82821061014d5750505090565b8135815260209182019101610140565b5f80fd5b8060e3121561015d576101726100db565b908161010491821161015d5760c4905b82821061018f5750505090565b8135815260209182019101610182565b80610123121561015d576101b16100db565b908161014491821161015d57610104905b8282106101cf5750505090565b81358152602091820191016101c2565b9080601f8301121561015d576101f36100db565b80926040810192831161015d57905b82821061020f5750505090565b8135815260209182019101610202565b80610163121561015d5760405190610460820182811067ffffffffffffffff8211176100fb57604052816105a491821161015d57610144905b8282106102655750505090565b8135815260209182019101610258565b61027d610100565b906080368337565b604051906060820182811067ffffffffffffffff8211176100fb576040526060368337565b604051906020820182811067ffffffffffffffff8211176100fb576040526020368337565b6102d76100db565b906102e06100db565b604036823782526102ef6100db565b60403682376020830152565b610303610100565b9061030c6100db565b5f9081815281602082015283526103216102cf565b602084015261032e6100db565b81815281602082015260408401526103446100db565b9080825260208201526060830152565b634e487b7160e01b5f52603260045260245ffd5b1561036f57565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61582d6774652d7072696d652d710000000000000000006044820152606490fd5b156103bb57565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61592d6774652d7072696d652d710000000000000000006044820152606490fd5b1561040757565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258302d6774652d7072696d652d7100000000000000006044820152606490fd5b1561045357565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259302d6774652d7072696d652d7100000000000000006044820152606490fd5b1561049f57565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258312d6774652d7072696d652d7100000000000000006044820152606490fd5b156104eb57565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259312d6774652d7072696d652d7100000000000000006044820152606490fd5b1561053757565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63582d6774652d7072696d652d710000000000000000006044820152606490fd5b1561058357565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63592d6774652d7072696d652d710000000000000000006044820152606490fd5b634e487b7160e01b5f52601160045260245ffd5b5f1981146105ea5760010190565b6105c8565b9060238110156106005760051b0190565b610354565b1561060c57565b60405162461bcd60e51b815260206004820152601f60248201527f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c64006044820152606490fd5b949394929190926106606102fb565b81516020809301516106706100db565b9182528382015281526106816100db565b948051518652610692815160200190565b51838701526106b1836106a36100db565b920180515183525160200190565b51838201526106be6100db565b958652828601528181019485528183519301516106d96100db565b93845282840152604081019283528351938281019485516106f86100db565b91825284820152606083019081526107ac7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476107378186515110610368565b610746818787510151106103b4565b610754818a51515110610400565b61076481878b510151511061044c565b61077b816107748b515160200190565b5110610498565b6107948161078d888c51015160200190565b51106104e4565b6107a18188515110610530565b85875101511061057c565b5f5b602381106114e85750906114c197989392916107c8611570565b966107d16100db565b925f845261148884878101985f8a5281996107ea610275565b918a6104406107f7610285565b927f2065b90c648581703a4ef82833653ae713aaf62c2dc4ef26b0a9bbbdf254b48a6108216100db565b955f87525f858801527f0da0d09dcc32c2d20c9905307190ffb91538db928804c70e7ed77639f2cee0fe8952527f2fcf362c494439bcae24ab0ab7dd0bd40825ed18725c1d11d25eeb863f24194884527f184edce371c121d112278a4d1239f9d65421fb00e688d7612320bb5f66e7409d8385017f1a7a0f4ef55687795fa98c4585fc66e26ddea1f6e161a837ef4a4f1ae9c8808b8152825194604087019586526108ce8a8a8a8a6117fd565b7f159c9e6c6ad47c3114dd4bdc88dc34359cae49de8306c8f56c9ba9d56429755e87527f261a0e3bad2b8c7b4057a7708b68ddaa9684eaa9d458088e7a2fe7813e08d06082528301518552610925898989896117fd565b7f1243c2c01b1a238bd0937eed8a5eb5f962eae681000356540ae1cfb36e1e308b86527e816901d1be816971e5f7e84b32a92c58a9f8971ff921adc37884d47db225e281526040830151855261097d898989896117fd565b7f25ebb06beeca9f8b08c511a86423c8f8705f115fe942220b9f8e30d54b016e0686527f1a598b2d183a54a959959d562879ae4b48df2203151d223973543b7d9584c59e8152606083015185526109d6898989896117fd565b7f0ede030d344e453627bd0d2e849cd89947ed04b1825b0d4f7d6a8bf8b6ca5bae86527f01e7b010c4ab8cfc4791d0886bb39e1e8785b51a2a2165514d1fe026b8de24ad815260808301518552610a2f898989896117fd565b7f1f81ffd062f9644e01e392d39b8de8e030afd731c770e58f96050ed1d36d553286527f0ac85a9509ed9a6e21c1e933b10794303a4b77d9fd1fb036e966fef320cb4dad815260a08301518552610a88898989896117fd565b7f2d46add97dc6a65ee2f3dd3ea61060bf9fd510929a701e4cec0913f8ab1cafe386527f1e8e47b54e79299b14dfe604a3c8ce10ee4cb2d09be71e23628c13888c29a254815260c08301518552610ae1898989896117fd565b7f146a85b7d5644a318ee8d2a44d995f580695fb92ade1dc0bbfc84cb4010ac1c386527f1d3734ea6fc621a0710ba60b024e87e0442525b2c77aff46634f6c5c0035e073815260e08301518552610b3a898989896117fd565b7f12664f87a4a89be5df17d8f4cb797e102a083e505835ddfa68bfff968ded011f86527f062c4ef046ea89c77def686012d175292e6cca3adb8dc9e0234bbbe4384e6b1881526101008301518552610b94898989896117fd565b7f22ecd52df7b85f6392fa550619d401fedebde3332b7c8857f3b26caac17f4b7986527f25696ccea69b88905a95af209f6daa0d638426ae494b1b5800d1bb32aa271c3c81526101208301518552610bee898989896117fd565b7ee5e920eb2bd31bc7480c75e93c11a2a8f421af3e287f37a87453a96b4dd6c086527f2b82a4685f51b881675e3e4958242a11585b1aa2211bef1ba101ade59d484fcb81526101408301518552610c47898989896117fd565b7f1bb112783a4bd8e95decec6012a6b0c06d076f07806241e64d5bb279055ce2e386527f03aacbe5b76da6ffe5a38b5f74bb1defdf60afde8f7bed77c2103c7d6d285c4581526101608301518552610ca1898989896117fd565b7e89a49d6c462af5737f4f74e89ee3fd5fcda9b129a6885f4402b7191ce06ecc86527f03670d5e8e16d0f9e9351a53b707cddd87f0df01f7e71f8ef942b35a63c54d8081526101808301518552610cfa898989896117fd565b7f148203b1cf918d850c2e4eb482623111d69a0d149273d88bd472cc2dc667788886527f09e3685cddd844c117894cf1560ee45625a29890eb111e539598ac6c8510b26f81526101a08301518552610d54898989896117fd565b7f038bda99e81e5aee528c18e38ab4a8806508a531d1f22f6618919bffb81f59f686527f14ce622b4ba47284ea8c421b00498ea220fb6f88026998098cbb21d38d8e0b0a81526101c08301518552610dae898989896117fd565b7f0c1641e14f8c4509f0c675448654f877363c981ca8c18363b549cfb115737ea386527f0b8cc9ed761dfbad8b821e125c571ba83a857c405c10df3bdeb64fc9b3248e2a81526101e08301518552610e08898989896117fd565b7f14c11b03d9e6d4e5c71174b991b0b1b63f5a8539d4449e10a08275be0454646586527f014e6374d23fc81a10b61fd108e7b0e59003f8d3ed87edd40a722aafbc1c263581526102008301518552610e62898989896117fd565b7f2a195965e3a4ebe550289af22bb4c1118e21dc2c74be94ad6455e8f6eb70c8c486527f12024e0b3b82946c93024f8e1159da64dc1d3c72c49929836a5f2577d5a0ed6881526102208301518552610ebc898989896117fd565b7f1f679e8223e56ae364c7fe5b1eb44e3b3c66cbf45645c364d308c505539047c986527f2c32d125628fae7d840d3f28e83a7fa88112f60ee52f5f86fba53c08e474ff6981526102408301518552610f16898989896117fd565b7f1b73d0bdb2a03d112f31e25b60799a767fb82a9d6418db824c632ffba80be47d86527f21b9840d5d347552e43ea2e7bd19560353b633a278b602c6074025ddb9f63a2181526102608301518552610f70898989896117fd565b7f16b45c0468819f85893ab1c4877c4fe4f49c146b976419b48aa07a0f6cbfb2e286527f06b26b18879ce8c03298c0302e22e9be3407e4b50aa15e3153b0eea99ce0241481526102808301518552610fca898989896117fd565b7f1fe6017431f3e3861894f3e1871a3627f3fc61c832f3e951b3e55c86c4b9615886527f2236d30c0a8738dcac59bc76c975d2ac9c9f1347adfc85c977fc196f4a963f5e81526102a08301518552611024898989896117fd565b7f2fd10aed9958e2d8257e4a70a742fa4774402f36a25babac21c8e0b5f661c12886527f0f8a616d021292af83c9631904c885899f5fe78a5489c14462c97f8472ce5bbf81526102c0830151855261107e898989896117fd565b7f280a41e1efcd026c87f851e0180aad3ac57df1f93286a57f53c400268d8752c386527f1633532825ddc9c0da04246a44b706dcfd57ae2f4c1bb69738ff8433d5b2a8bb81526102e083015185526110d8898989896117fd565b7e027cbc9193ee97f7eec57e57cb0ff7347cc0b2586a1637f4ce954bea3ff97186527f1c897b0f8a07cbc7a4b69597227129b4a12ba68e1926ecc7a45a4ec4bdc5bf0781526103008301518552611131898989896117fd565b7f1b1da35eea8e3139d38e9db84386f59853a18040d1a2216b74679e08c191a01c86527f0bfab57806284de52685f6dda04330043efee9399c75b78e48b5b1d7cb80038e8152610320830151855261118b898989896117fd565b7f012154f85b76ea46de9dc3f61d7c053aa9a583e3e2e57d6a076db599b1326a2f86527f1d25427c48b7647c1efe27b5e7da3240ee333d288ebabeb8b45e30c113c6474e815261034083015185526111e5898989896117fd565b7f111fb275c27d543c507e0c685728727d2344f736a345419dd396d083296211ed86527f01c636dbb603223ca61aee282e75c2ee554f6639e813f990cc7e045128e9ba6e8152610360830151855261123f898989896117fd565b7f0e3ef51ec2992fd4fd4e08d2fc6c02cb6586ec574edec92b74583bd38cc15cae86527f0eeb3ece8b4b83ce8946832b6dd7f35204669e47ccd8b1fc31cba6c71808f68981526103808301518552611299898989896117fd565b7f0a7e2bd7bb8aeb9e84739db84898a9115aa023c279d2df4536366e445e618b1e86527f0141bc992ed56ad3af847ed62afe254e174e6df8efbc36cf3314adad1244b42381526103a083015185526112f3898989896117fd565b7f0f2ecde94b061c256edb823ac557ce52f907f612791c85a2e66fb888ce8a417b86527f1c09474255a3b4c33f9452b362e6352c65acb1406a454a1d4b212538d529ed9a81526103c0830151855261134d898989896117fd565b7f1a2a4a634641112a1b940ba3b089193dfde76611dc7a7c29538a0f93bbdaf83086527f1752d5a3839dedbad8cd819b7b86a82982d1c7663453d236c559353725c2901381526103e083015185526113a7898989896117fd565b7f2e9b2e2e4921cd57e24d3215d41cfa43545b0fa8907380f2b4eca856b242ace086527f192ca02d2e86b7636626a919c871396ba8108cc7f2358ded277a32ed4ba10d4b81526104008301518552611401898989896117fd565b7f1266b7cbb61c28d580a6aa8e4a6b3455bf5c925fe9321c0b0afd01596c4a950586527f0f945b9129e6749912477338802d286af2f6aca2e71cdf199f387d570acf5f108152610420830151855261145b898989896117fd565b7f1be6c06af2b7182fc509c0c72a3874173c0e9b8ef208c89a6ffcbe343f74440a865252015190526117fd565b5115908115916114dd575b506114c4575b50506114a5905161184e565b9451908451908501519160606040870151955196015196611a67565b90565b519193506114a5916114d591611921565b92905f611499565b90505115155f611493565b806115217f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000161151a611526948e6105ef565b5110610605565b6105dc565b6107ae565b611533610100565b9061153c6100db565b5f81525f6020820152825261154f6102cf565b602083015261155c6102cf565b60408301526115696102cf565b6060830152565b61157861152b565b906115816100db565b7f3059a4f6581fbdcc0d5e847306a4862568fbf62d22d49958fc3902e4bc379ef381526020907f1dd7c04824ae7a26cbb4bb2e8e647030df4de01e51764344c9da30b1ac0317c88282015283526115d66100db565b7f0f98f7aa65c680ca7cd4b7f95afc5f6827e95398c599befdd9a9eca741e46b6181527f0a6f18525c7167edf6945aa57ecf8e0dde824c50912f1fe71574e86908579b68828201526116266100db565b7f1d1dacfe7971320b875aa2dbcdafb33d4141ca0b0435904e1e2ead83b600d26b81527f1e0cdae1aa15580307c121c8518d1b513fb8bfc62718065a60e88eee79d0288d838201526116766100db565b91825282820152818401526116896100db565b7f1887c867c4428fd8c7157ac7f5e81a19271ea37ac336aa87203e65bd77cdcad281527f10d21089c03935120870563d17d271a9165f3d541cf4b41a450b8c3741e84423828201526116d96100db565b7f105ceb8102cb4bd76c903c3f045988d7407aab02a26e2b0ac08c58af1edec5a481527f0b32e41ba74a1a65c885129ca2c3c87475d584c75ebc553cb79d4468de6483a8838201526117296100db565b91825282820152604084015261173d6100db565b907f04e9e06a4684b3f9cfea22a0b5d19239c957ba0b12a17f2d9dc9d1e63f9ae49482527f0ef0df2626365d3222024595b1cd400614d2db4a442bb59f5ab585b4717528f88183015261178e6100db565b907f239dd78f7b5dba6a6d81f994b3060a73e4d7602aeb8909fd9785a0f1e04367e382527f178fb89664e86e6758f974887c6d9d19cd52b518c16d799e75556a7ae9a25829818301526117df6100db565b9283528201526060830152565b9060048110156106005760051b0190565b90929160608460806107cf19946007865a01fa1561184c57600660c0926020606096865185528187015182860152805160408601520151868401525a01fa801561184c5761184a906118d5565b565bfe5b5f60206118596100db565b82815201528051908115806118c9575b156118845750506118786100db565b5f81525f602082015290565b602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479081900681039081116105ea576118be6100db565b918252602082015290565b50602081015115611869565b156118dc57565b60405162461bcd60e51b815260206004820152601260248201527f70616972696e672d6164642d6661696c656400000000000000000000000000006044820152606490fd5b60609092919260c06119316100db565b915f83525f60208401526020839681611948610100565b936080368637805185520151828401528051604084015201518482015260066107cf195a01fa801561184c5761184a906118d5565b60405190610320820182811067ffffffffffffffff8211176100fb5760405260188252610300366020840137565b906006820291808304600614901517156105ea57565b90600182018092116105ea57565b90600282018092116105ea57565b90600382018092116105ea57565b90600482018092116105ea57565b90600582018092116105ea57565b80518210156106005760209160051b010190565b15611a2257565b60405162461bcd60e51b815260206004820152601560248201527f70616972696e672d6f70636f64652d6661696c656400000000000000000000006044820152606490fd5b9491959692909396611a77610100565b95865260209788978888015260408701526060860152611a95610100565b9384528584015260408301526060820152611aae61197d565b915f5b60048110611ae957505050610300611ac76102aa565b9384920160086107cf195a01fa801561184c57611ae390611a1b565b51151590565b611bbb9192939450611afa816119ab565b611b0482856117ec565b5151611b108288611a07565b5286611b1c83866117ec565b510151611b31611b2b836119c1565b88611a07565b52611b3c82866117ec565b515151611b4b611b2b836119cf565b52611b61611b5983876117ec565b515160200190565b51611b6e611b2b836119dd565b5286611b7a83876117ec565b51015151611b8a611b2b836119eb565b52611bb5611baf611ba889611b9f868a6117ec565b51015160200190565b51926119f9565b87611a07565b526105dc565b9084939291611ab156fea2646970667358221220005764b07649eca3d91243a9b1229e0d59593fc7f8de82717f36a13e0ab52e9364736f6c63430008150033",
}

// BlsSigVerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use BlsSigVerifierMetaData.ABI instead.
var BlsSigVerifierABI = BlsSigVerifierMetaData.ABI

// BlsSigVerifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BlsSigVerifierMetaData.Bin instead.
var BlsSigVerifierBin = BlsSigVerifierMetaData.Bin

// DeployBlsSigVerifier deploys a new Ethereum contract, binding an instance of BlsSigVerifier to it.
func DeployBlsSigVerifier(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BlsSigVerifier, error) {
	parsed, err := BlsSigVerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BlsSigVerifierBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BlsSigVerifier{BlsSigVerifierCaller: BlsSigVerifierCaller{contract: contract}, BlsSigVerifierTransactor: BlsSigVerifierTransactor{contract: contract}, BlsSigVerifierFilterer: BlsSigVerifierFilterer{contract: contract}}, nil
}

// BlsSigVerifier is an auto generated Go binding around an Ethereum contract.
type BlsSigVerifier struct {
	BlsSigVerifierCaller     // Read-only binding to the contract
	BlsSigVerifierTransactor // Write-only binding to the contract
	BlsSigVerifierFilterer   // Log filterer for contract events
}

// BlsSigVerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type BlsSigVerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BlsSigVerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BlsSigVerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BlsSigVerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BlsSigVerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BlsSigVerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BlsSigVerifierSession struct {
	Contract     *BlsSigVerifier   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BlsSigVerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BlsSigVerifierCallerSession struct {
	Contract *BlsSigVerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// BlsSigVerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BlsSigVerifierTransactorSession struct {
	Contract     *BlsSigVerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// BlsSigVerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type BlsSigVerifierRaw struct {
	Contract *BlsSigVerifier // Generic contract binding to access the raw methods on
}

// BlsSigVerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BlsSigVerifierCallerRaw struct {
	Contract *BlsSigVerifierCaller // Generic read-only contract binding to access the raw methods on
}

// BlsSigVerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BlsSigVerifierTransactorRaw struct {
	Contract *BlsSigVerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBlsSigVerifier creates a new instance of BlsSigVerifier, bound to a specific deployed contract.
func NewBlsSigVerifier(address common.Address, backend bind.ContractBackend) (*BlsSigVerifier, error) {
	contract, err := bindBlsSigVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BlsSigVerifier{BlsSigVerifierCaller: BlsSigVerifierCaller{contract: contract}, BlsSigVerifierTransactor: BlsSigVerifierTransactor{contract: contract}, BlsSigVerifierFilterer: BlsSigVerifierFilterer{contract: contract}}, nil
}

// NewBlsSigVerifierCaller creates a new read-only instance of BlsSigVerifier, bound to a specific deployed contract.
func NewBlsSigVerifierCaller(address common.Address, caller bind.ContractCaller) (*BlsSigVerifierCaller, error) {
	contract, err := bindBlsSigVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BlsSigVerifierCaller{contract: contract}, nil
}

// NewBlsSigVerifierTransactor creates a new write-only instance of BlsSigVerifier, bound to a specific deployed contract.
func NewBlsSigVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*BlsSigVerifierTransactor, error) {
	contract, err := bindBlsSigVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BlsSigVerifierTransactor{contract: contract}, nil
}

// NewBlsSigVerifierFilterer creates a new log filterer instance of BlsSigVerifier, bound to a specific deployed contract.
func NewBlsSigVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*BlsSigVerifierFilterer, error) {
	contract, err := bindBlsSigVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BlsSigVerifierFilterer{contract: contract}, nil
}

// bindBlsSigVerifier binds a generic wrapper to an already deployed contract.
func bindBlsSigVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BlsSigVerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BlsSigVerifier *BlsSigVerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BlsSigVerifier.Contract.BlsSigVerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BlsSigVerifier *BlsSigVerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlsSigVerifier.Contract.BlsSigVerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BlsSigVerifier *BlsSigVerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BlsSigVerifier.Contract.BlsSigVerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BlsSigVerifier *BlsSigVerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BlsSigVerifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BlsSigVerifier *BlsSigVerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BlsSigVerifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BlsSigVerifier *BlsSigVerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BlsSigVerifier.Contract.contract.Transact(opts, method, params...)
}

// VerifyBlsSigProof is a free data retrieval call binding the contract method 0x0cc26769.
//
// Solidity: function verifyBlsSigProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[2] commit, uint256[35] input) view returns(bool r)
func (_BlsSigVerifier *BlsSigVerifierCaller) VerifyBlsSigProof(opts *bind.CallOpts, a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, commit [2]*big.Int, input [35]*big.Int) (bool, error) {
	var out []interface{}
	err := _BlsSigVerifier.contract.Call(opts, &out, "verifyBlsSigProof", a, b, c, commit, input)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyBlsSigProof is a free data retrieval call binding the contract method 0x0cc26769.
//
// Solidity: function verifyBlsSigProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[2] commit, uint256[35] input) view returns(bool r)
func (_BlsSigVerifier *BlsSigVerifierSession) VerifyBlsSigProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, commit [2]*big.Int, input [35]*big.Int) (bool, error) {
	return _BlsSigVerifier.Contract.VerifyBlsSigProof(&_BlsSigVerifier.CallOpts, a, b, c, commit, input)
}

// VerifyBlsSigProof is a free data retrieval call binding the contract method 0x0cc26769.
//
// Solidity: function verifyBlsSigProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[2] commit, uint256[35] input) view returns(bool r)
func (_BlsSigVerifier *BlsSigVerifierCallerSession) VerifyBlsSigProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, commit [2]*big.Int, input [35]*big.Int) (bool, error) {
	return _BlsSigVerifier.Contract.VerifyBlsSigProof(&_BlsSigVerifier.CallOpts, a, b, c, commit, input)
}

// BrevisMetaData contains all meta data concerning the Brevis contract.
var BrevisMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220c0e1072ee2c4137ab60f1ee542af82638e79ed01a1095fb3667f4e0e620b6c0e64736f6c63430008150033",
}

// BrevisABI is the input ABI used to generate the binding from.
// Deprecated: Use BrevisMetaData.ABI instead.
var BrevisABI = BrevisMetaData.ABI

// BrevisBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BrevisMetaData.Bin instead.
var BrevisBin = BrevisMetaData.Bin

// DeployBrevis deploys a new Ethereum contract, binding an instance of Brevis to it.
func DeployBrevis(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Brevis, error) {
	parsed, err := BrevisMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BrevisBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Brevis{BrevisCaller: BrevisCaller{contract: contract}, BrevisTransactor: BrevisTransactor{contract: contract}, BrevisFilterer: BrevisFilterer{contract: contract}}, nil
}

// Brevis is an auto generated Go binding around an Ethereum contract.
type Brevis struct {
	BrevisCaller     // Read-only binding to the contract
	BrevisTransactor // Write-only binding to the contract
	BrevisFilterer   // Log filterer for contract events
}

// BrevisCaller is an auto generated read-only Go binding around an Ethereum contract.
type BrevisCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BrevisTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BrevisTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BrevisFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BrevisFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BrevisSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BrevisSession struct {
	Contract     *Brevis           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BrevisCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BrevisCallerSession struct {
	Contract *BrevisCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BrevisTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BrevisTransactorSession struct {
	Contract     *BrevisTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BrevisRaw is an auto generated low-level Go binding around an Ethereum contract.
type BrevisRaw struct {
	Contract *Brevis // Generic contract binding to access the raw methods on
}

// BrevisCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BrevisCallerRaw struct {
	Contract *BrevisCaller // Generic read-only contract binding to access the raw methods on
}

// BrevisTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BrevisTransactorRaw struct {
	Contract *BrevisTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBrevis creates a new instance of Brevis, bound to a specific deployed contract.
func NewBrevis(address common.Address, backend bind.ContractBackend) (*Brevis, error) {
	contract, err := bindBrevis(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Brevis{BrevisCaller: BrevisCaller{contract: contract}, BrevisTransactor: BrevisTransactor{contract: contract}, BrevisFilterer: BrevisFilterer{contract: contract}}, nil
}

// NewBrevisCaller creates a new read-only instance of Brevis, bound to a specific deployed contract.
func NewBrevisCaller(address common.Address, caller bind.ContractCaller) (*BrevisCaller, error) {
	contract, err := bindBrevis(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BrevisCaller{contract: contract}, nil
}

// NewBrevisTransactor creates a new write-only instance of Brevis, bound to a specific deployed contract.
func NewBrevisTransactor(address common.Address, transactor bind.ContractTransactor) (*BrevisTransactor, error) {
	contract, err := bindBrevis(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BrevisTransactor{contract: contract}, nil
}

// NewBrevisFilterer creates a new log filterer instance of Brevis, bound to a specific deployed contract.
func NewBrevisFilterer(address common.Address, filterer bind.ContractFilterer) (*BrevisFilterer, error) {
	contract, err := bindBrevis(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BrevisFilterer{contract: contract}, nil
}

// bindBrevis binds a generic wrapper to an already deployed contract.
func bindBrevis(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BrevisMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Brevis *BrevisRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Brevis.Contract.BrevisCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Brevis *BrevisRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Brevis.Contract.BrevisTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Brevis *BrevisRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Brevis.Contract.BrevisTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Brevis *BrevisCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Brevis.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Brevis *BrevisTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Brevis.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Brevis *BrevisTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Brevis.Contract.contract.Transact(opts, method, params...)
}

// BrevisProofMetaData contains all meta data concerning the BrevisProof contract.
var BrevisProofMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractISMT\",\"name\":\"_smtContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"vkHashes\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"sizes\",\"type\":\"uint256[]\"}],\"name\":\"BatchTierVkHashesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractISMT\",\"name\":\"smtContract\",\"type\":\"address\"}],\"name\":\"SmtContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"chainIds\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"contractIZkpVerifier\",\"name\":\"contractAppZkVerifier\",\"type\":\"address\"},{\"internalType\":\"contractIZkpVerifier\",\"name\":\"circuitAppZkVerifier\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"structBrevisProof.ChainZKVerifier[]\",\"name\":\"newAddresses\",\"type\":\"tuple[]\"}],\"name\":\"VerifierAddressesUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"getProofData\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"vkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBrevis.ProofData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"hasProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"proofs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"vkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_vkHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_sizes\",\"type\":\"uint256[]\"}],\"name\":\"setBatchTierVkHashes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smtContract\",\"outputs\":[{\"internalType\":\"contractISMT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_proofWithPubInputs\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_withAppProof\",\"type\":\"bool\"}],\"name\":\"submitProof\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractISMT\",\"name\":\"_smtContract\",\"type\":\"address\"}],\"name\":\"updateSmtContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_chainIds\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"contractIZkpVerifier\",\"name\":\"contractAppZkVerifier\",\"type\":\"address\"},{\"internalType\":\"contractIZkpVerifier\",\"name\":\"circuitAppZkVerifier\",\"type\":\"address\"}],\"internalType\":\"structBrevisProof.ChainZKVerifier[]\",\"name\":\"_verifierAddresses\",\"type\":\"tuple[]\"}],\"name\":\"updateVerifierAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blkNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiptIndex\",\"type\":\"uint64\"},{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"valueFromTopic\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"valueIndex\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"logTopic0\",\"type\":\"bytes32\"}],\"internalType\":\"structBrevis.LogExtraInfo\",\"name\":\"logExtraInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"logIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"structBrevis.LogInfo[5]\",\"name\":\"logs\",\"type\":\"tuple[5]\"}],\"internalType\":\"structBrevis.ReceiptInfo[]\",\"name\":\"receipts\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"slotValue\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"}],\"internalType\":\"structBrevis.StorageInfo[]\",\"name\":\"stores\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leafHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"blockTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"leafRlpPrefix\",\"type\":\"bytes\"}],\"internalType\":\"structBrevis.TransactionInfo[]\",\"name\":\"txs\",\"type\":\"tuple[]\"}],\"internalType\":\"structBrevis.ExtractInfos\",\"name\":\"_extractInfos\",\"type\":\"tuple\"}],\"name\":\"validateRequest\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"verifierAddresses\",\"outputs\":[{\"internalType\":\"contractIZkpVerifier\",\"name\":\"contractAppZkVerifier\",\"type\":\"address\"},{\"internalType\":\"contractIZkpVerifier\",\"name\":\"circuitAppZkVerifier\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"vkHashesToBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6080346100a457601f6118c938819003918201601f19168301916001600160401b038311848410176100a8578084926020946040528339810103126100a457516001600160a01b0390818116908190036100a4575f5460018060a01b03199033828216175f55604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3600454161760045561180c90816100bd8239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040526004361015610011575f80fd5b5f3560e01c80631396511e146113715780631be746b1146113475780631e4971bb1461124d57806325e4903414610e095780633221aec614610de3578063444d95b014610d82578063715018a614610d275780637c08aa74146104c45780638da5cb5b1461049f5780639546bf0014610400578063b201326e1461020d578063e3d1e6d6146101e1578063f2fde38b146101045763f5cec6af146100b3575f80fd5b346101005760203660031901126101005767ffffffffffffffff6100d5611415565b165f5260036020526040805f206001600160a01b036001818354169201541682519182526020820152f35b5f80fd5b34610100576020366003190112610100576004356001600160a01b03808216809203610100575f549081169061013b3383146116de565b8215610176576001600160a01b0319839116175f557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b34610100576020366003190112610100576004355f526001602052602060405f20541515604051908152f35b346101005760403660031901126101005767ffffffffffffffff6004358181116101005761023f9036906004016113e4565b909160249081359381851161010057366023860112156101005784600401359282841161010057600692368286861b8901011161010057946001600160a01b039493929492610292845f541633146116de565b61029d858314611729565b5f5b82811061036d57505060405195816040880160408952526060870195915f5b81811061034357505050506020848682960382880152848152019501925f915b83831061030d577fc343b5bb763b4b0cdbd72c4b7a9627ce33d7eaff0cecca036b0af41ce9ca55a886880387a1005b9091929395604080600192846103228b611785565b16815284610331878c01611785565b168187015201970194930191906102de565b909192949596853590848216809203610100579081526020908101979695019291906001016102be565b85819893989795969710156103ed57806103e191831b8a0184610399610394848d8b611775565b6115d4565b165f52600360205260405f20886103d460446001836103b98c88016115e9565b16946001600160a01b031995868254161781550194016115e9565b1690825416179055611591565b9691969594939561029f565b83634e487b7160e01b5f5260326004525ffd5b3461010057602036600319011261010057610419611658565b506004355f52600160205260c060405f206040516104368161142c565b8154918282526001810154602083019081526002820154604084019081526003830154916060850192835260a0600560048601549560808801968752015495019485526040519586525160208601525160408501525160608401525160808301525160a0820152f35b34610100575f3660031901126101005760206001600160a01b035f5416604051908152f35b3461010057600319606036820112610100576024359067ffffffffffffffff821682036101005767ffffffffffffffff604435116101005760809060443536030112610100576004355f52600160205260405f2090604051916105268361142c565b600581549182855260018101546020860152600281015460408601526003810154606086015260048101546080860152015460a084015215610ce2576004805460405163080cdb0b60e11b815267ffffffffffffffff939093168383015260448035909201356024840152602091839182906001600160a01b03165afa8015610cd7576105ba915f91610ca8575b50611482565b6106056105f16105d46024604435016044356004016114ce565b90506105e96044803501604435600401611504565b91905061153a565b6105e960646044350160443560040161155b565b908115610c635760408101515f52600260205260405f2054808311610c1e575f9260605b61063d6024604435016044356004016114ce565b905085101561088e578460605f5b600581106107205750602061071a9383610714936106f46106a8856106a261068d6103946107069b6106876024604435016044356004016114ce565b9061159f565b956106876024604435016044356004016114ce565b016115d4565b926106e6604051938492888401966044356004013588526001600160c01b0319918260c091821b1660408701521b16604884015260508301906115fd565b03601f198101835282611448565b519020604051948592848401906115fd565b908152038084520182611448565b94611591565b93610629565b9182604061073f610745936106876024604435016044356004016114ce565b016115c3565b359060ff82168203610100576108806065610886936108259361078260806106a2898f61073f6040916106876024604435016044356004016114ce565b918c6107a760206106a28b604061073f866106876024604435016044356004016114ce565b936107d060406107ca8c8261073f876106876024604435016044356004016114ce565b016115e9565b9060a06108128c604061073f60606107fb848461073f8c6106876024604435016044356004016114ce565b0135976106876024604435016044356004016114ce565b013595604051998a9660208801906115fd565b9460ff60f81b9060f81b1685526001600160c01b0319918260c091821b1660018701521b1660098401526bffffffffffffffffffffffff199060601b1660118301526025820152604592838201520390810184520182611448565b91611591565b90869161064b565b925f935b6108a56044803501604435600401611504565b9050851015610a39576108cb856108c56044803501604435600401611504565b90611626565b35906108e960206107ca886108c56044803501604435600401611504565b604051906bffffffffffffffffffffffff199060601b1660208201526014815280604081011067ffffffffffffffff604083011117610a255760408101604052602081519101206040610949886108c56044803501604435600401611504565b01356060610964896108c56044803501604435600401611504565b01359061098360806106a28b6108c56044803501604435600401611504565b926040519560443560040135602088015260408701526060860152608085015260a08401526001600160c01b031960c091821b169083015260a882528160e081011067ffffffffffffffff60e084011117610a255781610a188160e09384610a1f96016040526109ff82516020840120916101008401906115fd565b9081520360df1981018484015260bf1901838301611448565b0194611591565b93610892565b634e487b7160e01b5f52604160045260245ffd5b925f935b610a5160646044350160443560040161155b565b9050851015610b6b57610a7885610a7260646044350160443560040161155b565b90611636565b35906020610a9487610a7260646044350160443560040161155b565b0135610ab360406106a289610a7260646044350160443560040161155b565b90610ad160606106a28a610a7260646044350160443560040161155b565b9060405194604435600401356020870152604086015260608501526001600160c01b0319809260c01b16608085015260c01b166088830152607082528160a081011067ffffffffffffffff60a084011117610a255781610a188160a09384610b659601604052610b4c825160208401209160c08401906115fd565b90815203609f19810184840152607f1901838301611448565b93610a3d565b9192818110610bcc575b505060208151910120905103610b8757005b60405162461bcd60e51b815260206004820152601d60248201527f636f6d6d69744861736820616e6420696e666f206e6f74206d617463680000006044820152606490fd5b905b80821015610b75579091610bf3610c126020610c1893604051938491838301906115fd565b7001000000000000000000000000000000018152038084520182611448565b92611591565b90610bce565b60405162461bcd60e51b815260206004820152601e60248201527f6974656d206c656e67746820657863656564732062617463682073697a6500006044820152606490fd5b60405162461bcd60e51b815260206004820152600b60248201527f656d707479206974656d730000000000000000000000000000000000000000006044820152606490fd5b610cca915060203d602011610cd0575b610cc28183611448565b81019061146a565b836105b4565b503d610cb8565b6040513d5f823e3d90fd5b60405162461bcd60e51b815260206004820152601060248201527f70726f6f66206e6f7420657869737473000000000000000000000000000000006044820152606490fd5b34610100575f366003190112610100575f80546001600160a01b03196001600160a01b03821691610d593384146116de565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b34610100576020366003190112610100576004355f52600160205260c060405f2080549060018101549060028101546003820154906005600484015493015493604051958652602086015260408501526060840152608083015260a0820152f35b34610100575f3660031901126101005760206001600160a01b0360045416604051908152f35b3461010057606036600319011261010057610e22611415565b67ffffffffffffffff806024351161010057366023602435011215610100578060243560040135116101005736602480356004013581350101116101005760443515801560443503610100571561122e5781165f5260036020526001600160a01b0360405f2054165b6001600160a01b038116156111e957602060405180926322bb937360e11b825282600483015260243560040135602483015260243560040135602480350160448401375f60446024356004013584010152816001600160a01b03604482601f19601f6024356004013501168101030192165afa908115610cd7575f916111ca575b501561118557610f1a611658565b6044351561112f57610f3f610f39602435600401356024803501611689565b906116c2565b8152610f58610f3960243560040135602480350161169c565b60a0820152610f74610f396024356004013560248035016116af565b6040820152602435600401356101e011610100576024356101e48101356060830152600401356102001161010057610204602435013560808201525b60408101908151156110ea5781515f52600260205260405f2054156110a557604435611022575b6020925080515f5260018352600560a060405f209280519485855586820151600186015551600285015560608101516003850155608081015160048501550151910155604051908152f35b6004805460a083015160405163080cdb0b60e11b815267ffffffffffffffff96909616928601929092526024850191909152602090849060449082906001600160a01b03165afa928315610cd757602093611083915f916110885750611482565b610fd7565b61109f9150853d8711610cd057610cc28183611448565b856105b4565b60405162461bcd60e51b815260206004820152601060248201527f766b48617368206e6f742076616c6964000000000000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601e60248201527f766b486173682073686f756c64206265206c6172676572207468616e203000006044820152606490fd5b611146610f39602435600401356024803501611689565b815261115f610f3960243560040135602480350161169c565b602082015261117b610f396024356004013560248035016116af565b6040820152610fb0565b60405162461bcd60e51b815260206004820152600f60248201527f70726f6f66206e6f742076616c696400000000000000000000000000000000006044820152606490fd5b6111e3915060203d602011610cd057610cc28183611448565b82610f0c565b60405162461bcd60e51b815260206004820152601660248201527f636861696e207665726966696572206e6f7420736574000000000000000000006044820152606490fd5b81165f5260036020526001600160a01b03600160405f20015416610e8b565b346101005760403660031901126101005767ffffffffffffffff6004358181116101005761127f9036906004016113e4565b91602435908111610100576112989036906004016113e4565b6112b06001600160a01b035f959395541633146116de565b6112bb818314611729565b5f5b82811061131557507f011d93b74200525baf6adf5cba27a9d8f45c6aec5f9862889711c9f1630879ac9361131091611302604051958695604087526040870191611799565b918483036020860152611799565b0390a1005b80611324611342928488611775565b35611330828688611775565b355f52600260205260405f2055611591565b6112bd565b34610100576020366003190112610100576004355f526002602052602060405f2054604051908152f35b34610100576020366003190112610100576004356001600160a01b03808216809203610100577f674c535cde998bcb47d0688f644df545597c7d6edb95643cb21c82c2d490ff7f916113c96020925f541633146116de565b806001600160a01b03196004541617600455604051908152a1005b9181601f840112156101005782359167ffffffffffffffff8311610100576020808501948460051b01011161010057565b6004359067ffffffffffffffff8216820361010057565b60c0810190811067ffffffffffffffff821117610a2557604052565b90601f8019910116810190811067ffffffffffffffff821117610a2557604052565b90816020910312610100575180151581036101005790565b1561148957565b60405162461bcd60e51b815260206004820152601260248201527f736d7420726f6f74206e6f742076616c696400000000000000000000000000006044820152606490fd5b903590601e1981360301821215610100570180359067ffffffffffffffff8211610100576020019181600a1b3603831361010057565b903590601e1981360301821215610100570180359067ffffffffffffffff8211610100576020019160a082023603831361010057565b9190820180921161154757565b634e487b7160e01b5f52601160045260245ffd5b903590601e1981360301821215610100570180359067ffffffffffffffff821161010057602001918160051b3603831361010057565b5f1981146115475760010190565b91908110156115af57600a1b0190565b634e487b7160e01b5f52603260045260245ffd5b9060058110156115af5760c0020190565b3567ffffffffffffffff811681036101005790565b356001600160a01b03811681036101005790565b908151915f5b838110611613575050015f815290565b8060208092840101518185015201611603565b91908110156115af5760a0020190565b91908110156115af5760051b81013590609e1981360301821215610100570190565b604051906116658261142c565b8160a05f918281528260208201528260408201528260608201528260808201520152565b9061018011610100576101600190602090565b906101a011610100576101800190602090565b906101c011610100576101a00190602090565b3590602081106116d0575090565b5f199060200360031b1b1690565b156116e557565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b1561173057565b60405162461bcd60e51b815260206004820152601060248201527f6c656e677468206e6f74206d61746368000000000000000000000000000000006044820152606490fd5b91908110156115af5760051b0190565b35906001600160a01b038216820361010057565b90918281527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83116101005760209260051b80928483013701019056fea2646970667358221220c165e5a740f23ee53044f489de54836a1a74e226d91a9ecede46bc1adfb1279864736f6c63430008150033",
}

// BrevisProofABI is the input ABI used to generate the binding from.
// Deprecated: Use BrevisProofMetaData.ABI instead.
var BrevisProofABI = BrevisProofMetaData.ABI

// BrevisProofBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BrevisProofMetaData.Bin instead.
var BrevisProofBin = BrevisProofMetaData.Bin

// DeployBrevisProof deploys a new Ethereum contract, binding an instance of BrevisProof to it.
func DeployBrevisProof(auth *bind.TransactOpts, backend bind.ContractBackend, _smtContract common.Address) (common.Address, *types.Transaction, *BrevisProof, error) {
	parsed, err := BrevisProofMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BrevisProofBin), backend, _smtContract)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BrevisProof{BrevisProofCaller: BrevisProofCaller{contract: contract}, BrevisProofTransactor: BrevisProofTransactor{contract: contract}, BrevisProofFilterer: BrevisProofFilterer{contract: contract}}, nil
}

// BrevisProof is an auto generated Go binding around an Ethereum contract.
type BrevisProof struct {
	BrevisProofCaller     // Read-only binding to the contract
	BrevisProofTransactor // Write-only binding to the contract
	BrevisProofFilterer   // Log filterer for contract events
}

// BrevisProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type BrevisProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BrevisProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BrevisProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BrevisProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BrevisProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BrevisProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BrevisProofSession struct {
	Contract     *BrevisProof      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BrevisProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BrevisProofCallerSession struct {
	Contract *BrevisProofCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// BrevisProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BrevisProofTransactorSession struct {
	Contract     *BrevisProofTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// BrevisProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type BrevisProofRaw struct {
	Contract *BrevisProof // Generic contract binding to access the raw methods on
}

// BrevisProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BrevisProofCallerRaw struct {
	Contract *BrevisProofCaller // Generic read-only contract binding to access the raw methods on
}

// BrevisProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BrevisProofTransactorRaw struct {
	Contract *BrevisProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBrevisProof creates a new instance of BrevisProof, bound to a specific deployed contract.
func NewBrevisProof(address common.Address, backend bind.ContractBackend) (*BrevisProof, error) {
	contract, err := bindBrevisProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BrevisProof{BrevisProofCaller: BrevisProofCaller{contract: contract}, BrevisProofTransactor: BrevisProofTransactor{contract: contract}, BrevisProofFilterer: BrevisProofFilterer{contract: contract}}, nil
}

// NewBrevisProofCaller creates a new read-only instance of BrevisProof, bound to a specific deployed contract.
func NewBrevisProofCaller(address common.Address, caller bind.ContractCaller) (*BrevisProofCaller, error) {
	contract, err := bindBrevisProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BrevisProofCaller{contract: contract}, nil
}

// NewBrevisProofTransactor creates a new write-only instance of BrevisProof, bound to a specific deployed contract.
func NewBrevisProofTransactor(address common.Address, transactor bind.ContractTransactor) (*BrevisProofTransactor, error) {
	contract, err := bindBrevisProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BrevisProofTransactor{contract: contract}, nil
}

// NewBrevisProofFilterer creates a new log filterer instance of BrevisProof, bound to a specific deployed contract.
func NewBrevisProofFilterer(address common.Address, filterer bind.ContractFilterer) (*BrevisProofFilterer, error) {
	contract, err := bindBrevisProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BrevisProofFilterer{contract: contract}, nil
}

// bindBrevisProof binds a generic wrapper to an already deployed contract.
func bindBrevisProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BrevisProofMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BrevisProof *BrevisProofRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BrevisProof.Contract.BrevisProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BrevisProof *BrevisProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BrevisProof.Contract.BrevisProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BrevisProof *BrevisProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BrevisProof.Contract.BrevisProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BrevisProof *BrevisProofCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BrevisProof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BrevisProof *BrevisProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BrevisProof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BrevisProof *BrevisProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BrevisProof.Contract.contract.Transact(opts, method, params...)
}

// GetProofData is a free data retrieval call binding the contract method 0x9546bf00.
//
// Solidity: function getProofData(bytes32 _requestId) view returns((bytes32,uint256,bytes32,bytes32,bytes32,bytes32))
func (_BrevisProof *BrevisProofCaller) GetProofData(opts *bind.CallOpts, _requestId [32]byte) (BrevisProofData, error) {
	var out []interface{}
	err := _BrevisProof.contract.Call(opts, &out, "getProofData", _requestId)

	if err != nil {
		return *new(BrevisProofData), err
	}

	out0 := *abi.ConvertType(out[0], new(BrevisProofData)).(*BrevisProofData)

	return out0, err

}

// GetProofData is a free data retrieval call binding the contract method 0x9546bf00.
//
// Solidity: function getProofData(bytes32 _requestId) view returns((bytes32,uint256,bytes32,bytes32,bytes32,bytes32))
func (_BrevisProof *BrevisProofSession) GetProofData(_requestId [32]byte) (BrevisProofData, error) {
	return _BrevisProof.Contract.GetProofData(&_BrevisProof.CallOpts, _requestId)
}

// GetProofData is a free data retrieval call binding the contract method 0x9546bf00.
//
// Solidity: function getProofData(bytes32 _requestId) view returns((bytes32,uint256,bytes32,bytes32,bytes32,bytes32))
func (_BrevisProof *BrevisProofCallerSession) GetProofData(_requestId [32]byte) (BrevisProofData, error) {
	return _BrevisProof.Contract.GetProofData(&_BrevisProof.CallOpts, _requestId)
}

// HasProof is a free data retrieval call binding the contract method 0xe3d1e6d6.
//
// Solidity: function hasProof(bytes32 _requestId) view returns(bool)
func (_BrevisProof *BrevisProofCaller) HasProof(opts *bind.CallOpts, _requestId [32]byte) (bool, error) {
	var out []interface{}
	err := _BrevisProof.contract.Call(opts, &out, "hasProof", _requestId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasProof is a free data retrieval call binding the contract method 0xe3d1e6d6.
//
// Solidity: function hasProof(bytes32 _requestId) view returns(bool)
func (_BrevisProof *BrevisProofSession) HasProof(_requestId [32]byte) (bool, error) {
	return _BrevisProof.Contract.HasProof(&_BrevisProof.CallOpts, _requestId)
}

// HasProof is a free data retrieval call binding the contract method 0xe3d1e6d6.
//
// Solidity: function hasProof(bytes32 _requestId) view returns(bool)
func (_BrevisProof *BrevisProofCallerSession) HasProof(_requestId [32]byte) (bool, error) {
	return _BrevisProof.Contract.HasProof(&_BrevisProof.CallOpts, _requestId)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BrevisProof *BrevisProofCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BrevisProof.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BrevisProof *BrevisProofSession) Owner() (common.Address, error) {
	return _BrevisProof.Contract.Owner(&_BrevisProof.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BrevisProof *BrevisProofCallerSession) Owner() (common.Address, error) {
	return _BrevisProof.Contract.Owner(&_BrevisProof.CallOpts)
}

// Proofs is a free data retrieval call binding the contract method 0x444d95b0.
//
// Solidity: function proofs(bytes32 ) view returns(bytes32 commitHash, uint256 length, bytes32 vkHash, bytes32 appCommitHash, bytes32 appVkHash, bytes32 smtRoot)
func (_BrevisProof *BrevisProofCaller) Proofs(opts *bind.CallOpts, arg0 [32]byte) (struct {
	CommitHash    [32]byte
	Length        *big.Int
	VkHash        [32]byte
	AppCommitHash [32]byte
	AppVkHash     [32]byte
	SmtRoot       [32]byte
}, error) {
	var out []interface{}
	err := _BrevisProof.contract.Call(opts, &out, "proofs", arg0)

	outstruct := new(struct {
		CommitHash    [32]byte
		Length        *big.Int
		VkHash        [32]byte
		AppCommitHash [32]byte
		AppVkHash     [32]byte
		SmtRoot       [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.CommitHash = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Length = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.VkHash = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)
	outstruct.AppCommitHash = *abi.ConvertType(out[3], new([32]byte)).(*[32]byte)
	outstruct.AppVkHash = *abi.ConvertType(out[4], new([32]byte)).(*[32]byte)
	outstruct.SmtRoot = *abi.ConvertType(out[5], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// Proofs is a free data retrieval call binding the contract method 0x444d95b0.
//
// Solidity: function proofs(bytes32 ) view returns(bytes32 commitHash, uint256 length, bytes32 vkHash, bytes32 appCommitHash, bytes32 appVkHash, bytes32 smtRoot)
func (_BrevisProof *BrevisProofSession) Proofs(arg0 [32]byte) (struct {
	CommitHash    [32]byte
	Length        *big.Int
	VkHash        [32]byte
	AppCommitHash [32]byte
	AppVkHash     [32]byte
	SmtRoot       [32]byte
}, error) {
	return _BrevisProof.Contract.Proofs(&_BrevisProof.CallOpts, arg0)
}

// Proofs is a free data retrieval call binding the contract method 0x444d95b0.
//
// Solidity: function proofs(bytes32 ) view returns(bytes32 commitHash, uint256 length, bytes32 vkHash, bytes32 appCommitHash, bytes32 appVkHash, bytes32 smtRoot)
func (_BrevisProof *BrevisProofCallerSession) Proofs(arg0 [32]byte) (struct {
	CommitHash    [32]byte
	Length        *big.Int
	VkHash        [32]byte
	AppCommitHash [32]byte
	AppVkHash     [32]byte
	SmtRoot       [32]byte
}, error) {
	return _BrevisProof.Contract.Proofs(&_BrevisProof.CallOpts, arg0)
}

// SmtContract is a free data retrieval call binding the contract method 0x3221aec6.
//
// Solidity: function smtContract() view returns(address)
func (_BrevisProof *BrevisProofCaller) SmtContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BrevisProof.contract.Call(opts, &out, "smtContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SmtContract is a free data retrieval call binding the contract method 0x3221aec6.
//
// Solidity: function smtContract() view returns(address)
func (_BrevisProof *BrevisProofSession) SmtContract() (common.Address, error) {
	return _BrevisProof.Contract.SmtContract(&_BrevisProof.CallOpts)
}

// SmtContract is a free data retrieval call binding the contract method 0x3221aec6.
//
// Solidity: function smtContract() view returns(address)
func (_BrevisProof *BrevisProofCallerSession) SmtContract() (common.Address, error) {
	return _BrevisProof.Contract.SmtContract(&_BrevisProof.CallOpts)
}

// ValidateRequest is a free data retrieval call binding the contract method 0x7c08aa74.
//
// Solidity: function validateRequest(bytes32 _requestId, uint64 _chainId, (bytes32,(uint64,uint64,((uint8,uint64,address,bytes32),uint64,bytes32)[5])[],(bytes32,address,bytes32,bytes32,uint64)[],(bytes32,bytes32,uint64,uint64,bytes)[]) _extractInfos) view returns()
func (_BrevisProof *BrevisProofCaller) ValidateRequest(opts *bind.CallOpts, _requestId [32]byte, _chainId uint64, _extractInfos BrevisExtractInfos) error {
	var out []interface{}
	err := _BrevisProof.contract.Call(opts, &out, "validateRequest", _requestId, _chainId, _extractInfos)

	if err != nil {
		return err
	}

	return err

}

// ValidateRequest is a free data retrieval call binding the contract method 0x7c08aa74.
//
// Solidity: function validateRequest(bytes32 _requestId, uint64 _chainId, (bytes32,(uint64,uint64,((uint8,uint64,address,bytes32),uint64,bytes32)[5])[],(bytes32,address,bytes32,bytes32,uint64)[],(bytes32,bytes32,uint64,uint64,bytes)[]) _extractInfos) view returns()
func (_BrevisProof *BrevisProofSession) ValidateRequest(_requestId [32]byte, _chainId uint64, _extractInfos BrevisExtractInfos) error {
	return _BrevisProof.Contract.ValidateRequest(&_BrevisProof.CallOpts, _requestId, _chainId, _extractInfos)
}

// ValidateRequest is a free data retrieval call binding the contract method 0x7c08aa74.
//
// Solidity: function validateRequest(bytes32 _requestId, uint64 _chainId, (bytes32,(uint64,uint64,((uint8,uint64,address,bytes32),uint64,bytes32)[5])[],(bytes32,address,bytes32,bytes32,uint64)[],(bytes32,bytes32,uint64,uint64,bytes)[]) _extractInfos) view returns()
func (_BrevisProof *BrevisProofCallerSession) ValidateRequest(_requestId [32]byte, _chainId uint64, _extractInfos BrevisExtractInfos) error {
	return _BrevisProof.Contract.ValidateRequest(&_BrevisProof.CallOpts, _requestId, _chainId, _extractInfos)
}

// VerifierAddresses is a free data retrieval call binding the contract method 0xf5cec6af.
//
// Solidity: function verifierAddresses(uint64 ) view returns(address contractAppZkVerifier, address circuitAppZkVerifier)
func (_BrevisProof *BrevisProofCaller) VerifierAddresses(opts *bind.CallOpts, arg0 uint64) (struct {
	ContractAppZkVerifier common.Address
	CircuitAppZkVerifier  common.Address
}, error) {
	var out []interface{}
	err := _BrevisProof.contract.Call(opts, &out, "verifierAddresses", arg0)

	outstruct := new(struct {
		ContractAppZkVerifier common.Address
		CircuitAppZkVerifier  common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.ContractAppZkVerifier = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.CircuitAppZkVerifier = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// VerifierAddresses is a free data retrieval call binding the contract method 0xf5cec6af.
//
// Solidity: function verifierAddresses(uint64 ) view returns(address contractAppZkVerifier, address circuitAppZkVerifier)
func (_BrevisProof *BrevisProofSession) VerifierAddresses(arg0 uint64) (struct {
	ContractAppZkVerifier common.Address
	CircuitAppZkVerifier  common.Address
}, error) {
	return _BrevisProof.Contract.VerifierAddresses(&_BrevisProof.CallOpts, arg0)
}

// VerifierAddresses is a free data retrieval call binding the contract method 0xf5cec6af.
//
// Solidity: function verifierAddresses(uint64 ) view returns(address contractAppZkVerifier, address circuitAppZkVerifier)
func (_BrevisProof *BrevisProofCallerSession) VerifierAddresses(arg0 uint64) (struct {
	ContractAppZkVerifier common.Address
	CircuitAppZkVerifier  common.Address
}, error) {
	return _BrevisProof.Contract.VerifierAddresses(&_BrevisProof.CallOpts, arg0)
}

// VkHashesToBatchSize is a free data retrieval call binding the contract method 0x1be746b1.
//
// Solidity: function vkHashesToBatchSize(bytes32 ) view returns(uint256)
func (_BrevisProof *BrevisProofCaller) VkHashesToBatchSize(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _BrevisProof.contract.Call(opts, &out, "vkHashesToBatchSize", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// VkHashesToBatchSize is a free data retrieval call binding the contract method 0x1be746b1.
//
// Solidity: function vkHashesToBatchSize(bytes32 ) view returns(uint256)
func (_BrevisProof *BrevisProofSession) VkHashesToBatchSize(arg0 [32]byte) (*big.Int, error) {
	return _BrevisProof.Contract.VkHashesToBatchSize(&_BrevisProof.CallOpts, arg0)
}

// VkHashesToBatchSize is a free data retrieval call binding the contract method 0x1be746b1.
//
// Solidity: function vkHashesToBatchSize(bytes32 ) view returns(uint256)
func (_BrevisProof *BrevisProofCallerSession) VkHashesToBatchSize(arg0 [32]byte) (*big.Int, error) {
	return _BrevisProof.Contract.VkHashesToBatchSize(&_BrevisProof.CallOpts, arg0)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BrevisProof *BrevisProofTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BrevisProof.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BrevisProof *BrevisProofSession) RenounceOwnership() (*types.Transaction, error) {
	return _BrevisProof.Contract.RenounceOwnership(&_BrevisProof.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BrevisProof *BrevisProofTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BrevisProof.Contract.RenounceOwnership(&_BrevisProof.TransactOpts)
}

// SetBatchTierVkHashes is a paid mutator transaction binding the contract method 0x1e4971bb.
//
// Solidity: function setBatchTierVkHashes(bytes32[] _vkHashes, uint256[] _sizes) returns()
func (_BrevisProof *BrevisProofTransactor) SetBatchTierVkHashes(opts *bind.TransactOpts, _vkHashes [][32]byte, _sizes []*big.Int) (*types.Transaction, error) {
	return _BrevisProof.contract.Transact(opts, "setBatchTierVkHashes", _vkHashes, _sizes)
}

// SetBatchTierVkHashes is a paid mutator transaction binding the contract method 0x1e4971bb.
//
// Solidity: function setBatchTierVkHashes(bytes32[] _vkHashes, uint256[] _sizes) returns()
func (_BrevisProof *BrevisProofSession) SetBatchTierVkHashes(_vkHashes [][32]byte, _sizes []*big.Int) (*types.Transaction, error) {
	return _BrevisProof.Contract.SetBatchTierVkHashes(&_BrevisProof.TransactOpts, _vkHashes, _sizes)
}

// SetBatchTierVkHashes is a paid mutator transaction binding the contract method 0x1e4971bb.
//
// Solidity: function setBatchTierVkHashes(bytes32[] _vkHashes, uint256[] _sizes) returns()
func (_BrevisProof *BrevisProofTransactorSession) SetBatchTierVkHashes(_vkHashes [][32]byte, _sizes []*big.Int) (*types.Transaction, error) {
	return _BrevisProof.Contract.SetBatchTierVkHashes(&_BrevisProof.TransactOpts, _vkHashes, _sizes)
}

// SubmitProof is a paid mutator transaction binding the contract method 0x25e49034.
//
// Solidity: function submitProof(uint64 _chainId, bytes _proofWithPubInputs, bool _withAppProof) returns(bytes32 _requestId)
func (_BrevisProof *BrevisProofTransactor) SubmitProof(opts *bind.TransactOpts, _chainId uint64, _proofWithPubInputs []byte, _withAppProof bool) (*types.Transaction, error) {
	return _BrevisProof.contract.Transact(opts, "submitProof", _chainId, _proofWithPubInputs, _withAppProof)
}

// SubmitProof is a paid mutator transaction binding the contract method 0x25e49034.
//
// Solidity: function submitProof(uint64 _chainId, bytes _proofWithPubInputs, bool _withAppProof) returns(bytes32 _requestId)
func (_BrevisProof *BrevisProofSession) SubmitProof(_chainId uint64, _proofWithPubInputs []byte, _withAppProof bool) (*types.Transaction, error) {
	return _BrevisProof.Contract.SubmitProof(&_BrevisProof.TransactOpts, _chainId, _proofWithPubInputs, _withAppProof)
}

// SubmitProof is a paid mutator transaction binding the contract method 0x25e49034.
//
// Solidity: function submitProof(uint64 _chainId, bytes _proofWithPubInputs, bool _withAppProof) returns(bytes32 _requestId)
func (_BrevisProof *BrevisProofTransactorSession) SubmitProof(_chainId uint64, _proofWithPubInputs []byte, _withAppProof bool) (*types.Transaction, error) {
	return _BrevisProof.Contract.SubmitProof(&_BrevisProof.TransactOpts, _chainId, _proofWithPubInputs, _withAppProof)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BrevisProof *BrevisProofTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BrevisProof.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BrevisProof *BrevisProofSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BrevisProof.Contract.TransferOwnership(&_BrevisProof.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BrevisProof *BrevisProofTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BrevisProof.Contract.TransferOwnership(&_BrevisProof.TransactOpts, newOwner)
}

// UpdateSmtContract is a paid mutator transaction binding the contract method 0x1396511e.
//
// Solidity: function updateSmtContract(address _smtContract) returns()
func (_BrevisProof *BrevisProofTransactor) UpdateSmtContract(opts *bind.TransactOpts, _smtContract common.Address) (*types.Transaction, error) {
	return _BrevisProof.contract.Transact(opts, "updateSmtContract", _smtContract)
}

// UpdateSmtContract is a paid mutator transaction binding the contract method 0x1396511e.
//
// Solidity: function updateSmtContract(address _smtContract) returns()
func (_BrevisProof *BrevisProofSession) UpdateSmtContract(_smtContract common.Address) (*types.Transaction, error) {
	return _BrevisProof.Contract.UpdateSmtContract(&_BrevisProof.TransactOpts, _smtContract)
}

// UpdateSmtContract is a paid mutator transaction binding the contract method 0x1396511e.
//
// Solidity: function updateSmtContract(address _smtContract) returns()
func (_BrevisProof *BrevisProofTransactorSession) UpdateSmtContract(_smtContract common.Address) (*types.Transaction, error) {
	return _BrevisProof.Contract.UpdateSmtContract(&_BrevisProof.TransactOpts, _smtContract)
}

// UpdateVerifierAddress is a paid mutator transaction binding the contract method 0xb201326e.
//
// Solidity: function updateVerifierAddress(uint64[] _chainIds, (address,address)[] _verifierAddresses) returns()
func (_BrevisProof *BrevisProofTransactor) UpdateVerifierAddress(opts *bind.TransactOpts, _chainIds []uint64, _verifierAddresses []BrevisProofChainZKVerifier) (*types.Transaction, error) {
	return _BrevisProof.contract.Transact(opts, "updateVerifierAddress", _chainIds, _verifierAddresses)
}

// UpdateVerifierAddress is a paid mutator transaction binding the contract method 0xb201326e.
//
// Solidity: function updateVerifierAddress(uint64[] _chainIds, (address,address)[] _verifierAddresses) returns()
func (_BrevisProof *BrevisProofSession) UpdateVerifierAddress(_chainIds []uint64, _verifierAddresses []BrevisProofChainZKVerifier) (*types.Transaction, error) {
	return _BrevisProof.Contract.UpdateVerifierAddress(&_BrevisProof.TransactOpts, _chainIds, _verifierAddresses)
}

// UpdateVerifierAddress is a paid mutator transaction binding the contract method 0xb201326e.
//
// Solidity: function updateVerifierAddress(uint64[] _chainIds, (address,address)[] _verifierAddresses) returns()
func (_BrevisProof *BrevisProofTransactorSession) UpdateVerifierAddress(_chainIds []uint64, _verifierAddresses []BrevisProofChainZKVerifier) (*types.Transaction, error) {
	return _BrevisProof.Contract.UpdateVerifierAddress(&_BrevisProof.TransactOpts, _chainIds, _verifierAddresses)
}

// BrevisProofBatchTierVkHashesUpdatedIterator is returned from FilterBatchTierVkHashesUpdated and is used to iterate over the raw logs and unpacked data for BatchTierVkHashesUpdated events raised by the BrevisProof contract.
type BrevisProofBatchTierVkHashesUpdatedIterator struct {
	Event *BrevisProofBatchTierVkHashesUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrevisProofBatchTierVkHashesUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrevisProofBatchTierVkHashesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrevisProofBatchTierVkHashesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrevisProofBatchTierVkHashesUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrevisProofBatchTierVkHashesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrevisProofBatchTierVkHashesUpdated represents a BatchTierVkHashesUpdated event raised by the BrevisProof contract.
type BrevisProofBatchTierVkHashesUpdated struct {
	VkHashes [][32]byte
	Sizes    []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBatchTierVkHashesUpdated is a free log retrieval operation binding the contract event 0x011d93b74200525baf6adf5cba27a9d8f45c6aec5f9862889711c9f1630879ac.
//
// Solidity: event BatchTierVkHashesUpdated(bytes32[] vkHashes, uint256[] sizes)
func (_BrevisProof *BrevisProofFilterer) FilterBatchTierVkHashesUpdated(opts *bind.FilterOpts) (*BrevisProofBatchTierVkHashesUpdatedIterator, error) {

	logs, sub, err := _BrevisProof.contract.FilterLogs(opts, "BatchTierVkHashesUpdated")
	if err != nil {
		return nil, err
	}
	return &BrevisProofBatchTierVkHashesUpdatedIterator{contract: _BrevisProof.contract, event: "BatchTierVkHashesUpdated", logs: logs, sub: sub}, nil
}

// WatchBatchTierVkHashesUpdated is a free log subscription operation binding the contract event 0x011d93b74200525baf6adf5cba27a9d8f45c6aec5f9862889711c9f1630879ac.
//
// Solidity: event BatchTierVkHashesUpdated(bytes32[] vkHashes, uint256[] sizes)
func (_BrevisProof *BrevisProofFilterer) WatchBatchTierVkHashesUpdated(opts *bind.WatchOpts, sink chan<- *BrevisProofBatchTierVkHashesUpdated) (event.Subscription, error) {

	logs, sub, err := _BrevisProof.contract.WatchLogs(opts, "BatchTierVkHashesUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrevisProofBatchTierVkHashesUpdated)
				if err := _BrevisProof.contract.UnpackLog(event, "BatchTierVkHashesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBatchTierVkHashesUpdated is a log parse operation binding the contract event 0x011d93b74200525baf6adf5cba27a9d8f45c6aec5f9862889711c9f1630879ac.
//
// Solidity: event BatchTierVkHashesUpdated(bytes32[] vkHashes, uint256[] sizes)
func (_BrevisProof *BrevisProofFilterer) ParseBatchTierVkHashesUpdated(log types.Log) (*BrevisProofBatchTierVkHashesUpdated, error) {
	event := new(BrevisProofBatchTierVkHashesUpdated)
	if err := _BrevisProof.contract.UnpackLog(event, "BatchTierVkHashesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BrevisProofOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the BrevisProof contract.
type BrevisProofOwnershipTransferredIterator struct {
	Event *BrevisProofOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrevisProofOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrevisProofOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrevisProofOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrevisProofOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrevisProofOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrevisProofOwnershipTransferred represents a OwnershipTransferred event raised by the BrevisProof contract.
type BrevisProofOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BrevisProof *BrevisProofFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BrevisProofOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BrevisProof.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BrevisProofOwnershipTransferredIterator{contract: _BrevisProof.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BrevisProof *BrevisProofFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BrevisProofOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BrevisProof.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrevisProofOwnershipTransferred)
				if err := _BrevisProof.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BrevisProof *BrevisProofFilterer) ParseOwnershipTransferred(log types.Log) (*BrevisProofOwnershipTransferred, error) {
	event := new(BrevisProofOwnershipTransferred)
	if err := _BrevisProof.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BrevisProofSmtContractUpdatedIterator is returned from FilterSmtContractUpdated and is used to iterate over the raw logs and unpacked data for SmtContractUpdated events raised by the BrevisProof contract.
type BrevisProofSmtContractUpdatedIterator struct {
	Event *BrevisProofSmtContractUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrevisProofSmtContractUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrevisProofSmtContractUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrevisProofSmtContractUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrevisProofSmtContractUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrevisProofSmtContractUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrevisProofSmtContractUpdated represents a SmtContractUpdated event raised by the BrevisProof contract.
type BrevisProofSmtContractUpdated struct {
	SmtContract common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSmtContractUpdated is a free log retrieval operation binding the contract event 0x674c535cde998bcb47d0688f644df545597c7d6edb95643cb21c82c2d490ff7f.
//
// Solidity: event SmtContractUpdated(address smtContract)
func (_BrevisProof *BrevisProofFilterer) FilterSmtContractUpdated(opts *bind.FilterOpts) (*BrevisProofSmtContractUpdatedIterator, error) {

	logs, sub, err := _BrevisProof.contract.FilterLogs(opts, "SmtContractUpdated")
	if err != nil {
		return nil, err
	}
	return &BrevisProofSmtContractUpdatedIterator{contract: _BrevisProof.contract, event: "SmtContractUpdated", logs: logs, sub: sub}, nil
}

// WatchSmtContractUpdated is a free log subscription operation binding the contract event 0x674c535cde998bcb47d0688f644df545597c7d6edb95643cb21c82c2d490ff7f.
//
// Solidity: event SmtContractUpdated(address smtContract)
func (_BrevisProof *BrevisProofFilterer) WatchSmtContractUpdated(opts *bind.WatchOpts, sink chan<- *BrevisProofSmtContractUpdated) (event.Subscription, error) {

	logs, sub, err := _BrevisProof.contract.WatchLogs(opts, "SmtContractUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrevisProofSmtContractUpdated)
				if err := _BrevisProof.contract.UnpackLog(event, "SmtContractUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSmtContractUpdated is a log parse operation binding the contract event 0x674c535cde998bcb47d0688f644df545597c7d6edb95643cb21c82c2d490ff7f.
//
// Solidity: event SmtContractUpdated(address smtContract)
func (_BrevisProof *BrevisProofFilterer) ParseSmtContractUpdated(log types.Log) (*BrevisProofSmtContractUpdated, error) {
	event := new(BrevisProofSmtContractUpdated)
	if err := _BrevisProof.contract.UnpackLog(event, "SmtContractUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BrevisProofVerifierAddressesUpdatedIterator is returned from FilterVerifierAddressesUpdated and is used to iterate over the raw logs and unpacked data for VerifierAddressesUpdated events raised by the BrevisProof contract.
type BrevisProofVerifierAddressesUpdatedIterator struct {
	Event *BrevisProofVerifierAddressesUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrevisProofVerifierAddressesUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrevisProofVerifierAddressesUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrevisProofVerifierAddressesUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrevisProofVerifierAddressesUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrevisProofVerifierAddressesUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrevisProofVerifierAddressesUpdated represents a VerifierAddressesUpdated event raised by the BrevisProof contract.
type BrevisProofVerifierAddressesUpdated struct {
	ChainIds     []uint64
	NewAddresses []BrevisProofChainZKVerifier
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterVerifierAddressesUpdated is a free log retrieval operation binding the contract event 0xc343b5bb763b4b0cdbd72c4b7a9627ce33d7eaff0cecca036b0af41ce9ca55a8.
//
// Solidity: event VerifierAddressesUpdated(uint64[] chainIds, (address,address)[] newAddresses)
func (_BrevisProof *BrevisProofFilterer) FilterVerifierAddressesUpdated(opts *bind.FilterOpts) (*BrevisProofVerifierAddressesUpdatedIterator, error) {

	logs, sub, err := _BrevisProof.contract.FilterLogs(opts, "VerifierAddressesUpdated")
	if err != nil {
		return nil, err
	}
	return &BrevisProofVerifierAddressesUpdatedIterator{contract: _BrevisProof.contract, event: "VerifierAddressesUpdated", logs: logs, sub: sub}, nil
}

// WatchVerifierAddressesUpdated is a free log subscription operation binding the contract event 0xc343b5bb763b4b0cdbd72c4b7a9627ce33d7eaff0cecca036b0af41ce9ca55a8.
//
// Solidity: event VerifierAddressesUpdated(uint64[] chainIds, (address,address)[] newAddresses)
func (_BrevisProof *BrevisProofFilterer) WatchVerifierAddressesUpdated(opts *bind.WatchOpts, sink chan<- *BrevisProofVerifierAddressesUpdated) (event.Subscription, error) {

	logs, sub, err := _BrevisProof.contract.WatchLogs(opts, "VerifierAddressesUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrevisProofVerifierAddressesUpdated)
				if err := _BrevisProof.contract.UnpackLog(event, "VerifierAddressesUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifierAddressesUpdated is a log parse operation binding the contract event 0xc343b5bb763b4b0cdbd72c4b7a9627ce33d7eaff0cecca036b0af41ce9ca55a8.
//
// Solidity: event VerifierAddressesUpdated(uint64[] chainIds, (address,address)[] newAddresses)
func (_BrevisProof *BrevisProofFilterer) ParseVerifierAddressesUpdated(log types.Log) (*BrevisProofVerifierAddressesUpdated, error) {
	event := new(BrevisProofVerifierAddressesUpdated)
	if err := _BrevisProof.contract.UnpackLog(event, "VerifierAddressesUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BrevisRequestMetaData contains all meta data concerning the BrevisRequest contract.
var BrevisRequestMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"},{\"internalType\":\"contractIBrevisProof\",\"name\":\"_brevisProof\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contractIBrevisApp\",\"name\":\"callback\",\"type\":\"address\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"RequestTimeoutUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"brevisProof\",\"outputs\":[{\"internalType\":\"contractIBrevisProof\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"chargeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"collectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_withAppProof\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_appCircuitOutput\",\"type\":\"bytes\"}],\"name\":\"fulfillRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"queryRequestStatus\",\"outputs\":[{\"internalType\":\"enumBrevisRequest.RequestStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refundee\",\"type\":\"address\"},{\"internalType\":\"contractIBrevisApp\",\"name\":\"callback\",\"type\":\"address\"},{\"internalType\":\"enumBrevisRequest.RequestStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_refundee\",\"type\":\"address\"},{\"internalType\":\"contractIBrevisApp\",\"name\":\"_callback\",\"type\":\"address\"}],\"name\":\"sendRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeout\",\"type\":\"uint256\"}],\"name\":\"setRequestTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x6080346100bd57601f610d8638819003918201601f19168301916001600160401b038311848410176100c15780849260409485528339810103126100bd5780516001600160a01b0391828216918290036100bd5760200151908282168092036100bd575f549060018060a01b03199133838216175f55604051943391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a38160015416176001556003541617600355610cb090816100d68239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040818152600480361015610020575b505050361561001e575f80fd5b005b5f92833560e01c9081633f20b4c91461097957508063622b6af4146109185780636a961735146106fe578063715018a61461069e578381637249fbb6146105fe575080637ff7b0d2146105715780638da5cb5b1461054b5780639d866985146104e7578063a42dce801461046e578063b6979c3e14610438578063c415b95c14610410578063c7f5aaa0146103e8578063da47dc32146101d3578063e713b4c9146101af5763f2fde38b0361001157346101ab5760203660031901126101ab576100e86109dd565b908354906001600160a01b0380831693610103338614610c2f565b169384156101425750506001600160a01b031916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b8382346101cf5760203660031901126101cf576101cc9035610af5565b80f35b5080fd5b50919060603660031901126101cf578235906101ed6109c7565b90604435916001600160a01b038084168094036103e457848652602091878352838720546103a157811690811561035e5760025442019081421161034b5784519160a0830183811067ffffffffffffffff8211176103385786528252600384830192348452868101948552606081019488865260808201948b86528a8c528c8852888c209251835551600183015583600283019151166001600160a01b031982541617905501925116825491516003811015610325577fffffffffffffffffffffff0000000000000000000000000000000000000000009092161760a09190911b74ff00000000000000000000000000000000000000001617905581519384523390840152349083015260608201527f4eede03ca33645529b4d82428b024149165298c901cf7453f68eb43bd3d3b65890608090a180f35b634e487b7160e01b895260218a52602489fd5b634e487b7160e01b8a5260418b5260248afd5b634e487b7160e01b885260118952602488fd5b835162461bcd60e51b8152808901849052601560248201527f726566756e646565206e6f742070726f766964656400000000000000000000006044820152606490fd5b835162461bcd60e51b8152808901849052601860248201527f7265717565737420616c726561647920696e20717565756500000000000000006044820152606490fd5b8580fd5b5050346101cf57816003193601126101cf576020906001600160a01b03600354169051908152f35b5050346101cf57816003193601126101cf576020906001600160a01b03600154169051908152f35b50346101ab5760203660031901126101ab5760ff6003836020958461046c95358252875220015460a01c16915180926109f3565bf35b5050346101cf5760203660031901126101cf577f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f38906104ab6109dd565b6001600160a01b036104c1818654163314610c2f565b80600154921690816001600160a01b03198416176001558351921682526020820152a180f35b50346101ab5760203660031901126101ab578160a0938261046c93358252602052208054926001820154916001600160a01b039160038360028401541692015493815196875260208701528501528116606084015260ff6080840191851c166109f3565b5050346101cf57816003193601126101cf576001600160a01b0360209254169051908152f35b50346101ab57816003193601126101ab5761058a6109c7565b916001600160a01b036001541633036105bb57508280806101cc948194359061c350f16105b5610a6a565b50610be3565b906020606492519162461bcd60e51b8352820152601160248201527f6e6f742066656520636f6c6c6563746f720000000000000000000000000000006044820152fd5b8084843461069a57602036600319011261069a57803580845281602052610629838520541515610aa9565b808452816020528284208054421115610696578480808084600399610669965560016001600160a01b036002830154169101549061c350f16105b5610a6a565b84526020528220017402000000000000000000000000000000000000000060ff60a01b1982541617905580f35b8480fd5b5050fd5b83346106fb57806003193601126106fb578080546001600160a01b03196001600160a01b038216916106d1338414610c2f565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b509190346101cf5760a03660031901126101cf5767ffffffffffffffff833560243582811690819003610696576044358381116103e4576107429036908801610995565b94906064359485151580960361090357608435908111610903576107699036908a01610995565b939095896001600160a01b03936107a485600354169187519b8c968795630979240d60e21b8752860152606060248601526064850191610a4a565b926044830152818b60209b8c9503925af190811561090e5788916108dd575b50840361089a5786976107d585610af5565b8488528087526003838920017401000000000000000000000000000000000000000060ff60a01b198254161790557f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6878451878152a1848852865260038288200154169384610842578680f35b8695610873610881928895855195869485019863eefe3f0b60e01b8a52602486015260448501526064840191610a4a565b03601f198101835282610a14565b51925af15061088e610a6a565b50805f80808080808680f35b815162461bcd60e51b8152808901879052601d60248201527f72657175657374496420616e642070726f6f66206e6f74206d617463680000006044820152606490fd5b90508681813d8311610907575b6108f48183610a14565b8101031261090357515f6107c3565b8780fd5b503d6108ea565b83513d8a823e3d90fd5b5090346101ab5760203660031901126101ab577f87a73c061f18ffd513249d1d727921e40e348948b01e2979efb36ef4f5204a6391356109636001600160a01b038554163314610c2f565b600254908060025582519182526020820152a180f35b8490346101cf57816003193601126101cf576020906002548152f35b9181601f840112156109c35782359167ffffffffffffffff83116109c357602083818601950101116109c357565b5f80fd5b602435906001600160a01b03821682036109c357565b600435906001600160a01b03821682036109c357565b906003821015610a005752565b634e487b7160e01b5f52602160045260245ffd5b90601f8019910116810190811067ffffffffffffffff821117610a3657604052565b634e487b7160e01b5f52604160045260245ffd5b908060209392818452848401375f828201840152601f01601f1916010190565b3d15610aa4573d9067ffffffffffffffff8211610a365760405191610a99601f8201601f191660200184610a14565b82523d5f602084013e565b606090565b15610ab057565b60405162461bcd60e51b815260206004820152601460248201527f72657175657374206e6f7420696e2071756575650000000000000000000000006044820152606490fd5b5f9080825260209060048252610b1060408420541515610aa9565b6024826001600160a01b0360035416604051928380926371e8f36b60e11b82528660048301525afa908115610bd8578491610b9e575b5015610b59578252600490526040812055565b60405162461bcd60e51b815260048101839052601360248201527f70726f6f66206e6f742067656e657261746564000000000000000000000000006044820152606490fd5b90508281813d8311610bd1575b610bb58183610a14565b81010312610bcd57518015158103610bcd575f610b46565b8380fd5b503d610bab565b6040513d86823e3d90fd5b15610bea57565b60405162461bcd60e51b815260206004820152601260248201527f73656e64206e6174697665206661696c656400000000000000000000000000006044820152606490fd5b15610c3657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfea264697066735822122078f0506a9a2f40b57c8cc4840d2bb7801982ff237b1cf77fc6abb41bd1f66c1d64736f6c63430008150033",
}

// BrevisRequestABI is the input ABI used to generate the binding from.
// Deprecated: Use BrevisRequestMetaData.ABI instead.
var BrevisRequestABI = BrevisRequestMetaData.ABI

// BrevisRequestBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BrevisRequestMetaData.Bin instead.
var BrevisRequestBin = BrevisRequestMetaData.Bin

// DeployBrevisRequest deploys a new Ethereum contract, binding an instance of BrevisRequest to it.
func DeployBrevisRequest(auth *bind.TransactOpts, backend bind.ContractBackend, _feeCollector common.Address, _brevisProof common.Address) (common.Address, *types.Transaction, *BrevisRequest, error) {
	parsed, err := BrevisRequestMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BrevisRequestBin), backend, _feeCollector, _brevisProof)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BrevisRequest{BrevisRequestCaller: BrevisRequestCaller{contract: contract}, BrevisRequestTransactor: BrevisRequestTransactor{contract: contract}, BrevisRequestFilterer: BrevisRequestFilterer{contract: contract}}, nil
}

// BrevisRequest is an auto generated Go binding around an Ethereum contract.
type BrevisRequest struct {
	BrevisRequestCaller     // Read-only binding to the contract
	BrevisRequestTransactor // Write-only binding to the contract
	BrevisRequestFilterer   // Log filterer for contract events
}

// BrevisRequestCaller is an auto generated read-only Go binding around an Ethereum contract.
type BrevisRequestCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BrevisRequestTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BrevisRequestTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BrevisRequestFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BrevisRequestFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BrevisRequestSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BrevisRequestSession struct {
	Contract     *BrevisRequest    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BrevisRequestCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BrevisRequestCallerSession struct {
	Contract *BrevisRequestCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// BrevisRequestTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BrevisRequestTransactorSession struct {
	Contract     *BrevisRequestTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// BrevisRequestRaw is an auto generated low-level Go binding around an Ethereum contract.
type BrevisRequestRaw struct {
	Contract *BrevisRequest // Generic contract binding to access the raw methods on
}

// BrevisRequestCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BrevisRequestCallerRaw struct {
	Contract *BrevisRequestCaller // Generic read-only contract binding to access the raw methods on
}

// BrevisRequestTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BrevisRequestTransactorRaw struct {
	Contract *BrevisRequestTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBrevisRequest creates a new instance of BrevisRequest, bound to a specific deployed contract.
func NewBrevisRequest(address common.Address, backend bind.ContractBackend) (*BrevisRequest, error) {
	contract, err := bindBrevisRequest(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BrevisRequest{BrevisRequestCaller: BrevisRequestCaller{contract: contract}, BrevisRequestTransactor: BrevisRequestTransactor{contract: contract}, BrevisRequestFilterer: BrevisRequestFilterer{contract: contract}}, nil
}

// NewBrevisRequestCaller creates a new read-only instance of BrevisRequest, bound to a specific deployed contract.
func NewBrevisRequestCaller(address common.Address, caller bind.ContractCaller) (*BrevisRequestCaller, error) {
	contract, err := bindBrevisRequest(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BrevisRequestCaller{contract: contract}, nil
}

// NewBrevisRequestTransactor creates a new write-only instance of BrevisRequest, bound to a specific deployed contract.
func NewBrevisRequestTransactor(address common.Address, transactor bind.ContractTransactor) (*BrevisRequestTransactor, error) {
	contract, err := bindBrevisRequest(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BrevisRequestTransactor{contract: contract}, nil
}

// NewBrevisRequestFilterer creates a new log filterer instance of BrevisRequest, bound to a specific deployed contract.
func NewBrevisRequestFilterer(address common.Address, filterer bind.ContractFilterer) (*BrevisRequestFilterer, error) {
	contract, err := bindBrevisRequest(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BrevisRequestFilterer{contract: contract}, nil
}

// bindBrevisRequest binds a generic wrapper to an already deployed contract.
func bindBrevisRequest(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BrevisRequestMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BrevisRequest *BrevisRequestRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BrevisRequest.Contract.BrevisRequestCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BrevisRequest *BrevisRequestRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BrevisRequest.Contract.BrevisRequestTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BrevisRequest *BrevisRequestRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BrevisRequest.Contract.BrevisRequestTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BrevisRequest *BrevisRequestCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BrevisRequest.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BrevisRequest *BrevisRequestTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BrevisRequest.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BrevisRequest *BrevisRequestTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BrevisRequest.Contract.contract.Transact(opts, method, params...)
}

// BrevisProof is a free data retrieval call binding the contract method 0xc7f5aaa0.
//
// Solidity: function brevisProof() view returns(address)
func (_BrevisRequest *BrevisRequestCaller) BrevisProof(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BrevisRequest.contract.Call(opts, &out, "brevisProof")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BrevisProof is a free data retrieval call binding the contract method 0xc7f5aaa0.
//
// Solidity: function brevisProof() view returns(address)
func (_BrevisRequest *BrevisRequestSession) BrevisProof() (common.Address, error) {
	return _BrevisRequest.Contract.BrevisProof(&_BrevisRequest.CallOpts)
}

// BrevisProof is a free data retrieval call binding the contract method 0xc7f5aaa0.
//
// Solidity: function brevisProof() view returns(address)
func (_BrevisRequest *BrevisRequestCallerSession) BrevisProof() (common.Address, error) {
	return _BrevisRequest.Contract.BrevisProof(&_BrevisRequest.CallOpts)
}

// FeeCollector is a free data retrieval call binding the contract method 0xc415b95c.
//
// Solidity: function feeCollector() view returns(address)
func (_BrevisRequest *BrevisRequestCaller) FeeCollector(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BrevisRequest.contract.Call(opts, &out, "feeCollector")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FeeCollector is a free data retrieval call binding the contract method 0xc415b95c.
//
// Solidity: function feeCollector() view returns(address)
func (_BrevisRequest *BrevisRequestSession) FeeCollector() (common.Address, error) {
	return _BrevisRequest.Contract.FeeCollector(&_BrevisRequest.CallOpts)
}

// FeeCollector is a free data retrieval call binding the contract method 0xc415b95c.
//
// Solidity: function feeCollector() view returns(address)
func (_BrevisRequest *BrevisRequestCallerSession) FeeCollector() (common.Address, error) {
	return _BrevisRequest.Contract.FeeCollector(&_BrevisRequest.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BrevisRequest *BrevisRequestCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BrevisRequest.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BrevisRequest *BrevisRequestSession) Owner() (common.Address, error) {
	return _BrevisRequest.Contract.Owner(&_BrevisRequest.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BrevisRequest *BrevisRequestCallerSession) Owner() (common.Address, error) {
	return _BrevisRequest.Contract.Owner(&_BrevisRequest.CallOpts)
}

// QueryRequestStatus is a free data retrieval call binding the contract method 0xb6979c3e.
//
// Solidity: function queryRequestStatus(bytes32 _requestId) view returns(uint8)
func (_BrevisRequest *BrevisRequestCaller) QueryRequestStatus(opts *bind.CallOpts, _requestId [32]byte) (uint8, error) {
	var out []interface{}
	err := _BrevisRequest.contract.Call(opts, &out, "queryRequestStatus", _requestId)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// QueryRequestStatus is a free data retrieval call binding the contract method 0xb6979c3e.
//
// Solidity: function queryRequestStatus(bytes32 _requestId) view returns(uint8)
func (_BrevisRequest *BrevisRequestSession) QueryRequestStatus(_requestId [32]byte) (uint8, error) {
	return _BrevisRequest.Contract.QueryRequestStatus(&_BrevisRequest.CallOpts, _requestId)
}

// QueryRequestStatus is a free data retrieval call binding the contract method 0xb6979c3e.
//
// Solidity: function queryRequestStatus(bytes32 _requestId) view returns(uint8)
func (_BrevisRequest *BrevisRequestCallerSession) QueryRequestStatus(_requestId [32]byte) (uint8, error) {
	return _BrevisRequest.Contract.QueryRequestStatus(&_BrevisRequest.CallOpts, _requestId)
}

// RequestTimeout is a free data retrieval call binding the contract method 0x3f20b4c9.
//
// Solidity: function requestTimeout() view returns(uint256)
func (_BrevisRequest *BrevisRequestCaller) RequestTimeout(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BrevisRequest.contract.Call(opts, &out, "requestTimeout")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RequestTimeout is a free data retrieval call binding the contract method 0x3f20b4c9.
//
// Solidity: function requestTimeout() view returns(uint256)
func (_BrevisRequest *BrevisRequestSession) RequestTimeout() (*big.Int, error) {
	return _BrevisRequest.Contract.RequestTimeout(&_BrevisRequest.CallOpts)
}

// RequestTimeout is a free data retrieval call binding the contract method 0x3f20b4c9.
//
// Solidity: function requestTimeout() view returns(uint256)
func (_BrevisRequest *BrevisRequestCallerSession) RequestTimeout() (*big.Int, error) {
	return _BrevisRequest.Contract.RequestTimeout(&_BrevisRequest.CallOpts)
}

// Requests is a free data retrieval call binding the contract method 0x9d866985.
//
// Solidity: function requests(bytes32 ) view returns(uint256 deadline, uint256 fee, address refundee, address callback, uint8 status)
func (_BrevisRequest *BrevisRequestCaller) Requests(opts *bind.CallOpts, arg0 [32]byte) (struct {
	Deadline *big.Int
	Fee      *big.Int
	Refundee common.Address
	Callback common.Address
	Status   uint8
}, error) {
	var out []interface{}
	err := _BrevisRequest.contract.Call(opts, &out, "requests", arg0)

	outstruct := new(struct {
		Deadline *big.Int
		Fee      *big.Int
		Refundee common.Address
		Callback common.Address
		Status   uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Deadline = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Fee = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.Refundee = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)
	outstruct.Callback = *abi.ConvertType(out[3], new(common.Address)).(*common.Address)
	outstruct.Status = *abi.ConvertType(out[4], new(uint8)).(*uint8)

	return *outstruct, err

}

// Requests is a free data retrieval call binding the contract method 0x9d866985.
//
// Solidity: function requests(bytes32 ) view returns(uint256 deadline, uint256 fee, address refundee, address callback, uint8 status)
func (_BrevisRequest *BrevisRequestSession) Requests(arg0 [32]byte) (struct {
	Deadline *big.Int
	Fee      *big.Int
	Refundee common.Address
	Callback common.Address
	Status   uint8
}, error) {
	return _BrevisRequest.Contract.Requests(&_BrevisRequest.CallOpts, arg0)
}

// Requests is a free data retrieval call binding the contract method 0x9d866985.
//
// Solidity: function requests(bytes32 ) view returns(uint256 deadline, uint256 fee, address refundee, address callback, uint8 status)
func (_BrevisRequest *BrevisRequestCallerSession) Requests(arg0 [32]byte) (struct {
	Deadline *big.Int
	Fee      *big.Int
	Refundee common.Address
	Callback common.Address
	Status   uint8
}, error) {
	return _BrevisRequest.Contract.Requests(&_BrevisRequest.CallOpts, arg0)
}

// ChargeFee is a paid mutator transaction binding the contract method 0xe713b4c9.
//
// Solidity: function chargeFee(bytes32 _requestId) returns()
func (_BrevisRequest *BrevisRequestTransactor) ChargeFee(opts *bind.TransactOpts, _requestId [32]byte) (*types.Transaction, error) {
	return _BrevisRequest.contract.Transact(opts, "chargeFee", _requestId)
}

// ChargeFee is a paid mutator transaction binding the contract method 0xe713b4c9.
//
// Solidity: function chargeFee(bytes32 _requestId) returns()
func (_BrevisRequest *BrevisRequestSession) ChargeFee(_requestId [32]byte) (*types.Transaction, error) {
	return _BrevisRequest.Contract.ChargeFee(&_BrevisRequest.TransactOpts, _requestId)
}

// ChargeFee is a paid mutator transaction binding the contract method 0xe713b4c9.
//
// Solidity: function chargeFee(bytes32 _requestId) returns()
func (_BrevisRequest *BrevisRequestTransactorSession) ChargeFee(_requestId [32]byte) (*types.Transaction, error) {
	return _BrevisRequest.Contract.ChargeFee(&_BrevisRequest.TransactOpts, _requestId)
}

// CollectFee is a paid mutator transaction binding the contract method 0x7ff7b0d2.
//
// Solidity: function collectFee(uint256 _amount, address _to) returns()
func (_BrevisRequest *BrevisRequestTransactor) CollectFee(opts *bind.TransactOpts, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _BrevisRequest.contract.Transact(opts, "collectFee", _amount, _to)
}

// CollectFee is a paid mutator transaction binding the contract method 0x7ff7b0d2.
//
// Solidity: function collectFee(uint256 _amount, address _to) returns()
func (_BrevisRequest *BrevisRequestSession) CollectFee(_amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _BrevisRequest.Contract.CollectFee(&_BrevisRequest.TransactOpts, _amount, _to)
}

// CollectFee is a paid mutator transaction binding the contract method 0x7ff7b0d2.
//
// Solidity: function collectFee(uint256 _amount, address _to) returns()
func (_BrevisRequest *BrevisRequestTransactorSession) CollectFee(_amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _BrevisRequest.Contract.CollectFee(&_BrevisRequest.TransactOpts, _amount, _to)
}

// FulfillRequest is a paid mutator transaction binding the contract method 0x6a961735.
//
// Solidity: function fulfillRequest(bytes32 _requestId, uint64 _chainId, bytes _proof, bool _withAppProof, bytes _appCircuitOutput) returns()
func (_BrevisRequest *BrevisRequestTransactor) FulfillRequest(opts *bind.TransactOpts, _requestId [32]byte, _chainId uint64, _proof []byte, _withAppProof bool, _appCircuitOutput []byte) (*types.Transaction, error) {
	return _BrevisRequest.contract.Transact(opts, "fulfillRequest", _requestId, _chainId, _proof, _withAppProof, _appCircuitOutput)
}

// FulfillRequest is a paid mutator transaction binding the contract method 0x6a961735.
//
// Solidity: function fulfillRequest(bytes32 _requestId, uint64 _chainId, bytes _proof, bool _withAppProof, bytes _appCircuitOutput) returns()
func (_BrevisRequest *BrevisRequestSession) FulfillRequest(_requestId [32]byte, _chainId uint64, _proof []byte, _withAppProof bool, _appCircuitOutput []byte) (*types.Transaction, error) {
	return _BrevisRequest.Contract.FulfillRequest(&_BrevisRequest.TransactOpts, _requestId, _chainId, _proof, _withAppProof, _appCircuitOutput)
}

// FulfillRequest is a paid mutator transaction binding the contract method 0x6a961735.
//
// Solidity: function fulfillRequest(bytes32 _requestId, uint64 _chainId, bytes _proof, bool _withAppProof, bytes _appCircuitOutput) returns()
func (_BrevisRequest *BrevisRequestTransactorSession) FulfillRequest(_requestId [32]byte, _chainId uint64, _proof []byte, _withAppProof bool, _appCircuitOutput []byte) (*types.Transaction, error) {
	return _BrevisRequest.Contract.FulfillRequest(&_BrevisRequest.TransactOpts, _requestId, _chainId, _proof, _withAppProof, _appCircuitOutput)
}

// Refund is a paid mutator transaction binding the contract method 0x7249fbb6.
//
// Solidity: function refund(bytes32 _requestId) returns()
func (_BrevisRequest *BrevisRequestTransactor) Refund(opts *bind.TransactOpts, _requestId [32]byte) (*types.Transaction, error) {
	return _BrevisRequest.contract.Transact(opts, "refund", _requestId)
}

// Refund is a paid mutator transaction binding the contract method 0x7249fbb6.
//
// Solidity: function refund(bytes32 _requestId) returns()
func (_BrevisRequest *BrevisRequestSession) Refund(_requestId [32]byte) (*types.Transaction, error) {
	return _BrevisRequest.Contract.Refund(&_BrevisRequest.TransactOpts, _requestId)
}

// Refund is a paid mutator transaction binding the contract method 0x7249fbb6.
//
// Solidity: function refund(bytes32 _requestId) returns()
func (_BrevisRequest *BrevisRequestTransactorSession) Refund(_requestId [32]byte) (*types.Transaction, error) {
	return _BrevisRequest.Contract.Refund(&_BrevisRequest.TransactOpts, _requestId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BrevisRequest *BrevisRequestTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BrevisRequest.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BrevisRequest *BrevisRequestSession) RenounceOwnership() (*types.Transaction, error) {
	return _BrevisRequest.Contract.RenounceOwnership(&_BrevisRequest.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BrevisRequest *BrevisRequestTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BrevisRequest.Contract.RenounceOwnership(&_BrevisRequest.TransactOpts)
}

// SendRequest is a paid mutator transaction binding the contract method 0xda47dc32.
//
// Solidity: function sendRequest(bytes32 _requestId, address _refundee, address _callback) payable returns()
func (_BrevisRequest *BrevisRequestTransactor) SendRequest(opts *bind.TransactOpts, _requestId [32]byte, _refundee common.Address, _callback common.Address) (*types.Transaction, error) {
	return _BrevisRequest.contract.Transact(opts, "sendRequest", _requestId, _refundee, _callback)
}

// SendRequest is a paid mutator transaction binding the contract method 0xda47dc32.
//
// Solidity: function sendRequest(bytes32 _requestId, address _refundee, address _callback) payable returns()
func (_BrevisRequest *BrevisRequestSession) SendRequest(_requestId [32]byte, _refundee common.Address, _callback common.Address) (*types.Transaction, error) {
	return _BrevisRequest.Contract.SendRequest(&_BrevisRequest.TransactOpts, _requestId, _refundee, _callback)
}

// SendRequest is a paid mutator transaction binding the contract method 0xda47dc32.
//
// Solidity: function sendRequest(bytes32 _requestId, address _refundee, address _callback) payable returns()
func (_BrevisRequest *BrevisRequestTransactorSession) SendRequest(_requestId [32]byte, _refundee common.Address, _callback common.Address) (*types.Transaction, error) {
	return _BrevisRequest.Contract.SendRequest(&_BrevisRequest.TransactOpts, _requestId, _refundee, _callback)
}

// SetFeeCollector is a paid mutator transaction binding the contract method 0xa42dce80.
//
// Solidity: function setFeeCollector(address _feeCollector) returns()
func (_BrevisRequest *BrevisRequestTransactor) SetFeeCollector(opts *bind.TransactOpts, _feeCollector common.Address) (*types.Transaction, error) {
	return _BrevisRequest.contract.Transact(opts, "setFeeCollector", _feeCollector)
}

// SetFeeCollector is a paid mutator transaction binding the contract method 0xa42dce80.
//
// Solidity: function setFeeCollector(address _feeCollector) returns()
func (_BrevisRequest *BrevisRequestSession) SetFeeCollector(_feeCollector common.Address) (*types.Transaction, error) {
	return _BrevisRequest.Contract.SetFeeCollector(&_BrevisRequest.TransactOpts, _feeCollector)
}

// SetFeeCollector is a paid mutator transaction binding the contract method 0xa42dce80.
//
// Solidity: function setFeeCollector(address _feeCollector) returns()
func (_BrevisRequest *BrevisRequestTransactorSession) SetFeeCollector(_feeCollector common.Address) (*types.Transaction, error) {
	return _BrevisRequest.Contract.SetFeeCollector(&_BrevisRequest.TransactOpts, _feeCollector)
}

// SetRequestTimeout is a paid mutator transaction binding the contract method 0x622b6af4.
//
// Solidity: function setRequestTimeout(uint256 _timeout) returns()
func (_BrevisRequest *BrevisRequestTransactor) SetRequestTimeout(opts *bind.TransactOpts, _timeout *big.Int) (*types.Transaction, error) {
	return _BrevisRequest.contract.Transact(opts, "setRequestTimeout", _timeout)
}

// SetRequestTimeout is a paid mutator transaction binding the contract method 0x622b6af4.
//
// Solidity: function setRequestTimeout(uint256 _timeout) returns()
func (_BrevisRequest *BrevisRequestSession) SetRequestTimeout(_timeout *big.Int) (*types.Transaction, error) {
	return _BrevisRequest.Contract.SetRequestTimeout(&_BrevisRequest.TransactOpts, _timeout)
}

// SetRequestTimeout is a paid mutator transaction binding the contract method 0x622b6af4.
//
// Solidity: function setRequestTimeout(uint256 _timeout) returns()
func (_BrevisRequest *BrevisRequestTransactorSession) SetRequestTimeout(_timeout *big.Int) (*types.Transaction, error) {
	return _BrevisRequest.Contract.SetRequestTimeout(&_BrevisRequest.TransactOpts, _timeout)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BrevisRequest *BrevisRequestTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BrevisRequest.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BrevisRequest *BrevisRequestSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BrevisRequest.Contract.TransferOwnership(&_BrevisRequest.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BrevisRequest *BrevisRequestTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BrevisRequest.Contract.TransferOwnership(&_BrevisRequest.TransactOpts, newOwner)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_BrevisRequest *BrevisRequestTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BrevisRequest.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_BrevisRequest *BrevisRequestSession) Receive() (*types.Transaction, error) {
	return _BrevisRequest.Contract.Receive(&_BrevisRequest.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_BrevisRequest *BrevisRequestTransactorSession) Receive() (*types.Transaction, error) {
	return _BrevisRequest.Contract.Receive(&_BrevisRequest.TransactOpts)
}

// BrevisRequestFeeCollectorUpdatedIterator is returned from FilterFeeCollectorUpdated and is used to iterate over the raw logs and unpacked data for FeeCollectorUpdated events raised by the BrevisRequest contract.
type BrevisRequestFeeCollectorUpdatedIterator struct {
	Event *BrevisRequestFeeCollectorUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrevisRequestFeeCollectorUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrevisRequestFeeCollectorUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrevisRequestFeeCollectorUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrevisRequestFeeCollectorUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrevisRequestFeeCollectorUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrevisRequestFeeCollectorUpdated represents a FeeCollectorUpdated event raised by the BrevisRequest contract.
type BrevisRequestFeeCollectorUpdated struct {
	From common.Address
	To   common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterFeeCollectorUpdated is a free log retrieval operation binding the contract event 0x5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f38.
//
// Solidity: event FeeCollectorUpdated(address from, address to)
func (_BrevisRequest *BrevisRequestFilterer) FilterFeeCollectorUpdated(opts *bind.FilterOpts) (*BrevisRequestFeeCollectorUpdatedIterator, error) {

	logs, sub, err := _BrevisRequest.contract.FilterLogs(opts, "FeeCollectorUpdated")
	if err != nil {
		return nil, err
	}
	return &BrevisRequestFeeCollectorUpdatedIterator{contract: _BrevisRequest.contract, event: "FeeCollectorUpdated", logs: logs, sub: sub}, nil
}

// WatchFeeCollectorUpdated is a free log subscription operation binding the contract event 0x5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f38.
//
// Solidity: event FeeCollectorUpdated(address from, address to)
func (_BrevisRequest *BrevisRequestFilterer) WatchFeeCollectorUpdated(opts *bind.WatchOpts, sink chan<- *BrevisRequestFeeCollectorUpdated) (event.Subscription, error) {

	logs, sub, err := _BrevisRequest.contract.WatchLogs(opts, "FeeCollectorUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrevisRequestFeeCollectorUpdated)
				if err := _BrevisRequest.contract.UnpackLog(event, "FeeCollectorUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFeeCollectorUpdated is a log parse operation binding the contract event 0x5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f38.
//
// Solidity: event FeeCollectorUpdated(address from, address to)
func (_BrevisRequest *BrevisRequestFilterer) ParseFeeCollectorUpdated(log types.Log) (*BrevisRequestFeeCollectorUpdated, error) {
	event := new(BrevisRequestFeeCollectorUpdated)
	if err := _BrevisRequest.contract.UnpackLog(event, "FeeCollectorUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BrevisRequestOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the BrevisRequest contract.
type BrevisRequestOwnershipTransferredIterator struct {
	Event *BrevisRequestOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrevisRequestOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrevisRequestOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrevisRequestOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrevisRequestOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrevisRequestOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrevisRequestOwnershipTransferred represents a OwnershipTransferred event raised by the BrevisRequest contract.
type BrevisRequestOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BrevisRequest *BrevisRequestFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BrevisRequestOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BrevisRequest.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BrevisRequestOwnershipTransferredIterator{contract: _BrevisRequest.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BrevisRequest *BrevisRequestFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BrevisRequestOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BrevisRequest.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrevisRequestOwnershipTransferred)
				if err := _BrevisRequest.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BrevisRequest *BrevisRequestFilterer) ParseOwnershipTransferred(log types.Log) (*BrevisRequestOwnershipTransferred, error) {
	event := new(BrevisRequestOwnershipTransferred)
	if err := _BrevisRequest.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BrevisRequestRequestFulfilledIterator is returned from FilterRequestFulfilled and is used to iterate over the raw logs and unpacked data for RequestFulfilled events raised by the BrevisRequest contract.
type BrevisRequestRequestFulfilledIterator struct {
	Event *BrevisRequestRequestFulfilled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrevisRequestRequestFulfilledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrevisRequestRequestFulfilled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrevisRequestRequestFulfilled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrevisRequestRequestFulfilledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrevisRequestRequestFulfilledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrevisRequestRequestFulfilled represents a RequestFulfilled event raised by the BrevisRequest contract.
type BrevisRequestRequestFulfilled struct {
	RequestId [32]byte
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRequestFulfilled is a free log retrieval operation binding the contract event 0x85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6.
//
// Solidity: event RequestFulfilled(bytes32 requestId)
func (_BrevisRequest *BrevisRequestFilterer) FilterRequestFulfilled(opts *bind.FilterOpts) (*BrevisRequestRequestFulfilledIterator, error) {

	logs, sub, err := _BrevisRequest.contract.FilterLogs(opts, "RequestFulfilled")
	if err != nil {
		return nil, err
	}
	return &BrevisRequestRequestFulfilledIterator{contract: _BrevisRequest.contract, event: "RequestFulfilled", logs: logs, sub: sub}, nil
}

// WatchRequestFulfilled is a free log subscription operation binding the contract event 0x85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6.
//
// Solidity: event RequestFulfilled(bytes32 requestId)
func (_BrevisRequest *BrevisRequestFilterer) WatchRequestFulfilled(opts *bind.WatchOpts, sink chan<- *BrevisRequestRequestFulfilled) (event.Subscription, error) {

	logs, sub, err := _BrevisRequest.contract.WatchLogs(opts, "RequestFulfilled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrevisRequestRequestFulfilled)
				if err := _BrevisRequest.contract.UnpackLog(event, "RequestFulfilled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestFulfilled is a log parse operation binding the contract event 0x85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e6.
//
// Solidity: event RequestFulfilled(bytes32 requestId)
func (_BrevisRequest *BrevisRequestFilterer) ParseRequestFulfilled(log types.Log) (*BrevisRequestRequestFulfilled, error) {
	event := new(BrevisRequestRequestFulfilled)
	if err := _BrevisRequest.contract.UnpackLog(event, "RequestFulfilled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BrevisRequestRequestSentIterator is returned from FilterRequestSent and is used to iterate over the raw logs and unpacked data for RequestSent events raised by the BrevisRequest contract.
type BrevisRequestRequestSentIterator struct {
	Event *BrevisRequestRequestSent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrevisRequestRequestSentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrevisRequestRequestSent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrevisRequestRequestSent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrevisRequestRequestSentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrevisRequestRequestSentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrevisRequestRequestSent represents a RequestSent event raised by the BrevisRequest contract.
type BrevisRequestRequestSent struct {
	RequestId [32]byte
	Sender    common.Address
	Fee       *big.Int
	Callback  common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRequestSent is a free log retrieval operation binding the contract event 0x4eede03ca33645529b4d82428b024149165298c901cf7453f68eb43bd3d3b658.
//
// Solidity: event RequestSent(bytes32 requestId, address sender, uint256 fee, address callback)
func (_BrevisRequest *BrevisRequestFilterer) FilterRequestSent(opts *bind.FilterOpts) (*BrevisRequestRequestSentIterator, error) {

	logs, sub, err := _BrevisRequest.contract.FilterLogs(opts, "RequestSent")
	if err != nil {
		return nil, err
	}
	return &BrevisRequestRequestSentIterator{contract: _BrevisRequest.contract, event: "RequestSent", logs: logs, sub: sub}, nil
}

// WatchRequestSent is a free log subscription operation binding the contract event 0x4eede03ca33645529b4d82428b024149165298c901cf7453f68eb43bd3d3b658.
//
// Solidity: event RequestSent(bytes32 requestId, address sender, uint256 fee, address callback)
func (_BrevisRequest *BrevisRequestFilterer) WatchRequestSent(opts *bind.WatchOpts, sink chan<- *BrevisRequestRequestSent) (event.Subscription, error) {

	logs, sub, err := _BrevisRequest.contract.WatchLogs(opts, "RequestSent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrevisRequestRequestSent)
				if err := _BrevisRequest.contract.UnpackLog(event, "RequestSent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestSent is a log parse operation binding the contract event 0x4eede03ca33645529b4d82428b024149165298c901cf7453f68eb43bd3d3b658.
//
// Solidity: event RequestSent(bytes32 requestId, address sender, uint256 fee, address callback)
func (_BrevisRequest *BrevisRequestFilterer) ParseRequestSent(log types.Log) (*BrevisRequestRequestSent, error) {
	event := new(BrevisRequestRequestSent)
	if err := _BrevisRequest.contract.UnpackLog(event, "RequestSent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BrevisRequestRequestTimeoutUpdatedIterator is returned from FilterRequestTimeoutUpdated and is used to iterate over the raw logs and unpacked data for RequestTimeoutUpdated events raised by the BrevisRequest contract.
type BrevisRequestRequestTimeoutUpdatedIterator struct {
	Event *BrevisRequestRequestTimeoutUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrevisRequestRequestTimeoutUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrevisRequestRequestTimeoutUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrevisRequestRequestTimeoutUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrevisRequestRequestTimeoutUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrevisRequestRequestTimeoutUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrevisRequestRequestTimeoutUpdated represents a RequestTimeoutUpdated event raised by the BrevisRequest contract.
type BrevisRequestRequestTimeoutUpdated struct {
	From *big.Int
	To   *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRequestTimeoutUpdated is a free log retrieval operation binding the contract event 0x87a73c061f18ffd513249d1d727921e40e348948b01e2979efb36ef4f5204a63.
//
// Solidity: event RequestTimeoutUpdated(uint256 from, uint256 to)
func (_BrevisRequest *BrevisRequestFilterer) FilterRequestTimeoutUpdated(opts *bind.FilterOpts) (*BrevisRequestRequestTimeoutUpdatedIterator, error) {

	logs, sub, err := _BrevisRequest.contract.FilterLogs(opts, "RequestTimeoutUpdated")
	if err != nil {
		return nil, err
	}
	return &BrevisRequestRequestTimeoutUpdatedIterator{contract: _BrevisRequest.contract, event: "RequestTimeoutUpdated", logs: logs, sub: sub}, nil
}

// WatchRequestTimeoutUpdated is a free log subscription operation binding the contract event 0x87a73c061f18ffd513249d1d727921e40e348948b01e2979efb36ef4f5204a63.
//
// Solidity: event RequestTimeoutUpdated(uint256 from, uint256 to)
func (_BrevisRequest *BrevisRequestFilterer) WatchRequestTimeoutUpdated(opts *bind.WatchOpts, sink chan<- *BrevisRequestRequestTimeoutUpdated) (event.Subscription, error) {

	logs, sub, err := _BrevisRequest.contract.WatchLogs(opts, "RequestTimeoutUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrevisRequestRequestTimeoutUpdated)
				if err := _BrevisRequest.contract.UnpackLog(event, "RequestTimeoutUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRequestTimeoutUpdated is a log parse operation binding the contract event 0x87a73c061f18ffd513249d1d727921e40e348948b01e2979efb36ef4f5204a63.
//
// Solidity: event RequestTimeoutUpdated(uint256 from, uint256 to)
func (_BrevisRequest *BrevisRequestFilterer) ParseRequestTimeoutUpdated(log types.Log) (*BrevisRequestRequestTimeoutUpdated, error) {
	event := new(BrevisRequestRequestTimeoutUpdated)
	if err := _BrevisRequest.contract.UnpackLog(event, "RequestTimeoutUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BrevisUniNFTMetaData contains all meta data concerning the BrevisUniNFT contract.
var BrevisUniNFTMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234620003885762001fb4803803806200001d816200038c565b9283398101606082820312620003885781516001600160401b0391908281116200038857816200004f918501620003b2565b6020918285015184811162000388576040916200006e918701620003b2565b9401516001600160a01b03948582169491859003620003885782519082821162000374575f948554926001958685811c9516801562000369575b8386101462000355578190601f9586811162000302575b5083908683116001146200029f57899262000293575b50505f19600383901b1c191690861b1786555b81519384116200027f5784548581811c9116801562000274575b828210146200026057908184869594931162000209575b5080928411600114620001a25750859262000196575b50505f19600383901b1c191690821b1790555b60075460018060a01b03199133838316176007557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0604051953393169180a36008541617600855611b919081620004238239f35b015190505f806200012f565b9190859450601f1984168588528388209388905b828210620001ef5750508411620001d6575b505050811b01905562000142565b01515f1960f88460031b161c191690555f8080620001c8565b8484015186558897909501949384019390810190620001b6565b90919293508587528187208480870160051c82019284881062000256575b9187968992969594930160051c01915b8281106200024757505062000119565b89815587965088910162000237565b9250819262000227565b634e487b7160e01b87526022600452602487fd5b90607f169062000102565b634e487b7160e01b86526041600452602486fd5b015190505f80620000d5565b898052848a208994509190601f1984168b5b87828210620002eb5750508411620002d2575b505050811b018655620000e8565b01515f1960f88460031b161c191690555f8080620002c4565b8385015186558c97909501949384019301620002b1565b9091508880528389208680850160051c8201928686106200034b575b918a91869594930160051c01915b8281106200033c575050620000bf565b8b81558594508a91016200032c565b925081926200031e565b634e487b7160e01b88526022600452602488fd5b94607f1694620000a8565b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b6040519190601f01601f191682016001600160401b038111838210176200037457604052565b919080601f84011215620003885782516001600160401b0381116200037457602090620003e8601f8201601f191683016200038c565b9281845282828701011162000388575f5b8181106200040e5750825f9394955001015290565b8581018301518482018401528201620003f956fe60806040526004361015610011575f80fd5b5f3560e01c806301ffc9a71461017457806306661abd1461016f57806306fdde031461016a5780630754617214610165578063081812fc14610160578063095ea7b31461015b57806323b872dd1461015657806342842e0e1461015157806355f804b31461014c5780636352211e146101475780636a6278421461014257806370a082311461013d578063715018a6146101385780638da5cb5b1461013357806395d89b411461012e578063a22cb46514610129578063b88d4fde14610124578063c87b56dd1461011f578063d547cfb71461011a578063e985e9c514610115578063f2fde38b146101105763fca3b5aa1461010b575f80fd5b610f0b565b610e60565b610e02565b610de7565b610c21565b610bc1565b610ad8565b610a32565b610a0c565b6109ad565b6108fa565b61077a565b61075c565b610622565b610536565b61050d565b6103e8565b61038d565b610367565b61028c565b610215565b6101a7565b7fffffffff000000000000000000000000000000000000000000000000000000008116036101a357565b5f80fd5b346101a35760203660031901126101a35760206004356101c681610179565b63ffffffff60e01b166380ac58cd60e01b8114908115610204575b81156101f3575b506040519015158152f35b6301ffc9a760e01b1490505f6101e8565b635b5e139f60e01b811491506101e1565b346101a3575f3660031901126101a3576020600954604051908152f35b5f5b8381106102435750505f910152565b8181015183820152602001610234565b9060209161026c81518092818552858086019101610232565b601f01601f1916010190565b906020610289928181520190610253565b90565b346101a3575f80600319360112610364576040518180546102ac81610c54565b9081845260209260019182811690815f1461034257506001146102ea575b6102e6856102da818903826105ae565b60405191829182610278565b0390f35b8080949650527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b82841061032f57505050816102e6936102da92820101935f6102ca565b8054858501870152928501928101610312565b60ff191686860152505050151560051b82010191506102da816102e65f6102ca565b80fd5b346101a3575f3660031901126101a35760206001600160a01b0360085416604051908152f35b346101a35760203660031901126101a35760206103ab60043561136a565b6001600160a01b0360405191168152f35b600435906001600160a01b03821682036101a357565b602435906001600160a01b03821682036101a357565b346101a35760403660031901126101a3576104016103bc565b60243561040d81611190565b916001600160a01b0380841680918316146104895761043f9361043a913314908115610441575b506112f8565b611841565b005b610483915061047c9061046633916001600160a01b03165f52600560205260405f2090565b906001600160a01b03165f5260205260405f2090565b5460ff1690565b5f610434565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b60609060031901126101a3576001600160a01b039060043582811681036101a3579160243590811681036101a3579060443590565b346101a35761043f61051e366104d8565b9161053161052c8433611507565b6113ff565b6116c2565b346101a35761043f610547366104d8565b906040519261055584610571565b5f8452611471565b634e487b7160e01b5f52604160045260245ffd5b6020810190811067ffffffffffffffff82111761058d57604052565b61055d565b6040810190811067ffffffffffffffff82111761058d57604052565b90601f8019910116810190811067ffffffffffffffff82111761058d57604052565b67ffffffffffffffff811161058d57601f01601f191660200190565b9291926105f8826105d0565b9161060660405193846105ae565b8294818452818301116101a3578281602093845f960137010152565b346101a3576020806003193601126101a35767ffffffffffffffff6004358181116101a357366023820112156101a3576106669036906024816004013591016105ec565b9161067d6001600160a01b03600754163314610f79565b825191821161058d5761069a82610695600a54610c54565b610fc4565b80601f83116001146106d8575081906106c8935f926106cd575b50508160011b915f199060031b1c19161790565b600a55005b015190505f806106b4565b90601f1983169361070a600a5f527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a890565b925f905b868210610744575050836001951061072c575b505050811b01600a55005b01515f1960f88460031b161c191690555f8080610721565b8060018596829496860151815501950193019061070e565b346101a35760203660031901126101a35760206103ab600435611190565b346101a35760203660031901126101a3576107936103bc565b6001600160a01b0390816008541633036108b55760095491811690811561087157610839906107e56107e06107dc865f5260026020526001600160a01b0360405f205416151590565b1590565b6115f4565b610800816001600160a01b03165f52600360205260405f2090565b61080a8154611640565b905561081e845f52600260205260405f2090565b906001600160a01b03166001600160a01b0319825416179055565b5f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a461043f61086c600954610f66565b600955565b606460405162461bcd60e51b815260206004820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b60405162461bcd60e51b815260206004820152601460248201527f63616c6c6572206973206e6f74206d696e7465720000000000000000000000006044820152606490fd5b346101a35760203660031901126101a3576001600160a01b0361091b6103bc565b168015610942575f5260036020526102e660405f2054604051918291829190602083019252565b60405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608490fd5b346101a3575f8060031936011261036457806007546001600160a01b03196001600160a01b038216916109e1338414610f79565b166007557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b346101a3575f3660031901126101a35760206001600160a01b0360075416604051908152f35b346101a3575f806003193601126103645760405181600190815491610a5683610c54565b9182855260209382811690815f146103425750600114610a80576102e6856102da818903826105ae565b9294508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b828410610ac557505050816102e6936102da92820101935f6102ca565b8054858501870152928501928101610aa8565b346101a35760403660031901126101a357610af16103bc565b60243580151581036101a3576001600160a01b03821691823314610b7c5781610b39610b4a92335f52600560205260405f20906001600160a01b03165f5260205260405f2090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b346101a35760803660031901126101a357610bda6103bc565b610be26103d2565b6064359167ffffffffffffffff83116101a357366023840112156101a357610c1761043f9336906024816004013591016105ec565b9160443591611471565b346101a35760203660031901126101a3576102e6610c40600435611092565b604051918291602083526020830190610253565b90600182811c92168015610c82575b6020831014610c6e57565b634e487b7160e01b5f52602260045260245ffd5b91607f1691610c63565b604051905f82600a5491610c9f83610c54565b808352602093600190818116908115610d285750600114610ccb575b5050610cc9925003836105ae565b565b90939150600a5f527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8935f915b818310610d10575050610cc993508201015f80610cbb565b85548884018501529485019487945091830191610cf8565b915050610cc994925060ff191682840152151560051b8201015f80610cbb565b9060405191825f8254610d5a81610c54565b9081845260209460019182811690815f14610dc55750600114610d87575b505050610cc9925003836105ae565b5f90815285812095935091905b818310610dad575050610cc993508201015f8080610d78565b85548884018501529485019487945091830191610d94565b92505050610cc994925060ff191682840152151560051b8201015f8080610d78565b346101a3575f3660031901126101a3576102e6610c40610c8c565b346101a35760403660031901126101a357602060ff610e54610e226103bc565b6001600160a01b03610e326103d2565b91165f526005845260405f20906001600160a01b03165f5260205260405f2090565b54166040519015158152f35b346101a35760203660031901126101a357610e796103bc565b6001600160a01b03610e9081600754163314610f79565b811615610ea05761043f90611034565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b346101a35760203660031901126101a357610f246103bc565b6001600160a01b0390610f3c82600754163314610f79565b166001600160a01b031960085416176008555f80f35b634e487b7160e01b5f52601160045260245ffd5b5f198114610f745760010190565b610f52565b15610f8057565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b601f8111610fd0575050565b5f90600a82527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8906020601f850160051c8301941061102a575b601f0160051c01915b82811061101f57505050565b818155600101611013565b909250829061100a565b600754906001600160a01b0380911691826001600160a01b0319821617600755167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b9061108e60209282815194859201610232565b0190565b6110b0815f5260026020526001600160a01b0360405f205416151590565b15611125576110cf6110ca825f52600660205260405f2090565b610d48565b906110d8610c8c565b8051156111205782516110f05750610289915061122b565b610289915061111261110c93604051948593602085019061107b565b9061107b565b03601f1981018352826105ae565b505090565b60405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f722060448201527f6e6f6e6578697374656e7420746f6b656e0000000000000000000000000000006064820152608490fd5b5f5260026020526001600160a01b0360405f20541680156111ae5790565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608490fd5b6040519061122682610571565b5f8252565b611249815f5260026020526001600160a01b0360405f205416151590565b1561128d57611256610c8c565b8051909190156112835761110c9161111261127361028993611a9d565b604051948593602085019061107b565b5050610289611219565b60405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608490fd5b156112ff57565b60405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608490fd5b611388815f5260026020526001600160a01b0360405f205416151590565b156113a5575f5260046020526001600160a01b0360405f20541690565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b1561140657565b60405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608490fd5b9061149593929161148561052c8433611507565b6114908383836116c2565b61191b565b1561149c57565b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608490fd5b611525825f5260026020526001600160a01b0360405f205416151590565b1561159a5761153382611190565b6001600160a01b03808316908083168214948515611582575b505050821561155a57505090565b60ff92509061046661157d926001600160a01b03165f52600560205260405f2090565b541690565b61158f919293955061136a565b1614915f808061154c565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b156115fb57565b60405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b9060018201809211610f7457565b6030019081603011610f7457565b1561166357565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b5f19810191908211610f7457565b906116cc83611190565b6001600160a01b0391829182851693849116036117835761171861175d928216946116f886151561165c565b611701876117ee565b6001600160a01b03165f52600360205260405f2090565b61172281546116b4565b905561173f816001600160a01b03165f52600360205260405f2090565b6117498154611640565b905561081e855f52600260205260405f2090565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5f80a4565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608490fd5b805f52600460205260405f206001600160a01b031981541690555f6001600160a01b0361181a83611190565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258280a4565b815f52600460205261186c8160405f20906001600160a01b03166001600160a01b0319825416179055565b6001600160a01b038061187e84611190565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9255f80a4565b908160209103126101a3575161028981610179565b909261028994936080936001600160a01b03809216845216602083015260408201528160608201520190610253565b3d15611916573d906118fd826105d0565b9161190b60405193846105ae565b82523d5f602084013e565b606090565b92909190823b15611a3d57611955926020925f6001600160a01b03604051809781968295630a85bd0160e11b9b8c855233600486016118bd565b0393165af15f9181611a0d575b506119e75761196f6118ec565b805190816119e25760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608490fd5b602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000161490565b611a2f91925060203d8111611a36575b611a2781836105ae565b8101906118a8565b905f611962565b503d611a1d565b50505050600190565b90611a50826105d0565b611a5d60405191826105ae565b8281528092611a6e601f19916105d0565b0190602036910137565b908151811015611a89570160200190565b634e487b7160e01b5f52603260045260245ffd5b8015611b3d575f818181805b611b255750611ab781611a46565b935b611ac35750505090565b611acc906116b4565b8091600a91611b1c611b13611aeb611ae586860661164e565b60ff1690565b60f81b7fff000000000000000000000000000000000000000000000000000000000000001690565b861a9187611a78565b53049081611ab9565b9150611b32600a91610f66565b910480849291611aa9565b50604051611b4a81610592565b60018152600360fc1b60208201529056fea2646970667358221220594efb9ee8e0acd3214830878fb493e0a867bce86090799c33725e507fee1ce064736f6c63430008150033",
}

// BrevisUniNFTABI is the input ABI used to generate the binding from.
// Deprecated: Use BrevisUniNFTMetaData.ABI instead.
var BrevisUniNFTABI = BrevisUniNFTMetaData.ABI

// BrevisUniNFTBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BrevisUniNFTMetaData.Bin instead.
var BrevisUniNFTBin = BrevisUniNFTMetaData.Bin

// DeployBrevisUniNFT deploys a new Ethereum contract, binding an instance of BrevisUniNFT to it.
func DeployBrevisUniNFT(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string, _minter common.Address) (common.Address, *types.Transaction, *BrevisUniNFT, error) {
	parsed, err := BrevisUniNFTMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BrevisUniNFTBin), backend, name_, symbol_, _minter)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BrevisUniNFT{BrevisUniNFTCaller: BrevisUniNFTCaller{contract: contract}, BrevisUniNFTTransactor: BrevisUniNFTTransactor{contract: contract}, BrevisUniNFTFilterer: BrevisUniNFTFilterer{contract: contract}}, nil
}

// BrevisUniNFT is an auto generated Go binding around an Ethereum contract.
type BrevisUniNFT struct {
	BrevisUniNFTCaller     // Read-only binding to the contract
	BrevisUniNFTTransactor // Write-only binding to the contract
	BrevisUniNFTFilterer   // Log filterer for contract events
}

// BrevisUniNFTCaller is an auto generated read-only Go binding around an Ethereum contract.
type BrevisUniNFTCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BrevisUniNFTTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BrevisUniNFTTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BrevisUniNFTFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BrevisUniNFTFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BrevisUniNFTSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BrevisUniNFTSession struct {
	Contract     *BrevisUniNFT     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BrevisUniNFTCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BrevisUniNFTCallerSession struct {
	Contract *BrevisUniNFTCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// BrevisUniNFTTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BrevisUniNFTTransactorSession struct {
	Contract     *BrevisUniNFTTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// BrevisUniNFTRaw is an auto generated low-level Go binding around an Ethereum contract.
type BrevisUniNFTRaw struct {
	Contract *BrevisUniNFT // Generic contract binding to access the raw methods on
}

// BrevisUniNFTCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BrevisUniNFTCallerRaw struct {
	Contract *BrevisUniNFTCaller // Generic read-only contract binding to access the raw methods on
}

// BrevisUniNFTTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BrevisUniNFTTransactorRaw struct {
	Contract *BrevisUniNFTTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBrevisUniNFT creates a new instance of BrevisUniNFT, bound to a specific deployed contract.
func NewBrevisUniNFT(address common.Address, backend bind.ContractBackend) (*BrevisUniNFT, error) {
	contract, err := bindBrevisUniNFT(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BrevisUniNFT{BrevisUniNFTCaller: BrevisUniNFTCaller{contract: contract}, BrevisUniNFTTransactor: BrevisUniNFTTransactor{contract: contract}, BrevisUniNFTFilterer: BrevisUniNFTFilterer{contract: contract}}, nil
}

// NewBrevisUniNFTCaller creates a new read-only instance of BrevisUniNFT, bound to a specific deployed contract.
func NewBrevisUniNFTCaller(address common.Address, caller bind.ContractCaller) (*BrevisUniNFTCaller, error) {
	contract, err := bindBrevisUniNFT(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BrevisUniNFTCaller{contract: contract}, nil
}

// NewBrevisUniNFTTransactor creates a new write-only instance of BrevisUniNFT, bound to a specific deployed contract.
func NewBrevisUniNFTTransactor(address common.Address, transactor bind.ContractTransactor) (*BrevisUniNFTTransactor, error) {
	contract, err := bindBrevisUniNFT(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BrevisUniNFTTransactor{contract: contract}, nil
}

// NewBrevisUniNFTFilterer creates a new log filterer instance of BrevisUniNFT, bound to a specific deployed contract.
func NewBrevisUniNFTFilterer(address common.Address, filterer bind.ContractFilterer) (*BrevisUniNFTFilterer, error) {
	contract, err := bindBrevisUniNFT(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BrevisUniNFTFilterer{contract: contract}, nil
}

// bindBrevisUniNFT binds a generic wrapper to an already deployed contract.
func bindBrevisUniNFT(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BrevisUniNFTMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BrevisUniNFT *BrevisUniNFTRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BrevisUniNFT.Contract.BrevisUniNFTCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BrevisUniNFT *BrevisUniNFTRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.BrevisUniNFTTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BrevisUniNFT *BrevisUniNFTRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.BrevisUniNFTTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BrevisUniNFT *BrevisUniNFTCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BrevisUniNFT.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BrevisUniNFT *BrevisUniNFTTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BrevisUniNFT *BrevisUniNFTTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_BrevisUniNFT *BrevisUniNFTCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _BrevisUniNFT.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_BrevisUniNFT *BrevisUniNFTSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _BrevisUniNFT.Contract.BalanceOf(&_BrevisUniNFT.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_BrevisUniNFT *BrevisUniNFTCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _BrevisUniNFT.Contract.BalanceOf(&_BrevisUniNFT.CallOpts, owner)
}

// BaseTokenURI is a free data retrieval call binding the contract method 0xd547cfb7.
//
// Solidity: function baseTokenURI() view returns(string)
func (_BrevisUniNFT *BrevisUniNFTCaller) BaseTokenURI(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BrevisUniNFT.contract.Call(opts, &out, "baseTokenURI")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// BaseTokenURI is a free data retrieval call binding the contract method 0xd547cfb7.
//
// Solidity: function baseTokenURI() view returns(string)
func (_BrevisUniNFT *BrevisUniNFTSession) BaseTokenURI() (string, error) {
	return _BrevisUniNFT.Contract.BaseTokenURI(&_BrevisUniNFT.CallOpts)
}

// BaseTokenURI is a free data retrieval call binding the contract method 0xd547cfb7.
//
// Solidity: function baseTokenURI() view returns(string)
func (_BrevisUniNFT *BrevisUniNFTCallerSession) BaseTokenURI() (string, error) {
	return _BrevisUniNFT.Contract.BaseTokenURI(&_BrevisUniNFT.CallOpts)
}

// Count is a free data retrieval call binding the contract method 0x06661abd.
//
// Solidity: function count() view returns(uint256)
func (_BrevisUniNFT *BrevisUniNFTCaller) Count(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _BrevisUniNFT.contract.Call(opts, &out, "count")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Count is a free data retrieval call binding the contract method 0x06661abd.
//
// Solidity: function count() view returns(uint256)
func (_BrevisUniNFT *BrevisUniNFTSession) Count() (*big.Int, error) {
	return _BrevisUniNFT.Contract.Count(&_BrevisUniNFT.CallOpts)
}

// Count is a free data retrieval call binding the contract method 0x06661abd.
//
// Solidity: function count() view returns(uint256)
func (_BrevisUniNFT *BrevisUniNFTCallerSession) Count() (*big.Int, error) {
	return _BrevisUniNFT.Contract.Count(&_BrevisUniNFT.CallOpts)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_BrevisUniNFT *BrevisUniNFTCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BrevisUniNFT.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_BrevisUniNFT *BrevisUniNFTSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _BrevisUniNFT.Contract.GetApproved(&_BrevisUniNFT.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_BrevisUniNFT *BrevisUniNFTCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _BrevisUniNFT.Contract.GetApproved(&_BrevisUniNFT.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_BrevisUniNFT *BrevisUniNFTCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _BrevisUniNFT.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_BrevisUniNFT *BrevisUniNFTSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _BrevisUniNFT.Contract.IsApprovedForAll(&_BrevisUniNFT.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_BrevisUniNFT *BrevisUniNFTCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _BrevisUniNFT.Contract.IsApprovedForAll(&_BrevisUniNFT.CallOpts, owner, operator)
}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() view returns(address)
func (_BrevisUniNFT *BrevisUniNFTCaller) Minter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BrevisUniNFT.contract.Call(opts, &out, "minter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() view returns(address)
func (_BrevisUniNFT *BrevisUniNFTSession) Minter() (common.Address, error) {
	return _BrevisUniNFT.Contract.Minter(&_BrevisUniNFT.CallOpts)
}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() view returns(address)
func (_BrevisUniNFT *BrevisUniNFTCallerSession) Minter() (common.Address, error) {
	return _BrevisUniNFT.Contract.Minter(&_BrevisUniNFT.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_BrevisUniNFT *BrevisUniNFTCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BrevisUniNFT.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_BrevisUniNFT *BrevisUniNFTSession) Name() (string, error) {
	return _BrevisUniNFT.Contract.Name(&_BrevisUniNFT.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_BrevisUniNFT *BrevisUniNFTCallerSession) Name() (string, error) {
	return _BrevisUniNFT.Contract.Name(&_BrevisUniNFT.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BrevisUniNFT *BrevisUniNFTCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _BrevisUniNFT.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BrevisUniNFT *BrevisUniNFTSession) Owner() (common.Address, error) {
	return _BrevisUniNFT.Contract.Owner(&_BrevisUniNFT.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_BrevisUniNFT *BrevisUniNFTCallerSession) Owner() (common.Address, error) {
	return _BrevisUniNFT.Contract.Owner(&_BrevisUniNFT.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_BrevisUniNFT *BrevisUniNFTCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _BrevisUniNFT.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_BrevisUniNFT *BrevisUniNFTSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _BrevisUniNFT.Contract.OwnerOf(&_BrevisUniNFT.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_BrevisUniNFT *BrevisUniNFTCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _BrevisUniNFT.Contract.OwnerOf(&_BrevisUniNFT.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BrevisUniNFT *BrevisUniNFTCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _BrevisUniNFT.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BrevisUniNFT *BrevisUniNFTSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _BrevisUniNFT.Contract.SupportsInterface(&_BrevisUniNFT.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_BrevisUniNFT *BrevisUniNFTCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _BrevisUniNFT.Contract.SupportsInterface(&_BrevisUniNFT.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_BrevisUniNFT *BrevisUniNFTCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _BrevisUniNFT.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_BrevisUniNFT *BrevisUniNFTSession) Symbol() (string, error) {
	return _BrevisUniNFT.Contract.Symbol(&_BrevisUniNFT.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_BrevisUniNFT *BrevisUniNFTCallerSession) Symbol() (string, error) {
	return _BrevisUniNFT.Contract.Symbol(&_BrevisUniNFT.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_BrevisUniNFT *BrevisUniNFTCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _BrevisUniNFT.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_BrevisUniNFT *BrevisUniNFTSession) TokenURI(tokenId *big.Int) (string, error) {
	return _BrevisUniNFT.Contract.TokenURI(&_BrevisUniNFT.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_BrevisUniNFT *BrevisUniNFTCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _BrevisUniNFT.Contract.TokenURI(&_BrevisUniNFT.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_BrevisUniNFT *BrevisUniNFTTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _BrevisUniNFT.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_BrevisUniNFT *BrevisUniNFTSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.Approve(&_BrevisUniNFT.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_BrevisUniNFT *BrevisUniNFTTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.Approve(&_BrevisUniNFT.TransactOpts, to, tokenId)
}

// Mint is a paid mutator transaction binding the contract method 0x6a627842.
//
// Solidity: function mint(address to) returns()
func (_BrevisUniNFT *BrevisUniNFTTransactor) Mint(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _BrevisUniNFT.contract.Transact(opts, "mint", to)
}

// Mint is a paid mutator transaction binding the contract method 0x6a627842.
//
// Solidity: function mint(address to) returns()
func (_BrevisUniNFT *BrevisUniNFTSession) Mint(to common.Address) (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.Mint(&_BrevisUniNFT.TransactOpts, to)
}

// Mint is a paid mutator transaction binding the contract method 0x6a627842.
//
// Solidity: function mint(address to) returns()
func (_BrevisUniNFT *BrevisUniNFTTransactorSession) Mint(to common.Address) (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.Mint(&_BrevisUniNFT.TransactOpts, to)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BrevisUniNFT *BrevisUniNFTTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BrevisUniNFT.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BrevisUniNFT *BrevisUniNFTSession) RenounceOwnership() (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.RenounceOwnership(&_BrevisUniNFT.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_BrevisUniNFT *BrevisUniNFTTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.RenounceOwnership(&_BrevisUniNFT.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_BrevisUniNFT *BrevisUniNFTTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _BrevisUniNFT.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_BrevisUniNFT *BrevisUniNFTSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.SafeTransferFrom(&_BrevisUniNFT.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_BrevisUniNFT *BrevisUniNFTTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.SafeTransferFrom(&_BrevisUniNFT.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_BrevisUniNFT *BrevisUniNFTTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _BrevisUniNFT.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_BrevisUniNFT *BrevisUniNFTSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.SafeTransferFrom0(&_BrevisUniNFT.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_BrevisUniNFT *BrevisUniNFTTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.SafeTransferFrom0(&_BrevisUniNFT.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_BrevisUniNFT *BrevisUniNFTTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _BrevisUniNFT.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_BrevisUniNFT *BrevisUniNFTSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.SetApprovalForAll(&_BrevisUniNFT.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_BrevisUniNFT *BrevisUniNFTTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.SetApprovalForAll(&_BrevisUniNFT.TransactOpts, operator, approved)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string _uri) returns()
func (_BrevisUniNFT *BrevisUniNFTTransactor) SetBaseURI(opts *bind.TransactOpts, _uri string) (*types.Transaction, error) {
	return _BrevisUniNFT.contract.Transact(opts, "setBaseURI", _uri)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string _uri) returns()
func (_BrevisUniNFT *BrevisUniNFTSession) SetBaseURI(_uri string) (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.SetBaseURI(&_BrevisUniNFT.TransactOpts, _uri)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string _uri) returns()
func (_BrevisUniNFT *BrevisUniNFTTransactorSession) SetBaseURI(_uri string) (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.SetBaseURI(&_BrevisUniNFT.TransactOpts, _uri)
}

// SetMinter is a paid mutator transaction binding the contract method 0xfca3b5aa.
//
// Solidity: function setMinter(address _minter) returns()
func (_BrevisUniNFT *BrevisUniNFTTransactor) SetMinter(opts *bind.TransactOpts, _minter common.Address) (*types.Transaction, error) {
	return _BrevisUniNFT.contract.Transact(opts, "setMinter", _minter)
}

// SetMinter is a paid mutator transaction binding the contract method 0xfca3b5aa.
//
// Solidity: function setMinter(address _minter) returns()
func (_BrevisUniNFT *BrevisUniNFTSession) SetMinter(_minter common.Address) (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.SetMinter(&_BrevisUniNFT.TransactOpts, _minter)
}

// SetMinter is a paid mutator transaction binding the contract method 0xfca3b5aa.
//
// Solidity: function setMinter(address _minter) returns()
func (_BrevisUniNFT *BrevisUniNFTTransactorSession) SetMinter(_minter common.Address) (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.SetMinter(&_BrevisUniNFT.TransactOpts, _minter)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_BrevisUniNFT *BrevisUniNFTTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _BrevisUniNFT.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_BrevisUniNFT *BrevisUniNFTSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.TransferFrom(&_BrevisUniNFT.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_BrevisUniNFT *BrevisUniNFTTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.TransferFrom(&_BrevisUniNFT.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BrevisUniNFT *BrevisUniNFTTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _BrevisUniNFT.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BrevisUniNFT *BrevisUniNFTSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.TransferOwnership(&_BrevisUniNFT.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_BrevisUniNFT *BrevisUniNFTTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _BrevisUniNFT.Contract.TransferOwnership(&_BrevisUniNFT.TransactOpts, newOwner)
}

// BrevisUniNFTApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the BrevisUniNFT contract.
type BrevisUniNFTApprovalIterator struct {
	Event *BrevisUniNFTApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrevisUniNFTApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrevisUniNFTApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrevisUniNFTApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrevisUniNFTApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrevisUniNFTApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrevisUniNFTApproval represents a Approval event raised by the BrevisUniNFT contract.
type BrevisUniNFTApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_BrevisUniNFT *BrevisUniNFTFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*BrevisUniNFTApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _BrevisUniNFT.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &BrevisUniNFTApprovalIterator{contract: _BrevisUniNFT.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_BrevisUniNFT *BrevisUniNFTFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *BrevisUniNFTApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _BrevisUniNFT.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrevisUniNFTApproval)
				if err := _BrevisUniNFT.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_BrevisUniNFT *BrevisUniNFTFilterer) ParseApproval(log types.Log) (*BrevisUniNFTApproval, error) {
	event := new(BrevisUniNFTApproval)
	if err := _BrevisUniNFT.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BrevisUniNFTApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the BrevisUniNFT contract.
type BrevisUniNFTApprovalForAllIterator struct {
	Event *BrevisUniNFTApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrevisUniNFTApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrevisUniNFTApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrevisUniNFTApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrevisUniNFTApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrevisUniNFTApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrevisUniNFTApprovalForAll represents a ApprovalForAll event raised by the BrevisUniNFT contract.
type BrevisUniNFTApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_BrevisUniNFT *BrevisUniNFTFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*BrevisUniNFTApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _BrevisUniNFT.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &BrevisUniNFTApprovalForAllIterator{contract: _BrevisUniNFT.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_BrevisUniNFT *BrevisUniNFTFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *BrevisUniNFTApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _BrevisUniNFT.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrevisUniNFTApprovalForAll)
				if err := _BrevisUniNFT.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_BrevisUniNFT *BrevisUniNFTFilterer) ParseApprovalForAll(log types.Log) (*BrevisUniNFTApprovalForAll, error) {
	event := new(BrevisUniNFTApprovalForAll)
	if err := _BrevisUniNFT.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BrevisUniNFTOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the BrevisUniNFT contract.
type BrevisUniNFTOwnershipTransferredIterator struct {
	Event *BrevisUniNFTOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrevisUniNFTOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrevisUniNFTOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrevisUniNFTOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrevisUniNFTOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrevisUniNFTOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrevisUniNFTOwnershipTransferred represents a OwnershipTransferred event raised by the BrevisUniNFT contract.
type BrevisUniNFTOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BrevisUniNFT *BrevisUniNFTFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BrevisUniNFTOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BrevisUniNFT.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BrevisUniNFTOwnershipTransferredIterator{contract: _BrevisUniNFT.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BrevisUniNFT *BrevisUniNFTFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BrevisUniNFTOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _BrevisUniNFT.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrevisUniNFTOwnershipTransferred)
				if err := _BrevisUniNFT.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_BrevisUniNFT *BrevisUniNFTFilterer) ParseOwnershipTransferred(log types.Log) (*BrevisUniNFTOwnershipTransferred, error) {
	event := new(BrevisUniNFTOwnershipTransferred)
	if err := _BrevisUniNFT.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BrevisUniNFTTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the BrevisUniNFT contract.
type BrevisUniNFTTransferIterator struct {
	Event *BrevisUniNFTTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BrevisUniNFTTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BrevisUniNFTTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BrevisUniNFTTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BrevisUniNFTTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BrevisUniNFTTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BrevisUniNFTTransfer represents a Transfer event raised by the BrevisUniNFT contract.
type BrevisUniNFTTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_BrevisUniNFT *BrevisUniNFTFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*BrevisUniNFTTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _BrevisUniNFT.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &BrevisUniNFTTransferIterator{contract: _BrevisUniNFT.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_BrevisUniNFT *BrevisUniNFTFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *BrevisUniNFTTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _BrevisUniNFT.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BrevisUniNFTTransfer)
				if err := _BrevisUniNFT.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_BrevisUniNFT *BrevisUniNFTFilterer) ParseTransfer(log types.Log) (*BrevisUniNFTTransfer, error) {
	event := new(BrevisUniNFTTransfer)
	if err := _BrevisUniNFT.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BytesLibMetaData contains all meta data concerning the BytesLib contract.
var BytesLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea264697066735822122054e2c2dd8c74bf69822926b7353ea696f79e4699d448e5935275a86e230bcffe64736f6c63430008150033",
}

// BytesLibABI is the input ABI used to generate the binding from.
// Deprecated: Use BytesLibMetaData.ABI instead.
var BytesLibABI = BytesLibMetaData.ABI

// BytesLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use BytesLibMetaData.Bin instead.
var BytesLibBin = BytesLibMetaData.Bin

// DeployBytesLib deploys a new Ethereum contract, binding an instance of BytesLib to it.
func DeployBytesLib(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *BytesLib, error) {
	parsed, err := BytesLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(BytesLibBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &BytesLib{BytesLibCaller: BytesLibCaller{contract: contract}, BytesLibTransactor: BytesLibTransactor{contract: contract}, BytesLibFilterer: BytesLibFilterer{contract: contract}}, nil
}

// BytesLib is an auto generated Go binding around an Ethereum contract.
type BytesLib struct {
	BytesLibCaller     // Read-only binding to the contract
	BytesLibTransactor // Write-only binding to the contract
	BytesLibFilterer   // Log filterer for contract events
}

// BytesLibCaller is an auto generated read-only Go binding around an Ethereum contract.
type BytesLibCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BytesLibTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BytesLibTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BytesLibFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BytesLibFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BytesLibSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BytesLibSession struct {
	Contract     *BytesLib         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BytesLibCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BytesLibCallerSession struct {
	Contract *BytesLibCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// BytesLibTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BytesLibTransactorSession struct {
	Contract     *BytesLibTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// BytesLibRaw is an auto generated low-level Go binding around an Ethereum contract.
type BytesLibRaw struct {
	Contract *BytesLib // Generic contract binding to access the raw methods on
}

// BytesLibCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BytesLibCallerRaw struct {
	Contract *BytesLibCaller // Generic read-only contract binding to access the raw methods on
}

// BytesLibTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BytesLibTransactorRaw struct {
	Contract *BytesLibTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBytesLib creates a new instance of BytesLib, bound to a specific deployed contract.
func NewBytesLib(address common.Address, backend bind.ContractBackend) (*BytesLib, error) {
	contract, err := bindBytesLib(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &BytesLib{BytesLibCaller: BytesLibCaller{contract: contract}, BytesLibTransactor: BytesLibTransactor{contract: contract}, BytesLibFilterer: BytesLibFilterer{contract: contract}}, nil
}

// NewBytesLibCaller creates a new read-only instance of BytesLib, bound to a specific deployed contract.
func NewBytesLibCaller(address common.Address, caller bind.ContractCaller) (*BytesLibCaller, error) {
	contract, err := bindBytesLib(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BytesLibCaller{contract: contract}, nil
}

// NewBytesLibTransactor creates a new write-only instance of BytesLib, bound to a specific deployed contract.
func NewBytesLibTransactor(address common.Address, transactor bind.ContractTransactor) (*BytesLibTransactor, error) {
	contract, err := bindBytesLib(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BytesLibTransactor{contract: contract}, nil
}

// NewBytesLibFilterer creates a new log filterer instance of BytesLib, bound to a specific deployed contract.
func NewBytesLibFilterer(address common.Address, filterer bind.ContractFilterer) (*BytesLibFilterer, error) {
	contract, err := bindBytesLib(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BytesLibFilterer{contract: contract}, nil
}

// bindBytesLib binds a generic wrapper to an already deployed contract.
func bindBytesLib(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := BytesLibMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BytesLib *BytesLibRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BytesLib.Contract.BytesLibCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BytesLib *BytesLibRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BytesLib.Contract.BytesLibTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BytesLib *BytesLibRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BytesLib.Contract.BytesLibTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_BytesLib *BytesLibCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _BytesLib.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_BytesLib *BytesLibTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _BytesLib.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_BytesLib *BytesLibTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _BytesLib.Contract.contract.Transact(opts, method, params...)
}

// CommandsMetaData contains all meta data concerning the Commands contract.
var CommandsMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220b20863bddf30dc2b0bc12045484e89b218f3256235d4fca6e6847f69621730dc64736f6c63430008150033",
}

// CommandsABI is the input ABI used to generate the binding from.
// Deprecated: Use CommandsMetaData.ABI instead.
var CommandsABI = CommandsMetaData.ABI

// CommandsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CommandsMetaData.Bin instead.
var CommandsBin = CommandsMetaData.Bin

// DeployCommands deploys a new Ethereum contract, binding an instance of Commands to it.
func DeployCommands(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Commands, error) {
	parsed, err := CommandsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CommandsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Commands{CommandsCaller: CommandsCaller{contract: contract}, CommandsTransactor: CommandsTransactor{contract: contract}, CommandsFilterer: CommandsFilterer{contract: contract}}, nil
}

// Commands is an auto generated Go binding around an Ethereum contract.
type Commands struct {
	CommandsCaller     // Read-only binding to the contract
	CommandsTransactor // Write-only binding to the contract
	CommandsFilterer   // Log filterer for contract events
}

// CommandsCaller is an auto generated read-only Go binding around an Ethereum contract.
type CommandsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommandsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CommandsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommandsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CommandsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommandsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CommandsSession struct {
	Contract     *Commands         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CommandsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CommandsCallerSession struct {
	Contract *CommandsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// CommandsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CommandsTransactorSession struct {
	Contract     *CommandsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// CommandsRaw is an auto generated low-level Go binding around an Ethereum contract.
type CommandsRaw struct {
	Contract *Commands // Generic contract binding to access the raw methods on
}

// CommandsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CommandsCallerRaw struct {
	Contract *CommandsCaller // Generic read-only contract binding to access the raw methods on
}

// CommandsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CommandsTransactorRaw struct {
	Contract *CommandsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCommands creates a new instance of Commands, bound to a specific deployed contract.
func NewCommands(address common.Address, backend bind.ContractBackend) (*Commands, error) {
	contract, err := bindCommands(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Commands{CommandsCaller: CommandsCaller{contract: contract}, CommandsTransactor: CommandsTransactor{contract: contract}, CommandsFilterer: CommandsFilterer{contract: contract}}, nil
}

// NewCommandsCaller creates a new read-only instance of Commands, bound to a specific deployed contract.
func NewCommandsCaller(address common.Address, caller bind.ContractCaller) (*CommandsCaller, error) {
	contract, err := bindCommands(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CommandsCaller{contract: contract}, nil
}

// NewCommandsTransactor creates a new write-only instance of Commands, bound to a specific deployed contract.
func NewCommandsTransactor(address common.Address, transactor bind.ContractTransactor) (*CommandsTransactor, error) {
	contract, err := bindCommands(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CommandsTransactor{contract: contract}, nil
}

// NewCommandsFilterer creates a new log filterer instance of Commands, bound to a specific deployed contract.
func NewCommandsFilterer(address common.Address, filterer bind.ContractFilterer) (*CommandsFilterer, error) {
	contract, err := bindCommands(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CommandsFilterer{contract: contract}, nil
}

// bindCommands binds a generic wrapper to an already deployed contract.
func bindCommands(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CommandsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Commands *CommandsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Commands.Contract.CommandsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Commands *CommandsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Commands.Contract.CommandsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Commands *CommandsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Commands.Contract.CommandsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Commands *CommandsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Commands.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Commands *CommandsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Commands.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Commands *CommandsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Commands.Contract.contract.Transact(opts, method, params...)
}

// CommitteeRootMappingVerifierMetaData contains all meta data concerning the CommitteeRootMappingVerifier contract.
var CommitteeRootMappingVerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[33]\",\"name\":\"input\",\"type\":\"uint256[33]\"}],\"name\":\"verifyCommitteeRootMappingProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// CommitteeRootMappingVerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use CommitteeRootMappingVerifierMetaData.ABI instead.
var CommitteeRootMappingVerifierABI = CommitteeRootMappingVerifierMetaData.ABI

// CommitteeRootMappingVerifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CommitteeRootMappingVerifierMetaData.Bin instead.
var CommitteeRootMappingVerifierBin = CommitteeRootMappingVerifierMetaData.Bin

// DeployCommitteeRootMappingVerifier deploys a new Ethereum contract, binding an instance of CommitteeRootMappingVerifier to it.
func DeployCommitteeRootMappingVerifier(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CommitteeRootMappingVerifier, error) {
	parsed, err := CommitteeRootMappingVerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CommitteeRootMappingVerifierBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CommitteeRootMappingVerifier{CommitteeRootMappingVerifierCaller: CommitteeRootMappingVerifierCaller{contract: contract}, CommitteeRootMappingVerifierTransactor: CommitteeRootMappingVerifierTransactor{contract: contract}, CommitteeRootMappingVerifierFilterer: CommitteeRootMappingVerifierFilterer{contract: contract}}, nil
}

// CommitteeRootMappingVerifier is an auto generated Go binding around an Ethereum contract.
type CommitteeRootMappingVerifier struct {
	CommitteeRootMappingVerifierCaller     // Read-only binding to the contract
	CommitteeRootMappingVerifierTransactor // Write-only binding to the contract
	CommitteeRootMappingVerifierFilterer   // Log filterer for contract events
}

// CommitteeRootMappingVerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type CommitteeRootMappingVerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommitteeRootMappingVerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CommitteeRootMappingVerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommitteeRootMappingVerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CommitteeRootMappingVerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommitteeRootMappingVerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CommitteeRootMappingVerifierSession struct {
	Contract     *CommitteeRootMappingVerifier // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                 // Call options to use throughout this session
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// CommitteeRootMappingVerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CommitteeRootMappingVerifierCallerSession struct {
	Contract *CommitteeRootMappingVerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                       // Call options to use throughout this session
}

// CommitteeRootMappingVerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CommitteeRootMappingVerifierTransactorSession struct {
	Contract     *CommitteeRootMappingVerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                       // Transaction auth options to use throughout this session
}

// CommitteeRootMappingVerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type CommitteeRootMappingVerifierRaw struct {
	Contract *CommitteeRootMappingVerifier // Generic contract binding to access the raw methods on
}

// CommitteeRootMappingVerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CommitteeRootMappingVerifierCallerRaw struct {
	Contract *CommitteeRootMappingVerifierCaller // Generic read-only contract binding to access the raw methods on
}

// CommitteeRootMappingVerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CommitteeRootMappingVerifierTransactorRaw struct {
	Contract *CommitteeRootMappingVerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCommitteeRootMappingVerifier creates a new instance of CommitteeRootMappingVerifier, bound to a specific deployed contract.
func NewCommitteeRootMappingVerifier(address common.Address, backend bind.ContractBackend) (*CommitteeRootMappingVerifier, error) {
	contract, err := bindCommitteeRootMappingVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CommitteeRootMappingVerifier{CommitteeRootMappingVerifierCaller: CommitteeRootMappingVerifierCaller{contract: contract}, CommitteeRootMappingVerifierTransactor: CommitteeRootMappingVerifierTransactor{contract: contract}, CommitteeRootMappingVerifierFilterer: CommitteeRootMappingVerifierFilterer{contract: contract}}, nil
}

// NewCommitteeRootMappingVerifierCaller creates a new read-only instance of CommitteeRootMappingVerifier, bound to a specific deployed contract.
func NewCommitteeRootMappingVerifierCaller(address common.Address, caller bind.ContractCaller) (*CommitteeRootMappingVerifierCaller, error) {
	contract, err := bindCommitteeRootMappingVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CommitteeRootMappingVerifierCaller{contract: contract}, nil
}

// NewCommitteeRootMappingVerifierTransactor creates a new write-only instance of CommitteeRootMappingVerifier, bound to a specific deployed contract.
func NewCommitteeRootMappingVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*CommitteeRootMappingVerifierTransactor, error) {
	contract, err := bindCommitteeRootMappingVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CommitteeRootMappingVerifierTransactor{contract: contract}, nil
}

// NewCommitteeRootMappingVerifierFilterer creates a new log filterer instance of CommitteeRootMappingVerifier, bound to a specific deployed contract.
func NewCommitteeRootMappingVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*CommitteeRootMappingVerifierFilterer, error) {
	contract, err := bindCommitteeRootMappingVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CommitteeRootMappingVerifierFilterer{contract: contract}, nil
}

// bindCommitteeRootMappingVerifier binds a generic wrapper to an already deployed contract.
func bindCommitteeRootMappingVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CommitteeRootMappingVerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CommitteeRootMappingVerifier *CommitteeRootMappingVerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CommitteeRootMappingVerifier.Contract.CommitteeRootMappingVerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CommitteeRootMappingVerifier *CommitteeRootMappingVerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitteeRootMappingVerifier.Contract.CommitteeRootMappingVerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CommitteeRootMappingVerifier *CommitteeRootMappingVerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CommitteeRootMappingVerifier.Contract.CommitteeRootMappingVerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CommitteeRootMappingVerifier *CommitteeRootMappingVerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CommitteeRootMappingVerifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CommitteeRootMappingVerifier *CommitteeRootMappingVerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CommitteeRootMappingVerifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CommitteeRootMappingVerifier *CommitteeRootMappingVerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CommitteeRootMappingVerifier.Contract.contract.Transact(opts, method, params...)
}

// VerifyCommitteeRootMappingProof is a free data retrieval call binding the contract method 0xab00dde6.
//
// Solidity: function verifyCommitteeRootMappingProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[33] input) view returns(bool r)
func (_CommitteeRootMappingVerifier *CommitteeRootMappingVerifierCaller) VerifyCommitteeRootMappingProof(opts *bind.CallOpts, a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [33]*big.Int) (bool, error) {
	var out []interface{}
	err := _CommitteeRootMappingVerifier.contract.Call(opts, &out, "verifyCommitteeRootMappingProof", a, b, c, input)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyCommitteeRootMappingProof is a free data retrieval call binding the contract method 0xab00dde6.
//
// Solidity: function verifyCommitteeRootMappingProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[33] input) view returns(bool r)
func (_CommitteeRootMappingVerifier *CommitteeRootMappingVerifierSession) VerifyCommitteeRootMappingProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [33]*big.Int) (bool, error) {
	return _CommitteeRootMappingVerifier.Contract.VerifyCommitteeRootMappingProof(&_CommitteeRootMappingVerifier.CallOpts, a, b, c, input)
}

// VerifyCommitteeRootMappingProof is a free data retrieval call binding the contract method 0xab00dde6.
//
// Solidity: function verifyCommitteeRootMappingProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[33] input) view returns(bool r)
func (_CommitteeRootMappingVerifier *CommitteeRootMappingVerifierCallerSession) VerifyCommitteeRootMappingProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, input [33]*big.Int) (bool, error) {
	return _CommitteeRootMappingVerifier.Contract.VerifyCommitteeRootMappingProof(&_CommitteeRootMappingVerifier.CallOpts, a, b, c, input)
}

// CommonMetaData contains all meta data concerning the Common contract.
var CommonMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212200211de7c20b02f29f3a16e6e5841e8a007a6e7e095287ba223dcacc9ab4cf51664736f6c63430008150033",
}

// CommonABI is the input ABI used to generate the binding from.
// Deprecated: Use CommonMetaData.ABI instead.
var CommonABI = CommonMetaData.ABI

// CommonBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CommonMetaData.Bin instead.
var CommonBin = CommonMetaData.Bin

// DeployCommon deploys a new Ethereum contract, binding an instance of Common to it.
func DeployCommon(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Common, error) {
	parsed, err := CommonMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CommonBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Common{CommonCaller: CommonCaller{contract: contract}, CommonTransactor: CommonTransactor{contract: contract}, CommonFilterer: CommonFilterer{contract: contract}}, nil
}

// Common is an auto generated Go binding around an Ethereum contract.
type Common struct {
	CommonCaller     // Read-only binding to the contract
	CommonTransactor // Write-only binding to the contract
	CommonFilterer   // Log filterer for contract events
}

// CommonCaller is an auto generated read-only Go binding around an Ethereum contract.
type CommonCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommonTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CommonTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommonFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CommonFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CommonSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CommonSession struct {
	Contract     *Common           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CommonCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CommonCallerSession struct {
	Contract *CommonCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// CommonTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CommonTransactorSession struct {
	Contract     *CommonTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CommonRaw is an auto generated low-level Go binding around an Ethereum contract.
type CommonRaw struct {
	Contract *Common // Generic contract binding to access the raw methods on
}

// CommonCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CommonCallerRaw struct {
	Contract *CommonCaller // Generic read-only contract binding to access the raw methods on
}

// CommonTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CommonTransactorRaw struct {
	Contract *CommonTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCommon creates a new instance of Common, bound to a specific deployed contract.
func NewCommon(address common.Address, backend bind.ContractBackend) (*Common, error) {
	contract, err := bindCommon(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Common{CommonCaller: CommonCaller{contract: contract}, CommonTransactor: CommonTransactor{contract: contract}, CommonFilterer: CommonFilterer{contract: contract}}, nil
}

// NewCommonCaller creates a new read-only instance of Common, bound to a specific deployed contract.
func NewCommonCaller(address common.Address, caller bind.ContractCaller) (*CommonCaller, error) {
	contract, err := bindCommon(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CommonCaller{contract: contract}, nil
}

// NewCommonTransactor creates a new write-only instance of Common, bound to a specific deployed contract.
func NewCommonTransactor(address common.Address, transactor bind.ContractTransactor) (*CommonTransactor, error) {
	contract, err := bindCommon(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CommonTransactor{contract: contract}, nil
}

// NewCommonFilterer creates a new log filterer instance of Common, bound to a specific deployed contract.
func NewCommonFilterer(address common.Address, filterer bind.ContractFilterer) (*CommonFilterer, error) {
	contract, err := bindCommon(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CommonFilterer{contract: contract}, nil
}

// bindCommon binds a generic wrapper to an already deployed contract.
func bindCommon(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CommonMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Common *CommonRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Common.Contract.CommonCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Common *CommonRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Common.Contract.CommonTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Common *CommonRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Common.Contract.CommonTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Common *CommonCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Common.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Common *CommonTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Common.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Common *CommonTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Common.Contract.contract.Transact(opts, method, params...)
}

// ContextMetaData contains all meta data concerning the Context contract.
var ContextMetaData = &bind.MetaData{
	ABI: "[]",
}

// ContextABI is the input ABI used to generate the binding from.
// Deprecated: Use ContextMetaData.ABI instead.
var ContextABI = ContextMetaData.ABI

// Context is an auto generated Go binding around an Ethereum contract.
type Context struct {
	ContextCaller     // Read-only binding to the contract
	ContextTransactor // Write-only binding to the contract
	ContextFilterer   // Log filterer for contract events
}

// ContextCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContextCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContextTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContextFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContextSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContextSession struct {
	Contract     *Context          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContextCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContextCallerSession struct {
	Contract *ContextCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// ContextTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContextTransactorSession struct {
	Contract     *ContextTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// ContextRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContextRaw struct {
	Contract *Context // Generic contract binding to access the raw methods on
}

// ContextCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContextCallerRaw struct {
	Contract *ContextCaller // Generic read-only contract binding to access the raw methods on
}

// ContextTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContextTransactorRaw struct {
	Contract *ContextTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContext creates a new instance of Context, bound to a specific deployed contract.
func NewContext(address common.Address, backend bind.ContractBackend) (*Context, error) {
	contract, err := bindContext(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Context{ContextCaller: ContextCaller{contract: contract}, ContextTransactor: ContextTransactor{contract: contract}, ContextFilterer: ContextFilterer{contract: contract}}, nil
}

// NewContextCaller creates a new read-only instance of Context, bound to a specific deployed contract.
func NewContextCaller(address common.Address, caller bind.ContractCaller) (*ContextCaller, error) {
	contract, err := bindContext(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContextCaller{contract: contract}, nil
}

// NewContextTransactor creates a new write-only instance of Context, bound to a specific deployed contract.
func NewContextTransactor(address common.Address, transactor bind.ContractTransactor) (*ContextTransactor, error) {
	contract, err := bindContext(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContextTransactor{contract: contract}, nil
}

// NewContextFilterer creates a new log filterer instance of Context, bound to a specific deployed contract.
func NewContextFilterer(address common.Address, filterer bind.ContractFilterer) (*ContextFilterer, error) {
	contract, err := bindContext(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContextFilterer{contract: contract}, nil
}

// bindContext binds a generic wrapper to an already deployed contract.
func bindContext(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContextMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Context *ContextRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Context.Contract.ContextCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Context *ContextRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Context.Contract.ContextTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Context *ContextRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Context.Contract.ContextTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Context *ContextCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Context.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Context *ContextTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Context.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Context *ContextTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Context.Contract.contract.Transact(opts, method, params...)
}

// CurrencyLibraryMetaData contains all meta data concerning the CurrencyLibrary contract.
var CurrencyLibraryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"ERC20TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NATIVE\",\"outputs\":[{\"internalType\":\"Currency\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60808060405234601857606f908161001d823930815050f35b5f80fdfe60808060405260043610156011575f80fd5b5f3560e01c63a0cf0aea146023575f80fd5b5f366003190112603557805f60209252f35b5f80fdfea2646970667358221220e641e1d4af31c27b97736e471f94ad35db21c64ea8898fec286851db2e89365f64736f6c63430008150033",
}

// CurrencyLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use CurrencyLibraryMetaData.ABI instead.
var CurrencyLibraryABI = CurrencyLibraryMetaData.ABI

// CurrencyLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CurrencyLibraryMetaData.Bin instead.
var CurrencyLibraryBin = CurrencyLibraryMetaData.Bin

// DeployCurrencyLibrary deploys a new Ethereum contract, binding an instance of CurrencyLibrary to it.
func DeployCurrencyLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *CurrencyLibrary, error) {
	parsed, err := CurrencyLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CurrencyLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CurrencyLibrary{CurrencyLibraryCaller: CurrencyLibraryCaller{contract: contract}, CurrencyLibraryTransactor: CurrencyLibraryTransactor{contract: contract}, CurrencyLibraryFilterer: CurrencyLibraryFilterer{contract: contract}}, nil
}

// CurrencyLibrary is an auto generated Go binding around an Ethereum contract.
type CurrencyLibrary struct {
	CurrencyLibraryCaller     // Read-only binding to the contract
	CurrencyLibraryTransactor // Write-only binding to the contract
	CurrencyLibraryFilterer   // Log filterer for contract events
}

// CurrencyLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type CurrencyLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CurrencyLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CurrencyLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CurrencyLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CurrencyLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CurrencyLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CurrencyLibrarySession struct {
	Contract     *CurrencyLibrary  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CurrencyLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CurrencyLibraryCallerSession struct {
	Contract *CurrencyLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// CurrencyLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CurrencyLibraryTransactorSession struct {
	Contract     *CurrencyLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// CurrencyLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type CurrencyLibraryRaw struct {
	Contract *CurrencyLibrary // Generic contract binding to access the raw methods on
}

// CurrencyLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CurrencyLibraryCallerRaw struct {
	Contract *CurrencyLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// CurrencyLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CurrencyLibraryTransactorRaw struct {
	Contract *CurrencyLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCurrencyLibrary creates a new instance of CurrencyLibrary, bound to a specific deployed contract.
func NewCurrencyLibrary(address common.Address, backend bind.ContractBackend) (*CurrencyLibrary, error) {
	contract, err := bindCurrencyLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CurrencyLibrary{CurrencyLibraryCaller: CurrencyLibraryCaller{contract: contract}, CurrencyLibraryTransactor: CurrencyLibraryTransactor{contract: contract}, CurrencyLibraryFilterer: CurrencyLibraryFilterer{contract: contract}}, nil
}

// NewCurrencyLibraryCaller creates a new read-only instance of CurrencyLibrary, bound to a specific deployed contract.
func NewCurrencyLibraryCaller(address common.Address, caller bind.ContractCaller) (*CurrencyLibraryCaller, error) {
	contract, err := bindCurrencyLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CurrencyLibraryCaller{contract: contract}, nil
}

// NewCurrencyLibraryTransactor creates a new write-only instance of CurrencyLibrary, bound to a specific deployed contract.
func NewCurrencyLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*CurrencyLibraryTransactor, error) {
	contract, err := bindCurrencyLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CurrencyLibraryTransactor{contract: contract}, nil
}

// NewCurrencyLibraryFilterer creates a new log filterer instance of CurrencyLibrary, bound to a specific deployed contract.
func NewCurrencyLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*CurrencyLibraryFilterer, error) {
	contract, err := bindCurrencyLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CurrencyLibraryFilterer{contract: contract}, nil
}

// bindCurrencyLibrary binds a generic wrapper to an already deployed contract.
func bindCurrencyLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CurrencyLibraryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CurrencyLibrary *CurrencyLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CurrencyLibrary.Contract.CurrencyLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CurrencyLibrary *CurrencyLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CurrencyLibrary.Contract.CurrencyLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CurrencyLibrary *CurrencyLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CurrencyLibrary.Contract.CurrencyLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CurrencyLibrary *CurrencyLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CurrencyLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CurrencyLibrary *CurrencyLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CurrencyLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CurrencyLibrary *CurrencyLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CurrencyLibrary.Contract.contract.Transact(opts, method, params...)
}

// NATIVE is a free data retrieval call binding the contract method 0xa0cf0aea.
//
// Solidity: function NATIVE() view returns(address)
func (_CurrencyLibrary *CurrencyLibraryCaller) NATIVE(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CurrencyLibrary.contract.Call(opts, &out, "NATIVE")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// NATIVE is a free data retrieval call binding the contract method 0xa0cf0aea.
//
// Solidity: function NATIVE() view returns(address)
func (_CurrencyLibrary *CurrencyLibrarySession) NATIVE() (common.Address, error) {
	return _CurrencyLibrary.Contract.NATIVE(&_CurrencyLibrary.CallOpts)
}

// NATIVE is a free data retrieval call binding the contract method 0xa0cf0aea.
//
// Solidity: function NATIVE() view returns(address)
func (_CurrencyLibrary *CurrencyLibraryCallerSession) NATIVE() (common.Address, error) {
	return _CurrencyLibrary.Contract.NATIVE(&_CurrencyLibrary.CallOpts)
}

// ERC165MetaData contains all meta data concerning the ERC165 contract.
var ERC165MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// ERC165ABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC165MetaData.ABI instead.
var ERC165ABI = ERC165MetaData.ABI

// ERC165 is an auto generated Go binding around an Ethereum contract.
type ERC165 struct {
	ERC165Caller     // Read-only binding to the contract
	ERC165Transactor // Write-only binding to the contract
	ERC165Filterer   // Log filterer for contract events
}

// ERC165Caller is an auto generated read-only Go binding around an Ethereum contract.
type ERC165Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165Transactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC165Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC165Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC165Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC165Session struct {
	Contract     *ERC165           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC165CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC165CallerSession struct {
	Contract *ERC165Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ERC165TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC165TransactorSession struct {
	Contract     *ERC165Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC165Raw is an auto generated low-level Go binding around an Ethereum contract.
type ERC165Raw struct {
	Contract *ERC165 // Generic contract binding to access the raw methods on
}

// ERC165CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC165CallerRaw struct {
	Contract *ERC165Caller // Generic read-only contract binding to access the raw methods on
}

// ERC165TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC165TransactorRaw struct {
	Contract *ERC165Transactor // Generic write-only contract binding to access the raw methods on
}

// NewERC165 creates a new instance of ERC165, bound to a specific deployed contract.
func NewERC165(address common.Address, backend bind.ContractBackend) (*ERC165, error) {
	contract, err := bindERC165(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC165{ERC165Caller: ERC165Caller{contract: contract}, ERC165Transactor: ERC165Transactor{contract: contract}, ERC165Filterer: ERC165Filterer{contract: contract}}, nil
}

// NewERC165Caller creates a new read-only instance of ERC165, bound to a specific deployed contract.
func NewERC165Caller(address common.Address, caller bind.ContractCaller) (*ERC165Caller, error) {
	contract, err := bindERC165(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC165Caller{contract: contract}, nil
}

// NewERC165Transactor creates a new write-only instance of ERC165, bound to a specific deployed contract.
func NewERC165Transactor(address common.Address, transactor bind.ContractTransactor) (*ERC165Transactor, error) {
	contract, err := bindERC165(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC165Transactor{contract: contract}, nil
}

// NewERC165Filterer creates a new log filterer instance of ERC165, bound to a specific deployed contract.
func NewERC165Filterer(address common.Address, filterer bind.ContractFilterer) (*ERC165Filterer, error) {
	contract, err := bindERC165(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC165Filterer{contract: contract}, nil
}

// bindERC165 binds a generic wrapper to an already deployed contract.
func bindERC165(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC165MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC165 *ERC165Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC165.Contract.ERC165Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC165 *ERC165Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC165.Contract.ERC165Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC165 *ERC165Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC165.Contract.ERC165Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC165 *ERC165CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC165.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC165 *ERC165TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC165.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC165 *ERC165TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC165.Contract.contract.Transact(opts, method, params...)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC165 *ERC165Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ERC165.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC165 *ERC165Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC165.Contract.SupportsInterface(&_ERC165.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC165 *ERC165CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC165.Contract.SupportsInterface(&_ERC165.CallOpts, interfaceId)
}

// ERC20MetaData contains all meta data concerning the ERC20 contract.
var ERC20MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234620003055762000c95803803806200001d8162000309565b928339810190604081830312620003055780516001600160401b03908181116200030557836200004f9184016200032f565b916020938482015183811162000305576200006b92016200032f565b825182811162000210576003918254916001958684811c94168015620002fa575b88851014620002e6578190601f9485811162000293575b50889085831160011462000230575f9262000224575b50505f1982861b1c191690861b1783555b8051938411620002105760049586548681811c9116801562000205575b82821014620001f257838111620001aa575b50809285116001146200014057509383949184925f9562000134575b50501b925f19911b1c19161790555b6040516108f59081620003a08239f35b015193505f8062000115565b92919084601f198116885f52855f20955f905b898383106200018f575050501062000175575b50505050811b01905562000124565b01519060f8845f19921b161c191690555f80808062000166565b85870151895590970196948501948893509081019062000153565b875f52815f208480880160051c820192848910620001e8575b0160051c019087905b828110620001dc575050620000f9565b5f8155018790620001cc565b92508192620001c3565b602288634e487b7160e01b5f525260245ffd5b90607f1690620000e7565b634e487b7160e01b5f52604160045260245ffd5b015190505f80620000b9565b90889350601f19831691875f528a5f20925f5b8c8282106200027c575050841162000264575b505050811b018355620000ca565b01515f1983881b60f8161c191690555f808062000256565b8385015186558c9790950194938401930162000243565b909150855f52885f208580850160051c8201928b8610620002dc575b918a91869594930160051c01915b828110620002cd575050620000a3565b5f81558594508a9101620002bd565b92508192620002af565b634e487b7160e01b5f52602260045260245ffd5b93607f16936200008c565b5f80fd5b6040519190601f01601f191682016001600160401b038111838210176200021057604052565b919080601f84011215620003055782516001600160401b038111620002105760209062000365601f8201601f1916830162000309565b9281845282828701011162000305575f5b8181106200038b5750825f9394955001015290565b85810183015184820184015282016200037656fe6080604081815260049182361015610015575f80fd5b5f92833560e01c91826306fdde03146104aa57508163095ea7b31461048057816318160ddd1461046157816323b872dd14610397578163313ce5671461037b578163395093511461032c57816370a08231146102f657816395d89b41146101d7578163a457c2d71461011657508063a9059cbb146100e65763dd62ed3e1461009b575f80fd5b346100e257806003193601126100e257806020926100b76105cd565b6100bf6105e7565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50346100e257806003193601126100e25760209061010f6101056105cd565b602435903361061e565b5160018152f35b905082346101d457826003193601126101d4576101316105cd565b91836024359233815260016020528181206001600160a01b038616825260205220549082821061016b5760208561010f85850387336107c1565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152fd5b80fd5b8383346100e257816003193601126100e257805190828454600181811c908083169283156102ec575b60209384841081146102d9578388529081156102bd5750600114610268575b505050829003601f01601f191682019267ffffffffffffffff8411838510176102555750829182610251925282610586565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8385106102a9575050505083010185808061021f565b805488860183015293019284908201610293565b60ff1916878501525050151560051b840101905085808061021f565b634e487b7160e01b895260228a52602489fd5b91607f1691610200565b5050346100e25760203660031901126100e257806020926001600160a01b0361031d6105cd565b16815280845220549051908152f35b5050346100e257806003193601126100e25761010f60209261037461034f6105cd565b91338152600186528481206001600160a01b03841682528652846024359120546105fd565b90336107c1565b5050346100e257816003193601126100e2576020905160128152f35b839150346100e25760603660031901126100e2576103b36105cd565b6103bb6105e7565b9184604435946001600160a01b038416815260016020528181203382526020522054905f1982036103f5575b60208661010f87878761061e565b84821061041e57509183916104136020969561010f950333836107c1565b9193948193506103e7565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346100e257816003193601126100e2576020906002549051908152f35b5050346100e257806003193601126100e25760209061010f6104a06105cd565b60243590336107c1565b8490843461058257826003193601126105825782600354600181811c90808316928315610578575b60209384841081146102d9578388529081156102bd575060011461052257505050829003601f01601f191682019267ffffffffffffffff8411838510176102555750829182610251925282610586565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b838510610564575050505083010185808061021f565b80548886018301529301928490820161054e565b91607f16916104d2565b8280fd5b602080825282518183018190529093925f5b8281106105b957505060409293505f838284010152601f8019910116010190565b818101860151848201604001528501610598565b600435906001600160a01b03821682036105e357565b5f80fd5b602435906001600160a01b03821682036105e357565b9190820180921161060a57565b634e487b7160e01b5f52601160045260245ffd5b6001600160a01b038091169182156107565716918215610705575f8281528060205260408120549180831061069a57604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef95876020965282865203828220558681522061068f8282546105fd565b9055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608490fd5b6001600160a01b0380911691821561086e571691821561081e5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591835f526001825260405f20855f5282528060405f2055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fdfea2646970667358221220222e31cb3e88b53e345d2f17e1a82ab3e9c83eaf19317f16e3e699682791d60e64736f6c63430008150033",
}

// ERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20MetaData.ABI instead.
var ERC20ABI = ERC20MetaData.ABI

// ERC20Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC20MetaData.Bin instead.
var ERC20Bin = ERC20MetaData.Bin

// DeployERC20 deploys a new Ethereum contract, binding an instance of ERC20 to it.
func DeployERC20(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string) (common.Address, *types.Transaction, *ERC20, error) {
	parsed, err := ERC20MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC20Bin), backend, name_, symbol_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC20{ERC20Caller: ERC20Caller{contract: contract}, ERC20Transactor: ERC20Transactor{contract: contract}, ERC20Filterer: ERC20Filterer{contract: contract}}, nil
}

// ERC20 is an auto generated Go binding around an Ethereum contract.
type ERC20 struct {
	ERC20Caller     // Read-only binding to the contract
	ERC20Transactor // Write-only binding to the contract
	ERC20Filterer   // Log filterer for contract events
}

// ERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20Session struct {
	Contract     *ERC20            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20CallerSession struct {
	Contract *ERC20Caller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20TransactorSession struct {
	Contract     *ERC20Transactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20Raw struct {
	Contract *ERC20 // Generic contract binding to access the raw methods on
}

// ERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20CallerRaw struct {
	Contract *ERC20Caller // Generic read-only contract binding to access the raw methods on
}

// ERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20TransactorRaw struct {
	Contract *ERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20 creates a new instance of ERC20, bound to a specific deployed contract.
func NewERC20(address common.Address, backend bind.ContractBackend) (*ERC20, error) {
	contract, err := bindERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20{ERC20Caller: ERC20Caller{contract: contract}, ERC20Transactor: ERC20Transactor{contract: contract}, ERC20Filterer: ERC20Filterer{contract: contract}}, nil
}

// NewERC20Caller creates a new read-only instance of ERC20, bound to a specific deployed contract.
func NewERC20Caller(address common.Address, caller bind.ContractCaller) (*ERC20Caller, error) {
	contract, err := bindERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20Caller{contract: contract}, nil
}

// NewERC20Transactor creates a new write-only instance of ERC20, bound to a specific deployed contract.
func NewERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*ERC20Transactor, error) {
	contract, err := bindERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20Transactor{contract: contract}, nil
}

// NewERC20Filterer creates a new log filterer instance of ERC20, bound to a specific deployed contract.
func NewERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*ERC20Filterer, error) {
	contract, err := bindERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20Filterer{contract: contract}, nil
}

// bindERC20 binds a generic wrapper to an already deployed contract.
func bindERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC20MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20 *ERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20.Contract.ERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20 *ERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20.Contract.ERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20 *ERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20.Contract.ERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20 *ERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20 *ERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20 *ERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20 *ERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20 *ERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20.Contract.Allowance(&_ERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20 *ERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20.Contract.Allowance(&_ERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20 *ERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20 *ERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20.Contract.BalanceOf(&_ERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20 *ERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20.Contract.BalanceOf(&_ERC20.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20 *ERC20Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20 *ERC20Session) Decimals() (uint8, error) {
	return _ERC20.Contract.Decimals(&_ERC20.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20 *ERC20CallerSession) Decimals() (uint8, error) {
	return _ERC20.Contract.Decimals(&_ERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20 *ERC20Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20 *ERC20Session) Name() (string, error) {
	return _ERC20.Contract.Name(&_ERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20 *ERC20CallerSession) Name() (string, error) {
	return _ERC20.Contract.Name(&_ERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20 *ERC20Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20 *ERC20Session) Symbol() (string, error) {
	return _ERC20.Contract.Symbol(&_ERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20 *ERC20CallerSession) Symbol() (string, error) {
	return _ERC20.Contract.Symbol(&_ERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20 *ERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20 *ERC20Session) TotalSupply() (*big.Int, error) {
	return _ERC20.Contract.TotalSupply(&_ERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20 *ERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _ERC20.Contract.TotalSupply(&_ERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20 *ERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20 *ERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Approve(&_ERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20 *ERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Approve(&_ERC20.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20 *ERC20Transactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20 *ERC20Session) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.DecreaseAllowance(&_ERC20.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20 *ERC20TransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.DecreaseAllowance(&_ERC20.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20 *ERC20Transactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20 *ERC20Session) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.IncreaseAllowance(&_ERC20.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20 *ERC20TransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.IncreaseAllowance(&_ERC20.TransactOpts, spender, addedValue)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20 *ERC20Transactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20 *ERC20Session) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Transfer(&_ERC20.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20 *ERC20TransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.Transfer(&_ERC20.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20 *ERC20Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20 *ERC20Session) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.TransferFrom(&_ERC20.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20 *ERC20TransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20.Contract.TransferFrom(&_ERC20.TransactOpts, from, to, amount)
}

// ERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC20 contract.
type ERC20ApprovalIterator struct {
	Event *ERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20Approval represents a Approval event raised by the ERC20 contract.
type ERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20 *ERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20ApprovalIterator{contract: _ERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20 *ERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20Approval)
				if err := _ERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20 *ERC20Filterer) ParseApproval(log types.Log) (*ERC20Approval, error) {
	event := new(ERC20Approval)
	if err := _ERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC20 contract.
type ERC20TransferIterator struct {
	Event *ERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20Transfer represents a Transfer event raised by the ERC20 contract.
type ERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20 *ERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC20TransferIterator{contract: _ERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20 *ERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20Transfer)
				if err := _ERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20 *ERC20Filterer) ParseTransfer(log types.Log) (*ERC20Transfer, error) {
	event := new(ERC20Transfer)
	if err := _ERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20BurnableMetaData contains all meta data concerning the ERC20Burnable contract.
var ERC20BurnableMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ERC20BurnableABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC20BurnableMetaData.ABI instead.
var ERC20BurnableABI = ERC20BurnableMetaData.ABI

// ERC20Burnable is an auto generated Go binding around an Ethereum contract.
type ERC20Burnable struct {
	ERC20BurnableCaller     // Read-only binding to the contract
	ERC20BurnableTransactor // Write-only binding to the contract
	ERC20BurnableFilterer   // Log filterer for contract events
}

// ERC20BurnableCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC20BurnableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20BurnableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC20BurnableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20BurnableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC20BurnableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC20BurnableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC20BurnableSession struct {
	Contract     *ERC20Burnable    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC20BurnableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC20BurnableCallerSession struct {
	Contract *ERC20BurnableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// ERC20BurnableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC20BurnableTransactorSession struct {
	Contract     *ERC20BurnableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ERC20BurnableRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC20BurnableRaw struct {
	Contract *ERC20Burnable // Generic contract binding to access the raw methods on
}

// ERC20BurnableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC20BurnableCallerRaw struct {
	Contract *ERC20BurnableCaller // Generic read-only contract binding to access the raw methods on
}

// ERC20BurnableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC20BurnableTransactorRaw struct {
	Contract *ERC20BurnableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC20Burnable creates a new instance of ERC20Burnable, bound to a specific deployed contract.
func NewERC20Burnable(address common.Address, backend bind.ContractBackend) (*ERC20Burnable, error) {
	contract, err := bindERC20Burnable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC20Burnable{ERC20BurnableCaller: ERC20BurnableCaller{contract: contract}, ERC20BurnableTransactor: ERC20BurnableTransactor{contract: contract}, ERC20BurnableFilterer: ERC20BurnableFilterer{contract: contract}}, nil
}

// NewERC20BurnableCaller creates a new read-only instance of ERC20Burnable, bound to a specific deployed contract.
func NewERC20BurnableCaller(address common.Address, caller bind.ContractCaller) (*ERC20BurnableCaller, error) {
	contract, err := bindERC20Burnable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20BurnableCaller{contract: contract}, nil
}

// NewERC20BurnableTransactor creates a new write-only instance of ERC20Burnable, bound to a specific deployed contract.
func NewERC20BurnableTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC20BurnableTransactor, error) {
	contract, err := bindERC20Burnable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC20BurnableTransactor{contract: contract}, nil
}

// NewERC20BurnableFilterer creates a new log filterer instance of ERC20Burnable, bound to a specific deployed contract.
func NewERC20BurnableFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC20BurnableFilterer, error) {
	contract, err := bindERC20Burnable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC20BurnableFilterer{contract: contract}, nil
}

// bindERC20Burnable binds a generic wrapper to an already deployed contract.
func bindERC20Burnable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC20BurnableMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20Burnable *ERC20BurnableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20Burnable.Contract.ERC20BurnableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20Burnable *ERC20BurnableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20Burnable.Contract.ERC20BurnableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20Burnable *ERC20BurnableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20Burnable.Contract.ERC20BurnableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC20Burnable *ERC20BurnableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC20Burnable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC20Burnable *ERC20BurnableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC20Burnable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC20Burnable *ERC20BurnableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC20Burnable.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20Burnable *ERC20BurnableCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20Burnable.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20Burnable *ERC20BurnableSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20Burnable.Contract.Allowance(&_ERC20Burnable.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ERC20Burnable *ERC20BurnableCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ERC20Burnable.Contract.Allowance(&_ERC20Burnable.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20Burnable *ERC20BurnableCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC20Burnable.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20Burnable *ERC20BurnableSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20Burnable.Contract.BalanceOf(&_ERC20Burnable.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ERC20Burnable *ERC20BurnableCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ERC20Burnable.Contract.BalanceOf(&_ERC20Burnable.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20Burnable *ERC20BurnableCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ERC20Burnable.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20Burnable *ERC20BurnableSession) Decimals() (uint8, error) {
	return _ERC20Burnable.Contract.Decimals(&_ERC20Burnable.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ERC20Burnable *ERC20BurnableCallerSession) Decimals() (uint8, error) {
	return _ERC20Burnable.Contract.Decimals(&_ERC20Burnable.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20Burnable *ERC20BurnableCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20Burnable.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20Burnable *ERC20BurnableSession) Name() (string, error) {
	return _ERC20Burnable.Contract.Name(&_ERC20Burnable.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC20Burnable *ERC20BurnableCallerSession) Name() (string, error) {
	return _ERC20Burnable.Contract.Name(&_ERC20Burnable.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20Burnable *ERC20BurnableCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC20Burnable.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20Burnable *ERC20BurnableSession) Symbol() (string, error) {
	return _ERC20Burnable.Contract.Symbol(&_ERC20Burnable.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC20Burnable *ERC20BurnableCallerSession) Symbol() (string, error) {
	return _ERC20Burnable.Contract.Symbol(&_ERC20Burnable.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20Burnable *ERC20BurnableCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ERC20Burnable.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20Burnable *ERC20BurnableSession) TotalSupply() (*big.Int, error) {
	return _ERC20Burnable.Contract.TotalSupply(&_ERC20Burnable.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ERC20Burnable *ERC20BurnableCallerSession) TotalSupply() (*big.Int, error) {
	return _ERC20Burnable.Contract.TotalSupply(&_ERC20Burnable.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20Burnable *ERC20BurnableTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Burnable.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20Burnable *ERC20BurnableSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Burnable.Contract.Approve(&_ERC20Burnable.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ERC20Burnable *ERC20BurnableTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Burnable.Contract.Approve(&_ERC20Burnable.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_ERC20Burnable *ERC20BurnableTransactor) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Burnable.contract.Transact(opts, "burn", amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_ERC20Burnable *ERC20BurnableSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _ERC20Burnable.Contract.Burn(&_ERC20Burnable.TransactOpts, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_ERC20Burnable *ERC20BurnableTransactorSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _ERC20Burnable.Contract.Burn(&_ERC20Burnable.TransactOpts, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_ERC20Burnable *ERC20BurnableTransactor) BurnFrom(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Burnable.contract.Transact(opts, "burnFrom", account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_ERC20Burnable *ERC20BurnableSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Burnable.Contract.BurnFrom(&_ERC20Burnable.TransactOpts, account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_ERC20Burnable *ERC20BurnableTransactorSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Burnable.Contract.BurnFrom(&_ERC20Burnable.TransactOpts, account, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20Burnable *ERC20BurnableTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Burnable.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20Burnable *ERC20BurnableSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Burnable.Contract.DecreaseAllowance(&_ERC20Burnable.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ERC20Burnable *ERC20BurnableTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Burnable.Contract.DecreaseAllowance(&_ERC20Burnable.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20Burnable *ERC20BurnableTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Burnable.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20Burnable *ERC20BurnableSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Burnable.Contract.IncreaseAllowance(&_ERC20Burnable.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ERC20Burnable *ERC20BurnableTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ERC20Burnable.Contract.IncreaseAllowance(&_ERC20Burnable.TransactOpts, spender, addedValue)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20Burnable *ERC20BurnableTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Burnable.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20Burnable *ERC20BurnableSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Burnable.Contract.Transfer(&_ERC20Burnable.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ERC20Burnable *ERC20BurnableTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Burnable.Contract.Transfer(&_ERC20Burnable.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20Burnable *ERC20BurnableTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Burnable.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20Burnable *ERC20BurnableSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Burnable.Contract.TransferFrom(&_ERC20Burnable.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ERC20Burnable *ERC20BurnableTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ERC20Burnable.Contract.TransferFrom(&_ERC20Burnable.TransactOpts, from, to, amount)
}

// ERC20BurnableApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC20Burnable contract.
type ERC20BurnableApprovalIterator struct {
	Event *ERC20BurnableApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20BurnableApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20BurnableApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20BurnableApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20BurnableApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20BurnableApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20BurnableApproval represents a Approval event raised by the ERC20Burnable contract.
type ERC20BurnableApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20Burnable *ERC20BurnableFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ERC20BurnableApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20Burnable.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ERC20BurnableApprovalIterator{contract: _ERC20Burnable.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20Burnable *ERC20BurnableFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC20BurnableApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ERC20Burnable.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20BurnableApproval)
				if err := _ERC20Burnable.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ERC20Burnable *ERC20BurnableFilterer) ParseApproval(log types.Log) (*ERC20BurnableApproval, error) {
	event := new(ERC20BurnableApproval)
	if err := _ERC20Burnable.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC20BurnableTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC20Burnable contract.
type ERC20BurnableTransferIterator struct {
	Event *ERC20BurnableTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC20BurnableTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC20BurnableTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC20BurnableTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC20BurnableTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC20BurnableTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC20BurnableTransfer represents a Transfer event raised by the ERC20Burnable contract.
type ERC20BurnableTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20Burnable *ERC20BurnableFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ERC20BurnableTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20Burnable.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ERC20BurnableTransferIterator{contract: _ERC20Burnable.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20Burnable *ERC20BurnableFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC20BurnableTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ERC20Burnable.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC20BurnableTransfer)
				if err := _ERC20Burnable.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ERC20Burnable *ERC20BurnableFilterer) ParseTransfer(log types.Log) (*ERC20BurnableTransfer, error) {
	event := new(ERC20BurnableTransfer)
	if err := _ERC20Burnable.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721MetaData contains all meta data concerning the ERC721 contract.
var ERC721MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052346200031257620016b7803803806200001d8162000316565b928339810190604081830312620003125780516001600160401b03908181116200031257836200004f9184016200033c565b916020938482015183811162000312576200006b92016200033c565b825190828211620002fe575f8054926001958685811c95168015620002f3575b88861014620002df578190601f958681116200028c575b508890868311600114620002295784926200021d575b50505f19600383901b1c191690861b1781555b8151938411620002095784548581811c91168015620001fe575b87821014620001ea57838111620001a2575b50859284116001146200013e57839495509262000132575b50505f19600383901b1c191690821b1790555b60405161130a9081620003ad8239f35b015190505f806200010f565b9190601f1984169585845280842093905b8782106200018a5750508385961062000171575b505050811b01905562000122565b01515f1960f88460031b161c191690555f808062000163565b8087859682949686015181550195019301906200014f565b8582528682208480870160051c820192898810620001e0575b0160051c019086905b828110620001d4575050620000f7565b838155018690620001c4565b92508192620001bb565b634e487b7160e01b82526022600452602482fd5b90607f1690620000e5565b634e487b7160e01b81526041600452602490fd5b015190505f80620000b8565b8480528985208994509190601f198416865b8c8282106200027557505084116200025c575b505050811b018155620000cb565b01515f1960f88460031b161c191690555f80806200024e565b8385015186558c979095019493840193016200023b565b9091508380528884208680850160051c8201928b8610620002d5575b918a91869594930160051c01915b828110620002c6575050620000a2565b8681558594508a9101620002b6565b92508192620002a8565b634e487b7160e01b83526022600452602483fd5b94607f16946200008b565b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b6040519190601f01601f191682016001600160401b03811183821017620002fe57604052565b919080601f84011215620003125782516001600160401b038111620002fe5760209062000372601f8201601f1916830162000316565b9281845282828701011162000312575f5b818110620003985750825f9394955001015290565b85810183015184820184015282016200038356fe60806040526004361015610011575f80fd5b5f3560e01c806301ffc9a7146100e457806306fdde03146100df578063081812fc146100da578063095ea7b3146100d557806323b872dd146100d057806342842e0e146100cb5780636352211e146100c657806370a08231146100c157806395d89b41146100bc578063a22cb465146100b7578063b88d4fde146100b2578063c87b56dd146100ad5763e985e9c5146100a8575f80fd5b610944565b610847565b6107bf565b610647565b610588565b6104d5565b6104b7565b610490565b610467565b610342565b6102e7565b6101df565b610117565b7fffffffff0000000000000000000000000000000000000000000000000000000081160361011357565b5f80fd5b34610113576020366003190112610113576020600435610136816100e9565b63ffffffff60e01b166380ac58cd60e01b8114908115610174575b8115610163575b506040519015158152f35b6301ffc9a760e01b1490505f610158565b635b5e139f60e01b81149150610151565b5f5b8381106101965750505f910152565b8181015183820152602001610187565b906020916101bf81518092818552858086019101610185565b601f01601f1916010190565b9060206101dc9281815201906101a6565b90565b34610113575f806003193601126102e457604051908080549060019180831c928082169283156102da575b60209283861085146102c65785885260208801949081156102a5575060011461024e575b61024a8761023e81890382610781565b604051918291826101cb565b0390f35b5f805294509192917f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b838610610294575050509101905061023e8261024a5f8061022e565b805485870152948201948101610278565b60ff191685525050505090151560051b01905061023e8261024a5f8061022e565b634e487b7160e01b82526022600452602482fd5b93607f169361020a565b80fd5b34610113576020366003190112610113576020610305600435610ac6565b6001600160a01b0360405191168152f35b600435906001600160a01b038216820361011357565b602435906001600160a01b038216820361011357565b346101135760403660031901126101135761035b610316565b602435610367816109a2565b916001600160a01b0380841680918316146103e3576103999361039491331490811561039b575b50610a54565b610f9f565b005b6103dd91506103d6906103c033916001600160a01b03165f52600560205260405f2090565b906001600160a01b03165f5260205260405f2090565b5460ff1690565b5f61038e565b60405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608490fd5b6060906003190112610113576001600160a01b0390600435828116810361011357916024359081168103610113579060443590565b346101135761039961047836610432565b9161048b6104868433610c63565b610b5b565b610deb565b34610113576103996104a136610432565b90604051926104af84610744565b5f8452610bcd565b346101135760203660031901126101135760206103056004356109a2565b34610113576020366003190112610113576001600160a01b036104f6610316565b16801561051d575f52600360205261024a60405f2054604051918291829190602083019252565b60405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608490fd5b34610113575f806003193601126102e4576040519080600190815480831c9280821692831561063d575b60209283861085146102c65785885260208801949081156102a557506001146105e55761024a8761023e81890382610781565b60015f5294509192917fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b83861061062c575050509101905061023e8261024a5f8061022e565b805485870152948201948101610610565b93607f16936105b2565b3461011357604036600319011261011357610660610316565b6024358015158103610113576001600160a01b038216918233146106eb57816106a86106b992335f52600560205260405f20906001600160a01b03165f5260205260405f2090565b9060ff801983541691151516179055565b604051901515815233907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190602090a3005b60405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606490fd5b634e487b7160e01b5f52604160045260245ffd5b6020810190811067ffffffffffffffff82111761076057604052565b610730565b6040810190811067ffffffffffffffff82111761076057604052565b90601f8019910116810190811067ffffffffffffffff82111761076057604052565b67ffffffffffffffff811161076057601f01601f191660200190565b34610113576080366003190112610113576107d8610316565b6107e061032c565b6064359167ffffffffffffffff831161011357366023840112156101135782600401359161080d836107a3565b9261081b6040519485610781565b8084523660248287010111610113576020815f9260246103999801838801378501015260443591610bcd565b3461011357602036600319011261011357600435610879815f5260026020526001600160a01b0360405f205416151590565b156108d957610886610a2b565b8051156108c75761023e6108b3916108b96108a361024a95611216565b6040519485936020850190610a3d565b90610a3d565b03601f198101835282610781565b505061024a6108d4610a2b565b61023e565b60405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608490fd5b3461011357604036600319011261011357602060ff610996610964610316565b6001600160a01b0361097461032c565b91165f526005845260405f20906001600160a01b03165f5260205260405f2090565b54166040519015158152f35b5f5260026020526001600160a01b0360405f20541680156109c05790565b60405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608490fd5b60405190610a3882610744565b5f8252565b90610a5060209282815194859201610185565b0190565b15610a5b57565b60405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608490fd5b610ae4815f5260026020526001600160a01b0360405f205416151590565b15610b01575f5260046020526001600160a01b0360405f20541690565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b15610b6257565b60405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608490fd5b90610bf1939291610be16104868433610c63565b610bec838383610deb565b611086565b15610bf857565b60405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608490fd5b610c81825f5260026020526001600160a01b0360405f205416151590565b15610cf657610c8f826109a2565b6001600160a01b03808316908083168214948515610cde575b5050508215610cb657505090565b60ff9250906103c0610cd9926001600160a01b03165f52600560205260405f2090565b541690565b610ceb9192939550610ac6565b1614915f8080610ca8565b60405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608490fd5b15610d5757565b60405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b634e487b7160e01b5f52601160045260245ffd5b5f19810191908211610dca57565b610da8565b9060018201809211610dca57565b6030019081603011610dca57565b90610df5836109a2565b6001600160a01b039182918285169384911603610ed457610e41610eae92821694610e21861515610d50565b610e2a87610f3f565b6001600160a01b03165f52600360205260405f2090565b610e4b8154610dbc565b9055610e68816001600160a01b03165f52600360205260405f2090565b610e728154610dcf565b9055610e86855f52600260205260405f2090565b906001600160a01b031673ffffffffffffffffffffffffffffffffffffffff19825416179055565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5f80a4565b60405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608490fd5b805f52600460205260405f2073ffffffffffffffffffffffffffffffffffffffff1981541690555f6001600160a01b03610f78836109a2565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258280a4565b815f526004602052610fd78160405f20906001600160a01b031673ffffffffffffffffffffffffffffffffffffffff19825416179055565b6001600160a01b0380610fe9846109a2565b169116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9255f80a4565b9081602091031261011357516101dc816100e9565b90926101dc94936080936001600160a01b038092168452166020830152604082015281606082015201906101a6565b3d15611081573d90611068826107a3565b916110766040519384610781565b82523d5f602084013e565b606090565b92909190823b156111a8576110c0926020925f6001600160a01b03604051809781968295630a85bd0160e11b9b8c85523360048601611028565b0393165af15f9181611178575b50611152576110da611057565b8051908161114d5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608490fd5b602001fd5b7fffffffff00000000000000000000000000000000000000000000000000000000161490565b61119a91925060203d81116111a1575b6111928183610781565b810190611013565b905f6110cd565b503d611188565b50505050600190565b5f198114610dca5760010190565b906111c9826107a3565b6111d66040519182610781565b82815280926111e7601f19916107a3565b0190602036910137565b908151811015611202570160200190565b634e487b7160e01b5f52603260045260245ffd5b80156112b6575f818181805b61129e5750611230816111bf565b935b61123c5750505090565b61124590610dbc565b8091600a9161129561128c61126461125e868606610ddd565b60ff1690565b60f81b7fff000000000000000000000000000000000000000000000000000000000000001690565b861a91876111f1565b53049081611232565b91506112ab600a916111b1565b910480849291611222565b506040516112c381610765565b60018152600360fc1b60208201529056fea26469706673582212200f5b60d75fe205feeb0dbdd69392a4391442712fb89d5c22904de0d0d21b2ea264736f6c63430008150033",
}

// ERC721ABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC721MetaData.ABI instead.
var ERC721ABI = ERC721MetaData.ABI

// ERC721Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ERC721MetaData.Bin instead.
var ERC721Bin = ERC721MetaData.Bin

// DeployERC721 deploys a new Ethereum contract, binding an instance of ERC721 to it.
func DeployERC721(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string) (common.Address, *types.Transaction, *ERC721, error) {
	parsed, err := ERC721MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ERC721Bin), backend, name_, symbol_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ERC721{ERC721Caller: ERC721Caller{contract: contract}, ERC721Transactor: ERC721Transactor{contract: contract}, ERC721Filterer: ERC721Filterer{contract: contract}}, nil
}

// ERC721 is an auto generated Go binding around an Ethereum contract.
type ERC721 struct {
	ERC721Caller     // Read-only binding to the contract
	ERC721Transactor // Write-only binding to the contract
	ERC721Filterer   // Log filterer for contract events
}

// ERC721Caller is an auto generated read-only Go binding around an Ethereum contract.
type ERC721Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721Transactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC721Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC721Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC721Session struct {
	Contract     *ERC721           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC721CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC721CallerSession struct {
	Contract *ERC721Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ERC721TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC721TransactorSession struct {
	Contract     *ERC721Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC721Raw is an auto generated low-level Go binding around an Ethereum contract.
type ERC721Raw struct {
	Contract *ERC721 // Generic contract binding to access the raw methods on
}

// ERC721CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC721CallerRaw struct {
	Contract *ERC721Caller // Generic read-only contract binding to access the raw methods on
}

// ERC721TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC721TransactorRaw struct {
	Contract *ERC721Transactor // Generic write-only contract binding to access the raw methods on
}

// NewERC721 creates a new instance of ERC721, bound to a specific deployed contract.
func NewERC721(address common.Address, backend bind.ContractBackend) (*ERC721, error) {
	contract, err := bindERC721(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC721{ERC721Caller: ERC721Caller{contract: contract}, ERC721Transactor: ERC721Transactor{contract: contract}, ERC721Filterer: ERC721Filterer{contract: contract}}, nil
}

// NewERC721Caller creates a new read-only instance of ERC721, bound to a specific deployed contract.
func NewERC721Caller(address common.Address, caller bind.ContractCaller) (*ERC721Caller, error) {
	contract, err := bindERC721(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC721Caller{contract: contract}, nil
}

// NewERC721Transactor creates a new write-only instance of ERC721, bound to a specific deployed contract.
func NewERC721Transactor(address common.Address, transactor bind.ContractTransactor) (*ERC721Transactor, error) {
	contract, err := bindERC721(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC721Transactor{contract: contract}, nil
}

// NewERC721Filterer creates a new log filterer instance of ERC721, bound to a specific deployed contract.
func NewERC721Filterer(address common.Address, filterer bind.ContractFilterer) (*ERC721Filterer, error) {
	contract, err := bindERC721(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC721Filterer{contract: contract}, nil
}

// bindERC721 binds a generic wrapper to an already deployed contract.
func bindERC721(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC721MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC721 *ERC721Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC721.Contract.ERC721Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC721 *ERC721Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721.Contract.ERC721Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC721 *ERC721Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC721.Contract.ERC721Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC721 *ERC721CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC721.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC721 *ERC721TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC721 *ERC721TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC721.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ERC721 *ERC721Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ERC721 *ERC721Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ERC721.Contract.BalanceOf(&_ERC721.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ERC721 *ERC721CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ERC721.Contract.BalanceOf(&_ERC721.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ERC721 *ERC721Caller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ERC721 *ERC721Session) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ERC721.Contract.GetApproved(&_ERC721.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ERC721 *ERC721CallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ERC721.Contract.GetApproved(&_ERC721.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ERC721 *ERC721Caller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ERC721 *ERC721Session) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ERC721.Contract.IsApprovedForAll(&_ERC721.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ERC721 *ERC721CallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ERC721.Contract.IsApprovedForAll(&_ERC721.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC721 *ERC721Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC721 *ERC721Session) Name() (string, error) {
	return _ERC721.Contract.Name(&_ERC721.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC721 *ERC721CallerSession) Name() (string, error) {
	return _ERC721.Contract.Name(&_ERC721.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ERC721 *ERC721Caller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ERC721 *ERC721Session) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ERC721.Contract.OwnerOf(&_ERC721.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ERC721 *ERC721CallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ERC721.Contract.OwnerOf(&_ERC721.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC721 *ERC721Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC721 *ERC721Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC721.Contract.SupportsInterface(&_ERC721.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC721 *ERC721CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC721.Contract.SupportsInterface(&_ERC721.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC721 *ERC721Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC721 *ERC721Session) Symbol() (string, error) {
	return _ERC721.Contract.Symbol(&_ERC721.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC721 *ERC721CallerSession) Symbol() (string, error) {
	return _ERC721.Contract.Symbol(&_ERC721.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ERC721 *ERC721Caller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _ERC721.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ERC721 *ERC721Session) TokenURI(tokenId *big.Int) (string, error) {
	return _ERC721.Contract.TokenURI(&_ERC721.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ERC721 *ERC721CallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ERC721.Contract.TokenURI(&_ERC721.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ERC721 *ERC721Transactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ERC721 *ERC721Session) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.Contract.Approve(&_ERC721.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ERC721 *ERC721TransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.Contract.Approve(&_ERC721.TransactOpts, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721 *ERC721Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721 *ERC721Session) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.Contract.SafeTransferFrom(&_ERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721 *ERC721TransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.Contract.SafeTransferFrom(&_ERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ERC721 *ERC721Transactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ERC721.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ERC721 *ERC721Session) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ERC721.Contract.SafeTransferFrom0(&_ERC721.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ERC721 *ERC721TransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ERC721.Contract.SafeTransferFrom0(&_ERC721.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC721 *ERC721Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC721.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC721 *ERC721Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC721.Contract.SetApprovalForAll(&_ERC721.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC721 *ERC721TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC721.Contract.SetApprovalForAll(&_ERC721.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721 *ERC721Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721 *ERC721Session) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.Contract.TransferFrom(&_ERC721.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721 *ERC721TransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721.Contract.TransferFrom(&_ERC721.TransactOpts, from, to, tokenId)
}

// ERC721ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC721 contract.
type ERC721ApprovalIterator struct {
	Event *ERC721Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721Approval represents a Approval event raised by the ERC721 contract.
type ERC721Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ERC721 *ERC721Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ERC721ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ERC721ApprovalIterator{contract: _ERC721.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ERC721 *ERC721Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC721Approval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721Approval)
				if err := _ERC721.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ERC721 *ERC721Filterer) ParseApproval(log types.Log) (*ERC721Approval, error) {
	event := new(ERC721Approval)
	if err := _ERC721.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the ERC721 contract.
type ERC721ApprovalForAllIterator struct {
	Event *ERC721ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721ApprovalForAll represents a ApprovalForAll event raised by the ERC721 contract.
type ERC721ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ERC721 *ERC721Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ERC721ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ERC721.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ERC721ApprovalForAllIterator{contract: _ERC721.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ERC721 *ERC721Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ERC721ApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ERC721.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721ApprovalForAll)
				if err := _ERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ERC721 *ERC721Filterer) ParseApprovalForAll(log types.Log) (*ERC721ApprovalForAll, error) {
	event := new(ERC721ApprovalForAll)
	if err := _ERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC721 contract.
type ERC721TransferIterator struct {
	Event *ERC721Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721Transfer represents a Transfer event raised by the ERC721 contract.
type ERC721Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ERC721 *ERC721Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ERC721TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ERC721TransferIterator{contract: _ERC721.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ERC721 *ERC721Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC721Transfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721Transfer)
				if err := _ERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ERC721 *ERC721Filterer) ParseTransfer(log types.Log) (*ERC721Transfer, error) {
	event := new(ERC721Transfer)
	if err := _ERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721URIStorageMetaData contains all meta data concerning the ERC721URIStorage contract.
var ERC721URIStorageMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ERC721URIStorageABI is the input ABI used to generate the binding from.
// Deprecated: Use ERC721URIStorageMetaData.ABI instead.
var ERC721URIStorageABI = ERC721URIStorageMetaData.ABI

// ERC721URIStorage is an auto generated Go binding around an Ethereum contract.
type ERC721URIStorage struct {
	ERC721URIStorageCaller     // Read-only binding to the contract
	ERC721URIStorageTransactor // Write-only binding to the contract
	ERC721URIStorageFilterer   // Log filterer for contract events
}

// ERC721URIStorageCaller is an auto generated read-only Go binding around an Ethereum contract.
type ERC721URIStorageCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721URIStorageTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ERC721URIStorageTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721URIStorageFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ERC721URIStorageFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ERC721URIStorageSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ERC721URIStorageSession struct {
	Contract     *ERC721URIStorage // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ERC721URIStorageCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ERC721URIStorageCallerSession struct {
	Contract *ERC721URIStorageCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// ERC721URIStorageTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ERC721URIStorageTransactorSession struct {
	Contract     *ERC721URIStorageTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// ERC721URIStorageRaw is an auto generated low-level Go binding around an Ethereum contract.
type ERC721URIStorageRaw struct {
	Contract *ERC721URIStorage // Generic contract binding to access the raw methods on
}

// ERC721URIStorageCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ERC721URIStorageCallerRaw struct {
	Contract *ERC721URIStorageCaller // Generic read-only contract binding to access the raw methods on
}

// ERC721URIStorageTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ERC721URIStorageTransactorRaw struct {
	Contract *ERC721URIStorageTransactor // Generic write-only contract binding to access the raw methods on
}

// NewERC721URIStorage creates a new instance of ERC721URIStorage, bound to a specific deployed contract.
func NewERC721URIStorage(address common.Address, backend bind.ContractBackend) (*ERC721URIStorage, error) {
	contract, err := bindERC721URIStorage(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ERC721URIStorage{ERC721URIStorageCaller: ERC721URIStorageCaller{contract: contract}, ERC721URIStorageTransactor: ERC721URIStorageTransactor{contract: contract}, ERC721URIStorageFilterer: ERC721URIStorageFilterer{contract: contract}}, nil
}

// NewERC721URIStorageCaller creates a new read-only instance of ERC721URIStorage, bound to a specific deployed contract.
func NewERC721URIStorageCaller(address common.Address, caller bind.ContractCaller) (*ERC721URIStorageCaller, error) {
	contract, err := bindERC721URIStorage(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ERC721URIStorageCaller{contract: contract}, nil
}

// NewERC721URIStorageTransactor creates a new write-only instance of ERC721URIStorage, bound to a specific deployed contract.
func NewERC721URIStorageTransactor(address common.Address, transactor bind.ContractTransactor) (*ERC721URIStorageTransactor, error) {
	contract, err := bindERC721URIStorage(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ERC721URIStorageTransactor{contract: contract}, nil
}

// NewERC721URIStorageFilterer creates a new log filterer instance of ERC721URIStorage, bound to a specific deployed contract.
func NewERC721URIStorageFilterer(address common.Address, filterer bind.ContractFilterer) (*ERC721URIStorageFilterer, error) {
	contract, err := bindERC721URIStorage(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ERC721URIStorageFilterer{contract: contract}, nil
}

// bindERC721URIStorage binds a generic wrapper to an already deployed contract.
func bindERC721URIStorage(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ERC721URIStorageMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC721URIStorage *ERC721URIStorageRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC721URIStorage.Contract.ERC721URIStorageCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC721URIStorage *ERC721URIStorageRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721URIStorage.Contract.ERC721URIStorageTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC721URIStorage *ERC721URIStorageRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC721URIStorage.Contract.ERC721URIStorageTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ERC721URIStorage *ERC721URIStorageCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ERC721URIStorage.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ERC721URIStorage *ERC721URIStorageTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ERC721URIStorage.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ERC721URIStorage *ERC721URIStorageTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ERC721URIStorage.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ERC721URIStorage *ERC721URIStorageCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ERC721URIStorage.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ERC721URIStorage *ERC721URIStorageSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ERC721URIStorage.Contract.BalanceOf(&_ERC721URIStorage.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ERC721URIStorage *ERC721URIStorageCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ERC721URIStorage.Contract.BalanceOf(&_ERC721URIStorage.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ERC721URIStorage *ERC721URIStorageCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ERC721URIStorage.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ERC721URIStorage *ERC721URIStorageSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ERC721URIStorage.Contract.GetApproved(&_ERC721URIStorage.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ERC721URIStorage *ERC721URIStorageCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ERC721URIStorage.Contract.GetApproved(&_ERC721URIStorage.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ERC721URIStorage *ERC721URIStorageCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _ERC721URIStorage.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ERC721URIStorage *ERC721URIStorageSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ERC721URIStorage.Contract.IsApprovedForAll(&_ERC721URIStorage.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ERC721URIStorage *ERC721URIStorageCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ERC721URIStorage.Contract.IsApprovedForAll(&_ERC721URIStorage.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC721URIStorage *ERC721URIStorageCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC721URIStorage.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC721URIStorage *ERC721URIStorageSession) Name() (string, error) {
	return _ERC721URIStorage.Contract.Name(&_ERC721URIStorage.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ERC721URIStorage *ERC721URIStorageCallerSession) Name() (string, error) {
	return _ERC721URIStorage.Contract.Name(&_ERC721URIStorage.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ERC721URIStorage *ERC721URIStorageCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ERC721URIStorage.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ERC721URIStorage *ERC721URIStorageSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ERC721URIStorage.Contract.OwnerOf(&_ERC721URIStorage.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ERC721URIStorage *ERC721URIStorageCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ERC721URIStorage.Contract.OwnerOf(&_ERC721URIStorage.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC721URIStorage *ERC721URIStorageCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ERC721URIStorage.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC721URIStorage *ERC721URIStorageSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC721URIStorage.Contract.SupportsInterface(&_ERC721URIStorage.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ERC721URIStorage *ERC721URIStorageCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ERC721URIStorage.Contract.SupportsInterface(&_ERC721URIStorage.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC721URIStorage *ERC721URIStorageCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ERC721URIStorage.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC721URIStorage *ERC721URIStorageSession) Symbol() (string, error) {
	return _ERC721URIStorage.Contract.Symbol(&_ERC721URIStorage.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ERC721URIStorage *ERC721URIStorageCallerSession) Symbol() (string, error) {
	return _ERC721URIStorage.Contract.Symbol(&_ERC721URIStorage.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ERC721URIStorage *ERC721URIStorageCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _ERC721URIStorage.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ERC721URIStorage *ERC721URIStorageSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ERC721URIStorage.Contract.TokenURI(&_ERC721URIStorage.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ERC721URIStorage *ERC721URIStorageCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ERC721URIStorage.Contract.TokenURI(&_ERC721URIStorage.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ERC721URIStorage *ERC721URIStorageTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721URIStorage.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ERC721URIStorage *ERC721URIStorageSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721URIStorage.Contract.Approve(&_ERC721URIStorage.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ERC721URIStorage *ERC721URIStorageTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721URIStorage.Contract.Approve(&_ERC721URIStorage.TransactOpts, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721URIStorage *ERC721URIStorageTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721URIStorage.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721URIStorage *ERC721URIStorageSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721URIStorage.Contract.SafeTransferFrom(&_ERC721URIStorage.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721URIStorage *ERC721URIStorageTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721URIStorage.Contract.SafeTransferFrom(&_ERC721URIStorage.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ERC721URIStorage *ERC721URIStorageTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ERC721URIStorage.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ERC721URIStorage *ERC721URIStorageSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ERC721URIStorage.Contract.SafeTransferFrom0(&_ERC721URIStorage.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_ERC721URIStorage *ERC721URIStorageTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _ERC721URIStorage.Contract.SafeTransferFrom0(&_ERC721URIStorage.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC721URIStorage *ERC721URIStorageTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC721URIStorage.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC721URIStorage *ERC721URIStorageSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC721URIStorage.Contract.SetApprovalForAll(&_ERC721URIStorage.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ERC721URIStorage *ERC721URIStorageTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ERC721URIStorage.Contract.SetApprovalForAll(&_ERC721URIStorage.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721URIStorage *ERC721URIStorageTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721URIStorage.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721URIStorage *ERC721URIStorageSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721URIStorage.Contract.TransferFrom(&_ERC721URIStorage.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ERC721URIStorage *ERC721URIStorageTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ERC721URIStorage.Contract.TransferFrom(&_ERC721URIStorage.TransactOpts, from, to, tokenId)
}

// ERC721URIStorageApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ERC721URIStorage contract.
type ERC721URIStorageApprovalIterator struct {
	Event *ERC721URIStorageApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721URIStorageApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721URIStorageApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721URIStorageApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721URIStorageApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721URIStorageApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721URIStorageApproval represents a Approval event raised by the ERC721URIStorage contract.
type ERC721URIStorageApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ERC721URIStorage *ERC721URIStorageFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ERC721URIStorageApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721URIStorage.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ERC721URIStorageApprovalIterator{contract: _ERC721URIStorage.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ERC721URIStorage *ERC721URIStorageFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ERC721URIStorageApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721URIStorage.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721URIStorageApproval)
				if err := _ERC721URIStorage.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ERC721URIStorage *ERC721URIStorageFilterer) ParseApproval(log types.Log) (*ERC721URIStorageApproval, error) {
	event := new(ERC721URIStorageApproval)
	if err := _ERC721URIStorage.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721URIStorageApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the ERC721URIStorage contract.
type ERC721URIStorageApprovalForAllIterator struct {
	Event *ERC721URIStorageApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721URIStorageApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721URIStorageApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721URIStorageApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721URIStorageApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721URIStorageApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721URIStorageApprovalForAll represents a ApprovalForAll event raised by the ERC721URIStorage contract.
type ERC721URIStorageApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ERC721URIStorage *ERC721URIStorageFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ERC721URIStorageApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ERC721URIStorage.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ERC721URIStorageApprovalForAllIterator{contract: _ERC721URIStorage.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ERC721URIStorage *ERC721URIStorageFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ERC721URIStorageApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ERC721URIStorage.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721URIStorageApprovalForAll)
				if err := _ERC721URIStorage.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ERC721URIStorage *ERC721URIStorageFilterer) ParseApprovalForAll(log types.Log) (*ERC721URIStorageApprovalForAll, error) {
	event := new(ERC721URIStorageApprovalForAll)
	if err := _ERC721URIStorage.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ERC721URIStorageTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ERC721URIStorage contract.
type ERC721URIStorageTransferIterator struct {
	Event *ERC721URIStorageTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ERC721URIStorageTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ERC721URIStorageTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ERC721URIStorageTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ERC721URIStorageTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ERC721URIStorageTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ERC721URIStorageTransfer represents a Transfer event raised by the ERC721URIStorage contract.
type ERC721URIStorageTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ERC721URIStorage *ERC721URIStorageFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ERC721URIStorageTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721URIStorage.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ERC721URIStorageTransferIterator{contract: _ERC721URIStorage.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ERC721URIStorage *ERC721URIStorageFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ERC721URIStorageTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ERC721URIStorage.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ERC721URIStorageTransfer)
				if err := _ERC721URIStorage.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ERC721URIStorage *ERC721URIStorageFilterer) ParseTransfer(log types.Log) (*ERC721URIStorageTransfer, error) {
	event := new(ERC721URIStorageTransfer)
	if err := _ERC721URIStorage.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthereumLightClientMetaData contains all meta data concerning the EthereumLightClient contract.
var EthereumLightClientMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"genesisTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"genesisValidatorsRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64[]\",\"name\":\"_forkEpochs\",\"type\":\"uint64[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"_forkVersions\",\"type\":\"bytes4[]\"},{\"internalType\":\"uint64\",\"name\":\"_finalizedSlot\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"syncCommitteeRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"syncCommitteePoseidonRoot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_zkVerifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionStateRoot\",\"type\":\"bytes32\"}],\"name\":\"FinalityUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"forkVersion\",\"type\":\"bytes4\"}],\"name\":\"ForkVersionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"executionStateRoot\",\"type\":\"bytes32\"}],\"name\":\"OptimisticUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"sszRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"poseidonRoot\",\"type\":\"bytes32\"}],\"name\":\"SyncCommitteeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bestValidUpdate\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"proposerIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"parentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bodyRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBeaconBlockHeader\",\"name\":\"beacon\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"stateRoot\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"blockHash\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"blockNumber\",\"type\":\"tuple\"}],\"internalType\":\"structExecutionPayload\",\"name\":\"execution\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"executionRoot\",\"type\":\"tuple\"}],\"internalType\":\"structHeaderWithExecution\",\"name\":\"attestedHeader\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"proposerIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"parentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bodyRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBeaconBlockHeader\",\"name\":\"beacon\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"stateRoot\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"blockHash\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"blockNumber\",\"type\":\"tuple\"}],\"internalType\":\"structExecutionPayload\",\"name\":\"execution\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"executionRoot\",\"type\":\"tuple\"}],\"internalType\":\"structHeaderWithExecution\",\"name\":\"finalizedHeader\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"nextSyncCommitteeRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextSyncCommitteePoseidonRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"structIBeaconVerifier.Proof\",\"name\":\"nextSyncCommitteeRootMappingProof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"participation\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"poseidonRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"structIBeaconVerifier.Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"internalType\":\"structSyncAggregate\",\"name\":\"syncAggregate\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"signatureSlot\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"forkVersion\",\"type\":\"bytes4\"}],\"name\":\"computeDomain\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"proposerIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"parentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bodyRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBeaconBlockHeader\",\"name\":\"header\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"}],\"name\":\"computeSigningRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSyncCommitteePoseidonRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSyncCommitteeRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizedExecutionStateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizedExecutionStateRootAndSlot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizedSlot\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"forkEpochs\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"forkVersions\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestFinalizedSlotAndCommitteeRoots\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"currentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextSyncCommitteePoseidonRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextSyncCommitteeRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optimisticExecutionStateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optimisticExecutionStateRootAndSlot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optimisticSlot\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processLightClientForceUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"proposerIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"parentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bodyRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBeaconBlockHeader\",\"name\":\"beacon\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"stateRoot\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"blockHash\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"blockNumber\",\"type\":\"tuple\"}],\"internalType\":\"structExecutionPayload\",\"name\":\"execution\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"executionRoot\",\"type\":\"tuple\"}],\"internalType\":\"structHeaderWithExecution\",\"name\":\"attestedHeader\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"proposerIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"parentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bodyRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBeaconBlockHeader\",\"name\":\"beacon\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"stateRoot\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"blockHash\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"blockNumber\",\"type\":\"tuple\"}],\"internalType\":\"structExecutionPayload\",\"name\":\"execution\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"executionRoot\",\"type\":\"tuple\"}],\"internalType\":\"structHeaderWithExecution\",\"name\":\"finalizedHeader\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"finalityBranch\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"nextSyncCommitteeRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"nextSyncCommitteeBranch\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32\",\"name\":\"nextSyncCommitteePoseidonRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"structIBeaconVerifier.Proof\",\"name\":\"nextSyncCommitteeRootMappingProof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"participation\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"poseidonRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"structIBeaconVerifier.Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"internalType\":\"structSyncAggregate\",\"name\":\"syncAggregate\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"signatureSlot\",\"type\":\"uint64\"}],\"internalType\":\"structLightClientUpdate\",\"name\":\"update\",\"type\":\"tuple\"}],\"name\":\"processLightClientUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"epoch\",\"type\":\"uint64\"},{\"internalType\":\"bytes4\",\"name\":\"forkVersion\",\"type\":\"bytes4\"}],\"name\":\"updateForkVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"signatureSlot\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"proposerIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"parentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bodyRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBeaconBlockHeader\",\"name\":\"header\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"participation\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"poseidonRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"structIBeaconVerifier.Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"internalType\":\"structSyncAggregate\",\"name\":\"syncAggregate\",\"type\":\"tuple\"}],\"name\":\"verifyCommitteeSignature\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zkVerifier\",\"outputs\":[{\"internalType\":\"contractIBeaconVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c060405234620004b55762004c43803803806200001d81620004f6565b92833981019061010081830312620004b55780519160208083015192604081015160018060401b0390818111620004b55782019284601f85011215620004b557835192620000756200006f856200051c565b620004f6565b9482868681520183819660051b83010191888311620004b55784809101915b838310620004db57505050506060810151838111620004b557810186601f82011215620004b557805196620000cd6200006f896200051c565b9184838a8152019085829a60051b820101928311620004b5578501905b828210620004b957505050620001036080830162000534565b9260a08301519560c08401519760e0809501519a60018060a01b039c8d8d16809d03620004b55760805260a0525198868a11620004a1576801000000000000000091828b11620004a157603c548b603c558b81811062000445575b505099935f809b603c825285822060029780891c92845b848110620003ea57506003198216909103908162000393575b505050505051918783116200037f5782116200036b57603d5482603d5580831062000310575b5091603d8a52808a20928260031c948b5b868110620002c357506007198416909303928362000262575b505050505050501660018060401b031984541617835560045560055560018060a01b03199182603e541617603e55603f54913390831617603f557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0604051933393169180a36146e1908162000562823960805181614345015260a051816144090152f35b958b93929193968c915b848310620002895750505050505001555f808080808080620001de565b90919293949784620002b56001928b51851c9087871b60031b9163ffffffff809116831b921b19161790565b99019594930191906200026c565b8c8d5b8560088210620002df57505086820155600101620001c5565b62000306869360019397518d1c9088881b60031b9163ffffffff809116831b921b19161790565b92019401620002c6565b6200034190603d8c52848c20600780860160031c820192601c878a1b168062000348575b500160031c019062000549565b5f620001b4565b62000364905f198601908154905f199060200360031b1c169055565b5f62000334565b634e487b7160e01b8a52604160045260248afd5b634e487b7160e01b8b52604160045260248bfd5b9084898e5b838310620003b257505050505001558a5f8080806200018e565b8497620003dd9160019495965116908560031b60031b9160018060401b03809116831b921b19161790565b9601929101898e62000398565b90919293948d8a82915b600483106200041357505050848201558f949392919060010162000175565b85519190950194166001600160401b03908116600683901b90811b91901b1990921691909117906001018a8f620003f4565b6200047691603c5f526003875f2091601882850160021c840194831b16806200047e575b500160021c019062000549565b5f8b6200015e565b6200049a905f198601908154905f199060200360031b1c169055565b5f62000469565b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b81516001600160e01b031981168103620004b5578152908501908501620000ea565b8190620004e88462000534565b815201910190849062000094565b6040519190601f01601f191682016001600160401b03811183821017620004a157604052565b6001600160401b038111620004a15760051b60200190565b51906001600160401b0382168203620004b557565b81811062000555575050565b5f81556001016200054956fe60806040526004361015610011575f80fd5b5f3560e01c8063031523dd14611479578063124207661461144a57806339536c8f1461142d5780633cf5ea9e146114075780633dd3f4aa1461121d57806343a6c5a6146111ed57806365e700de146111d057806367b49cc7146111b3578063715018a614611149578063751f7f15146110d65780638da5cb5b146110b0578063a1a9ad5514610be0578063a4059e0714610bc3578063aae3913b14610b8b578063ab556e9f14610a40578063ba67ee4814610352578063baa94ea21461030c578063bcbaf770146102cb578063c5190436146102ae578063d180236914610289578063d6df096d14610263578063e153d7991461022d578063e1861b08146102105763f2fde38b14610121575f80fd5b3461020c57602036600319011261020c576004356001600160a01b0380821680920361020c57603f5490811690610159338314612f0b565b82156101a15773ffffffffffffffffffffffffffffffffffffffff19168217603f557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b5f80fd5b3461020c575f36600319011261020c576020600754604051908152f35b3461020c575f36600319011261020c5760606001600160401b035f54166004546006549060405192835260208301526040820152f35b3461020c575f36600319011261020c5760206001600160a01b03603e5416604051908152f35b3461020c575f36600319011261020c5760206001600160401b035f5416604051908152f35b3461020c575f36600319011261020c576020600154604051908152f35b3461020c57602036600319011261020c57600435603c5481101561020c576001600160401b036102fc602092612ecc565b9190546040519260031b1c168152f35b3461020c57602036600319011261020c57600435603d5481101561020c57610335602091612e79565b905460405160039290921b1c60e01b6001600160e01b0319168152f35b3461020c575f36600319011261020c5760405161036e8161291a565b60405161037a816128e4565b6001600160401b03600854818116835260401c1660208201526009546040820152600a549060609182820152600b54608082015282526040516103bc8161291a565b6040516103c8816128ff565b600c548152604051806020600d54918281520190600d5f527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5905f5b818110610a2a575050508161041a910382612950565b6020820152815260405161042d816128ff565b600e548152604051806020600f54918281520190600f5f527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802905f5b818110610a14575050508161047f910382612950565b60208201526020820152604051610495816128ff565b601054815260405180602060115491828152019060115f527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68905f5b8181106109fe57505050816104e7910382612950565b602082015260408201526020830152604051610502816128ff565b601254815260405180602060135491828152019060135f527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090905f5b8181106109e85750505081610554910382612950565b6020820152604083015260405161056a8161291a565b604051610576816128e4565b6001600160401b03601454818116835260401c166020820152601554604082015260165483820152601754608082015281526040516105b48161291a565b6040516105c0816128ff565b601854815260405180602060195491828152019060195f527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695905f5b8181106109d25750505081610612910382612950565b60208201528152604051610625816128ff565b601a548152604051806020601b54918281520190601b5f527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1905f5b8181106109bc5750505081610677910382612950565b6020820152602082015260405161068d816128ff565b601c548152604051806020601d54918281520190601d5f527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f905f5b8181106109a657505050816106df910382612950565b6020820152604082015260208201526040516106fa816128ff565b601e548152604051806020601f54918281520190601f5f527fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d807905f5b818110610990575050508161074c910382612950565b6020820152604082015260215491602354906040519061076b82612935565b60405160245f825b6002821061097957505050610787816128ff565b825260405193610796856128ff565b84936026975f955b600290818810156107c6579060206001926107b88d612cc3565b8152019a019601959861079e565b50508787959295602084015260405180602a905f905b60028210610962575050506107f0816128ff565b604084015260405180602c905f905b6002821061094b57505050610813816128ff565b858401526040519361082485612935565b6001600160401b03602e54168552602f546020860152603054604086015260405161084e81612935565b610856612c28565b815260405195610865876128ff565b86956033995f975b600290818a1015610895579060206001926108878f612cc3565b8152019c019801979a61086d565b50506108f197509161091160409261094195948c8c60208801526108b7612c5d565b868801526108c3612c90565b818801528085019687526108ff6001600160401b03603b54169987519d8e9d8e610380908181520190612d3d565b8d810360208f015290612d3d565b99868c01528a01526080890190612e0d565b6001600160401b038151166101c088015260208101516101e0880152015161020086015251610220850190612e0d565b6103608301520390f35b8254815260019283019291909101906020016107ff565b8254815260019283019291909101906020016107dc565b825481526001928301929190910190602001610773565b8254845260209093019260019283019201610736565b82548452602090930192600192830192016106c9565b8254845260209093019260019283019201610661565b82548452602090930192600192830192016105fc565b825484526020909301926001928301920161053e565b82548452602090930192600192830192016104d1565b8254845260209093019260019283019201610469565b8254845260209093019260019283019201610404565b3461020c57604036600319011261020c57610a59612971565b602435906001600160e01b031982169081830361020c57610a866001600160a01b03603f54163314612f0b565b8115610b4657603c5491600160401b9283811015610b3257806001610aae9201603c55612ecc565b926001600160401b038091169382549060031b9185831b921b1916179055603d5492831015610b32577f3d992c45d9456d8ebe181b6a66a3721421393afaa297791373e7569c1abcc8af93610b0b84600160409601603d55612e79565b63ffffffff829392549160031b9260e01c831b921b191617905582519182526020820152a1005b634e487b7160e01b5f52604160045260245ffd5b60405162461bcd60e51b815260206004820152601060248201527f62616420666f726b2076657273696f6e000000000000000000000000000000006044820152606490fd5b3461020c57602036600319011261020c576004356001600160e01b03198116810361020c57610bbb6020916143ee565b604051908152f35b3461020c575f36600319011261020c576020600454604051908152f35b3461020c575f36600319011261020c57610c066001600160a01b03603f54163314612f0b565b610c0e614343565b6001600160401b0390815f5416906201518082019081831161109c57831611156110575781600854169081156110125782601454161115610c64575b610c5a610c55612f56565b613fad565b610c62613660565b005b610c84906001600160401b03166001600160401b03196014541617601455565b610cb88160085460401c1667ffffffffffffffff60401b6014549160401b169067ffffffffffffffff60401b191617601455565b600954601555600a54601655600b54601755600c54601855600d54818111610b3257600160401b90818111610b325760195481601955808210610fd2575b507fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb58054905f915b838310610f9c5750505050600e54601a55600f54828111610b3257818111610b3257601b5481601b55808210610f5c575b507f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8028054905f915b838310610f265750505050601054601c55601154828111610b3257818111610b3257601d5481601d55808210610ee6575b507f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c688054905f915b838310610eb05750505050601254601e55601354918211610b32578111610b3257601f5481601f55808210610e70575b507f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a09090601f5f5281545f905b828210610e3a575050610c4a565b60018091940191825494817fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d8070155019092610e2c565b817fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d80791820191015b818110610ea55750610e00565b5f8155600101610e98565b60018091920192835492817f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f0155019190610dd0565b817f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f91820191015b818110610f1b5750610da8565b5f8155600101610f0e565b60018091920192835492817f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc10155019190610d77565b817f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc191820191015b818110610f915750610d4f565b5f8155600101610f84565b60018091920192835492817f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c96950155019190610d1e565b817f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c969591820191015b8181106110075750610cf6565b5f8155600101610ffa565b60405162461bcd60e51b815260206004820152601460248201527f6e6f20626573742076616c6964207570646174650000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527f74696d656f7574206e6f742070617373656400000000000000000000000000006044820152606490fd5b634e487b7160e01b5f52601160045260245ffd5b3461020c575f36600319011261020c5760206001600160a01b03603f5416604051908152f35b3461020c57366003190160c0811261020c5760a01361020c576040516110fb816128e4565b6001600160401b03600435818116810361020c578252602435908116810361020c5781610bbb9160208094015260443560408201526064356060820152608435608082015260a43590614483565b3461020c575f36600319011261020c575f603f5473ffffffffffffffffffffffffffffffffffffffff196001600160a01b03821691611189338414612f0b565b16603f557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461020c575f36600319011261020c576020600654604051908152f35b3461020c575f36600319011261020c576020600554604051908152f35b3461020c575f36600319011261020c57600354600254604080519283526001600160401b03909116602083015290f35b3461020c5761026036600319011261020c57611237612971565b60a036602319011261020c5760405161124f816128e4565b6001600160401b0390602435828116810361020c57815260443592828416840361020c57602093848301526064356040830152608435606083015260a43560808301526101a060c31936011261020c57604051926112ac84612935565b60c435908116810361020c57835260e435848401526101043560408401526101403661012319011261020c576040516112e481612935565b36610143121561020c576040516112fa816128ff565b806101649136831161020c5787610124915b8483106113f857505050825236610183121561020c5760405161132e816128ff565b806101e49236841161020c57905b888483106113e05791505083015236610203121561020c57604051611360816128ff565b806102249236841161020c578890915b8483106113d157505050604083015236610243121561020c5760405190611396826128ff565b816102649136831161020c57905b8282106113c257505050610c62955060608201526060840152613b22565b813581529088019088016113a4565b82358152918101918101611370565b6040916113ed3685612b49565b81520191019061133c565b8235815291810191810161130c565b3461020c575f36600319011261020c5760206001600160401b0360025416604051908152f35b3461020c575f36600319011261020c576020600354604051908152f35b3461020c575f36600319011261020c576001545f54604080519283526001600160401b03909116602083015290f35b3461020c5760031960203682011261020c57600435906001600160401b03821161020c576103c08236039182011261020c576114b560806128c8565b81600401356001600160401b03811161020c576114d89060043691850101612a46565b60805260248201356001600160401b03811161020c576114fe9060043691850101612a46565b60a05260448201356001600160401b03811161020c57611524906004369185010161299b565b60c052606482013560e0526084820135906001600160401b03821161020c576115566101a0926004369186010161299b565b6101005260a4830135610120526115703660c48501612b8e565b6101405261020319011261020c576001600160401b036115ec916115e16103a46040519261159d84612935565b6115aa6102048201612987565b8452610224810135602085015261024481013560408501526115d0366102648301612b8e565b606085015261016084905201612987565b610180525116614323565b6115fe6115f7612f56565b6080614187565b8080156128c1575b1561287c5760016001600160401b0360e06080015151161115612837576001600160401b03611633614343565b8160805151511691829116119081612820575b50156127db575f546080515151600654918215919082806127ce575b806127ad575b6001600160401b0382166001600160401b038416119081156127a5575b50156127605760c051516125cc5760a0515160600151612587575b61010051516122f9575050505060606080015115806122ee575b156122a9575b611702608051604051906116d3826128ff565b600a82527f6f7074696d6973746963000000000000000000000000000000000000000000006020830152613db1565b610180516080515161016051611723929091906001600160401b0316613b22565b61186b575b808061184a575b6117d0575b8061174a575b61174057005b610c5a6080613fad565b5060206080015151516001600160401b035f54166001600160401b03821611908115611777575b5061173a565b610100515115159150816117c3575b816117a3575b5080611799575b81611771565b5060065415611793565b90506607ffffffffffff806080515151600d1c1691600d1c16148161178c565b60c0515115159150611786565b7f27eafee2f5b2c935fa7666d231360699c41fe21db57034136b1af3c43f13df896080516001600160401b03602082015151519182600355515116806001600160401b0319600254161760025561184260405192839283602090939291936001600160401b0360408201951681520152565b0390a1611734565b506001600160401b036080515151166001600160401b03600254161061172f565b608051608081516001600160401b038151166008549067ffffffffffffffff60401b602084015160401b16916fffffffffffffffffffffffffffffffff1916171760085560408101516009556060810151600a550151600b556020810151602081518051600c5501518051906001600160401b038211610b3257600160401b8211610b3257600d5482600d55808310612268575b50602001600d5f525f5b828110612234575050506020808201518051600e5501518051906001600160401b038211610b3257600160401b8211610b3257600f5482600f558083106121f3575b50602001600f5f525f5b8281106121bf57505050604001518051601055602001518051906001600160401b038211610b3257600160401b8211610b32576011548260115580831061217e575b5060200160115f525f5b82811061214a57505050604001518051601255602001518051906001600160401b038211610b3257600160401b8211610b325760135482601355808310612109575b5060200160135f525f5b8281106120d55750505060206080015160808151611a2b6001600160401b038251166001600160401b03166001600160401b03196014541617601455565b611a656001600160401b0360208301511667ffffffffffffffff60401b6014549160401b169067ffffffffffffffff60401b191617601455565b604081015160155560608101516016550151601755602081015160208151805160185501518051906001600160401b038211610b3257600160401b8211610b325760195482601955808310612094575b5060200160195f525f5b828110612060575050506020808201518051601a5501518051906001600160401b038211610b3257600160401b8211610b3257601b5482601b5580831061201f575b50602001601b5f525f5b828110611feb57505050604001518051601c55602001518051906001600160401b038211610b3257600160401b8211610b3257601d5482601d55808310611faa575b50602001601d5f525f5b828110611f7657505050604001518051601e55602001518051906001600160401b038211610b3257600160401b8211610b3257601f5482601f55808310611f35575b50602001601f5f525f5b828110611f0157505060c051805191506001600160401b038211610b3257600160401b8211610b325760205482602055808310611ec0575b5060200160205f525f5b828110611e8c57505060e05160215550610100518051906001600160401b038211610b3257600160401b8211610b325760225482602255808310611e4b575b5060200160225f525f5b828110611e1757505061012051602355506101405180515f5b60028110611e025750506020810151906026915f905b6002821015611c9b5780515f5b60028110611c875750506002602060019201940191019092611c5d565b600190602083519301928188015501611c6a565b5050905060408101515f5b60028110611ded575050606001515f5b60028110611dd8575050606060e0608001516001600160401b038151166001600160401b0319602e541617602e556020810151602f556040810151603055015180515f5b60028110611dc35750506020810151906033915f905b6002821015611d4e5780515f5b60028110611d3a5750506002602060019201940191019092611d10565b600190602083519301928188015501611d1d565b5050905060408101515f5b60028110611dae575050606001515f5b60028110611d995750506001600160401b0361010060800151166001600160401b0319603b541617603b55611728565b60019060208351930192816039015501611d69565b60019060208351930192816037015501611d59565b60019060208351930192816031015501611cfa565b6001906020835193019281602c015501611cb6565b6001906020835193019281602a015501611ca6565b60019060208351930192816024015501611c47565b60019060208351930192817f61035b26e3e9eee00e0d72fd1ee8ddca6894550dca6916ea2ac6baa90d11e510015501611c2e565b7f61035b26e3e9eee00e0d72fd1ee8ddca6894550dca6916ea2ac6baa90d11e510908382015b8183018110611e81575050611c24565b5f8155600101611e71565b60019060208351930192817fc97bfaf2f8ee708c303a06d134f5ecd8389ae0432af62dc132a24118292866bb015501611be5565b7fc97bfaf2f8ee708c303a06d134f5ecd8389ae0432af62dc132a24118292866bb908382015b8183018110611ef6575050611bdb565b5f8155600101611ee6565b60019060208351930192817fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d807015501611ba3565b7fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d807908382015b8183018110611f6b575050611b99565b5f8155600101611f5b565b60019060208351930192817f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f015501611b57565b7f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f908382015b8183018110611fe0575050611b4d565b5f8155600101611fd0565b60019060208351930192817f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1015501611b0b565b7f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1908382015b8183018110612055575050611b01565b5f8155600101612045565b60019060208351930192817f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695015501611abf565b7f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695908382015b81830181106120ca575050611ab5565b5f81556001016120ba565b60019060208351930192817f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0900155016119ed565b7f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090908382015b818301811061213f5750506119e3565b5f815560010161212f565b60019060208351930192817f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680155016119a1565b7f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68908382015b81830181106121b4575050611997565b5f81556001016121a4565b60019060208351930192817f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802015501611955565b7f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802908382015b818301811061222957505061194b565b5f8155600101612219565b60019060208351930192817fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5015501611909565b7fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5908382015b818301811061229e5750506118ff565b5f815560010161228e565b60405162461bcd60e51b815260206004820152601c60248201527f6e6f206e6578742073796e6320636f6d6d69747465652070726f6f66000000006044820152606490fd5b5061012051156116ba565b6607ffffffffffff8091600d1c1691600d1c1614908161257e575b5061252b575b5060e051610100516080515160600151935f9391929091905b83518510156123df5760ff851161109c576001851b156123cb575f6020916001806037891c161482146123b35761237761238a9161237189896144bb565b51614466565b8360405192828480945193849201613d4a565b8101039060025afa156123a8576123a25f51946144ad565b93612333565b6040513d5f823e3d90fd5b61237761238a916123c489896144bb565b5190614466565b634e487b7160e01b5f52601260045260245ffd5b9250925092036124e6576001600160a01b03603e5416602060606080015161018460a0608001519160c060800151946124376040519687958694637a53878160e01b8652600486015260248501526044840190612e0d565b5afa9081156123a8575f916124b7575b506116c05760405162461bcd60e51b815260206004820152602a60248201527f626164206e6578742073796e6320636f6d6d697474656520726f6f74206d617060448201527f70696e672070726f6f66000000000000000000000000000000000000000000006064820152608490fd5b6124d9915060203d6020116124df575b6124d18183612950565b810190613aa6565b83612447565b503d6124c7565b60405162461bcd60e51b815260206004820152601d60248201527f626164206e6578742073796e6320636f6d6d69747465652070726f6f660000006044820152606490fd5b60e05103612539578261231a565b60405162461bcd60e51b815260206004820152601760248201527f626164206e6578742073796e6320636f6d6d69747465650000000000000000006044820152606490fd5b90501584612314565b60405162461bcd60e51b815260206004820152600c60248201527f6e6f2066696e2070726f6f6600000000000000000000000000000000000000006044820152606490fd5b60a0515180516001600160401b0316612632575060a0515160600151156116a05760405162461bcd60e51b815260206004820152601e60248201527f67656e65736973206865616465722073686f756c6420626520656d70747900006044820152606490fd5b6126439096939695929491956144cf565b9560406080015194606060805151015197965f975b87518910156126c55760ff891161109c576001891b156123cb575f60209160018060698d1c161482146126b457612377612696916123718d8d6144bb565b8101039060025afa156123a8576126ae5f51986144ad565b97612658565b612377612696916123c48d8d6144bb565b929598919497509295500361271b5760a051604051612716916126e7826128ff565b600982527f66696e616c697a656400000000000000000000000000000000000000000000006020830152613db1565b6116a0565b60405162461bcd60e51b815260206004820152600d60248201527f6261642066696e2070726f6f66000000000000000000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f6261642061747420736c6f74206f7220636f6d6d6974746565000000000000006044820152606490fd5b905087611685565b506607ffffffffffff81600d1c166607ffffffffffff83600d1c1614611668565b5061010051511515611662565b60405162461bcd60e51b815260206004820152600860248201527f62616420736c6f740000000000000000000000000000000000000000000000006044820152606490fd5b60a05151516001600160401b031610905083611646565b60405162461bcd60e51b815260206004820152601860248201527f6e6f7420656e6f7567682070617274696369706174696f6e00000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527f71756f72756d206e6f74207265616368656400000000000000000000000000006044820152606490fd5b5081611606565b61012081019081106001600160401b03821117610b3257604052565b60a081019081106001600160401b03821117610b3257604052565b604081019081106001600160401b03821117610b3257604052565b606081019081106001600160401b03821117610b3257604052565b608081019081106001600160401b03821117610b3257604052565b90601f801991011681019081106001600160401b03821117610b3257604052565b600435906001600160401b038216820361020c57565b35906001600160401b038216820361020c57565b81601f8201121561020c578035916020916001600160401b038411610b32578360051b90604051946129cf85840187612950565b8552838086019282010192831161020c578301905b8282106129f2575050505090565b813581529083019083016129e4565b919060408382031261020c5760405190612a1a826128ff565b8193803583526020810135916001600160401b03831161020c57602092612a41920161299b565b910152565b91908281039260e0841261020c57604090815192612a638461291a565b60a084961261020c578251612a77816128e4565b612a8083612987565b8152612a8e60208401612987565b602082015283830135848201526060830135606082015260808301356080820152845260a08201356001600160401b039081811161020c57830160608184031261020c57845190612ade8261291a565b803583811161020c5784612af3918301612a01565b8252602081013583811161020c5784612b0d918301612a01565b6020830152858101359083821161020c57612b2a91859101612a01565b85820152602086015260c083013590811161020c57612a419201612a01565b9080601f8301121561020c5760405191612b62836128ff565b82906040810192831161020c57905b828210612b7e5750505090565b8135815260209182019101612b71565b9190916101408184031261020c57604092835191612bab83612935565b8294612bb78383612b49565b845282605f8301121561020c578051612bcf816128ff565b8060c084019185831161020c57838501905b838210612c0f575050928492612c0560609661010094612a419760208b0152612b49565b9087015201612b49565b60208591612c1d8985612b49565b815201910190612be1565b6040519060315f835b60028210612c4757505050612c45826128ff565b565b6001602081928554815201930191019091612c31565b6040519060375f835b60028210612c7a57505050612c45826128ff565b6001602081928554815201930191019091612c66565b6040519060395f835b60028210612cad57505050612c45826128ff565b6001602081928554815201930191019091612c99565b60405191905f835b60028210612cdf57505050612c45826128ff565b6001602081928554815201930191019091612ccb565b6060906040830190805184526020928380920151946040838201528551809452019301915f5b828110612d29575050505090565b835185529381019392810192600101612d1b565b612de391608082516001600160401b0380825116845260208201511660208401526040810151604084015260608101516060840152015160808201526040612dd2602084015160e060a0850152612da18151606060e0870152610140860190612cf5565b83612dbf60208401519260df199384898303016101008a0152612cf5565b9201519085830301610120860152612cf5565b9201519060c0818403910152612cf5565b90565b5f915b60028310612df657505050565b600190825181526020809101920192019190612de9565b9190612e1a818451612de6565b60208381015193906040905f908483015b60028310612e5d57505050612c4593945081612e5360609261010094015160c0860190612de6565b0151910190612de6565b818482612e6d6001948c51612de6565b01980192019196612e2b565b90603d54821015612eb857603d5f52601c8260031c7fece66cfdbd22e3f37d348a3d8e19074452862cd65fd4b9a11f0336d1ac6d1dc3019260021b1690565b634e487b7160e01b5f52603260045260245ffd5b90603c54821015612eb857603c5f5260188260021c7fc6bb06cb7f92603de181bf256cd16846b93b752a170ff24824098b31aa008a7e019260031b1690565b15612f1257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60408051612f63816128c8565b8092825192612f718461291a565b805192612f7d846128e4565b600854916001600160401b03808416865280602094831c168487015260095482870152600a549560609687820152600b5460808201528752815196612fc18861291a565b825197612fcd896128ff565b600c5489528351988987600d549b8c8152015f9b600d8d527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5908d5b818110613636575050508161301f910382612950565b8782015281528351613030816128ff565b600e54815284518088600f54918281520190600f8d527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802908d5b8181106136225750505081613080910382612950565b87820152868201528351613093816128ff565b60105481528451808860115491828152019060118d527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68908d5b81811061360e57505050816130e3910382612950565b87820152848201528582015282516130fa816128ff565b60125481528351808760135491828152019060138c527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090908c5b8181106135fa575050508161314a910382612950565b86820152838201528352815161315f8161291a565b825161316a816128e4565b826014548181168352851c1686820152601554848201526016548882015260175460808201528152825161319d8161291a565b83516131a8816128ff565b60185481528451808860195491828152019060198d527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695908d5b8181106135e657505050816131f8910382612950565b8782015281528351613209816128ff565b601a54815284518088601b54918281520190601b8d527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1908d5b8181106135d25750505081613259910382612950565b8782015286820152835161326c816128ff565b601c54815284518088601d54918281520190601d8d527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f908d5b8181106135be57505050816132bc910382612950565b87820152848201528582015282516132d3816128ff565b601e54815283518087601f54918281520190601f8c527fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d807908c5b8181106135aa5750505081613323910382612950565b81870152818401528385015281518454808252858952818601907fc97bfaf2f8ee708c303a06d134f5ecd8389ae0432af62dc132a24118292866bb908a5b8181106135965750505081613377910382612950565b82840152602154868401528151808560225491828152019060228a527f61035b26e3e9eee00e0d72fd1ee8ddca6894550dca6916ea2ac6baa90d11e510908a5b81811061358257505050816133cd910382612950565b608084015260235460a08401528151966133e688612935565b8251602482825b6002821061356c57505050613401816128ff565b885282519661340f886128ff565b879660269583985b600290818b101561343e5790896001926134308b612cc3565b815201980199019896613417565b50509398919750939891945085820152875180602a9086905b600282106135565750505061346b816128ff565b818901528751602c85825b600282106135405750505061348a816128ff565b8682015260c082015286519561349f87612935565b80602e54168752602f5485880152603054888801528751966134c088612935565b6134c8612c28565b88528851976134d6896128ff565b8897603396985b600290818b10156135045790896001926134f68b612cc3565b8152019801990198966134dd565b5050939891955093989195610100975084015261351f612c5d565b9083015261352b612c90565b8183015282015260e0840152603b5416910152565b8254815260019283019291909101908801613476565b8254815260019283019291909101908801613457565b82548152600192830192919091019088016133ed565b8254845292880192600192830192016133b7565b825484529288019260019283019201613361565b82548452928a01926001928301920161330d565b82548452928b0192600192830192016132a6565b82548452928b019260019283019201613243565b82548452928b0192600192830192016131e2565b82548452928a019260019283019201613134565b82548452928b0192600192830192016130cd565b82548452928b01926001928301920161306a565b82548452928b019260019283019201613009565b818110613655575050565b5f815560010161364a565b5f806008558060095580600a5580600b5580600c55600d5481600d5580613a64575b5080600e55600f5481600f5580613a22575b508060105560115481601155806139e0575b5080601255601354816013558061399e575b508060145580601555806016558060175580601855601954816019558061395c575b5080601a55601b5481601b558061391a575b5080601c55601d5481601d55806138d8575b5080601e55601f5481601f5580613896575b506020548160205580613854575b50806021556022548160225580613812575b508060235560245b60268110613807575060265b602a81106137f25750602a5b602c81106137e75750602c5b602e81106137dc575080602e5580602f558060305560315b603381106137d1575060335b603781106137bc575060375b603981106137b1575060395b603b81106137a65750603b55565b818155600101613798565b81815560010161378c565b806137cb60028093018261364a565b01613780565b818155600101613774565b81815560010161375c565b818155600101613750565b8061380160028093018261364a565b01613744565b818155600101613738565b602282527f61035b26e3e9eee00e0d72fd1ee8ddca6894550dca6916ea2ac6baa90d11e510908101905b8181106138495750613730565b82815560010161383c565b602082527fc97bfaf2f8ee708c303a06d134f5ecd8389ae0432af62dc132a24118292866bb908101905b81811061388b575061371e565b82815560010161387e565b601f82527fa03837a25210ee280c2113ff4b77ca23440b19d4866cca721c801278fd08d807908101905b8181106138cd5750613710565b8281556001016138c0565b601d82527f6d4407e7be21f808e6509aa9fa9143369579dd7d760fe20a2c09680fc146134f908101905b81811061390f57506136fe565b828155600101613902565b601b82527f3ad8aa4f87544323a9d1e5dd902f40c356527a7955687113db5f9a85ad579dc1908101905b81811061395157506136ec565b828155600101613944565b601982527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695908101905b81811061399357506136da565b828155600101613986565b601382527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a090908101905b8181106139d557506136b8565b8281556001016139c8565b601182527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c68908101905b818110613a1757506136a6565b828155600101613a0a565b600f82527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802908101905b818110613a595750613694565b828155600101613a4c565b600d82527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb5908101905b818110613a9b5750613682565b828155600101613a8e565b9081602091031261020c5751801515810361020c5790565b9060016001600160401b038093160191821161109c57565b15613add57565b60405162461bcd60e51b815260206004820152601160248201527f62616420706f736569646f6e20726f6f740000000000000000000000000000006044820152606490fd5b6607ffffffffffff805f54600d1c169082600d1c169160065415155f14613ce3578183148015613cc9575b15613c8457602093613b77613b726707ffffffffffffff613b7d945b60051c1661437d565b6143ee565b90614483565b9103613c6a576101c4600554613b97848601518214613ad6565b915b6001600160a01b03603e5416613bef6001600160401b038751169660606040820151910151906040519889978896630291ab6d60e51b885260048801526024870152604486015260648501526084840190612e0d565b5afa9081156123a8575f91613c4c575b5015613c0757565b60405162461bcd60e51b815260206004820152601160248201527f62616420626c73207369672070726f6f660000000000000000000000000000006044820152606490fd5b613c64915060203d81116124df576124d18183612950565b5f613bff565b6101c4600754613c7e848601518214613ad6565b91613b99565b60405162461bcd60e51b815260206004820152601060248201527f6261642073696720706572696f642032000000000000000000000000000000006044820152606490fd5b506001600160401b03613cdb83613abe565b168314613b4d565b818303613d0557602093613b77613b726707ffffffffffffff613b7d94613b69565b60405162461bcd60e51b815260206004820152601060248201527f6261642073696720706572696f642031000000000000000000000000000000006044820152606490fd5b5f5b838110613d5b5750505f910152565b8181015183820152602001613d4c565b15613d735750565b6044604051809262461bcd60e51b825260206004830152613da38151809281602486015260208686019101613d4a565b601f01601f19168101030190fd5b9190916020908181015192604094858301608081519451015185855195015194935f945b8651861015613e5b5760ff861161109c57600180871b156123cb5788915f916019891c811603613e4a57613e10613e22916123718a8c6144bb565b838d5192828480945193849201613d4a565b8101039060025afa15613e4057613e3a5f51956144ad565b94613dd5565b88513d5f823e3d90fd5b613e10613e22916123c48a8c6144bb565b909397929550613ebf9194508851907f626164206578656320726f6f742070726f6f662000000000000000000000000088830152885195613eb96034848b8d0199613ea9818484018d613d4a565b8101036014810186520184612950565b14613d6b565b5192515184845194015193925f935b8551851015613f545760ff851161109c57600180861b156123cb5787915f916012881c811603613f4357613f09613f1b91612371898b6144bb565b838c5192828480945193849201613d4a565b8101039060025afa15613f3957613f335f51946144ad565b93613ece565b87513d5f823e3d90fd5b613f09613f1b916123c4898b6144bb565b9450603a919350947f626164206578656320737461746520726f6f742070726f6f662000000000000095613f9d612c4598613eb9959a5198899485015251809285850190613d4a565b810103601a810186520184612950565b602081019081515151906001600160401b0392838316926607ffffffffffff805f54600d1c1691600d1c16906006548681155f1461411457505081036140cf57827fdc7ba15c782b181b9d54a996db4ab8a32182bff2bfb09e4aca8ed9ea9e5380c79161405761403060a060606020980151948560065501519283600755613abe565b91604051938493846040919493926001600160401b03606083019616825260208201520152565b0390a15b5101515151905f54928316811161407157505050565b807f4d75bcddf849ad697dd4b9e37ec69f14240170e980101fcd9e57bb000527c24893836001556001600160401b031916175f556140ca60405192839283602090939291936001600160401b0360408201951681520152565b0390a1565b60405162461bcd60e51b815260206004820152600f60248201527f6d69736d6174636820706572696f6400000000000000000000000000000000006044820152606490fd5b61412360209693949294613abe565b168114614133575b50505061405b565b7fdc7ba15c782b181b9d54a996db4ab8a32182bff2bfb09e4aca8ed9ea9e5380c79260045560075460055561417c61403060a06060850151948560065501519283600755613abe565b0390a15f808061412b565b60e08201906001600160401b03918281515116156142e15760e082016141b08482515116614323565b6141bd8584515116614323565b159080159180158315036142cb575050806142b9575b6142a8576141e0836142ef565b6141e9866142ef565b15158115150361429f575060408301515115156040860151511515810361429f57849061425b575b809151511691515116908181036142535750508181515151168284515151169081810361424b575050816101008092015116920151161190565b109392505050565b119392505050565b506607ffffffffffff60208401515151818086515151600d1c1691600d1c1614908060208801515151600d1c169087515151600d1c1614810361429f575083614211565b94505050505090565b909350829150515116915151161090565b508381515116848351511614156141d3565b9550955050505050816142dc575090565b905090565b5060e0015151161515919050565b60808101515115159081614301575090565b90506607ffffffffffff8061010083515151930151600d1c1691600d1c161490565b60036001600160401b038092160290811690810361109c57610400111590565b7f0000000000000000000000000000000000000000000000000000000000000000420342811161109c57600c6001600160401b0391041690565b603d545f19929083810190811161109c575b61439881612ecc565b906001600160401b03809154600393841b1c1690851610156143d6575080156143c257830161438f565b60245f634e487b7160e01b81526011600452fd5b92506143e3919350612e79565b9054911b1c60e01b90565b5f61444b6020926040518481019163ffffffff60e01b1682527f000000000000000000000000000000000000000000000000000000000000000060408201526040815261443a8161291a565b604051928392839251928391613d4a565b8101039060025afa156123a8575f5160201c600760f81b1790565b9190604051926020840152604083015260408252612c458261291a565b61449b6123776020936144965f946144cf565b614466565b8101039060025afa156123a8575f5190565b5f19811461109c5760010190565b8051821015612eb85760209160051b010190565b6001600160401b03906144fd6144e78383511661467d565b6144f7602094858501511661467d565b90614466565b918060409261451484519586815194859201613d4a565b825f86819760029581010390855afa15614666578451838661455361454188860151606087015190614466565b83895192828480945193849201613d4a565b81010390865afa1561467357856145826145708693835190614466565b83885192828480945193849201613d4a565b81010390855afa156146665782856145c360808251940151875184810191825283898201528881526145b38161291a565b8851928392839251928391613d4a565b81010390855afa156146665784518386614600875183810190838252838a8201528981526145f08161291a565b8951928392839251928391613d4a565b81010390865afa15614673578561461d6145708693835190614466565b81010390855afa15614666579061464c61463a8693845190614466565b84865192828480945193849201613d4a565b810103915afa1561465c57505190565b51903d90823e3d90fd5b50505051903d90823e3d90fd5b84513d87823e3d90fd5b5f9081905b6020821061468f57505090565b600892831b60ff821617921c906146a5906144ad565b9061468256fea2646970667358221220f53b6c7aa803871cf651fb6574c0c5de40fbaa45787c929a63bb5a8e6eba7f9064736f6c63430008150033",
}

// EthereumLightClientABI is the input ABI used to generate the binding from.
// Deprecated: Use EthereumLightClientMetaData.ABI instead.
var EthereumLightClientABI = EthereumLightClientMetaData.ABI

// EthereumLightClientBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EthereumLightClientMetaData.Bin instead.
var EthereumLightClientBin = EthereumLightClientMetaData.Bin

// DeployEthereumLightClient deploys a new Ethereum contract, binding an instance of EthereumLightClient to it.
func DeployEthereumLightClient(auth *bind.TransactOpts, backend bind.ContractBackend, genesisTime *big.Int, genesisValidatorsRoot [32]byte, _forkEpochs []uint64, _forkVersions [][4]byte, _finalizedSlot uint64, syncCommitteeRoot [32]byte, syncCommitteePoseidonRoot [32]byte, _zkVerifier common.Address) (common.Address, *types.Transaction, *EthereumLightClient, error) {
	parsed, err := EthereumLightClientMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EthereumLightClientBin), backend, genesisTime, genesisValidatorsRoot, _forkEpochs, _forkVersions, _finalizedSlot, syncCommitteeRoot, syncCommitteePoseidonRoot, _zkVerifier)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EthereumLightClient{EthereumLightClientCaller: EthereumLightClientCaller{contract: contract}, EthereumLightClientTransactor: EthereumLightClientTransactor{contract: contract}, EthereumLightClientFilterer: EthereumLightClientFilterer{contract: contract}}, nil
}

// EthereumLightClient is an auto generated Go binding around an Ethereum contract.
type EthereumLightClient struct {
	EthereumLightClientCaller     // Read-only binding to the contract
	EthereumLightClientTransactor // Write-only binding to the contract
	EthereumLightClientFilterer   // Log filterer for contract events
}

// EthereumLightClientCaller is an auto generated read-only Go binding around an Ethereum contract.
type EthereumLightClientCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthereumLightClientTransactor is an auto generated write-only Go binding around an Ethereum contract.
type EthereumLightClientTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthereumLightClientFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthereumLightClientFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthereumLightClientSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthereumLightClientSession struct {
	Contract     *EthereumLightClient // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// EthereumLightClientCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthereumLightClientCallerSession struct {
	Contract *EthereumLightClientCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// EthereumLightClientTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthereumLightClientTransactorSession struct {
	Contract     *EthereumLightClientTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// EthereumLightClientRaw is an auto generated low-level Go binding around an Ethereum contract.
type EthereumLightClientRaw struct {
	Contract *EthereumLightClient // Generic contract binding to access the raw methods on
}

// EthereumLightClientCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthereumLightClientCallerRaw struct {
	Contract *EthereumLightClientCaller // Generic read-only contract binding to access the raw methods on
}

// EthereumLightClientTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthereumLightClientTransactorRaw struct {
	Contract *EthereumLightClientTransactor // Generic write-only contract binding to access the raw methods on
}

// NewEthereumLightClient creates a new instance of EthereumLightClient, bound to a specific deployed contract.
func NewEthereumLightClient(address common.Address, backend bind.ContractBackend) (*EthereumLightClient, error) {
	contract, err := bindEthereumLightClient(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EthereumLightClient{EthereumLightClientCaller: EthereumLightClientCaller{contract: contract}, EthereumLightClientTransactor: EthereumLightClientTransactor{contract: contract}, EthereumLightClientFilterer: EthereumLightClientFilterer{contract: contract}}, nil
}

// NewEthereumLightClientCaller creates a new read-only instance of EthereumLightClient, bound to a specific deployed contract.
func NewEthereumLightClientCaller(address common.Address, caller bind.ContractCaller) (*EthereumLightClientCaller, error) {
	contract, err := bindEthereumLightClient(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthereumLightClientCaller{contract: contract}, nil
}

// NewEthereumLightClientTransactor creates a new write-only instance of EthereumLightClient, bound to a specific deployed contract.
func NewEthereumLightClientTransactor(address common.Address, transactor bind.ContractTransactor) (*EthereumLightClientTransactor, error) {
	contract, err := bindEthereumLightClient(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthereumLightClientTransactor{contract: contract}, nil
}

// NewEthereumLightClientFilterer creates a new log filterer instance of EthereumLightClient, bound to a specific deployed contract.
func NewEthereumLightClientFilterer(address common.Address, filterer bind.ContractFilterer) (*EthereumLightClientFilterer, error) {
	contract, err := bindEthereumLightClient(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthereumLightClientFilterer{contract: contract}, nil
}

// bindEthereumLightClient binds a generic wrapper to an already deployed contract.
func bindEthereumLightClient(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := EthereumLightClientMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthereumLightClient *EthereumLightClientRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthereumLightClient.Contract.EthereumLightClientCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthereumLightClient *EthereumLightClientRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthereumLightClient.Contract.EthereumLightClientTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthereumLightClient *EthereumLightClientRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthereumLightClient.Contract.EthereumLightClientTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthereumLightClient *EthereumLightClientCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthereumLightClient.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthereumLightClient *EthereumLightClientTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthereumLightClient.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthereumLightClient *EthereumLightClientTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthereumLightClient.Contract.contract.Transact(opts, method, params...)
}

// BestValidUpdate is a free data retrieval call binding the contract method 0xba67ee48.
//
// Solidity: function bestValidUpdate() view returns(((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])) attestedHeader, ((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])) finalizedHeader, bytes32 nextSyncCommitteeRoot, bytes32 nextSyncCommitteePoseidonRoot, (uint256[2],uint256[2][2],uint256[2],uint256[2]) nextSyncCommitteeRootMappingProof, (uint64,bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2])) syncAggregate, uint64 signatureSlot)
func (_EthereumLightClient *EthereumLightClientCaller) BestValidUpdate(opts *bind.CallOpts) (struct {
	AttestedHeader                    HeaderWithExecution
	FinalizedHeader                   HeaderWithExecution
	NextSyncCommitteeRoot             [32]byte
	NextSyncCommitteePoseidonRoot     [32]byte
	NextSyncCommitteeRootMappingProof IBeaconVerifierProof
	SyncAggregate                     SyncAggregate
	SignatureSlot                     uint64
}, error) {
	var out []interface{}
	err := _EthereumLightClient.contract.Call(opts, &out, "bestValidUpdate")

	outstruct := new(struct {
		AttestedHeader                    HeaderWithExecution
		FinalizedHeader                   HeaderWithExecution
		NextSyncCommitteeRoot             [32]byte
		NextSyncCommitteePoseidonRoot     [32]byte
		NextSyncCommitteeRootMappingProof IBeaconVerifierProof
		SyncAggregate                     SyncAggregate
		SignatureSlot                     uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AttestedHeader = *abi.ConvertType(out[0], new(HeaderWithExecution)).(*HeaderWithExecution)
	outstruct.FinalizedHeader = *abi.ConvertType(out[1], new(HeaderWithExecution)).(*HeaderWithExecution)
	outstruct.NextSyncCommitteeRoot = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)
	outstruct.NextSyncCommitteePoseidonRoot = *abi.ConvertType(out[3], new([32]byte)).(*[32]byte)
	outstruct.NextSyncCommitteeRootMappingProof = *abi.ConvertType(out[4], new(IBeaconVerifierProof)).(*IBeaconVerifierProof)
	outstruct.SyncAggregate = *abi.ConvertType(out[5], new(SyncAggregate)).(*SyncAggregate)
	outstruct.SignatureSlot = *abi.ConvertType(out[6], new(uint64)).(*uint64)

	return *outstruct, err

}

// BestValidUpdate is a free data retrieval call binding the contract method 0xba67ee48.
//
// Solidity: function bestValidUpdate() view returns(((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])) attestedHeader, ((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])) finalizedHeader, bytes32 nextSyncCommitteeRoot, bytes32 nextSyncCommitteePoseidonRoot, (uint256[2],uint256[2][2],uint256[2],uint256[2]) nextSyncCommitteeRootMappingProof, (uint64,bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2])) syncAggregate, uint64 signatureSlot)
func (_EthereumLightClient *EthereumLightClientSession) BestValidUpdate() (struct {
	AttestedHeader                    HeaderWithExecution
	FinalizedHeader                   HeaderWithExecution
	NextSyncCommitteeRoot             [32]byte
	NextSyncCommitteePoseidonRoot     [32]byte
	NextSyncCommitteeRootMappingProof IBeaconVerifierProof
	SyncAggregate                     SyncAggregate
	SignatureSlot                     uint64
}, error) {
	return _EthereumLightClient.Contract.BestValidUpdate(&_EthereumLightClient.CallOpts)
}

// BestValidUpdate is a free data retrieval call binding the contract method 0xba67ee48.
//
// Solidity: function bestValidUpdate() view returns(((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])) attestedHeader, ((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])) finalizedHeader, bytes32 nextSyncCommitteeRoot, bytes32 nextSyncCommitteePoseidonRoot, (uint256[2],uint256[2][2],uint256[2],uint256[2]) nextSyncCommitteeRootMappingProof, (uint64,bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2])) syncAggregate, uint64 signatureSlot)
func (_EthereumLightClient *EthereumLightClientCallerSession) BestValidUpdate() (struct {
	AttestedHeader                    HeaderWithExecution
	FinalizedHeader                   HeaderWithExecution
	NextSyncCommitteeRoot             [32]byte
	NextSyncCommitteePoseidonRoot     [32]byte
	NextSyncCommitteeRootMappingProof IBeaconVerifierProof
	SyncAggregate                     SyncAggregate
	SignatureSlot                     uint64
}, error) {
	return _EthereumLightClient.Contract.BestValidUpdate(&_EthereumLightClient.CallOpts)
}

// ComputeDomain is a free data retrieval call binding the contract method 0xaae3913b.
//
// Solidity: function computeDomain(bytes4 forkVersion) view returns(bytes32)
func (_EthereumLightClient *EthereumLightClientCaller) ComputeDomain(opts *bind.CallOpts, forkVersion [4]byte) ([32]byte, error) {
	var out []interface{}
	err := _EthereumLightClient.contract.Call(opts, &out, "computeDomain", forkVersion)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ComputeDomain is a free data retrieval call binding the contract method 0xaae3913b.
//
// Solidity: function computeDomain(bytes4 forkVersion) view returns(bytes32)
func (_EthereumLightClient *EthereumLightClientSession) ComputeDomain(forkVersion [4]byte) ([32]byte, error) {
	return _EthereumLightClient.Contract.ComputeDomain(&_EthereumLightClient.CallOpts, forkVersion)
}

// ComputeDomain is a free data retrieval call binding the contract method 0xaae3913b.
//
// Solidity: function computeDomain(bytes4 forkVersion) view returns(bytes32)
func (_EthereumLightClient *EthereumLightClientCallerSession) ComputeDomain(forkVersion [4]byte) ([32]byte, error) {
	return _EthereumLightClient.Contract.ComputeDomain(&_EthereumLightClient.CallOpts, forkVersion)
}

// ComputeSigningRoot is a free data retrieval call binding the contract method 0x751f7f15.
//
// Solidity: function computeSigningRoot((uint64,uint64,bytes32,bytes32,bytes32) header, bytes32 domain) pure returns(bytes32)
func (_EthereumLightClient *EthereumLightClientCaller) ComputeSigningRoot(opts *bind.CallOpts, header BeaconBlockHeader, domain [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _EthereumLightClient.contract.Call(opts, &out, "computeSigningRoot", header, domain)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ComputeSigningRoot is a free data retrieval call binding the contract method 0x751f7f15.
//
// Solidity: function computeSigningRoot((uint64,uint64,bytes32,bytes32,bytes32) header, bytes32 domain) pure returns(bytes32)
func (_EthereumLightClient *EthereumLightClientSession) ComputeSigningRoot(header BeaconBlockHeader, domain [32]byte) ([32]byte, error) {
	return _EthereumLightClient.Contract.ComputeSigningRoot(&_EthereumLightClient.CallOpts, header, domain)
}

// ComputeSigningRoot is a free data retrieval call binding the contract method 0x751f7f15.
//
// Solidity: function computeSigningRoot((uint64,uint64,bytes32,bytes32,bytes32) header, bytes32 domain) pure returns(bytes32)
func (_EthereumLightClient *EthereumLightClientCallerSession) ComputeSigningRoot(header BeaconBlockHeader, domain [32]byte) ([32]byte, error) {
	return _EthereumLightClient.Contract.ComputeSigningRoot(&_EthereumLightClient.CallOpts, header, domain)
}

// CurrentSyncCommitteePoseidonRoot is a free data retrieval call binding the contract method 0x65e700de.
//
// Solidity: function currentSyncCommitteePoseidonRoot() view returns(bytes32)
func (_EthereumLightClient *EthereumLightClientCaller) CurrentSyncCommitteePoseidonRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _EthereumLightClient.contract.Call(opts, &out, "currentSyncCommitteePoseidonRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CurrentSyncCommitteePoseidonRoot is a free data retrieval call binding the contract method 0x65e700de.
//
// Solidity: function currentSyncCommitteePoseidonRoot() view returns(bytes32)
func (_EthereumLightClient *EthereumLightClientSession) CurrentSyncCommitteePoseidonRoot() ([32]byte, error) {
	return _EthereumLightClient.Contract.CurrentSyncCommitteePoseidonRoot(&_EthereumLightClient.CallOpts)
}

// CurrentSyncCommitteePoseidonRoot is a free data retrieval call binding the contract method 0x65e700de.
//
// Solidity: function currentSyncCommitteePoseidonRoot() view returns(bytes32)
func (_EthereumLightClient *EthereumLightClientCallerSession) CurrentSyncCommitteePoseidonRoot() ([32]byte, error) {
	return _EthereumLightClient.Contract.CurrentSyncCommitteePoseidonRoot(&_EthereumLightClient.CallOpts)
}

// CurrentSyncCommitteeRoot is a free data retrieval call binding the contract method 0xa4059e07.
//
// Solidity: function currentSyncCommitteeRoot() view returns(bytes32)
func (_EthereumLightClient *EthereumLightClientCaller) CurrentSyncCommitteeRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _EthereumLightClient.contract.Call(opts, &out, "currentSyncCommitteeRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CurrentSyncCommitteeRoot is a free data retrieval call binding the contract method 0xa4059e07.
//
// Solidity: function currentSyncCommitteeRoot() view returns(bytes32)
func (_EthereumLightClient *EthereumLightClientSession) CurrentSyncCommitteeRoot() ([32]byte, error) {
	return _EthereumLightClient.Contract.CurrentSyncCommitteeRoot(&_EthereumLightClient.CallOpts)
}

// CurrentSyncCommitteeRoot is a free data retrieval call binding the contract method 0xa4059e07.
//
// Solidity: function currentSyncCommitteeRoot() view returns(bytes32)
func (_EthereumLightClient *EthereumLightClientCallerSession) CurrentSyncCommitteeRoot() ([32]byte, error) {
	return _EthereumLightClient.Contract.CurrentSyncCommitteeRoot(&_EthereumLightClient.CallOpts)
}

// FinalizedExecutionStateRoot is a free data retrieval call binding the contract method 0xc5190436.
//
// Solidity: function finalizedExecutionStateRoot() view returns(bytes32)
func (_EthereumLightClient *EthereumLightClientCaller) FinalizedExecutionStateRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _EthereumLightClient.contract.Call(opts, &out, "finalizedExecutionStateRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// FinalizedExecutionStateRoot is a free data retrieval call binding the contract method 0xc5190436.
//
// Solidity: function finalizedExecutionStateRoot() view returns(bytes32)
func (_EthereumLightClient *EthereumLightClientSession) FinalizedExecutionStateRoot() ([32]byte, error) {
	return _EthereumLightClient.Contract.FinalizedExecutionStateRoot(&_EthereumLightClient.CallOpts)
}

// FinalizedExecutionStateRoot is a free data retrieval call binding the contract method 0xc5190436.
//
// Solidity: function finalizedExecutionStateRoot() view returns(bytes32)
func (_EthereumLightClient *EthereumLightClientCallerSession) FinalizedExecutionStateRoot() ([32]byte, error) {
	return _EthereumLightClient.Contract.FinalizedExecutionStateRoot(&_EthereumLightClient.CallOpts)
}

// FinalizedExecutionStateRootAndSlot is a free data retrieval call binding the contract method 0x12420766.
//
// Solidity: function finalizedExecutionStateRootAndSlot() view returns(bytes32 root, uint64 slot)
func (_EthereumLightClient *EthereumLightClientCaller) FinalizedExecutionStateRootAndSlot(opts *bind.CallOpts) (struct {
	Root [32]byte
	Slot uint64
}, error) {
	var out []interface{}
	err := _EthereumLightClient.contract.Call(opts, &out, "finalizedExecutionStateRootAndSlot")

	outstruct := new(struct {
		Root [32]byte
		Slot uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Root = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Slot = *abi.ConvertType(out[1], new(uint64)).(*uint64)

	return *outstruct, err

}

// FinalizedExecutionStateRootAndSlot is a free data retrieval call binding the contract method 0x12420766.
//
// Solidity: function finalizedExecutionStateRootAndSlot() view returns(bytes32 root, uint64 slot)
func (_EthereumLightClient *EthereumLightClientSession) FinalizedExecutionStateRootAndSlot() (struct {
	Root [32]byte
	Slot uint64
}, error) {
	return _EthereumLightClient.Contract.FinalizedExecutionStateRootAndSlot(&_EthereumLightClient.CallOpts)
}

// FinalizedExecutionStateRootAndSlot is a free data retrieval call binding the contract method 0x12420766.
//
// Solidity: function finalizedExecutionStateRootAndSlot() view returns(bytes32 root, uint64 slot)
func (_EthereumLightClient *EthereumLightClientCallerSession) FinalizedExecutionStateRootAndSlot() (struct {
	Root [32]byte
	Slot uint64
}, error) {
	return _EthereumLightClient.Contract.FinalizedExecutionStateRootAndSlot(&_EthereumLightClient.CallOpts)
}

// FinalizedSlot is a free data retrieval call binding the contract method 0xd1802369.
//
// Solidity: function finalizedSlot() view returns(uint64)
func (_EthereumLightClient *EthereumLightClientCaller) FinalizedSlot(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _EthereumLightClient.contract.Call(opts, &out, "finalizedSlot")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FinalizedSlot is a free data retrieval call binding the contract method 0xd1802369.
//
// Solidity: function finalizedSlot() view returns(uint64)
func (_EthereumLightClient *EthereumLightClientSession) FinalizedSlot() (uint64, error) {
	return _EthereumLightClient.Contract.FinalizedSlot(&_EthereumLightClient.CallOpts)
}

// FinalizedSlot is a free data retrieval call binding the contract method 0xd1802369.
//
// Solidity: function finalizedSlot() view returns(uint64)
func (_EthereumLightClient *EthereumLightClientCallerSession) FinalizedSlot() (uint64, error) {
	return _EthereumLightClient.Contract.FinalizedSlot(&_EthereumLightClient.CallOpts)
}

// ForkEpochs is a free data retrieval call binding the contract method 0xbcbaf770.
//
// Solidity: function forkEpochs(uint256 ) view returns(uint64)
func (_EthereumLightClient *EthereumLightClientCaller) ForkEpochs(opts *bind.CallOpts, arg0 *big.Int) (uint64, error) {
	var out []interface{}
	err := _EthereumLightClient.contract.Call(opts, &out, "forkEpochs", arg0)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ForkEpochs is a free data retrieval call binding the contract method 0xbcbaf770.
//
// Solidity: function forkEpochs(uint256 ) view returns(uint64)
func (_EthereumLightClient *EthereumLightClientSession) ForkEpochs(arg0 *big.Int) (uint64, error) {
	return _EthereumLightClient.Contract.ForkEpochs(&_EthereumLightClient.CallOpts, arg0)
}

// ForkEpochs is a free data retrieval call binding the contract method 0xbcbaf770.
//
// Solidity: function forkEpochs(uint256 ) view returns(uint64)
func (_EthereumLightClient *EthereumLightClientCallerSession) ForkEpochs(arg0 *big.Int) (uint64, error) {
	return _EthereumLightClient.Contract.ForkEpochs(&_EthereumLightClient.CallOpts, arg0)
}

// ForkVersions is a free data retrieval call binding the contract method 0xbaa94ea2.
//
// Solidity: function forkVersions(uint256 ) view returns(bytes4)
func (_EthereumLightClient *EthereumLightClientCaller) ForkVersions(opts *bind.CallOpts, arg0 *big.Int) ([4]byte, error) {
	var out []interface{}
	err := _EthereumLightClient.contract.Call(opts, &out, "forkVersions", arg0)

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// ForkVersions is a free data retrieval call binding the contract method 0xbaa94ea2.
//
// Solidity: function forkVersions(uint256 ) view returns(bytes4)
func (_EthereumLightClient *EthereumLightClientSession) ForkVersions(arg0 *big.Int) ([4]byte, error) {
	return _EthereumLightClient.Contract.ForkVersions(&_EthereumLightClient.CallOpts, arg0)
}

// ForkVersions is a free data retrieval call binding the contract method 0xbaa94ea2.
//
// Solidity: function forkVersions(uint256 ) view returns(bytes4)
func (_EthereumLightClient *EthereumLightClientCallerSession) ForkVersions(arg0 *big.Int) ([4]byte, error) {
	return _EthereumLightClient.Contract.ForkVersions(&_EthereumLightClient.CallOpts, arg0)
}

// LatestFinalizedSlotAndCommitteeRoots is a free data retrieval call binding the contract method 0xe153d799.
//
// Solidity: function latestFinalizedSlotAndCommitteeRoots() view returns(uint64 slot, bytes32 currentRoot, bytes32 nextRoot)
func (_EthereumLightClient *EthereumLightClientCaller) LatestFinalizedSlotAndCommitteeRoots(opts *bind.CallOpts) (struct {
	Slot        uint64
	CurrentRoot [32]byte
	NextRoot    [32]byte
}, error) {
	var out []interface{}
	err := _EthereumLightClient.contract.Call(opts, &out, "latestFinalizedSlotAndCommitteeRoots")

	outstruct := new(struct {
		Slot        uint64
		CurrentRoot [32]byte
		NextRoot    [32]byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Slot = *abi.ConvertType(out[0], new(uint64)).(*uint64)
	outstruct.CurrentRoot = *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)
	outstruct.NextRoot = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)

	return *outstruct, err

}

// LatestFinalizedSlotAndCommitteeRoots is a free data retrieval call binding the contract method 0xe153d799.
//
// Solidity: function latestFinalizedSlotAndCommitteeRoots() view returns(uint64 slot, bytes32 currentRoot, bytes32 nextRoot)
func (_EthereumLightClient *EthereumLightClientSession) LatestFinalizedSlotAndCommitteeRoots() (struct {
	Slot        uint64
	CurrentRoot [32]byte
	NextRoot    [32]byte
}, error) {
	return _EthereumLightClient.Contract.LatestFinalizedSlotAndCommitteeRoots(&_EthereumLightClient.CallOpts)
}

// LatestFinalizedSlotAndCommitteeRoots is a free data retrieval call binding the contract method 0xe153d799.
//
// Solidity: function latestFinalizedSlotAndCommitteeRoots() view returns(uint64 slot, bytes32 currentRoot, bytes32 nextRoot)
func (_EthereumLightClient *EthereumLightClientCallerSession) LatestFinalizedSlotAndCommitteeRoots() (struct {
	Slot        uint64
	CurrentRoot [32]byte
	NextRoot    [32]byte
}, error) {
	return _EthereumLightClient.Contract.LatestFinalizedSlotAndCommitteeRoots(&_EthereumLightClient.CallOpts)
}

// NextSyncCommitteePoseidonRoot is a free data retrieval call binding the contract method 0xe1861b08.
//
// Solidity: function nextSyncCommitteePoseidonRoot() view returns(bytes32)
func (_EthereumLightClient *EthereumLightClientCaller) NextSyncCommitteePoseidonRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _EthereumLightClient.contract.Call(opts, &out, "nextSyncCommitteePoseidonRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// NextSyncCommitteePoseidonRoot is a free data retrieval call binding the contract method 0xe1861b08.
//
// Solidity: function nextSyncCommitteePoseidonRoot() view returns(bytes32)
func (_EthereumLightClient *EthereumLightClientSession) NextSyncCommitteePoseidonRoot() ([32]byte, error) {
	return _EthereumLightClient.Contract.NextSyncCommitteePoseidonRoot(&_EthereumLightClient.CallOpts)
}

// NextSyncCommitteePoseidonRoot is a free data retrieval call binding the contract method 0xe1861b08.
//
// Solidity: function nextSyncCommitteePoseidonRoot() view returns(bytes32)
func (_EthereumLightClient *EthereumLightClientCallerSession) NextSyncCommitteePoseidonRoot() ([32]byte, error) {
	return _EthereumLightClient.Contract.NextSyncCommitteePoseidonRoot(&_EthereumLightClient.CallOpts)
}

// NextSyncCommitteeRoot is a free data retrieval call binding the contract method 0x67b49cc7.
//
// Solidity: function nextSyncCommitteeRoot() view returns(bytes32)
func (_EthereumLightClient *EthereumLightClientCaller) NextSyncCommitteeRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _EthereumLightClient.contract.Call(opts, &out, "nextSyncCommitteeRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// NextSyncCommitteeRoot is a free data retrieval call binding the contract method 0x67b49cc7.
//
// Solidity: function nextSyncCommitteeRoot() view returns(bytes32)
func (_EthereumLightClient *EthereumLightClientSession) NextSyncCommitteeRoot() ([32]byte, error) {
	return _EthereumLightClient.Contract.NextSyncCommitteeRoot(&_EthereumLightClient.CallOpts)
}

// NextSyncCommitteeRoot is a free data retrieval call binding the contract method 0x67b49cc7.
//
// Solidity: function nextSyncCommitteeRoot() view returns(bytes32)
func (_EthereumLightClient *EthereumLightClientCallerSession) NextSyncCommitteeRoot() ([32]byte, error) {
	return _EthereumLightClient.Contract.NextSyncCommitteeRoot(&_EthereumLightClient.CallOpts)
}

// OptimisticExecutionStateRoot is a free data retrieval call binding the contract method 0x39536c8f.
//
// Solidity: function optimisticExecutionStateRoot() view returns(bytes32)
func (_EthereumLightClient *EthereumLightClientCaller) OptimisticExecutionStateRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _EthereumLightClient.contract.Call(opts, &out, "optimisticExecutionStateRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// OptimisticExecutionStateRoot is a free data retrieval call binding the contract method 0x39536c8f.
//
// Solidity: function optimisticExecutionStateRoot() view returns(bytes32)
func (_EthereumLightClient *EthereumLightClientSession) OptimisticExecutionStateRoot() ([32]byte, error) {
	return _EthereumLightClient.Contract.OptimisticExecutionStateRoot(&_EthereumLightClient.CallOpts)
}

// OptimisticExecutionStateRoot is a free data retrieval call binding the contract method 0x39536c8f.
//
// Solidity: function optimisticExecutionStateRoot() view returns(bytes32)
func (_EthereumLightClient *EthereumLightClientCallerSession) OptimisticExecutionStateRoot() ([32]byte, error) {
	return _EthereumLightClient.Contract.OptimisticExecutionStateRoot(&_EthereumLightClient.CallOpts)
}

// OptimisticExecutionStateRootAndSlot is a free data retrieval call binding the contract method 0x43a6c5a6.
//
// Solidity: function optimisticExecutionStateRootAndSlot() view returns(bytes32 root, uint64 slot)
func (_EthereumLightClient *EthereumLightClientCaller) OptimisticExecutionStateRootAndSlot(opts *bind.CallOpts) (struct {
	Root [32]byte
	Slot uint64
}, error) {
	var out []interface{}
	err := _EthereumLightClient.contract.Call(opts, &out, "optimisticExecutionStateRootAndSlot")

	outstruct := new(struct {
		Root [32]byte
		Slot uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Root = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Slot = *abi.ConvertType(out[1], new(uint64)).(*uint64)

	return *outstruct, err

}

// OptimisticExecutionStateRootAndSlot is a free data retrieval call binding the contract method 0x43a6c5a6.
//
// Solidity: function optimisticExecutionStateRootAndSlot() view returns(bytes32 root, uint64 slot)
func (_EthereumLightClient *EthereumLightClientSession) OptimisticExecutionStateRootAndSlot() (struct {
	Root [32]byte
	Slot uint64
}, error) {
	return _EthereumLightClient.Contract.OptimisticExecutionStateRootAndSlot(&_EthereumLightClient.CallOpts)
}

// OptimisticExecutionStateRootAndSlot is a free data retrieval call binding the contract method 0x43a6c5a6.
//
// Solidity: function optimisticExecutionStateRootAndSlot() view returns(bytes32 root, uint64 slot)
func (_EthereumLightClient *EthereumLightClientCallerSession) OptimisticExecutionStateRootAndSlot() (struct {
	Root [32]byte
	Slot uint64
}, error) {
	return _EthereumLightClient.Contract.OptimisticExecutionStateRootAndSlot(&_EthereumLightClient.CallOpts)
}

// OptimisticSlot is a free data retrieval call binding the contract method 0x3cf5ea9e.
//
// Solidity: function optimisticSlot() view returns(uint64)
func (_EthereumLightClient *EthereumLightClientCaller) OptimisticSlot(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _EthereumLightClient.contract.Call(opts, &out, "optimisticSlot")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// OptimisticSlot is a free data retrieval call binding the contract method 0x3cf5ea9e.
//
// Solidity: function optimisticSlot() view returns(uint64)
func (_EthereumLightClient *EthereumLightClientSession) OptimisticSlot() (uint64, error) {
	return _EthereumLightClient.Contract.OptimisticSlot(&_EthereumLightClient.CallOpts)
}

// OptimisticSlot is a free data retrieval call binding the contract method 0x3cf5ea9e.
//
// Solidity: function optimisticSlot() view returns(uint64)
func (_EthereumLightClient *EthereumLightClientCallerSession) OptimisticSlot() (uint64, error) {
	return _EthereumLightClient.Contract.OptimisticSlot(&_EthereumLightClient.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_EthereumLightClient *EthereumLightClientCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _EthereumLightClient.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_EthereumLightClient *EthereumLightClientSession) Owner() (common.Address, error) {
	return _EthereumLightClient.Contract.Owner(&_EthereumLightClient.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_EthereumLightClient *EthereumLightClientCallerSession) Owner() (common.Address, error) {
	return _EthereumLightClient.Contract.Owner(&_EthereumLightClient.CallOpts)
}

// VerifyCommitteeSignature is a free data retrieval call binding the contract method 0x3dd3f4aa.
//
// Solidity: function verifyCommitteeSignature(uint64 signatureSlot, (uint64,uint64,bytes32,bytes32,bytes32) header, (uint64,bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2])) syncAggregate) view returns()
func (_EthereumLightClient *EthereumLightClientCaller) VerifyCommitteeSignature(opts *bind.CallOpts, signatureSlot uint64, header BeaconBlockHeader, syncAggregate SyncAggregate) error {
	var out []interface{}
	err := _EthereumLightClient.contract.Call(opts, &out, "verifyCommitteeSignature", signatureSlot, header, syncAggregate)

	if err != nil {
		return err
	}

	return err

}

// VerifyCommitteeSignature is a free data retrieval call binding the contract method 0x3dd3f4aa.
//
// Solidity: function verifyCommitteeSignature(uint64 signatureSlot, (uint64,uint64,bytes32,bytes32,bytes32) header, (uint64,bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2])) syncAggregate) view returns()
func (_EthereumLightClient *EthereumLightClientSession) VerifyCommitteeSignature(signatureSlot uint64, header BeaconBlockHeader, syncAggregate SyncAggregate) error {
	return _EthereumLightClient.Contract.VerifyCommitteeSignature(&_EthereumLightClient.CallOpts, signatureSlot, header, syncAggregate)
}

// VerifyCommitteeSignature is a free data retrieval call binding the contract method 0x3dd3f4aa.
//
// Solidity: function verifyCommitteeSignature(uint64 signatureSlot, (uint64,uint64,bytes32,bytes32,bytes32) header, (uint64,bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2])) syncAggregate) view returns()
func (_EthereumLightClient *EthereumLightClientCallerSession) VerifyCommitteeSignature(signatureSlot uint64, header BeaconBlockHeader, syncAggregate SyncAggregate) error {
	return _EthereumLightClient.Contract.VerifyCommitteeSignature(&_EthereumLightClient.CallOpts, signatureSlot, header, syncAggregate)
}

// ZkVerifier is a free data retrieval call binding the contract method 0xd6df096d.
//
// Solidity: function zkVerifier() view returns(address)
func (_EthereumLightClient *EthereumLightClientCaller) ZkVerifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _EthereumLightClient.contract.Call(opts, &out, "zkVerifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZkVerifier is a free data retrieval call binding the contract method 0xd6df096d.
//
// Solidity: function zkVerifier() view returns(address)
func (_EthereumLightClient *EthereumLightClientSession) ZkVerifier() (common.Address, error) {
	return _EthereumLightClient.Contract.ZkVerifier(&_EthereumLightClient.CallOpts)
}

// ZkVerifier is a free data retrieval call binding the contract method 0xd6df096d.
//
// Solidity: function zkVerifier() view returns(address)
func (_EthereumLightClient *EthereumLightClientCallerSession) ZkVerifier() (common.Address, error) {
	return _EthereumLightClient.Contract.ZkVerifier(&_EthereumLightClient.CallOpts)
}

// ProcessLightClientForceUpdate is a paid mutator transaction binding the contract method 0xa1a9ad55.
//
// Solidity: function processLightClientForceUpdate() returns()
func (_EthereumLightClient *EthereumLightClientTransactor) ProcessLightClientForceUpdate(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthereumLightClient.contract.Transact(opts, "processLightClientForceUpdate")
}

// ProcessLightClientForceUpdate is a paid mutator transaction binding the contract method 0xa1a9ad55.
//
// Solidity: function processLightClientForceUpdate() returns()
func (_EthereumLightClient *EthereumLightClientSession) ProcessLightClientForceUpdate() (*types.Transaction, error) {
	return _EthereumLightClient.Contract.ProcessLightClientForceUpdate(&_EthereumLightClient.TransactOpts)
}

// ProcessLightClientForceUpdate is a paid mutator transaction binding the contract method 0xa1a9ad55.
//
// Solidity: function processLightClientForceUpdate() returns()
func (_EthereumLightClient *EthereumLightClientTransactorSession) ProcessLightClientForceUpdate() (*types.Transaction, error) {
	return _EthereumLightClient.Contract.ProcessLightClientForceUpdate(&_EthereumLightClient.TransactOpts)
}

// ProcessLightClientUpdate is a paid mutator transaction binding the contract method 0x031523dd.
//
// Solidity: function processLightClientUpdate((((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])),((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])),bytes32[],bytes32,bytes32[],bytes32,(uint256[2],uint256[2][2],uint256[2],uint256[2]),(uint64,bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2])),uint64) update) returns()
func (_EthereumLightClient *EthereumLightClientTransactor) ProcessLightClientUpdate(opts *bind.TransactOpts, update LightClientUpdate) (*types.Transaction, error) {
	return _EthereumLightClient.contract.Transact(opts, "processLightClientUpdate", update)
}

// ProcessLightClientUpdate is a paid mutator transaction binding the contract method 0x031523dd.
//
// Solidity: function processLightClientUpdate((((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])),((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])),bytes32[],bytes32,bytes32[],bytes32,(uint256[2],uint256[2][2],uint256[2],uint256[2]),(uint64,bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2])),uint64) update) returns()
func (_EthereumLightClient *EthereumLightClientSession) ProcessLightClientUpdate(update LightClientUpdate) (*types.Transaction, error) {
	return _EthereumLightClient.Contract.ProcessLightClientUpdate(&_EthereumLightClient.TransactOpts, update)
}

// ProcessLightClientUpdate is a paid mutator transaction binding the contract method 0x031523dd.
//
// Solidity: function processLightClientUpdate((((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])),((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])),bytes32[],bytes32,bytes32[],bytes32,(uint256[2],uint256[2][2],uint256[2],uint256[2]),(uint64,bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2])),uint64) update) returns()
func (_EthereumLightClient *EthereumLightClientTransactorSession) ProcessLightClientUpdate(update LightClientUpdate) (*types.Transaction, error) {
	return _EthereumLightClient.Contract.ProcessLightClientUpdate(&_EthereumLightClient.TransactOpts, update)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_EthereumLightClient *EthereumLightClientTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthereumLightClient.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_EthereumLightClient *EthereumLightClientSession) RenounceOwnership() (*types.Transaction, error) {
	return _EthereumLightClient.Contract.RenounceOwnership(&_EthereumLightClient.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_EthereumLightClient *EthereumLightClientTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _EthereumLightClient.Contract.RenounceOwnership(&_EthereumLightClient.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_EthereumLightClient *EthereumLightClientTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _EthereumLightClient.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_EthereumLightClient *EthereumLightClientSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _EthereumLightClient.Contract.TransferOwnership(&_EthereumLightClient.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_EthereumLightClient *EthereumLightClientTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _EthereumLightClient.Contract.TransferOwnership(&_EthereumLightClient.TransactOpts, newOwner)
}

// UpdateForkVersion is a paid mutator transaction binding the contract method 0xab556e9f.
//
// Solidity: function updateForkVersion(uint64 epoch, bytes4 forkVersion) returns()
func (_EthereumLightClient *EthereumLightClientTransactor) UpdateForkVersion(opts *bind.TransactOpts, epoch uint64, forkVersion [4]byte) (*types.Transaction, error) {
	return _EthereumLightClient.contract.Transact(opts, "updateForkVersion", epoch, forkVersion)
}

// UpdateForkVersion is a paid mutator transaction binding the contract method 0xab556e9f.
//
// Solidity: function updateForkVersion(uint64 epoch, bytes4 forkVersion) returns()
func (_EthereumLightClient *EthereumLightClientSession) UpdateForkVersion(epoch uint64, forkVersion [4]byte) (*types.Transaction, error) {
	return _EthereumLightClient.Contract.UpdateForkVersion(&_EthereumLightClient.TransactOpts, epoch, forkVersion)
}

// UpdateForkVersion is a paid mutator transaction binding the contract method 0xab556e9f.
//
// Solidity: function updateForkVersion(uint64 epoch, bytes4 forkVersion) returns()
func (_EthereumLightClient *EthereumLightClientTransactorSession) UpdateForkVersion(epoch uint64, forkVersion [4]byte) (*types.Transaction, error) {
	return _EthereumLightClient.Contract.UpdateForkVersion(&_EthereumLightClient.TransactOpts, epoch, forkVersion)
}

// EthereumLightClientFinalityUpdateIterator is returned from FilterFinalityUpdate and is used to iterate over the raw logs and unpacked data for FinalityUpdate events raised by the EthereumLightClient contract.
type EthereumLightClientFinalityUpdateIterator struct {
	Event *EthereumLightClientFinalityUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthereumLightClientFinalityUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthereumLightClientFinalityUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthereumLightClientFinalityUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthereumLightClientFinalityUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthereumLightClientFinalityUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthereumLightClientFinalityUpdate represents a FinalityUpdate event raised by the EthereumLightClient contract.
type EthereumLightClientFinalityUpdate struct {
	Slot               *big.Int
	ExecutionStateRoot [32]byte
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterFinalityUpdate is a free log retrieval operation binding the contract event 0x4d75bcddf849ad697dd4b9e37ec69f14240170e980101fcd9e57bb000527c248.
//
// Solidity: event FinalityUpdate(uint256 slot, bytes32 executionStateRoot)
func (_EthereumLightClient *EthereumLightClientFilterer) FilterFinalityUpdate(opts *bind.FilterOpts) (*EthereumLightClientFinalityUpdateIterator, error) {

	logs, sub, err := _EthereumLightClient.contract.FilterLogs(opts, "FinalityUpdate")
	if err != nil {
		return nil, err
	}
	return &EthereumLightClientFinalityUpdateIterator{contract: _EthereumLightClient.contract, event: "FinalityUpdate", logs: logs, sub: sub}, nil
}

// WatchFinalityUpdate is a free log subscription operation binding the contract event 0x4d75bcddf849ad697dd4b9e37ec69f14240170e980101fcd9e57bb000527c248.
//
// Solidity: event FinalityUpdate(uint256 slot, bytes32 executionStateRoot)
func (_EthereumLightClient *EthereumLightClientFilterer) WatchFinalityUpdate(opts *bind.WatchOpts, sink chan<- *EthereumLightClientFinalityUpdate) (event.Subscription, error) {

	logs, sub, err := _EthereumLightClient.contract.WatchLogs(opts, "FinalityUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthereumLightClientFinalityUpdate)
				if err := _EthereumLightClient.contract.UnpackLog(event, "FinalityUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFinalityUpdate is a log parse operation binding the contract event 0x4d75bcddf849ad697dd4b9e37ec69f14240170e980101fcd9e57bb000527c248.
//
// Solidity: event FinalityUpdate(uint256 slot, bytes32 executionStateRoot)
func (_EthereumLightClient *EthereumLightClientFilterer) ParseFinalityUpdate(log types.Log) (*EthereumLightClientFinalityUpdate, error) {
	event := new(EthereumLightClientFinalityUpdate)
	if err := _EthereumLightClient.contract.UnpackLog(event, "FinalityUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthereumLightClientForkVersionUpdatedIterator is returned from FilterForkVersionUpdated and is used to iterate over the raw logs and unpacked data for ForkVersionUpdated events raised by the EthereumLightClient contract.
type EthereumLightClientForkVersionUpdatedIterator struct {
	Event *EthereumLightClientForkVersionUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthereumLightClientForkVersionUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthereumLightClientForkVersionUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthereumLightClientForkVersionUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthereumLightClientForkVersionUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthereumLightClientForkVersionUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthereumLightClientForkVersionUpdated represents a ForkVersionUpdated event raised by the EthereumLightClient contract.
type EthereumLightClientForkVersionUpdated struct {
	Epoch       uint64
	ForkVersion [4]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterForkVersionUpdated is a free log retrieval operation binding the contract event 0x3d992c45d9456d8ebe181b6a66a3721421393afaa297791373e7569c1abcc8af.
//
// Solidity: event ForkVersionUpdated(uint64 epoch, bytes4 forkVersion)
func (_EthereumLightClient *EthereumLightClientFilterer) FilterForkVersionUpdated(opts *bind.FilterOpts) (*EthereumLightClientForkVersionUpdatedIterator, error) {

	logs, sub, err := _EthereumLightClient.contract.FilterLogs(opts, "ForkVersionUpdated")
	if err != nil {
		return nil, err
	}
	return &EthereumLightClientForkVersionUpdatedIterator{contract: _EthereumLightClient.contract, event: "ForkVersionUpdated", logs: logs, sub: sub}, nil
}

// WatchForkVersionUpdated is a free log subscription operation binding the contract event 0x3d992c45d9456d8ebe181b6a66a3721421393afaa297791373e7569c1abcc8af.
//
// Solidity: event ForkVersionUpdated(uint64 epoch, bytes4 forkVersion)
func (_EthereumLightClient *EthereumLightClientFilterer) WatchForkVersionUpdated(opts *bind.WatchOpts, sink chan<- *EthereumLightClientForkVersionUpdated) (event.Subscription, error) {

	logs, sub, err := _EthereumLightClient.contract.WatchLogs(opts, "ForkVersionUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthereumLightClientForkVersionUpdated)
				if err := _EthereumLightClient.contract.UnpackLog(event, "ForkVersionUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseForkVersionUpdated is a log parse operation binding the contract event 0x3d992c45d9456d8ebe181b6a66a3721421393afaa297791373e7569c1abcc8af.
//
// Solidity: event ForkVersionUpdated(uint64 epoch, bytes4 forkVersion)
func (_EthereumLightClient *EthereumLightClientFilterer) ParseForkVersionUpdated(log types.Log) (*EthereumLightClientForkVersionUpdated, error) {
	event := new(EthereumLightClientForkVersionUpdated)
	if err := _EthereumLightClient.contract.UnpackLog(event, "ForkVersionUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthereumLightClientOptimisticUpdateIterator is returned from FilterOptimisticUpdate and is used to iterate over the raw logs and unpacked data for OptimisticUpdate events raised by the EthereumLightClient contract.
type EthereumLightClientOptimisticUpdateIterator struct {
	Event *EthereumLightClientOptimisticUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthereumLightClientOptimisticUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthereumLightClientOptimisticUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthereumLightClientOptimisticUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthereumLightClientOptimisticUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthereumLightClientOptimisticUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthereumLightClientOptimisticUpdate represents a OptimisticUpdate event raised by the EthereumLightClient contract.
type EthereumLightClientOptimisticUpdate struct {
	Slot               *big.Int
	ExecutionStateRoot [32]byte
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterOptimisticUpdate is a free log retrieval operation binding the contract event 0x27eafee2f5b2c935fa7666d231360699c41fe21db57034136b1af3c43f13df89.
//
// Solidity: event OptimisticUpdate(uint256 slot, bytes32 executionStateRoot)
func (_EthereumLightClient *EthereumLightClientFilterer) FilterOptimisticUpdate(opts *bind.FilterOpts) (*EthereumLightClientOptimisticUpdateIterator, error) {

	logs, sub, err := _EthereumLightClient.contract.FilterLogs(opts, "OptimisticUpdate")
	if err != nil {
		return nil, err
	}
	return &EthereumLightClientOptimisticUpdateIterator{contract: _EthereumLightClient.contract, event: "OptimisticUpdate", logs: logs, sub: sub}, nil
}

// WatchOptimisticUpdate is a free log subscription operation binding the contract event 0x27eafee2f5b2c935fa7666d231360699c41fe21db57034136b1af3c43f13df89.
//
// Solidity: event OptimisticUpdate(uint256 slot, bytes32 executionStateRoot)
func (_EthereumLightClient *EthereumLightClientFilterer) WatchOptimisticUpdate(opts *bind.WatchOpts, sink chan<- *EthereumLightClientOptimisticUpdate) (event.Subscription, error) {

	logs, sub, err := _EthereumLightClient.contract.WatchLogs(opts, "OptimisticUpdate")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthereumLightClientOptimisticUpdate)
				if err := _EthereumLightClient.contract.UnpackLog(event, "OptimisticUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOptimisticUpdate is a log parse operation binding the contract event 0x27eafee2f5b2c935fa7666d231360699c41fe21db57034136b1af3c43f13df89.
//
// Solidity: event OptimisticUpdate(uint256 slot, bytes32 executionStateRoot)
func (_EthereumLightClient *EthereumLightClientFilterer) ParseOptimisticUpdate(log types.Log) (*EthereumLightClientOptimisticUpdate, error) {
	event := new(EthereumLightClientOptimisticUpdate)
	if err := _EthereumLightClient.contract.UnpackLog(event, "OptimisticUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthereumLightClientOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the EthereumLightClient contract.
type EthereumLightClientOwnershipTransferredIterator struct {
	Event *EthereumLightClientOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthereumLightClientOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthereumLightClientOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthereumLightClientOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthereumLightClientOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthereumLightClientOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthereumLightClientOwnershipTransferred represents a OwnershipTransferred event raised by the EthereumLightClient contract.
type EthereumLightClientOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_EthereumLightClient *EthereumLightClientFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*EthereumLightClientOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _EthereumLightClient.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &EthereumLightClientOwnershipTransferredIterator{contract: _EthereumLightClient.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_EthereumLightClient *EthereumLightClientFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *EthereumLightClientOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _EthereumLightClient.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthereumLightClientOwnershipTransferred)
				if err := _EthereumLightClient.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_EthereumLightClient *EthereumLightClientFilterer) ParseOwnershipTransferred(log types.Log) (*EthereumLightClientOwnershipTransferred, error) {
	event := new(EthereumLightClientOwnershipTransferred)
	if err := _EthereumLightClient.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthereumLightClientSyncCommitteeUpdatedIterator is returned from FilterSyncCommitteeUpdated and is used to iterate over the raw logs and unpacked data for SyncCommitteeUpdated events raised by the EthereumLightClient contract.
type EthereumLightClientSyncCommitteeUpdatedIterator struct {
	Event *EthereumLightClientSyncCommitteeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthereumLightClientSyncCommitteeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthereumLightClientSyncCommitteeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthereumLightClientSyncCommitteeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthereumLightClientSyncCommitteeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthereumLightClientSyncCommitteeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthereumLightClientSyncCommitteeUpdated represents a SyncCommitteeUpdated event raised by the EthereumLightClient contract.
type EthereumLightClientSyncCommitteeUpdated struct {
	Period       *big.Int
	SszRoot      [32]byte
	PoseidonRoot [32]byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSyncCommitteeUpdated is a free log retrieval operation binding the contract event 0xdc7ba15c782b181b9d54a996db4ab8a32182bff2bfb09e4aca8ed9ea9e5380c7.
//
// Solidity: event SyncCommitteeUpdated(uint256 period, bytes32 sszRoot, bytes32 poseidonRoot)
func (_EthereumLightClient *EthereumLightClientFilterer) FilterSyncCommitteeUpdated(opts *bind.FilterOpts) (*EthereumLightClientSyncCommitteeUpdatedIterator, error) {

	logs, sub, err := _EthereumLightClient.contract.FilterLogs(opts, "SyncCommitteeUpdated")
	if err != nil {
		return nil, err
	}
	return &EthereumLightClientSyncCommitteeUpdatedIterator{contract: _EthereumLightClient.contract, event: "SyncCommitteeUpdated", logs: logs, sub: sub}, nil
}

// WatchSyncCommitteeUpdated is a free log subscription operation binding the contract event 0xdc7ba15c782b181b9d54a996db4ab8a32182bff2bfb09e4aca8ed9ea9e5380c7.
//
// Solidity: event SyncCommitteeUpdated(uint256 period, bytes32 sszRoot, bytes32 poseidonRoot)
func (_EthereumLightClient *EthereumLightClientFilterer) WatchSyncCommitteeUpdated(opts *bind.WatchOpts, sink chan<- *EthereumLightClientSyncCommitteeUpdated) (event.Subscription, error) {

	logs, sub, err := _EthereumLightClient.contract.WatchLogs(opts, "SyncCommitteeUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthereumLightClientSyncCommitteeUpdated)
				if err := _EthereumLightClient.contract.UnpackLog(event, "SyncCommitteeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSyncCommitteeUpdated is a log parse operation binding the contract event 0xdc7ba15c782b181b9d54a996db4ab8a32182bff2bfb09e4aca8ed9ea9e5380c7.
//
// Solidity: event SyncCommitteeUpdated(uint256 period, bytes32 sszRoot, bytes32 poseidonRoot)
func (_EthereumLightClient *EthereumLightClientFilterer) ParseSyncCommitteeUpdated(log types.Log) (*EthereumLightClientSyncCommitteeUpdated, error) {
	event := new(EthereumLightClientSyncCommitteeUpdated)
	if err := _EthereumLightClient.contract.UnpackLog(event, "SyncCommitteeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeeLibraryMetaData contains all meta data concerning the FeeLibrary contract.
var FeeLibraryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"DYNAMIC_FEE_FLAG\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOOK_SWAP_FEE_FLAG\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HOOK_WITHDRAW_FEE_FLAG\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STATIC_FEE_MASK\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608080604052346100195760e0908161001e823930815050f35b5f80fdfe60808060405260043610156011575f80fd5b5f90813560e01c9081634f7deff714608f57508063c7a97b4e146077578063d11e7dee14605f5763f26ef49d146045575f80fd5b80600319360112605c576020604051628000008152f35b80fd5b5080600319360112605c576020604051624000008152f35b5080600319360112605c576020604051620fffff8152f35b90508160031936011260a657806220000060209252f35b5080fdfea264697066735822122088262fae4220f0a6912134842f2b40c13a09538b11ae742c14f48e011338464d64736f6c63430008150033",
}

// FeeLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use FeeLibraryMetaData.ABI instead.
var FeeLibraryABI = FeeLibraryMetaData.ABI

// FeeLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FeeLibraryMetaData.Bin instead.
var FeeLibraryBin = FeeLibraryMetaData.Bin

// DeployFeeLibrary deploys a new Ethereum contract, binding an instance of FeeLibrary to it.
func DeployFeeLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FeeLibrary, error) {
	parsed, err := FeeLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FeeLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FeeLibrary{FeeLibraryCaller: FeeLibraryCaller{contract: contract}, FeeLibraryTransactor: FeeLibraryTransactor{contract: contract}, FeeLibraryFilterer: FeeLibraryFilterer{contract: contract}}, nil
}

// FeeLibrary is an auto generated Go binding around an Ethereum contract.
type FeeLibrary struct {
	FeeLibraryCaller     // Read-only binding to the contract
	FeeLibraryTransactor // Write-only binding to the contract
	FeeLibraryFilterer   // Log filterer for contract events
}

// FeeLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type FeeLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeeLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FeeLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeeLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FeeLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeeLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FeeLibrarySession struct {
	Contract     *FeeLibrary       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FeeLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FeeLibraryCallerSession struct {
	Contract *FeeLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// FeeLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FeeLibraryTransactorSession struct {
	Contract     *FeeLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// FeeLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type FeeLibraryRaw struct {
	Contract *FeeLibrary // Generic contract binding to access the raw methods on
}

// FeeLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FeeLibraryCallerRaw struct {
	Contract *FeeLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// FeeLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FeeLibraryTransactorRaw struct {
	Contract *FeeLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFeeLibrary creates a new instance of FeeLibrary, bound to a specific deployed contract.
func NewFeeLibrary(address common.Address, backend bind.ContractBackend) (*FeeLibrary, error) {
	contract, err := bindFeeLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FeeLibrary{FeeLibraryCaller: FeeLibraryCaller{contract: contract}, FeeLibraryTransactor: FeeLibraryTransactor{contract: contract}, FeeLibraryFilterer: FeeLibraryFilterer{contract: contract}}, nil
}

// NewFeeLibraryCaller creates a new read-only instance of FeeLibrary, bound to a specific deployed contract.
func NewFeeLibraryCaller(address common.Address, caller bind.ContractCaller) (*FeeLibraryCaller, error) {
	contract, err := bindFeeLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FeeLibraryCaller{contract: contract}, nil
}

// NewFeeLibraryTransactor creates a new write-only instance of FeeLibrary, bound to a specific deployed contract.
func NewFeeLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*FeeLibraryTransactor, error) {
	contract, err := bindFeeLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FeeLibraryTransactor{contract: contract}, nil
}

// NewFeeLibraryFilterer creates a new log filterer instance of FeeLibrary, bound to a specific deployed contract.
func NewFeeLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*FeeLibraryFilterer, error) {
	contract, err := bindFeeLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FeeLibraryFilterer{contract: contract}, nil
}

// bindFeeLibrary binds a generic wrapper to an already deployed contract.
func bindFeeLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := FeeLibraryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeeLibrary *FeeLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeeLibrary.Contract.FeeLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeeLibrary *FeeLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeeLibrary.Contract.FeeLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeeLibrary *FeeLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeeLibrary.Contract.FeeLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeeLibrary *FeeLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeeLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeeLibrary *FeeLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeeLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeeLibrary *FeeLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeeLibrary.Contract.contract.Transact(opts, method, params...)
}

// DYNAMICFEEFLAG is a free data retrieval call binding the contract method 0xf26ef49d.
//
// Solidity: function DYNAMIC_FEE_FLAG() view returns(uint24)
func (_FeeLibrary *FeeLibraryCaller) DYNAMICFEEFLAG(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeeLibrary.contract.Call(opts, &out, "DYNAMIC_FEE_FLAG")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DYNAMICFEEFLAG is a free data retrieval call binding the contract method 0xf26ef49d.
//
// Solidity: function DYNAMIC_FEE_FLAG() view returns(uint24)
func (_FeeLibrary *FeeLibrarySession) DYNAMICFEEFLAG() (*big.Int, error) {
	return _FeeLibrary.Contract.DYNAMICFEEFLAG(&_FeeLibrary.CallOpts)
}

// DYNAMICFEEFLAG is a free data retrieval call binding the contract method 0xf26ef49d.
//
// Solidity: function DYNAMIC_FEE_FLAG() view returns(uint24)
func (_FeeLibrary *FeeLibraryCallerSession) DYNAMICFEEFLAG() (*big.Int, error) {
	return _FeeLibrary.Contract.DYNAMICFEEFLAG(&_FeeLibrary.CallOpts)
}

// HOOKSWAPFEEFLAG is a free data retrieval call binding the contract method 0xd11e7dee.
//
// Solidity: function HOOK_SWAP_FEE_FLAG() view returns(uint24)
func (_FeeLibrary *FeeLibraryCaller) HOOKSWAPFEEFLAG(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeeLibrary.contract.Call(opts, &out, "HOOK_SWAP_FEE_FLAG")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HOOKSWAPFEEFLAG is a free data retrieval call binding the contract method 0xd11e7dee.
//
// Solidity: function HOOK_SWAP_FEE_FLAG() view returns(uint24)
func (_FeeLibrary *FeeLibrarySession) HOOKSWAPFEEFLAG() (*big.Int, error) {
	return _FeeLibrary.Contract.HOOKSWAPFEEFLAG(&_FeeLibrary.CallOpts)
}

// HOOKSWAPFEEFLAG is a free data retrieval call binding the contract method 0xd11e7dee.
//
// Solidity: function HOOK_SWAP_FEE_FLAG() view returns(uint24)
func (_FeeLibrary *FeeLibraryCallerSession) HOOKSWAPFEEFLAG() (*big.Int, error) {
	return _FeeLibrary.Contract.HOOKSWAPFEEFLAG(&_FeeLibrary.CallOpts)
}

// HOOKWITHDRAWFEEFLAG is a free data retrieval call binding the contract method 0x4f7deff7.
//
// Solidity: function HOOK_WITHDRAW_FEE_FLAG() view returns(uint24)
func (_FeeLibrary *FeeLibraryCaller) HOOKWITHDRAWFEEFLAG(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeeLibrary.contract.Call(opts, &out, "HOOK_WITHDRAW_FEE_FLAG")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HOOKWITHDRAWFEEFLAG is a free data retrieval call binding the contract method 0x4f7deff7.
//
// Solidity: function HOOK_WITHDRAW_FEE_FLAG() view returns(uint24)
func (_FeeLibrary *FeeLibrarySession) HOOKWITHDRAWFEEFLAG() (*big.Int, error) {
	return _FeeLibrary.Contract.HOOKWITHDRAWFEEFLAG(&_FeeLibrary.CallOpts)
}

// HOOKWITHDRAWFEEFLAG is a free data retrieval call binding the contract method 0x4f7deff7.
//
// Solidity: function HOOK_WITHDRAW_FEE_FLAG() view returns(uint24)
func (_FeeLibrary *FeeLibraryCallerSession) HOOKWITHDRAWFEEFLAG() (*big.Int, error) {
	return _FeeLibrary.Contract.HOOKWITHDRAWFEEFLAG(&_FeeLibrary.CallOpts)
}

// STATICFEEMASK is a free data retrieval call binding the contract method 0xc7a97b4e.
//
// Solidity: function STATIC_FEE_MASK() view returns(uint24)
func (_FeeLibrary *FeeLibraryCaller) STATICFEEMASK(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _FeeLibrary.contract.Call(opts, &out, "STATIC_FEE_MASK")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// STATICFEEMASK is a free data retrieval call binding the contract method 0xc7a97b4e.
//
// Solidity: function STATIC_FEE_MASK() view returns(uint24)
func (_FeeLibrary *FeeLibrarySession) STATICFEEMASK() (*big.Int, error) {
	return _FeeLibrary.Contract.STATICFEEMASK(&_FeeLibrary.CallOpts)
}

// STATICFEEMASK is a free data retrieval call binding the contract method 0xc7a97b4e.
//
// Solidity: function STATIC_FEE_MASK() view returns(uint24)
func (_FeeLibrary *FeeLibraryCallerSession) STATICFEEMASK() (*big.Int, error) {
	return _FeeLibrary.Contract.STATICFEEMASK(&_FeeLibrary.CallOpts)
}

// FeeVaultMetaData contains all meta data concerning the FeeVault contract.
var FeeVaultMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"collectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"name\":\"setFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
	Bin: "0x6080346100a457601f61053238819003918201601f19168301916001600160401b038311848410176100a8578084926020946040528339810103126100a457516001600160a01b0390818116908190036100a4575f5460018060a01b03199033828216175f55604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3600154161760015561047590816100bd8239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6040608081526004908136101561001f575b5050361561001d575f80fd5b005b5f91823560e01c8063715018a61461036d5780637ff7b0d2146102325780638da5cb5b1461020c578063a42dce8014610186578063c415b95c1461015a5763f2fde38b1461006d5750610011565b34610156576020366003190112610156576100866103da565b908354906001600160a01b03808316936100a13386146103f4565b169384156100ed57505073ffffffffffffffffffffffffffffffffffffffff1916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b5050346101825781600319360112610182576020906001600160a01b03600154169051908152f35b5080fd5b505034610182576020366003190112610182577f5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f38906101c36103da565b6001600160a01b036101d98186541633146103f4565b806001549216908173ffffffffffffffffffffffffffffffffffffffff198416176001558351921682526020820152a180f35b5050346101825781600319360112610182576001600160a01b0360209254169051908152f35b5090346101565780600319360112610156576024356001600160a01b0380821682036103695760015416330361032657838080809386359061c350f13d156103215767ffffffffffffffff3d81811161030e57835191601f8201601f19908116603f01168301908111838210176102fb57845281528460203d92013e5b156102b8578280f35b906020606492519162461bcd60e51b8352820152601260248201527f73656e64206e6174697665206661696c656400000000000000000000000000006044820152fd5b634e487b7160e01b875260418652602487fd5b634e487b7160e01b865260418552602486fd5b6102af565b815162461bcd60e51b8152602081850152601160248201527f6e6f742066656520636f6c6c6563746f720000000000000000000000000000006044820152606490fd5b8480fd5b83346103d757806003193601126103d75780805473ffffffffffffffffffffffffffffffffffffffff196001600160a01b038216916103ad3384146103f4565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b600435906001600160a01b03821682036103f057565b5f80fd5b156103fb57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfea2646970667358221220ae57e3d846a2985f8a854b13ecacc4a893be268ca24e47712d3346bcd4e9702264736f6c63430008150033",
}

// FeeVaultABI is the input ABI used to generate the binding from.
// Deprecated: Use FeeVaultMetaData.ABI instead.
var FeeVaultABI = FeeVaultMetaData.ABI

// FeeVaultBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FeeVaultMetaData.Bin instead.
var FeeVaultBin = FeeVaultMetaData.Bin

// DeployFeeVault deploys a new Ethereum contract, binding an instance of FeeVault to it.
func DeployFeeVault(auth *bind.TransactOpts, backend bind.ContractBackend, _feeCollector common.Address) (common.Address, *types.Transaction, *FeeVault, error) {
	parsed, err := FeeVaultMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FeeVaultBin), backend, _feeCollector)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FeeVault{FeeVaultCaller: FeeVaultCaller{contract: contract}, FeeVaultTransactor: FeeVaultTransactor{contract: contract}, FeeVaultFilterer: FeeVaultFilterer{contract: contract}}, nil
}

// FeeVault is an auto generated Go binding around an Ethereum contract.
type FeeVault struct {
	FeeVaultCaller     // Read-only binding to the contract
	FeeVaultTransactor // Write-only binding to the contract
	FeeVaultFilterer   // Log filterer for contract events
}

// FeeVaultCaller is an auto generated read-only Go binding around an Ethereum contract.
type FeeVaultCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeeVaultTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FeeVaultTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeeVaultFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FeeVaultFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FeeVaultSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FeeVaultSession struct {
	Contract     *FeeVault         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FeeVaultCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FeeVaultCallerSession struct {
	Contract *FeeVaultCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// FeeVaultTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FeeVaultTransactorSession struct {
	Contract     *FeeVaultTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// FeeVaultRaw is an auto generated low-level Go binding around an Ethereum contract.
type FeeVaultRaw struct {
	Contract *FeeVault // Generic contract binding to access the raw methods on
}

// FeeVaultCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FeeVaultCallerRaw struct {
	Contract *FeeVaultCaller // Generic read-only contract binding to access the raw methods on
}

// FeeVaultTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FeeVaultTransactorRaw struct {
	Contract *FeeVaultTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFeeVault creates a new instance of FeeVault, bound to a specific deployed contract.
func NewFeeVault(address common.Address, backend bind.ContractBackend) (*FeeVault, error) {
	contract, err := bindFeeVault(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FeeVault{FeeVaultCaller: FeeVaultCaller{contract: contract}, FeeVaultTransactor: FeeVaultTransactor{contract: contract}, FeeVaultFilterer: FeeVaultFilterer{contract: contract}}, nil
}

// NewFeeVaultCaller creates a new read-only instance of FeeVault, bound to a specific deployed contract.
func NewFeeVaultCaller(address common.Address, caller bind.ContractCaller) (*FeeVaultCaller, error) {
	contract, err := bindFeeVault(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FeeVaultCaller{contract: contract}, nil
}

// NewFeeVaultTransactor creates a new write-only instance of FeeVault, bound to a specific deployed contract.
func NewFeeVaultTransactor(address common.Address, transactor bind.ContractTransactor) (*FeeVaultTransactor, error) {
	contract, err := bindFeeVault(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FeeVaultTransactor{contract: contract}, nil
}

// NewFeeVaultFilterer creates a new log filterer instance of FeeVault, bound to a specific deployed contract.
func NewFeeVaultFilterer(address common.Address, filterer bind.ContractFilterer) (*FeeVaultFilterer, error) {
	contract, err := bindFeeVault(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FeeVaultFilterer{contract: contract}, nil
}

// bindFeeVault binds a generic wrapper to an already deployed contract.
func bindFeeVault(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := FeeVaultMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeeVault *FeeVaultRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeeVault.Contract.FeeVaultCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeeVault *FeeVaultRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeeVault.Contract.FeeVaultTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeeVault *FeeVaultRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeeVault.Contract.FeeVaultTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FeeVault *FeeVaultCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FeeVault.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FeeVault *FeeVaultTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeeVault.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FeeVault *FeeVaultTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FeeVault.Contract.contract.Transact(opts, method, params...)
}

// FeeCollector is a free data retrieval call binding the contract method 0xc415b95c.
//
// Solidity: function feeCollector() view returns(address)
func (_FeeVault *FeeVaultCaller) FeeCollector(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeeVault.contract.Call(opts, &out, "feeCollector")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FeeCollector is a free data retrieval call binding the contract method 0xc415b95c.
//
// Solidity: function feeCollector() view returns(address)
func (_FeeVault *FeeVaultSession) FeeCollector() (common.Address, error) {
	return _FeeVault.Contract.FeeCollector(&_FeeVault.CallOpts)
}

// FeeCollector is a free data retrieval call binding the contract method 0xc415b95c.
//
// Solidity: function feeCollector() view returns(address)
func (_FeeVault *FeeVaultCallerSession) FeeCollector() (common.Address, error) {
	return _FeeVault.Contract.FeeCollector(&_FeeVault.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeeVault *FeeVaultCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _FeeVault.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeeVault *FeeVaultSession) Owner() (common.Address, error) {
	return _FeeVault.Contract.Owner(&_FeeVault.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_FeeVault *FeeVaultCallerSession) Owner() (common.Address, error) {
	return _FeeVault.Contract.Owner(&_FeeVault.CallOpts)
}

// CollectFee is a paid mutator transaction binding the contract method 0x7ff7b0d2.
//
// Solidity: function collectFee(uint256 _amount, address _to) returns()
func (_FeeVault *FeeVaultTransactor) CollectFee(opts *bind.TransactOpts, _amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _FeeVault.contract.Transact(opts, "collectFee", _amount, _to)
}

// CollectFee is a paid mutator transaction binding the contract method 0x7ff7b0d2.
//
// Solidity: function collectFee(uint256 _amount, address _to) returns()
func (_FeeVault *FeeVaultSession) CollectFee(_amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _FeeVault.Contract.CollectFee(&_FeeVault.TransactOpts, _amount, _to)
}

// CollectFee is a paid mutator transaction binding the contract method 0x7ff7b0d2.
//
// Solidity: function collectFee(uint256 _amount, address _to) returns()
func (_FeeVault *FeeVaultTransactorSession) CollectFee(_amount *big.Int, _to common.Address) (*types.Transaction, error) {
	return _FeeVault.Contract.CollectFee(&_FeeVault.TransactOpts, _amount, _to)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeeVault *FeeVaultTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeeVault.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeeVault *FeeVaultSession) RenounceOwnership() (*types.Transaction, error) {
	return _FeeVault.Contract.RenounceOwnership(&_FeeVault.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_FeeVault *FeeVaultTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _FeeVault.Contract.RenounceOwnership(&_FeeVault.TransactOpts)
}

// SetFeeCollector is a paid mutator transaction binding the contract method 0xa42dce80.
//
// Solidity: function setFeeCollector(address _feeCollector) returns()
func (_FeeVault *FeeVaultTransactor) SetFeeCollector(opts *bind.TransactOpts, _feeCollector common.Address) (*types.Transaction, error) {
	return _FeeVault.contract.Transact(opts, "setFeeCollector", _feeCollector)
}

// SetFeeCollector is a paid mutator transaction binding the contract method 0xa42dce80.
//
// Solidity: function setFeeCollector(address _feeCollector) returns()
func (_FeeVault *FeeVaultSession) SetFeeCollector(_feeCollector common.Address) (*types.Transaction, error) {
	return _FeeVault.Contract.SetFeeCollector(&_FeeVault.TransactOpts, _feeCollector)
}

// SetFeeCollector is a paid mutator transaction binding the contract method 0xa42dce80.
//
// Solidity: function setFeeCollector(address _feeCollector) returns()
func (_FeeVault *FeeVaultTransactorSession) SetFeeCollector(_feeCollector common.Address) (*types.Transaction, error) {
	return _FeeVault.Contract.SetFeeCollector(&_FeeVault.TransactOpts, _feeCollector)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeeVault *FeeVaultTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _FeeVault.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeeVault *FeeVaultSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FeeVault.Contract.TransferOwnership(&_FeeVault.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_FeeVault *FeeVaultTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _FeeVault.Contract.TransferOwnership(&_FeeVault.TransactOpts, newOwner)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_FeeVault *FeeVaultTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FeeVault.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_FeeVault *FeeVaultSession) Receive() (*types.Transaction, error) {
	return _FeeVault.Contract.Receive(&_FeeVault.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_FeeVault *FeeVaultTransactorSession) Receive() (*types.Transaction, error) {
	return _FeeVault.Contract.Receive(&_FeeVault.TransactOpts)
}

// FeeVaultFeeCollectorUpdatedIterator is returned from FilterFeeCollectorUpdated and is used to iterate over the raw logs and unpacked data for FeeCollectorUpdated events raised by the FeeVault contract.
type FeeVaultFeeCollectorUpdatedIterator struct {
	Event *FeeVaultFeeCollectorUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeeVaultFeeCollectorUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeVaultFeeCollectorUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeeVaultFeeCollectorUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeeVaultFeeCollectorUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeeVaultFeeCollectorUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeeVaultFeeCollectorUpdated represents a FeeCollectorUpdated event raised by the FeeVault contract.
type FeeVaultFeeCollectorUpdated struct {
	From common.Address
	To   common.Address
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterFeeCollectorUpdated is a free log retrieval operation binding the contract event 0x5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f38.
//
// Solidity: event FeeCollectorUpdated(address from, address to)
func (_FeeVault *FeeVaultFilterer) FilterFeeCollectorUpdated(opts *bind.FilterOpts) (*FeeVaultFeeCollectorUpdatedIterator, error) {

	logs, sub, err := _FeeVault.contract.FilterLogs(opts, "FeeCollectorUpdated")
	if err != nil {
		return nil, err
	}
	return &FeeVaultFeeCollectorUpdatedIterator{contract: _FeeVault.contract, event: "FeeCollectorUpdated", logs: logs, sub: sub}, nil
}

// WatchFeeCollectorUpdated is a free log subscription operation binding the contract event 0x5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f38.
//
// Solidity: event FeeCollectorUpdated(address from, address to)
func (_FeeVault *FeeVaultFilterer) WatchFeeCollectorUpdated(opts *bind.WatchOpts, sink chan<- *FeeVaultFeeCollectorUpdated) (event.Subscription, error) {

	logs, sub, err := _FeeVault.contract.WatchLogs(opts, "FeeCollectorUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeeVaultFeeCollectorUpdated)
				if err := _FeeVault.contract.UnpackLog(event, "FeeCollectorUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFeeCollectorUpdated is a log parse operation binding the contract event 0x5d16ad41baeb009cd23eb8f6c7cde5c2e0cd5acf4a33926ab488875c37c37f38.
//
// Solidity: event FeeCollectorUpdated(address from, address to)
func (_FeeVault *FeeVaultFilterer) ParseFeeCollectorUpdated(log types.Log) (*FeeVaultFeeCollectorUpdated, error) {
	event := new(FeeVaultFeeCollectorUpdated)
	if err := _FeeVault.contract.UnpackLog(event, "FeeCollectorUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FeeVaultOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the FeeVault contract.
type FeeVaultOwnershipTransferredIterator struct {
	Event *FeeVaultOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FeeVaultOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FeeVaultOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FeeVaultOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FeeVaultOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FeeVaultOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FeeVaultOwnershipTransferred represents a OwnershipTransferred event raised by the FeeVault contract.
type FeeVaultOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeeVault *FeeVaultFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FeeVaultOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FeeVault.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FeeVaultOwnershipTransferredIterator{contract: _FeeVault.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeeVault *FeeVaultFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FeeVaultOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _FeeVault.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FeeVaultOwnershipTransferred)
				if err := _FeeVault.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_FeeVault *FeeVaultFilterer) ParseOwnershipTransferred(log types.Log) (*FeeVaultOwnershipTransferred, error) {
	event := new(FeeVaultOwnershipTransferred)
	if err := _FeeVault.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FixedPoint128MetaData contains all meta data concerning the FixedPoint128 contract.
var FixedPoint128MetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212203dfc03e23abe295aa5cebc6dff3b2202e845dec05ed284df428012533bb6d68b64736f6c63430008150033",
}

// FixedPoint128ABI is the input ABI used to generate the binding from.
// Deprecated: Use FixedPoint128MetaData.ABI instead.
var FixedPoint128ABI = FixedPoint128MetaData.ABI

// FixedPoint128Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FixedPoint128MetaData.Bin instead.
var FixedPoint128Bin = FixedPoint128MetaData.Bin

// DeployFixedPoint128 deploys a new Ethereum contract, binding an instance of FixedPoint128 to it.
func DeployFixedPoint128(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FixedPoint128, error) {
	parsed, err := FixedPoint128MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FixedPoint128Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FixedPoint128{FixedPoint128Caller: FixedPoint128Caller{contract: contract}, FixedPoint128Transactor: FixedPoint128Transactor{contract: contract}, FixedPoint128Filterer: FixedPoint128Filterer{contract: contract}}, nil
}

// FixedPoint128 is an auto generated Go binding around an Ethereum contract.
type FixedPoint128 struct {
	FixedPoint128Caller     // Read-only binding to the contract
	FixedPoint128Transactor // Write-only binding to the contract
	FixedPoint128Filterer   // Log filterer for contract events
}

// FixedPoint128Caller is an auto generated read-only Go binding around an Ethereum contract.
type FixedPoint128Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FixedPoint128Transactor is an auto generated write-only Go binding around an Ethereum contract.
type FixedPoint128Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FixedPoint128Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FixedPoint128Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FixedPoint128Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FixedPoint128Session struct {
	Contract     *FixedPoint128    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FixedPoint128CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FixedPoint128CallerSession struct {
	Contract *FixedPoint128Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// FixedPoint128TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FixedPoint128TransactorSession struct {
	Contract     *FixedPoint128Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// FixedPoint128Raw is an auto generated low-level Go binding around an Ethereum contract.
type FixedPoint128Raw struct {
	Contract *FixedPoint128 // Generic contract binding to access the raw methods on
}

// FixedPoint128CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FixedPoint128CallerRaw struct {
	Contract *FixedPoint128Caller // Generic read-only contract binding to access the raw methods on
}

// FixedPoint128TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FixedPoint128TransactorRaw struct {
	Contract *FixedPoint128Transactor // Generic write-only contract binding to access the raw methods on
}

// NewFixedPoint128 creates a new instance of FixedPoint128, bound to a specific deployed contract.
func NewFixedPoint128(address common.Address, backend bind.ContractBackend) (*FixedPoint128, error) {
	contract, err := bindFixedPoint128(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FixedPoint128{FixedPoint128Caller: FixedPoint128Caller{contract: contract}, FixedPoint128Transactor: FixedPoint128Transactor{contract: contract}, FixedPoint128Filterer: FixedPoint128Filterer{contract: contract}}, nil
}

// NewFixedPoint128Caller creates a new read-only instance of FixedPoint128, bound to a specific deployed contract.
func NewFixedPoint128Caller(address common.Address, caller bind.ContractCaller) (*FixedPoint128Caller, error) {
	contract, err := bindFixedPoint128(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FixedPoint128Caller{contract: contract}, nil
}

// NewFixedPoint128Transactor creates a new write-only instance of FixedPoint128, bound to a specific deployed contract.
func NewFixedPoint128Transactor(address common.Address, transactor bind.ContractTransactor) (*FixedPoint128Transactor, error) {
	contract, err := bindFixedPoint128(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FixedPoint128Transactor{contract: contract}, nil
}

// NewFixedPoint128Filterer creates a new log filterer instance of FixedPoint128, bound to a specific deployed contract.
func NewFixedPoint128Filterer(address common.Address, filterer bind.ContractFilterer) (*FixedPoint128Filterer, error) {
	contract, err := bindFixedPoint128(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FixedPoint128Filterer{contract: contract}, nil
}

// bindFixedPoint128 binds a generic wrapper to an already deployed contract.
func bindFixedPoint128(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := FixedPoint128MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FixedPoint128 *FixedPoint128Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FixedPoint128.Contract.FixedPoint128Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FixedPoint128 *FixedPoint128Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FixedPoint128.Contract.FixedPoint128Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FixedPoint128 *FixedPoint128Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FixedPoint128.Contract.FixedPoint128Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FixedPoint128 *FixedPoint128CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FixedPoint128.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FixedPoint128 *FixedPoint128TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FixedPoint128.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FixedPoint128 *FixedPoint128TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FixedPoint128.Contract.contract.Transact(opts, method, params...)
}

// FixedPoint96MetaData contains all meta data concerning the FixedPoint96 contract.
var FixedPoint96MetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220bdfd397c44bbdce5c041760907c1819e089818cb9ec6ac56d6ea6681401f845164736f6c63430008150033",
}

// FixedPoint96ABI is the input ABI used to generate the binding from.
// Deprecated: Use FixedPoint96MetaData.ABI instead.
var FixedPoint96ABI = FixedPoint96MetaData.ABI

// FixedPoint96Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FixedPoint96MetaData.Bin instead.
var FixedPoint96Bin = FixedPoint96MetaData.Bin

// DeployFixedPoint96 deploys a new Ethereum contract, binding an instance of FixedPoint96 to it.
func DeployFixedPoint96(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FixedPoint96, error) {
	parsed, err := FixedPoint96MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FixedPoint96Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FixedPoint96{FixedPoint96Caller: FixedPoint96Caller{contract: contract}, FixedPoint96Transactor: FixedPoint96Transactor{contract: contract}, FixedPoint96Filterer: FixedPoint96Filterer{contract: contract}}, nil
}

// FixedPoint96 is an auto generated Go binding around an Ethereum contract.
type FixedPoint96 struct {
	FixedPoint96Caller     // Read-only binding to the contract
	FixedPoint96Transactor // Write-only binding to the contract
	FixedPoint96Filterer   // Log filterer for contract events
}

// FixedPoint96Caller is an auto generated read-only Go binding around an Ethereum contract.
type FixedPoint96Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FixedPoint96Transactor is an auto generated write-only Go binding around an Ethereum contract.
type FixedPoint96Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FixedPoint96Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FixedPoint96Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FixedPoint96Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FixedPoint96Session struct {
	Contract     *FixedPoint96     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FixedPoint96CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FixedPoint96CallerSession struct {
	Contract *FixedPoint96Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// FixedPoint96TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FixedPoint96TransactorSession struct {
	Contract     *FixedPoint96Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// FixedPoint96Raw is an auto generated low-level Go binding around an Ethereum contract.
type FixedPoint96Raw struct {
	Contract *FixedPoint96 // Generic contract binding to access the raw methods on
}

// FixedPoint96CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FixedPoint96CallerRaw struct {
	Contract *FixedPoint96Caller // Generic read-only contract binding to access the raw methods on
}

// FixedPoint96TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FixedPoint96TransactorRaw struct {
	Contract *FixedPoint96Transactor // Generic write-only contract binding to access the raw methods on
}

// NewFixedPoint96 creates a new instance of FixedPoint96, bound to a specific deployed contract.
func NewFixedPoint96(address common.Address, backend bind.ContractBackend) (*FixedPoint96, error) {
	contract, err := bindFixedPoint96(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FixedPoint96{FixedPoint96Caller: FixedPoint96Caller{contract: contract}, FixedPoint96Transactor: FixedPoint96Transactor{contract: contract}, FixedPoint96Filterer: FixedPoint96Filterer{contract: contract}}, nil
}

// NewFixedPoint96Caller creates a new read-only instance of FixedPoint96, bound to a specific deployed contract.
func NewFixedPoint96Caller(address common.Address, caller bind.ContractCaller) (*FixedPoint96Caller, error) {
	contract, err := bindFixedPoint96(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FixedPoint96Caller{contract: contract}, nil
}

// NewFixedPoint96Transactor creates a new write-only instance of FixedPoint96, bound to a specific deployed contract.
func NewFixedPoint96Transactor(address common.Address, transactor bind.ContractTransactor) (*FixedPoint96Transactor, error) {
	contract, err := bindFixedPoint96(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FixedPoint96Transactor{contract: contract}, nil
}

// NewFixedPoint96Filterer creates a new log filterer instance of FixedPoint96, bound to a specific deployed contract.
func NewFixedPoint96Filterer(address common.Address, filterer bind.ContractFilterer) (*FixedPoint96Filterer, error) {
	contract, err := bindFixedPoint96(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FixedPoint96Filterer{contract: contract}, nil
}

// bindFixedPoint96 binds a generic wrapper to an already deployed contract.
func bindFixedPoint96(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := FixedPoint96MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FixedPoint96 *FixedPoint96Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FixedPoint96.Contract.FixedPoint96Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FixedPoint96 *FixedPoint96Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FixedPoint96.Contract.FixedPoint96Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FixedPoint96 *FixedPoint96Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FixedPoint96.Contract.FixedPoint96Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FixedPoint96 *FixedPoint96CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FixedPoint96.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FixedPoint96 *FixedPoint96TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FixedPoint96.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FixedPoint96 *FixedPoint96TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FixedPoint96.Contract.contract.Transact(opts, method, params...)
}

// FriendshipMetaData contains all meta data concerning the Friendship contract.
var FriendshipMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractITxVerifier\",\"name\":\"_txVerifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"VerifiedFriendship\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastestTxTimestamps\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractITxVerifier\",\"name\":\"_txVerifier\",\"type\":\"address\"}],\"name\":\"setTxVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_tx\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_auxiBlkVerifyInfo\",\"type\":\"bytes\"}],\"name\":\"submitFriendshipProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txVerifier\",\"outputs\":[{\"internalType\":\"contractITxVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6080346100a457601f61086938819003918201601f19168301916001600160401b038311848410176100a8578084926020946040528339810103126100a457516001600160a01b0390818116908190036100a4575f5460018060a01b03199033828216175f55604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a360015416176001556107ac90816100bd8239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080604081815260049081361015610015575f80fd5b5f92833560e01c90816320b35420146102ef5750806323a45c93146102c7578063294164421461024d578063715018a6146101e05780638da5cb5b146101ba5780639f38dbf9146101615763f2fde38b1461006e575f80fd5b3461015d57602036600319011261015d578135916001600160a01b0390818416809403610159578454918216926100a633851461072b565b84156100f057505073ffffffffffffffffffffffffffffffffffffffff1916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8480fd5b8280fd5b5050346101b65760203660031901126101b657356001600160a01b0380821680920361015d5761019590835416331461072b565b73ffffffffffffffffffffffffffffffffffffffff19600154161760015580f35b5080fd5b8382346101b657816003193601126101b6576001600160a01b0360209254169051908152f35b833461024a578060031936011261024a5780805473ffffffffffffffffffffffffffffffffffffffff196001600160a01b0382169161022033841461072b565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b50903461015d57606036600319011261015d573567ffffffffffffffff908181168091036102c3576024356001600160a01b03918282168092036102bf576044359283168093036102bf5791859185936020975260028752838320908352865282822090825285522054169051908152f35b8580fd5b8380fd5b8382346101b657816003193601126101b6576020906001600160a01b03600154169051908152f35b919050346102c357600319906060368301126101595767ffffffffffffffff918585358481116101b657610326903690880161067a565b926024358681116102c35761033e9036908a0161067a565b906044358881116102bf5789948b948694889486946103609036908a0161067a565b9290946001600160a01b039c8d600154169a631b08846f60e11b895288016060905260648801906103909261070b565b90848783030160248801526103a49261070b565b918483030160448501526103b79261070b565b03925af19384156106705786946104dc575b5061016084019280845116918186511688526020956002875284892097610100820198838a51168b528852858a209460a0830195848751168c52895284878c2054161015610499575091818694928287958c60809b99837f18eb7dc8e9eac54221f8bfdf39676d5acfbf070a849d17ff7653087b2c221b619e9c51169184845116815260028c528c8683832091511682528c52818120868a511682528c52209067ffffffffffffffff1982541617905551169751169251169351169382519586528501528301526060820152a180f35b855162461bcd60e51b8152908101889052600d60248201527f6e6f74206c6174657374207478000000000000000000000000000000000000006044820152606490fd5b9093503d8087833e6104ee81836106ac565b8101602091828183031261066c5780519085821161062457019061018092838383031261062457845193840184811087821117610659578552610530836106e2565b845261053d8184016106e2565b818501528483015185850152606083015160608501526080830151608085015261056960a084016106f7565b60a085015260c083015160c085015260e083015186811161065557830182601f8201121561065557805190878211610642578651936105b1601f8401601f19168501866106ac565b82855283838301011161063e57908a9291835b8281106106285750508301015260e08301526101006105e48183016106f7565b90830152610120808201519063ffffffff821682036106245783015261014080820151908301526106196101608092016106e2565b90820152925f6103c9565b8880fd5b8181018401518682018501528c945083016105c4565b8a80fd5b634e487b7160e01b8b5260418a5260248bfd5b8980fd5b634e487b7160e01b8a526041895260248afd5b8780fd5b82513d88823e3d90fd5b9181601f840112156106a85782359167ffffffffffffffff83116106a857602083818601950101116106a857565b5f80fd5b90601f8019910116810190811067ffffffffffffffff8211176106ce57604052565b634e487b7160e01b5f52604160045260245ffd5b519067ffffffffffffffff821682036106a857565b51906001600160a01b03821682036106a857565b908060209392818452848401375f828201840152601f01601f1916010190565b1561073257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfea264697066735822122051c2370a22b7c456176014fdb3ba1c78c6b2d2750d565f12f712bac32901558f64736f6c63430008150033",
}

// FriendshipABI is the input ABI used to generate the binding from.
// Deprecated: Use FriendshipMetaData.ABI instead.
var FriendshipABI = FriendshipMetaData.ABI

// FriendshipBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FriendshipMetaData.Bin instead.
var FriendshipBin = FriendshipMetaData.Bin

// DeployFriendship deploys a new Ethereum contract, binding an instance of Friendship to it.
func DeployFriendship(auth *bind.TransactOpts, backend bind.ContractBackend, _txVerifier common.Address) (common.Address, *types.Transaction, *Friendship, error) {
	parsed, err := FriendshipMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FriendshipBin), backend, _txVerifier)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Friendship{FriendshipCaller: FriendshipCaller{contract: contract}, FriendshipTransactor: FriendshipTransactor{contract: contract}, FriendshipFilterer: FriendshipFilterer{contract: contract}}, nil
}

// Friendship is an auto generated Go binding around an Ethereum contract.
type Friendship struct {
	FriendshipCaller     // Read-only binding to the contract
	FriendshipTransactor // Write-only binding to the contract
	FriendshipFilterer   // Log filterer for contract events
}

// FriendshipCaller is an auto generated read-only Go binding around an Ethereum contract.
type FriendshipCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FriendshipTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FriendshipTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FriendshipFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FriendshipFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FriendshipSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FriendshipSession struct {
	Contract     *Friendship       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FriendshipCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FriendshipCallerSession struct {
	Contract *FriendshipCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// FriendshipTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FriendshipTransactorSession struct {
	Contract     *FriendshipTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// FriendshipRaw is an auto generated low-level Go binding around an Ethereum contract.
type FriendshipRaw struct {
	Contract *Friendship // Generic contract binding to access the raw methods on
}

// FriendshipCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FriendshipCallerRaw struct {
	Contract *FriendshipCaller // Generic read-only contract binding to access the raw methods on
}

// FriendshipTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FriendshipTransactorRaw struct {
	Contract *FriendshipTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFriendship creates a new instance of Friendship, bound to a specific deployed contract.
func NewFriendship(address common.Address, backend bind.ContractBackend) (*Friendship, error) {
	contract, err := bindFriendship(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Friendship{FriendshipCaller: FriendshipCaller{contract: contract}, FriendshipTransactor: FriendshipTransactor{contract: contract}, FriendshipFilterer: FriendshipFilterer{contract: contract}}, nil
}

// NewFriendshipCaller creates a new read-only instance of Friendship, bound to a specific deployed contract.
func NewFriendshipCaller(address common.Address, caller bind.ContractCaller) (*FriendshipCaller, error) {
	contract, err := bindFriendship(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FriendshipCaller{contract: contract}, nil
}

// NewFriendshipTransactor creates a new write-only instance of Friendship, bound to a specific deployed contract.
func NewFriendshipTransactor(address common.Address, transactor bind.ContractTransactor) (*FriendshipTransactor, error) {
	contract, err := bindFriendship(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FriendshipTransactor{contract: contract}, nil
}

// NewFriendshipFilterer creates a new log filterer instance of Friendship, bound to a specific deployed contract.
func NewFriendshipFilterer(address common.Address, filterer bind.ContractFilterer) (*FriendshipFilterer, error) {
	contract, err := bindFriendship(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FriendshipFilterer{contract: contract}, nil
}

// bindFriendship binds a generic wrapper to an already deployed contract.
func bindFriendship(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := FriendshipMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Friendship *FriendshipRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Friendship.Contract.FriendshipCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Friendship *FriendshipRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Friendship.Contract.FriendshipTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Friendship *FriendshipRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Friendship.Contract.FriendshipTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Friendship *FriendshipCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Friendship.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Friendship *FriendshipTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Friendship.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Friendship *FriendshipTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Friendship.Contract.contract.Transact(opts, method, params...)
}

// LastestTxTimestamps is a free data retrieval call binding the contract method 0x29416442.
//
// Solidity: function lastestTxTimestamps(uint64 , address , address ) view returns(uint64)
func (_Friendship *FriendshipCaller) LastestTxTimestamps(opts *bind.CallOpts, arg0 uint64, arg1 common.Address, arg2 common.Address) (uint64, error) {
	var out []interface{}
	err := _Friendship.contract.Call(opts, &out, "lastestTxTimestamps", arg0, arg1, arg2)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// LastestTxTimestamps is a free data retrieval call binding the contract method 0x29416442.
//
// Solidity: function lastestTxTimestamps(uint64 , address , address ) view returns(uint64)
func (_Friendship *FriendshipSession) LastestTxTimestamps(arg0 uint64, arg1 common.Address, arg2 common.Address) (uint64, error) {
	return _Friendship.Contract.LastestTxTimestamps(&_Friendship.CallOpts, arg0, arg1, arg2)
}

// LastestTxTimestamps is a free data retrieval call binding the contract method 0x29416442.
//
// Solidity: function lastestTxTimestamps(uint64 , address , address ) view returns(uint64)
func (_Friendship *FriendshipCallerSession) LastestTxTimestamps(arg0 uint64, arg1 common.Address, arg2 common.Address) (uint64, error) {
	return _Friendship.Contract.LastestTxTimestamps(&_Friendship.CallOpts, arg0, arg1, arg2)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Friendship *FriendshipCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Friendship.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Friendship *FriendshipSession) Owner() (common.Address, error) {
	return _Friendship.Contract.Owner(&_Friendship.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Friendship *FriendshipCallerSession) Owner() (common.Address, error) {
	return _Friendship.Contract.Owner(&_Friendship.CallOpts)
}

// TxVerifier is a free data retrieval call binding the contract method 0x23a45c93.
//
// Solidity: function txVerifier() view returns(address)
func (_Friendship *FriendshipCaller) TxVerifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Friendship.contract.Call(opts, &out, "txVerifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TxVerifier is a free data retrieval call binding the contract method 0x23a45c93.
//
// Solidity: function txVerifier() view returns(address)
func (_Friendship *FriendshipSession) TxVerifier() (common.Address, error) {
	return _Friendship.Contract.TxVerifier(&_Friendship.CallOpts)
}

// TxVerifier is a free data retrieval call binding the contract method 0x23a45c93.
//
// Solidity: function txVerifier() view returns(address)
func (_Friendship *FriendshipCallerSession) TxVerifier() (common.Address, error) {
	return _Friendship.Contract.TxVerifier(&_Friendship.CallOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Friendship *FriendshipTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Friendship.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Friendship *FriendshipSession) RenounceOwnership() (*types.Transaction, error) {
	return _Friendship.Contract.RenounceOwnership(&_Friendship.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Friendship *FriendshipTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Friendship.Contract.RenounceOwnership(&_Friendship.TransactOpts)
}

// SetTxVerifier is a paid mutator transaction binding the contract method 0x9f38dbf9.
//
// Solidity: function setTxVerifier(address _txVerifier) returns()
func (_Friendship *FriendshipTransactor) SetTxVerifier(opts *bind.TransactOpts, _txVerifier common.Address) (*types.Transaction, error) {
	return _Friendship.contract.Transact(opts, "setTxVerifier", _txVerifier)
}

// SetTxVerifier is a paid mutator transaction binding the contract method 0x9f38dbf9.
//
// Solidity: function setTxVerifier(address _txVerifier) returns()
func (_Friendship *FriendshipSession) SetTxVerifier(_txVerifier common.Address) (*types.Transaction, error) {
	return _Friendship.Contract.SetTxVerifier(&_Friendship.TransactOpts, _txVerifier)
}

// SetTxVerifier is a paid mutator transaction binding the contract method 0x9f38dbf9.
//
// Solidity: function setTxVerifier(address _txVerifier) returns()
func (_Friendship *FriendshipTransactorSession) SetTxVerifier(_txVerifier common.Address) (*types.Transaction, error) {
	return _Friendship.Contract.SetTxVerifier(&_Friendship.TransactOpts, _txVerifier)
}

// SubmitFriendshipProof is a paid mutator transaction binding the contract method 0x20b35420.
//
// Solidity: function submitFriendshipProof(bytes _tx, bytes _proof, bytes _auxiBlkVerifyInfo) returns()
func (_Friendship *FriendshipTransactor) SubmitFriendshipProof(opts *bind.TransactOpts, _tx []byte, _proof []byte, _auxiBlkVerifyInfo []byte) (*types.Transaction, error) {
	return _Friendship.contract.Transact(opts, "submitFriendshipProof", _tx, _proof, _auxiBlkVerifyInfo)
}

// SubmitFriendshipProof is a paid mutator transaction binding the contract method 0x20b35420.
//
// Solidity: function submitFriendshipProof(bytes _tx, bytes _proof, bytes _auxiBlkVerifyInfo) returns()
func (_Friendship *FriendshipSession) SubmitFriendshipProof(_tx []byte, _proof []byte, _auxiBlkVerifyInfo []byte) (*types.Transaction, error) {
	return _Friendship.Contract.SubmitFriendshipProof(&_Friendship.TransactOpts, _tx, _proof, _auxiBlkVerifyInfo)
}

// SubmitFriendshipProof is a paid mutator transaction binding the contract method 0x20b35420.
//
// Solidity: function submitFriendshipProof(bytes _tx, bytes _proof, bytes _auxiBlkVerifyInfo) returns()
func (_Friendship *FriendshipTransactorSession) SubmitFriendshipProof(_tx []byte, _proof []byte, _auxiBlkVerifyInfo []byte) (*types.Transaction, error) {
	return _Friendship.Contract.SubmitFriendshipProof(&_Friendship.TransactOpts, _tx, _proof, _auxiBlkVerifyInfo)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Friendship *FriendshipTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Friendship.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Friendship *FriendshipSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Friendship.Contract.TransferOwnership(&_Friendship.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Friendship *FriendshipTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Friendship.Contract.TransferOwnership(&_Friendship.TransactOpts, newOwner)
}

// FriendshipOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Friendship contract.
type FriendshipOwnershipTransferredIterator struct {
	Event *FriendshipOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FriendshipOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FriendshipOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FriendshipOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FriendshipOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FriendshipOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FriendshipOwnershipTransferred represents a OwnershipTransferred event raised by the Friendship contract.
type FriendshipOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Friendship *FriendshipFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*FriendshipOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Friendship.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &FriendshipOwnershipTransferredIterator{contract: _Friendship.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Friendship *FriendshipFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *FriendshipOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Friendship.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FriendshipOwnershipTransferred)
				if err := _Friendship.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Friendship *FriendshipFilterer) ParseOwnershipTransferred(log types.Log) (*FriendshipOwnershipTransferred, error) {
	event := new(FriendshipOwnershipTransferred)
	if err := _Friendship.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FriendshipVerifiedFriendshipIterator is returned from FilterVerifiedFriendship and is used to iterate over the raw logs and unpacked data for VerifiedFriendship events raised by the Friendship contract.
type FriendshipVerifiedFriendshipIterator struct {
	Event *FriendshipVerifiedFriendship // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *FriendshipVerifiedFriendshipIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(FriendshipVerifiedFriendship)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(FriendshipVerifiedFriendship)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *FriendshipVerifiedFriendshipIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *FriendshipVerifiedFriendshipIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// FriendshipVerifiedFriendship represents a VerifiedFriendship event raised by the Friendship contract.
type FriendshipVerifiedFriendship struct {
	ChainId   uint64
	From      common.Address
	To        common.Address
	Timestamp uint64
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterVerifiedFriendship is a free log retrieval operation binding the contract event 0x18eb7dc8e9eac54221f8bfdf39676d5acfbf070a849d17ff7653087b2c221b61.
//
// Solidity: event VerifiedFriendship(uint64 chainId, address from, address to, uint64 timestamp)
func (_Friendship *FriendshipFilterer) FilterVerifiedFriendship(opts *bind.FilterOpts) (*FriendshipVerifiedFriendshipIterator, error) {

	logs, sub, err := _Friendship.contract.FilterLogs(opts, "VerifiedFriendship")
	if err != nil {
		return nil, err
	}
	return &FriendshipVerifiedFriendshipIterator{contract: _Friendship.contract, event: "VerifiedFriendship", logs: logs, sub: sub}, nil
}

// WatchVerifiedFriendship is a free log subscription operation binding the contract event 0x18eb7dc8e9eac54221f8bfdf39676d5acfbf070a849d17ff7653087b2c221b61.
//
// Solidity: event VerifiedFriendship(uint64 chainId, address from, address to, uint64 timestamp)
func (_Friendship *FriendshipFilterer) WatchVerifiedFriendship(opts *bind.WatchOpts, sink chan<- *FriendshipVerifiedFriendship) (event.Subscription, error) {

	logs, sub, err := _Friendship.contract.WatchLogs(opts, "VerifiedFriendship")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(FriendshipVerifiedFriendship)
				if err := _Friendship.contract.UnpackLog(event, "VerifiedFriendship", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifiedFriendship is a log parse operation binding the contract event 0x18eb7dc8e9eac54221f8bfdf39676d5acfbf070a849d17ff7653087b2c221b61.
//
// Solidity: event VerifiedFriendship(uint64 chainId, address from, address to, uint64 timestamp)
func (_Friendship *FriendshipFilterer) ParseVerifiedFriendship(log types.Log) (*FriendshipVerifiedFriendship, error) {
	event := new(FriendshipVerifiedFriendship)
	if err := _Friendship.contract.UnpackLog(event, "VerifiedFriendship", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// FullMathMetaData contains all meta data concerning the FullMath contract.
var FullMathMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea264697066735822122033ffee2c7746df161f4673299db58fe37665d1a2e2b56847ceefe2353982af9d64736f6c63430008150033",
}

// FullMathABI is the input ABI used to generate the binding from.
// Deprecated: Use FullMathMetaData.ABI instead.
var FullMathABI = FullMathMetaData.ABI

// FullMathBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use FullMathMetaData.Bin instead.
var FullMathBin = FullMathMetaData.Bin

// DeployFullMath deploys a new Ethereum contract, binding an instance of FullMath to it.
func DeployFullMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *FullMath, error) {
	parsed, err := FullMathMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(FullMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &FullMath{FullMathCaller: FullMathCaller{contract: contract}, FullMathTransactor: FullMathTransactor{contract: contract}, FullMathFilterer: FullMathFilterer{contract: contract}}, nil
}

// FullMath is an auto generated Go binding around an Ethereum contract.
type FullMath struct {
	FullMathCaller     // Read-only binding to the contract
	FullMathTransactor // Write-only binding to the contract
	FullMathFilterer   // Log filterer for contract events
}

// FullMathCaller is an auto generated read-only Go binding around an Ethereum contract.
type FullMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FullMathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type FullMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FullMathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type FullMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// FullMathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type FullMathSession struct {
	Contract     *FullMath         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// FullMathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type FullMathCallerSession struct {
	Contract *FullMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// FullMathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type FullMathTransactorSession struct {
	Contract     *FullMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// FullMathRaw is an auto generated low-level Go binding around an Ethereum contract.
type FullMathRaw struct {
	Contract *FullMath // Generic contract binding to access the raw methods on
}

// FullMathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type FullMathCallerRaw struct {
	Contract *FullMathCaller // Generic read-only contract binding to access the raw methods on
}

// FullMathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type FullMathTransactorRaw struct {
	Contract *FullMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewFullMath creates a new instance of FullMath, bound to a specific deployed contract.
func NewFullMath(address common.Address, backend bind.ContractBackend) (*FullMath, error) {
	contract, err := bindFullMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &FullMath{FullMathCaller: FullMathCaller{contract: contract}, FullMathTransactor: FullMathTransactor{contract: contract}, FullMathFilterer: FullMathFilterer{contract: contract}}, nil
}

// NewFullMathCaller creates a new read-only instance of FullMath, bound to a specific deployed contract.
func NewFullMathCaller(address common.Address, caller bind.ContractCaller) (*FullMathCaller, error) {
	contract, err := bindFullMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &FullMathCaller{contract: contract}, nil
}

// NewFullMathTransactor creates a new write-only instance of FullMath, bound to a specific deployed contract.
func NewFullMathTransactor(address common.Address, transactor bind.ContractTransactor) (*FullMathTransactor, error) {
	contract, err := bindFullMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &FullMathTransactor{contract: contract}, nil
}

// NewFullMathFilterer creates a new log filterer instance of FullMath, bound to a specific deployed contract.
func NewFullMathFilterer(address common.Address, filterer bind.ContractFilterer) (*FullMathFilterer, error) {
	contract, err := bindFullMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &FullMathFilterer{contract: contract}, nil
}

// bindFullMath binds a generic wrapper to an already deployed contract.
func bindFullMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := FullMathMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FullMath *FullMathRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FullMath.Contract.FullMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FullMath *FullMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FullMath.Contract.FullMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FullMath *FullMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FullMath.Contract.FullMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_FullMath *FullMathCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _FullMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_FullMath *FullMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _FullMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_FullMath *FullMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _FullMath.Contract.contract.Transact(opts, method, params...)
}

// HelpersMetaData contains all meta data concerning the Helpers contract.
var HelpersMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212204b45aa94552366cebaa58da04c7347c9cf5cb53a299ff4de86a7e1662086cc0264736f6c63430008150033",
}

// HelpersABI is the input ABI used to generate the binding from.
// Deprecated: Use HelpersMetaData.ABI instead.
var HelpersABI = HelpersMetaData.ABI

// HelpersBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use HelpersMetaData.Bin instead.
var HelpersBin = HelpersMetaData.Bin

// DeployHelpers deploys a new Ethereum contract, binding an instance of Helpers to it.
func DeployHelpers(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Helpers, error) {
	parsed, err := HelpersMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(HelpersBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Helpers{HelpersCaller: HelpersCaller{contract: contract}, HelpersTransactor: HelpersTransactor{contract: contract}, HelpersFilterer: HelpersFilterer{contract: contract}}, nil
}

// Helpers is an auto generated Go binding around an Ethereum contract.
type Helpers struct {
	HelpersCaller     // Read-only binding to the contract
	HelpersTransactor // Write-only binding to the contract
	HelpersFilterer   // Log filterer for contract events
}

// HelpersCaller is an auto generated read-only Go binding around an Ethereum contract.
type HelpersCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HelpersTransactor is an auto generated write-only Go binding around an Ethereum contract.
type HelpersTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HelpersFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type HelpersFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HelpersSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type HelpersSession struct {
	Contract     *Helpers          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// HelpersCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type HelpersCallerSession struct {
	Contract *HelpersCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// HelpersTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type HelpersTransactorSession struct {
	Contract     *HelpersTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// HelpersRaw is an auto generated low-level Go binding around an Ethereum contract.
type HelpersRaw struct {
	Contract *Helpers // Generic contract binding to access the raw methods on
}

// HelpersCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type HelpersCallerRaw struct {
	Contract *HelpersCaller // Generic read-only contract binding to access the raw methods on
}

// HelpersTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type HelpersTransactorRaw struct {
	Contract *HelpersTransactor // Generic write-only contract binding to access the raw methods on
}

// NewHelpers creates a new instance of Helpers, bound to a specific deployed contract.
func NewHelpers(address common.Address, backend bind.ContractBackend) (*Helpers, error) {
	contract, err := bindHelpers(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Helpers{HelpersCaller: HelpersCaller{contract: contract}, HelpersTransactor: HelpersTransactor{contract: contract}, HelpersFilterer: HelpersFilterer{contract: contract}}, nil
}

// NewHelpersCaller creates a new read-only instance of Helpers, bound to a specific deployed contract.
func NewHelpersCaller(address common.Address, caller bind.ContractCaller) (*HelpersCaller, error) {
	contract, err := bindHelpers(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &HelpersCaller{contract: contract}, nil
}

// NewHelpersTransactor creates a new write-only instance of Helpers, bound to a specific deployed contract.
func NewHelpersTransactor(address common.Address, transactor bind.ContractTransactor) (*HelpersTransactor, error) {
	contract, err := bindHelpers(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &HelpersTransactor{contract: contract}, nil
}

// NewHelpersFilterer creates a new log filterer instance of Helpers, bound to a specific deployed contract.
func NewHelpersFilterer(address common.Address, filterer bind.ContractFilterer) (*HelpersFilterer, error) {
	contract, err := bindHelpers(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &HelpersFilterer{contract: contract}, nil
}

// bindHelpers binds a generic wrapper to an already deployed contract.
func bindHelpers(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := HelpersMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Helpers *HelpersRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Helpers.Contract.HelpersCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Helpers *HelpersRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Helpers.Contract.HelpersTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Helpers *HelpersRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Helpers.Contract.HelpersTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Helpers *HelpersCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Helpers.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Helpers *HelpersTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Helpers.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Helpers *HelpersTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Helpers.Contract.contract.Transact(opts, method, params...)
}

// HooksMetaData contains all meta data concerning the Hooks contract.
var HooksMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hooks\",\"type\":\"address\"}],\"name\":\"HookAddressNotValid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidHookResponse\",\"type\":\"error\"}]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220c970e1e0df85b85b27fb41b1f5f4ddf94147b867699654d4954d261afc336eee64736f6c63430008150033",
}

// HooksABI is the input ABI used to generate the binding from.
// Deprecated: Use HooksMetaData.ABI instead.
var HooksABI = HooksMetaData.ABI

// HooksBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use HooksMetaData.Bin instead.
var HooksBin = HooksMetaData.Bin

// DeployHooks deploys a new Ethereum contract, binding an instance of Hooks to it.
func DeployHooks(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Hooks, error) {
	parsed, err := HooksMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(HooksBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Hooks{HooksCaller: HooksCaller{contract: contract}, HooksTransactor: HooksTransactor{contract: contract}, HooksFilterer: HooksFilterer{contract: contract}}, nil
}

// Hooks is an auto generated Go binding around an Ethereum contract.
type Hooks struct {
	HooksCaller     // Read-only binding to the contract
	HooksTransactor // Write-only binding to the contract
	HooksFilterer   // Log filterer for contract events
}

// HooksCaller is an auto generated read-only Go binding around an Ethereum contract.
type HooksCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HooksTransactor is an auto generated write-only Go binding around an Ethereum contract.
type HooksTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HooksFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type HooksFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// HooksSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type HooksSession struct {
	Contract     *Hooks            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// HooksCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type HooksCallerSession struct {
	Contract *HooksCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// HooksTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type HooksTransactorSession struct {
	Contract     *HooksTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// HooksRaw is an auto generated low-level Go binding around an Ethereum contract.
type HooksRaw struct {
	Contract *Hooks // Generic contract binding to access the raw methods on
}

// HooksCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type HooksCallerRaw struct {
	Contract *HooksCaller // Generic read-only contract binding to access the raw methods on
}

// HooksTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type HooksTransactorRaw struct {
	Contract *HooksTransactor // Generic write-only contract binding to access the raw methods on
}

// NewHooks creates a new instance of Hooks, bound to a specific deployed contract.
func NewHooks(address common.Address, backend bind.ContractBackend) (*Hooks, error) {
	contract, err := bindHooks(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Hooks{HooksCaller: HooksCaller{contract: contract}, HooksTransactor: HooksTransactor{contract: contract}, HooksFilterer: HooksFilterer{contract: contract}}, nil
}

// NewHooksCaller creates a new read-only instance of Hooks, bound to a specific deployed contract.
func NewHooksCaller(address common.Address, caller bind.ContractCaller) (*HooksCaller, error) {
	contract, err := bindHooks(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &HooksCaller{contract: contract}, nil
}

// NewHooksTransactor creates a new write-only instance of Hooks, bound to a specific deployed contract.
func NewHooksTransactor(address common.Address, transactor bind.ContractTransactor) (*HooksTransactor, error) {
	contract, err := bindHooks(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &HooksTransactor{contract: contract}, nil
}

// NewHooksFilterer creates a new log filterer instance of Hooks, bound to a specific deployed contract.
func NewHooksFilterer(address common.Address, filterer bind.ContractFilterer) (*HooksFilterer, error) {
	contract, err := bindHooks(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &HooksFilterer{contract: contract}, nil
}

// bindHooks binds a generic wrapper to an already deployed contract.
func bindHooks(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := HooksMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Hooks *HooksRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Hooks.Contract.HooksCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Hooks *HooksRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Hooks.Contract.HooksTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Hooks *HooksRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Hooks.Contract.HooksTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Hooks *HooksCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Hooks.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Hooks *HooksTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Hooks.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Hooks *HooksTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Hooks.Contract.contract.Transact(opts, method, params...)
}

// IAnchorBlocksMetaData contains all meta data concerning the IAnchorBlocks contract.
var IAnchorBlocksMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"}],\"name\":\"blocks\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IAnchorBlocksABI is the input ABI used to generate the binding from.
// Deprecated: Use IAnchorBlocksMetaData.ABI instead.
var IAnchorBlocksABI = IAnchorBlocksMetaData.ABI

// IAnchorBlocks is an auto generated Go binding around an Ethereum contract.
type IAnchorBlocks struct {
	IAnchorBlocksCaller     // Read-only binding to the contract
	IAnchorBlocksTransactor // Write-only binding to the contract
	IAnchorBlocksFilterer   // Log filterer for contract events
}

// IAnchorBlocksCaller is an auto generated read-only Go binding around an Ethereum contract.
type IAnchorBlocksCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAnchorBlocksTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IAnchorBlocksTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAnchorBlocksFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IAnchorBlocksFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IAnchorBlocksSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IAnchorBlocksSession struct {
	Contract     *IAnchorBlocks    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IAnchorBlocksCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IAnchorBlocksCallerSession struct {
	Contract *IAnchorBlocksCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// IAnchorBlocksTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IAnchorBlocksTransactorSession struct {
	Contract     *IAnchorBlocksTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// IAnchorBlocksRaw is an auto generated low-level Go binding around an Ethereum contract.
type IAnchorBlocksRaw struct {
	Contract *IAnchorBlocks // Generic contract binding to access the raw methods on
}

// IAnchorBlocksCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IAnchorBlocksCallerRaw struct {
	Contract *IAnchorBlocksCaller // Generic read-only contract binding to access the raw methods on
}

// IAnchorBlocksTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IAnchorBlocksTransactorRaw struct {
	Contract *IAnchorBlocksTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIAnchorBlocks creates a new instance of IAnchorBlocks, bound to a specific deployed contract.
func NewIAnchorBlocks(address common.Address, backend bind.ContractBackend) (*IAnchorBlocks, error) {
	contract, err := bindIAnchorBlocks(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IAnchorBlocks{IAnchorBlocksCaller: IAnchorBlocksCaller{contract: contract}, IAnchorBlocksTransactor: IAnchorBlocksTransactor{contract: contract}, IAnchorBlocksFilterer: IAnchorBlocksFilterer{contract: contract}}, nil
}

// NewIAnchorBlocksCaller creates a new read-only instance of IAnchorBlocks, bound to a specific deployed contract.
func NewIAnchorBlocksCaller(address common.Address, caller bind.ContractCaller) (*IAnchorBlocksCaller, error) {
	contract, err := bindIAnchorBlocks(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IAnchorBlocksCaller{contract: contract}, nil
}

// NewIAnchorBlocksTransactor creates a new write-only instance of IAnchorBlocks, bound to a specific deployed contract.
func NewIAnchorBlocksTransactor(address common.Address, transactor bind.ContractTransactor) (*IAnchorBlocksTransactor, error) {
	contract, err := bindIAnchorBlocks(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IAnchorBlocksTransactor{contract: contract}, nil
}

// NewIAnchorBlocksFilterer creates a new log filterer instance of IAnchorBlocks, bound to a specific deployed contract.
func NewIAnchorBlocksFilterer(address common.Address, filterer bind.ContractFilterer) (*IAnchorBlocksFilterer, error) {
	contract, err := bindIAnchorBlocks(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IAnchorBlocksFilterer{contract: contract}, nil
}

// bindIAnchorBlocks binds a generic wrapper to an already deployed contract.
func bindIAnchorBlocks(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IAnchorBlocksMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAnchorBlocks *IAnchorBlocksRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IAnchorBlocks.Contract.IAnchorBlocksCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAnchorBlocks *IAnchorBlocksRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAnchorBlocks.Contract.IAnchorBlocksTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAnchorBlocks *IAnchorBlocksRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAnchorBlocks.Contract.IAnchorBlocksTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IAnchorBlocks *IAnchorBlocksCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IAnchorBlocks.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IAnchorBlocks *IAnchorBlocksTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IAnchorBlocks.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IAnchorBlocks *IAnchorBlocksTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IAnchorBlocks.Contract.contract.Transact(opts, method, params...)
}

// Blocks is a free data retrieval call binding the contract method 0xf25b3f99.
//
// Solidity: function blocks(uint256 blockNum) view returns(bytes32)
func (_IAnchorBlocks *IAnchorBlocksCaller) Blocks(opts *bind.CallOpts, blockNum *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _IAnchorBlocks.contract.Call(opts, &out, "blocks", blockNum)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Blocks is a free data retrieval call binding the contract method 0xf25b3f99.
//
// Solidity: function blocks(uint256 blockNum) view returns(bytes32)
func (_IAnchorBlocks *IAnchorBlocksSession) Blocks(blockNum *big.Int) ([32]byte, error) {
	return _IAnchorBlocks.Contract.Blocks(&_IAnchorBlocks.CallOpts, blockNum)
}

// Blocks is a free data retrieval call binding the contract method 0xf25b3f99.
//
// Solidity: function blocks(uint256 blockNum) view returns(bytes32)
func (_IAnchorBlocks *IAnchorBlocksCallerSession) Blocks(blockNum *big.Int) ([32]byte, error) {
	return _IAnchorBlocks.Contract.Blocks(&_IAnchorBlocks.CallOpts, blockNum)
}

// IBeaconVerifierMetaData contains all meta data concerning the IBeaconVerifier contract.
var IBeaconVerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"signingRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"syncCommitteePoseidonRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"participation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"structIBeaconVerifier.Proof\",\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"verifySignatureProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sszRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"poseidonRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"structIBeaconVerifier.Proof\",\"name\":\"p\",\"type\":\"tuple\"}],\"name\":\"verifySyncCommitteeRootMappingProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IBeaconVerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use IBeaconVerifierMetaData.ABI instead.
var IBeaconVerifierABI = IBeaconVerifierMetaData.ABI

// IBeaconVerifier is an auto generated Go binding around an Ethereum contract.
type IBeaconVerifier struct {
	IBeaconVerifierCaller     // Read-only binding to the contract
	IBeaconVerifierTransactor // Write-only binding to the contract
	IBeaconVerifierFilterer   // Log filterer for contract events
}

// IBeaconVerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type IBeaconVerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IBeaconVerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IBeaconVerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IBeaconVerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IBeaconVerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IBeaconVerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IBeaconVerifierSession struct {
	Contract     *IBeaconVerifier  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IBeaconVerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IBeaconVerifierCallerSession struct {
	Contract *IBeaconVerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// IBeaconVerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IBeaconVerifierTransactorSession struct {
	Contract     *IBeaconVerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// IBeaconVerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type IBeaconVerifierRaw struct {
	Contract *IBeaconVerifier // Generic contract binding to access the raw methods on
}

// IBeaconVerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IBeaconVerifierCallerRaw struct {
	Contract *IBeaconVerifierCaller // Generic read-only contract binding to access the raw methods on
}

// IBeaconVerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IBeaconVerifierTransactorRaw struct {
	Contract *IBeaconVerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIBeaconVerifier creates a new instance of IBeaconVerifier, bound to a specific deployed contract.
func NewIBeaconVerifier(address common.Address, backend bind.ContractBackend) (*IBeaconVerifier, error) {
	contract, err := bindIBeaconVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IBeaconVerifier{IBeaconVerifierCaller: IBeaconVerifierCaller{contract: contract}, IBeaconVerifierTransactor: IBeaconVerifierTransactor{contract: contract}, IBeaconVerifierFilterer: IBeaconVerifierFilterer{contract: contract}}, nil
}

// NewIBeaconVerifierCaller creates a new read-only instance of IBeaconVerifier, bound to a specific deployed contract.
func NewIBeaconVerifierCaller(address common.Address, caller bind.ContractCaller) (*IBeaconVerifierCaller, error) {
	contract, err := bindIBeaconVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IBeaconVerifierCaller{contract: contract}, nil
}

// NewIBeaconVerifierTransactor creates a new write-only instance of IBeaconVerifier, bound to a specific deployed contract.
func NewIBeaconVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*IBeaconVerifierTransactor, error) {
	contract, err := bindIBeaconVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IBeaconVerifierTransactor{contract: contract}, nil
}

// NewIBeaconVerifierFilterer creates a new log filterer instance of IBeaconVerifier, bound to a specific deployed contract.
func NewIBeaconVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*IBeaconVerifierFilterer, error) {
	contract, err := bindIBeaconVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IBeaconVerifierFilterer{contract: contract}, nil
}

// bindIBeaconVerifier binds a generic wrapper to an already deployed contract.
func bindIBeaconVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IBeaconVerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IBeaconVerifier *IBeaconVerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IBeaconVerifier.Contract.IBeaconVerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IBeaconVerifier *IBeaconVerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IBeaconVerifier.Contract.IBeaconVerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IBeaconVerifier *IBeaconVerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IBeaconVerifier.Contract.IBeaconVerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IBeaconVerifier *IBeaconVerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IBeaconVerifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IBeaconVerifier *IBeaconVerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IBeaconVerifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IBeaconVerifier *IBeaconVerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IBeaconVerifier.Contract.contract.Transact(opts, method, params...)
}

// VerifySignatureProof is a free data retrieval call binding the contract method 0x52356da0.
//
// Solidity: function verifySignatureProof(bytes32 signingRoot, bytes32 syncCommitteePoseidonRoot, uint256 participation, uint256 commitment, (uint256[2],uint256[2][2],uint256[2],uint256[2]) p) view returns(bool)
func (_IBeaconVerifier *IBeaconVerifierCaller) VerifySignatureProof(opts *bind.CallOpts, signingRoot [32]byte, syncCommitteePoseidonRoot [32]byte, participation *big.Int, commitment *big.Int, p IBeaconVerifierProof) (bool, error) {
	var out []interface{}
	err := _IBeaconVerifier.contract.Call(opts, &out, "verifySignatureProof", signingRoot, syncCommitteePoseidonRoot, participation, commitment, p)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifySignatureProof is a free data retrieval call binding the contract method 0x52356da0.
//
// Solidity: function verifySignatureProof(bytes32 signingRoot, bytes32 syncCommitteePoseidonRoot, uint256 participation, uint256 commitment, (uint256[2],uint256[2][2],uint256[2],uint256[2]) p) view returns(bool)
func (_IBeaconVerifier *IBeaconVerifierSession) VerifySignatureProof(signingRoot [32]byte, syncCommitteePoseidonRoot [32]byte, participation *big.Int, commitment *big.Int, p IBeaconVerifierProof) (bool, error) {
	return _IBeaconVerifier.Contract.VerifySignatureProof(&_IBeaconVerifier.CallOpts, signingRoot, syncCommitteePoseidonRoot, participation, commitment, p)
}

// VerifySignatureProof is a free data retrieval call binding the contract method 0x52356da0.
//
// Solidity: function verifySignatureProof(bytes32 signingRoot, bytes32 syncCommitteePoseidonRoot, uint256 participation, uint256 commitment, (uint256[2],uint256[2][2],uint256[2],uint256[2]) p) view returns(bool)
func (_IBeaconVerifier *IBeaconVerifierCallerSession) VerifySignatureProof(signingRoot [32]byte, syncCommitteePoseidonRoot [32]byte, participation *big.Int, commitment *big.Int, p IBeaconVerifierProof) (bool, error) {
	return _IBeaconVerifier.Contract.VerifySignatureProof(&_IBeaconVerifier.CallOpts, signingRoot, syncCommitteePoseidonRoot, participation, commitment, p)
}

// VerifySyncCommitteeRootMappingProof is a free data retrieval call binding the contract method 0x7a538781.
//
// Solidity: function verifySyncCommitteeRootMappingProof(bytes32 sszRoot, bytes32 poseidonRoot, (uint256[2],uint256[2][2],uint256[2],uint256[2]) p) view returns(bool)
func (_IBeaconVerifier *IBeaconVerifierCaller) VerifySyncCommitteeRootMappingProof(opts *bind.CallOpts, sszRoot [32]byte, poseidonRoot [32]byte, p IBeaconVerifierProof) (bool, error) {
	var out []interface{}
	err := _IBeaconVerifier.contract.Call(opts, &out, "verifySyncCommitteeRootMappingProof", sszRoot, poseidonRoot, p)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifySyncCommitteeRootMappingProof is a free data retrieval call binding the contract method 0x7a538781.
//
// Solidity: function verifySyncCommitteeRootMappingProof(bytes32 sszRoot, bytes32 poseidonRoot, (uint256[2],uint256[2][2],uint256[2],uint256[2]) p) view returns(bool)
func (_IBeaconVerifier *IBeaconVerifierSession) VerifySyncCommitteeRootMappingProof(sszRoot [32]byte, poseidonRoot [32]byte, p IBeaconVerifierProof) (bool, error) {
	return _IBeaconVerifier.Contract.VerifySyncCommitteeRootMappingProof(&_IBeaconVerifier.CallOpts, sszRoot, poseidonRoot, p)
}

// VerifySyncCommitteeRootMappingProof is a free data retrieval call binding the contract method 0x7a538781.
//
// Solidity: function verifySyncCommitteeRootMappingProof(bytes32 sszRoot, bytes32 poseidonRoot, (uint256[2],uint256[2][2],uint256[2],uint256[2]) p) view returns(bool)
func (_IBeaconVerifier *IBeaconVerifierCallerSession) VerifySyncCommitteeRootMappingProof(sszRoot [32]byte, poseidonRoot [32]byte, p IBeaconVerifierProof) (bool, error) {
	return _IBeaconVerifier.Contract.VerifySyncCommitteeRootMappingProof(&_IBeaconVerifier.CallOpts, sszRoot, poseidonRoot, p)
}

// IBlockChunksMetaData contains all meta data concerning the IBlockChunks contract.
var IBlockChunksMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"startBlockNumber\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"prevHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numFinal\",\"type\":\"uint32\"}],\"name\":\"UpdateEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"startBlockNumber\",\"type\":\"uint32\"}],\"name\":\"historicalRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"blkNum\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"claimedBlkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"prevHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"numFinal\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[7]\",\"name\":\"merkleProof\",\"type\":\"bytes32[7]\"}],\"internalType\":\"structIBlockChunks.BlockHashWitness\",\"name\":\"witness\",\"type\":\"tuple\"}],\"name\":\"isBlockHashValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"nextRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"nextNumFinal\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"}],\"name\":\"updateOld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"}],\"name\":\"updateRecent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IBlockChunksABI is the input ABI used to generate the binding from.
// Deprecated: Use IBlockChunksMetaData.ABI instead.
var IBlockChunksABI = IBlockChunksMetaData.ABI

// IBlockChunks is an auto generated Go binding around an Ethereum contract.
type IBlockChunks struct {
	IBlockChunksCaller     // Read-only binding to the contract
	IBlockChunksTransactor // Write-only binding to the contract
	IBlockChunksFilterer   // Log filterer for contract events
}

// IBlockChunksCaller is an auto generated read-only Go binding around an Ethereum contract.
type IBlockChunksCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IBlockChunksTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IBlockChunksTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IBlockChunksFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IBlockChunksFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IBlockChunksSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IBlockChunksSession struct {
	Contract     *IBlockChunks     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IBlockChunksCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IBlockChunksCallerSession struct {
	Contract *IBlockChunksCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// IBlockChunksTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IBlockChunksTransactorSession struct {
	Contract     *IBlockChunksTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// IBlockChunksRaw is an auto generated low-level Go binding around an Ethereum contract.
type IBlockChunksRaw struct {
	Contract *IBlockChunks // Generic contract binding to access the raw methods on
}

// IBlockChunksCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IBlockChunksCallerRaw struct {
	Contract *IBlockChunksCaller // Generic read-only contract binding to access the raw methods on
}

// IBlockChunksTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IBlockChunksTransactorRaw struct {
	Contract *IBlockChunksTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIBlockChunks creates a new instance of IBlockChunks, bound to a specific deployed contract.
func NewIBlockChunks(address common.Address, backend bind.ContractBackend) (*IBlockChunks, error) {
	contract, err := bindIBlockChunks(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IBlockChunks{IBlockChunksCaller: IBlockChunksCaller{contract: contract}, IBlockChunksTransactor: IBlockChunksTransactor{contract: contract}, IBlockChunksFilterer: IBlockChunksFilterer{contract: contract}}, nil
}

// NewIBlockChunksCaller creates a new read-only instance of IBlockChunks, bound to a specific deployed contract.
func NewIBlockChunksCaller(address common.Address, caller bind.ContractCaller) (*IBlockChunksCaller, error) {
	contract, err := bindIBlockChunks(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IBlockChunksCaller{contract: contract}, nil
}

// NewIBlockChunksTransactor creates a new write-only instance of IBlockChunks, bound to a specific deployed contract.
func NewIBlockChunksTransactor(address common.Address, transactor bind.ContractTransactor) (*IBlockChunksTransactor, error) {
	contract, err := bindIBlockChunks(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IBlockChunksTransactor{contract: contract}, nil
}

// NewIBlockChunksFilterer creates a new log filterer instance of IBlockChunks, bound to a specific deployed contract.
func NewIBlockChunksFilterer(address common.Address, filterer bind.ContractFilterer) (*IBlockChunksFilterer, error) {
	contract, err := bindIBlockChunks(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IBlockChunksFilterer{contract: contract}, nil
}

// bindIBlockChunks binds a generic wrapper to an already deployed contract.
func bindIBlockChunks(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IBlockChunksMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IBlockChunks *IBlockChunksRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IBlockChunks.Contract.IBlockChunksCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IBlockChunks *IBlockChunksRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IBlockChunks.Contract.IBlockChunksTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IBlockChunks *IBlockChunksRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IBlockChunks.Contract.IBlockChunksTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IBlockChunks *IBlockChunksCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IBlockChunks.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IBlockChunks *IBlockChunksTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IBlockChunks.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IBlockChunks *IBlockChunksTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IBlockChunks.Contract.contract.Transact(opts, method, params...)
}

// HistoricalRoots is a free data retrieval call binding the contract method 0xb551a187.
//
// Solidity: function historicalRoots(uint64 chainId, uint32 startBlockNumber) view returns(bytes32)
func (_IBlockChunks *IBlockChunksCaller) HistoricalRoots(opts *bind.CallOpts, chainId uint64, startBlockNumber uint32) ([32]byte, error) {
	var out []interface{}
	err := _IBlockChunks.contract.Call(opts, &out, "historicalRoots", chainId, startBlockNumber)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// HistoricalRoots is a free data retrieval call binding the contract method 0xb551a187.
//
// Solidity: function historicalRoots(uint64 chainId, uint32 startBlockNumber) view returns(bytes32)
func (_IBlockChunks *IBlockChunksSession) HistoricalRoots(chainId uint64, startBlockNumber uint32) ([32]byte, error) {
	return _IBlockChunks.Contract.HistoricalRoots(&_IBlockChunks.CallOpts, chainId, startBlockNumber)
}

// HistoricalRoots is a free data retrieval call binding the contract method 0xb551a187.
//
// Solidity: function historicalRoots(uint64 chainId, uint32 startBlockNumber) view returns(bytes32)
func (_IBlockChunks *IBlockChunksCallerSession) HistoricalRoots(chainId uint64, startBlockNumber uint32) ([32]byte, error) {
	return _IBlockChunks.Contract.HistoricalRoots(&_IBlockChunks.CallOpts, chainId, startBlockNumber)
}

// IsBlockHashValid is a free data retrieval call binding the contract method 0x544f73a4.
//
// Solidity: function isBlockHashValid((uint64,uint32,bytes32,bytes32,uint32,bytes32[7]) witness) view returns(bool)
func (_IBlockChunks *IBlockChunksCaller) IsBlockHashValid(opts *bind.CallOpts, witness IBlockChunksBlockHashWitness) (bool, error) {
	var out []interface{}
	err := _IBlockChunks.contract.Call(opts, &out, "isBlockHashValid", witness)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsBlockHashValid is a free data retrieval call binding the contract method 0x544f73a4.
//
// Solidity: function isBlockHashValid((uint64,uint32,bytes32,bytes32,uint32,bytes32[7]) witness) view returns(bool)
func (_IBlockChunks *IBlockChunksSession) IsBlockHashValid(witness IBlockChunksBlockHashWitness) (bool, error) {
	return _IBlockChunks.Contract.IsBlockHashValid(&_IBlockChunks.CallOpts, witness)
}

// IsBlockHashValid is a free data retrieval call binding the contract method 0x544f73a4.
//
// Solidity: function isBlockHashValid((uint64,uint32,bytes32,bytes32,uint32,bytes32[7]) witness) view returns(bool)
func (_IBlockChunks *IBlockChunksCallerSession) IsBlockHashValid(witness IBlockChunksBlockHashWitness) (bool, error) {
	return _IBlockChunks.Contract.IsBlockHashValid(&_IBlockChunks.CallOpts, witness)
}

// UpdateOld is a paid mutator transaction binding the contract method 0x52cfc560.
//
// Solidity: function updateOld(uint64 chainId, bytes32 nextRoot, uint32 nextNumFinal, bytes proofData) returns()
func (_IBlockChunks *IBlockChunksTransactor) UpdateOld(opts *bind.TransactOpts, chainId uint64, nextRoot [32]byte, nextNumFinal uint32, proofData []byte) (*types.Transaction, error) {
	return _IBlockChunks.contract.Transact(opts, "updateOld", chainId, nextRoot, nextNumFinal, proofData)
}

// UpdateOld is a paid mutator transaction binding the contract method 0x52cfc560.
//
// Solidity: function updateOld(uint64 chainId, bytes32 nextRoot, uint32 nextNumFinal, bytes proofData) returns()
func (_IBlockChunks *IBlockChunksSession) UpdateOld(chainId uint64, nextRoot [32]byte, nextNumFinal uint32, proofData []byte) (*types.Transaction, error) {
	return _IBlockChunks.Contract.UpdateOld(&_IBlockChunks.TransactOpts, chainId, nextRoot, nextNumFinal, proofData)
}

// UpdateOld is a paid mutator transaction binding the contract method 0x52cfc560.
//
// Solidity: function updateOld(uint64 chainId, bytes32 nextRoot, uint32 nextNumFinal, bytes proofData) returns()
func (_IBlockChunks *IBlockChunksTransactorSession) UpdateOld(chainId uint64, nextRoot [32]byte, nextNumFinal uint32, proofData []byte) (*types.Transaction, error) {
	return _IBlockChunks.Contract.UpdateOld(&_IBlockChunks.TransactOpts, chainId, nextRoot, nextNumFinal, proofData)
}

// UpdateRecent is a paid mutator transaction binding the contract method 0x50a26d48.
//
// Solidity: function updateRecent(uint64 chainId, bytes proofData) returns()
func (_IBlockChunks *IBlockChunksTransactor) UpdateRecent(opts *bind.TransactOpts, chainId uint64, proofData []byte) (*types.Transaction, error) {
	return _IBlockChunks.contract.Transact(opts, "updateRecent", chainId, proofData)
}

// UpdateRecent is a paid mutator transaction binding the contract method 0x50a26d48.
//
// Solidity: function updateRecent(uint64 chainId, bytes proofData) returns()
func (_IBlockChunks *IBlockChunksSession) UpdateRecent(chainId uint64, proofData []byte) (*types.Transaction, error) {
	return _IBlockChunks.Contract.UpdateRecent(&_IBlockChunks.TransactOpts, chainId, proofData)
}

// UpdateRecent is a paid mutator transaction binding the contract method 0x50a26d48.
//
// Solidity: function updateRecent(uint64 chainId, bytes proofData) returns()
func (_IBlockChunks *IBlockChunksTransactorSession) UpdateRecent(chainId uint64, proofData []byte) (*types.Transaction, error) {
	return _IBlockChunks.Contract.UpdateRecent(&_IBlockChunks.TransactOpts, chainId, proofData)
}

// IBlockChunksUpdateEventIterator is returned from FilterUpdateEvent and is used to iterate over the raw logs and unpacked data for UpdateEvent events raised by the IBlockChunks contract.
type IBlockChunksUpdateEventIterator struct {
	Event *IBlockChunksUpdateEvent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IBlockChunksUpdateEventIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IBlockChunksUpdateEvent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IBlockChunksUpdateEvent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IBlockChunksUpdateEventIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IBlockChunksUpdateEventIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IBlockChunksUpdateEvent represents a UpdateEvent event raised by the IBlockChunks contract.
type IBlockChunksUpdateEvent struct {
	ChainId          uint64
	StartBlockNumber uint32
	PrevHash         [32]byte
	Root             [32]byte
	NumFinal         uint32
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterUpdateEvent is a free log retrieval operation binding the contract event 0xa946b3d79b3150fec8e4d9ccc6100de98308a472f1ba57d23aeda162bb86e33e.
//
// Solidity: event UpdateEvent(uint64 chainId, uint32 startBlockNumber, bytes32 prevHash, bytes32 root, uint32 numFinal)
func (_IBlockChunks *IBlockChunksFilterer) FilterUpdateEvent(opts *bind.FilterOpts) (*IBlockChunksUpdateEventIterator, error) {

	logs, sub, err := _IBlockChunks.contract.FilterLogs(opts, "UpdateEvent")
	if err != nil {
		return nil, err
	}
	return &IBlockChunksUpdateEventIterator{contract: _IBlockChunks.contract, event: "UpdateEvent", logs: logs, sub: sub}, nil
}

// WatchUpdateEvent is a free log subscription operation binding the contract event 0xa946b3d79b3150fec8e4d9ccc6100de98308a472f1ba57d23aeda162bb86e33e.
//
// Solidity: event UpdateEvent(uint64 chainId, uint32 startBlockNumber, bytes32 prevHash, bytes32 root, uint32 numFinal)
func (_IBlockChunks *IBlockChunksFilterer) WatchUpdateEvent(opts *bind.WatchOpts, sink chan<- *IBlockChunksUpdateEvent) (event.Subscription, error) {

	logs, sub, err := _IBlockChunks.contract.WatchLogs(opts, "UpdateEvent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IBlockChunksUpdateEvent)
				if err := _IBlockChunks.contract.UnpackLog(event, "UpdateEvent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateEvent is a log parse operation binding the contract event 0xa946b3d79b3150fec8e4d9ccc6100de98308a472f1ba57d23aeda162bb86e33e.
//
// Solidity: event UpdateEvent(uint64 chainId, uint32 startBlockNumber, bytes32 prevHash, bytes32 root, uint32 numFinal)
func (_IBlockChunks *IBlockChunksFilterer) ParseUpdateEvent(log types.Log) (*IBlockChunksUpdateEvent, error) {
	event := new(IBlockChunksUpdateEvent)
	if err := _IBlockChunks.contract.UnpackLog(event, "UpdateEvent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IBrevisAppMetaData contains all meta data concerning the IBrevisApp contract.
var IBrevisAppMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_appCircuitOutput\",\"type\":\"bytes\"}],\"name\":\"callback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IBrevisAppABI is the input ABI used to generate the binding from.
// Deprecated: Use IBrevisAppMetaData.ABI instead.
var IBrevisAppABI = IBrevisAppMetaData.ABI

// IBrevisApp is an auto generated Go binding around an Ethereum contract.
type IBrevisApp struct {
	IBrevisAppCaller     // Read-only binding to the contract
	IBrevisAppTransactor // Write-only binding to the contract
	IBrevisAppFilterer   // Log filterer for contract events
}

// IBrevisAppCaller is an auto generated read-only Go binding around an Ethereum contract.
type IBrevisAppCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IBrevisAppTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IBrevisAppTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IBrevisAppFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IBrevisAppFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IBrevisAppSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IBrevisAppSession struct {
	Contract     *IBrevisApp       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IBrevisAppCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IBrevisAppCallerSession struct {
	Contract *IBrevisAppCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// IBrevisAppTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IBrevisAppTransactorSession struct {
	Contract     *IBrevisAppTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// IBrevisAppRaw is an auto generated low-level Go binding around an Ethereum contract.
type IBrevisAppRaw struct {
	Contract *IBrevisApp // Generic contract binding to access the raw methods on
}

// IBrevisAppCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IBrevisAppCallerRaw struct {
	Contract *IBrevisAppCaller // Generic read-only contract binding to access the raw methods on
}

// IBrevisAppTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IBrevisAppTransactorRaw struct {
	Contract *IBrevisAppTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIBrevisApp creates a new instance of IBrevisApp, bound to a specific deployed contract.
func NewIBrevisApp(address common.Address, backend bind.ContractBackend) (*IBrevisApp, error) {
	contract, err := bindIBrevisApp(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IBrevisApp{IBrevisAppCaller: IBrevisAppCaller{contract: contract}, IBrevisAppTransactor: IBrevisAppTransactor{contract: contract}, IBrevisAppFilterer: IBrevisAppFilterer{contract: contract}}, nil
}

// NewIBrevisAppCaller creates a new read-only instance of IBrevisApp, bound to a specific deployed contract.
func NewIBrevisAppCaller(address common.Address, caller bind.ContractCaller) (*IBrevisAppCaller, error) {
	contract, err := bindIBrevisApp(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IBrevisAppCaller{contract: contract}, nil
}

// NewIBrevisAppTransactor creates a new write-only instance of IBrevisApp, bound to a specific deployed contract.
func NewIBrevisAppTransactor(address common.Address, transactor bind.ContractTransactor) (*IBrevisAppTransactor, error) {
	contract, err := bindIBrevisApp(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IBrevisAppTransactor{contract: contract}, nil
}

// NewIBrevisAppFilterer creates a new log filterer instance of IBrevisApp, bound to a specific deployed contract.
func NewIBrevisAppFilterer(address common.Address, filterer bind.ContractFilterer) (*IBrevisAppFilterer, error) {
	contract, err := bindIBrevisApp(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IBrevisAppFilterer{contract: contract}, nil
}

// bindIBrevisApp binds a generic wrapper to an already deployed contract.
func bindIBrevisApp(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IBrevisAppMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IBrevisApp *IBrevisAppRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IBrevisApp.Contract.IBrevisAppCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IBrevisApp *IBrevisAppRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IBrevisApp.Contract.IBrevisAppTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IBrevisApp *IBrevisAppRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IBrevisApp.Contract.IBrevisAppTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IBrevisApp *IBrevisAppCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IBrevisApp.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IBrevisApp *IBrevisAppTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IBrevisApp.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IBrevisApp *IBrevisAppTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IBrevisApp.Contract.contract.Transact(opts, method, params...)
}

// Callback is a paid mutator transaction binding the contract method 0xeefe3f0b.
//
// Solidity: function callback(bytes32 _requestId, bytes _appCircuitOutput) returns()
func (_IBrevisApp *IBrevisAppTransactor) Callback(opts *bind.TransactOpts, _requestId [32]byte, _appCircuitOutput []byte) (*types.Transaction, error) {
	return _IBrevisApp.contract.Transact(opts, "callback", _requestId, _appCircuitOutput)
}

// Callback is a paid mutator transaction binding the contract method 0xeefe3f0b.
//
// Solidity: function callback(bytes32 _requestId, bytes _appCircuitOutput) returns()
func (_IBrevisApp *IBrevisAppSession) Callback(_requestId [32]byte, _appCircuitOutput []byte) (*types.Transaction, error) {
	return _IBrevisApp.Contract.Callback(&_IBrevisApp.TransactOpts, _requestId, _appCircuitOutput)
}

// Callback is a paid mutator transaction binding the contract method 0xeefe3f0b.
//
// Solidity: function callback(bytes32 _requestId, bytes _appCircuitOutput) returns()
func (_IBrevisApp *IBrevisAppTransactorSession) Callback(_requestId [32]byte, _appCircuitOutput []byte) (*types.Transaction, error) {
	return _IBrevisApp.Contract.Callback(&_IBrevisApp.TransactOpts, _requestId, _appCircuitOutput)
}

// IBrevisProofMetaData contains all meta data concerning the IBrevisProof contract.
var IBrevisProofMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"getProofData\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"commitHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"vkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appCommitHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"appVkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBrevis.ProofData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"hasProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_proofWithPubInputs\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_withAppProof\",\"type\":\"bool\"}],\"name\":\"submitProof\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"blkNum\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiptIndex\",\"type\":\"uint64\"},{\"components\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"valueFromTopic\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"valueIndex\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"logTopic0\",\"type\":\"bytes32\"}],\"internalType\":\"structBrevis.LogExtraInfo\",\"name\":\"logExtraInfo\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"logIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"structBrevis.LogInfo[5]\",\"name\":\"logs\",\"type\":\"tuple[5]\"}],\"internalType\":\"structBrevis.ReceiptInfo[]\",\"name\":\"receipts\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"slotValue\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"}],\"internalType\":\"structBrevis.StorageInfo[]\",\"name\":\"stores\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leafHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"blockTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"leafRlpPrefix\",\"type\":\"bytes\"}],\"internalType\":\"structBrevis.TransactionInfo[]\",\"name\":\"txs\",\"type\":\"tuple[]\"}],\"internalType\":\"structBrevis.ExtractInfos\",\"name\":\"_info\",\"type\":\"tuple\"}],\"name\":\"validateRequest\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IBrevisProofABI is the input ABI used to generate the binding from.
// Deprecated: Use IBrevisProofMetaData.ABI instead.
var IBrevisProofABI = IBrevisProofMetaData.ABI

// IBrevisProof is an auto generated Go binding around an Ethereum contract.
type IBrevisProof struct {
	IBrevisProofCaller     // Read-only binding to the contract
	IBrevisProofTransactor // Write-only binding to the contract
	IBrevisProofFilterer   // Log filterer for contract events
}

// IBrevisProofCaller is an auto generated read-only Go binding around an Ethereum contract.
type IBrevisProofCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IBrevisProofTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IBrevisProofTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IBrevisProofFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IBrevisProofFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IBrevisProofSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IBrevisProofSession struct {
	Contract     *IBrevisProof     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IBrevisProofCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IBrevisProofCallerSession struct {
	Contract *IBrevisProofCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// IBrevisProofTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IBrevisProofTransactorSession struct {
	Contract     *IBrevisProofTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// IBrevisProofRaw is an auto generated low-level Go binding around an Ethereum contract.
type IBrevisProofRaw struct {
	Contract *IBrevisProof // Generic contract binding to access the raw methods on
}

// IBrevisProofCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IBrevisProofCallerRaw struct {
	Contract *IBrevisProofCaller // Generic read-only contract binding to access the raw methods on
}

// IBrevisProofTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IBrevisProofTransactorRaw struct {
	Contract *IBrevisProofTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIBrevisProof creates a new instance of IBrevisProof, bound to a specific deployed contract.
func NewIBrevisProof(address common.Address, backend bind.ContractBackend) (*IBrevisProof, error) {
	contract, err := bindIBrevisProof(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IBrevisProof{IBrevisProofCaller: IBrevisProofCaller{contract: contract}, IBrevisProofTransactor: IBrevisProofTransactor{contract: contract}, IBrevisProofFilterer: IBrevisProofFilterer{contract: contract}}, nil
}

// NewIBrevisProofCaller creates a new read-only instance of IBrevisProof, bound to a specific deployed contract.
func NewIBrevisProofCaller(address common.Address, caller bind.ContractCaller) (*IBrevisProofCaller, error) {
	contract, err := bindIBrevisProof(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IBrevisProofCaller{contract: contract}, nil
}

// NewIBrevisProofTransactor creates a new write-only instance of IBrevisProof, bound to a specific deployed contract.
func NewIBrevisProofTransactor(address common.Address, transactor bind.ContractTransactor) (*IBrevisProofTransactor, error) {
	contract, err := bindIBrevisProof(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IBrevisProofTransactor{contract: contract}, nil
}

// NewIBrevisProofFilterer creates a new log filterer instance of IBrevisProof, bound to a specific deployed contract.
func NewIBrevisProofFilterer(address common.Address, filterer bind.ContractFilterer) (*IBrevisProofFilterer, error) {
	contract, err := bindIBrevisProof(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IBrevisProofFilterer{contract: contract}, nil
}

// bindIBrevisProof binds a generic wrapper to an already deployed contract.
func bindIBrevisProof(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IBrevisProofMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IBrevisProof *IBrevisProofRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IBrevisProof.Contract.IBrevisProofCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IBrevisProof *IBrevisProofRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IBrevisProof.Contract.IBrevisProofTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IBrevisProof *IBrevisProofRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IBrevisProof.Contract.IBrevisProofTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IBrevisProof *IBrevisProofCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IBrevisProof.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IBrevisProof *IBrevisProofTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IBrevisProof.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IBrevisProof *IBrevisProofTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IBrevisProof.Contract.contract.Transact(opts, method, params...)
}

// GetProofData is a free data retrieval call binding the contract method 0x9546bf00.
//
// Solidity: function getProofData(bytes32 _requestId) view returns((bytes32,uint256,bytes32,bytes32,bytes32,bytes32))
func (_IBrevisProof *IBrevisProofCaller) GetProofData(opts *bind.CallOpts, _requestId [32]byte) (BrevisProofData, error) {
	var out []interface{}
	err := _IBrevisProof.contract.Call(opts, &out, "getProofData", _requestId)

	if err != nil {
		return *new(BrevisProofData), err
	}

	out0 := *abi.ConvertType(out[0], new(BrevisProofData)).(*BrevisProofData)

	return out0, err

}

// GetProofData is a free data retrieval call binding the contract method 0x9546bf00.
//
// Solidity: function getProofData(bytes32 _requestId) view returns((bytes32,uint256,bytes32,bytes32,bytes32,bytes32))
func (_IBrevisProof *IBrevisProofSession) GetProofData(_requestId [32]byte) (BrevisProofData, error) {
	return _IBrevisProof.Contract.GetProofData(&_IBrevisProof.CallOpts, _requestId)
}

// GetProofData is a free data retrieval call binding the contract method 0x9546bf00.
//
// Solidity: function getProofData(bytes32 _requestId) view returns((bytes32,uint256,bytes32,bytes32,bytes32,bytes32))
func (_IBrevisProof *IBrevisProofCallerSession) GetProofData(_requestId [32]byte) (BrevisProofData, error) {
	return _IBrevisProof.Contract.GetProofData(&_IBrevisProof.CallOpts, _requestId)
}

// HasProof is a free data retrieval call binding the contract method 0xe3d1e6d6.
//
// Solidity: function hasProof(bytes32 _requestId) view returns(bool)
func (_IBrevisProof *IBrevisProofCaller) HasProof(opts *bind.CallOpts, _requestId [32]byte) (bool, error) {
	var out []interface{}
	err := _IBrevisProof.contract.Call(opts, &out, "hasProof", _requestId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasProof is a free data retrieval call binding the contract method 0xe3d1e6d6.
//
// Solidity: function hasProof(bytes32 _requestId) view returns(bool)
func (_IBrevisProof *IBrevisProofSession) HasProof(_requestId [32]byte) (bool, error) {
	return _IBrevisProof.Contract.HasProof(&_IBrevisProof.CallOpts, _requestId)
}

// HasProof is a free data retrieval call binding the contract method 0xe3d1e6d6.
//
// Solidity: function hasProof(bytes32 _requestId) view returns(bool)
func (_IBrevisProof *IBrevisProofCallerSession) HasProof(_requestId [32]byte) (bool, error) {
	return _IBrevisProof.Contract.HasProof(&_IBrevisProof.CallOpts, _requestId)
}

// ValidateRequest is a free data retrieval call binding the contract method 0x7c08aa74.
//
// Solidity: function validateRequest(bytes32 _requestId, uint64 _chainId, (bytes32,(uint64,uint64,((uint8,uint64,address,bytes32),uint64,bytes32)[5])[],(bytes32,address,bytes32,bytes32,uint64)[],(bytes32,bytes32,uint64,uint64,bytes)[]) _info) view returns()
func (_IBrevisProof *IBrevisProofCaller) ValidateRequest(opts *bind.CallOpts, _requestId [32]byte, _chainId uint64, _info BrevisExtractInfos) error {
	var out []interface{}
	err := _IBrevisProof.contract.Call(opts, &out, "validateRequest", _requestId, _chainId, _info)

	if err != nil {
		return err
	}

	return err

}

// ValidateRequest is a free data retrieval call binding the contract method 0x7c08aa74.
//
// Solidity: function validateRequest(bytes32 _requestId, uint64 _chainId, (bytes32,(uint64,uint64,((uint8,uint64,address,bytes32),uint64,bytes32)[5])[],(bytes32,address,bytes32,bytes32,uint64)[],(bytes32,bytes32,uint64,uint64,bytes)[]) _info) view returns()
func (_IBrevisProof *IBrevisProofSession) ValidateRequest(_requestId [32]byte, _chainId uint64, _info BrevisExtractInfos) error {
	return _IBrevisProof.Contract.ValidateRequest(&_IBrevisProof.CallOpts, _requestId, _chainId, _info)
}

// ValidateRequest is a free data retrieval call binding the contract method 0x7c08aa74.
//
// Solidity: function validateRequest(bytes32 _requestId, uint64 _chainId, (bytes32,(uint64,uint64,((uint8,uint64,address,bytes32),uint64,bytes32)[5])[],(bytes32,address,bytes32,bytes32,uint64)[],(bytes32,bytes32,uint64,uint64,bytes)[]) _info) view returns()
func (_IBrevisProof *IBrevisProofCallerSession) ValidateRequest(_requestId [32]byte, _chainId uint64, _info BrevisExtractInfos) error {
	return _IBrevisProof.Contract.ValidateRequest(&_IBrevisProof.CallOpts, _requestId, _chainId, _info)
}

// SubmitProof is a paid mutator transaction binding the contract method 0x25e49034.
//
// Solidity: function submitProof(uint64 _chainId, bytes _proofWithPubInputs, bool _withAppProof) returns(bytes32 _requestId)
func (_IBrevisProof *IBrevisProofTransactor) SubmitProof(opts *bind.TransactOpts, _chainId uint64, _proofWithPubInputs []byte, _withAppProof bool) (*types.Transaction, error) {
	return _IBrevisProof.contract.Transact(opts, "submitProof", _chainId, _proofWithPubInputs, _withAppProof)
}

// SubmitProof is a paid mutator transaction binding the contract method 0x25e49034.
//
// Solidity: function submitProof(uint64 _chainId, bytes _proofWithPubInputs, bool _withAppProof) returns(bytes32 _requestId)
func (_IBrevisProof *IBrevisProofSession) SubmitProof(_chainId uint64, _proofWithPubInputs []byte, _withAppProof bool) (*types.Transaction, error) {
	return _IBrevisProof.Contract.SubmitProof(&_IBrevisProof.TransactOpts, _chainId, _proofWithPubInputs, _withAppProof)
}

// SubmitProof is a paid mutator transaction binding the contract method 0x25e49034.
//
// Solidity: function submitProof(uint64 _chainId, bytes _proofWithPubInputs, bool _withAppProof) returns(bytes32 _requestId)
func (_IBrevisProof *IBrevisProofTransactorSession) SubmitProof(_chainId uint64, _proofWithPubInputs []byte, _withAppProof bool) (*types.Transaction, error) {
	return _IBrevisProof.Contract.SubmitProof(&_IBrevisProof.TransactOpts, _chainId, _proofWithPubInputs, _withAppProof)
}

// IBrevisUniNFTMetaData contains all meta data concerning the IBrevisUniNFT contract.
var IBrevisUniNFTMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IBrevisUniNFTABI is the input ABI used to generate the binding from.
// Deprecated: Use IBrevisUniNFTMetaData.ABI instead.
var IBrevisUniNFTABI = IBrevisUniNFTMetaData.ABI

// IBrevisUniNFT is an auto generated Go binding around an Ethereum contract.
type IBrevisUniNFT struct {
	IBrevisUniNFTCaller     // Read-only binding to the contract
	IBrevisUniNFTTransactor // Write-only binding to the contract
	IBrevisUniNFTFilterer   // Log filterer for contract events
}

// IBrevisUniNFTCaller is an auto generated read-only Go binding around an Ethereum contract.
type IBrevisUniNFTCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IBrevisUniNFTTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IBrevisUniNFTTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IBrevisUniNFTFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IBrevisUniNFTFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IBrevisUniNFTSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IBrevisUniNFTSession struct {
	Contract     *IBrevisUniNFT    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IBrevisUniNFTCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IBrevisUniNFTCallerSession struct {
	Contract *IBrevisUniNFTCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// IBrevisUniNFTTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IBrevisUniNFTTransactorSession struct {
	Contract     *IBrevisUniNFTTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// IBrevisUniNFTRaw is an auto generated low-level Go binding around an Ethereum contract.
type IBrevisUniNFTRaw struct {
	Contract *IBrevisUniNFT // Generic contract binding to access the raw methods on
}

// IBrevisUniNFTCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IBrevisUniNFTCallerRaw struct {
	Contract *IBrevisUniNFTCaller // Generic read-only contract binding to access the raw methods on
}

// IBrevisUniNFTTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IBrevisUniNFTTransactorRaw struct {
	Contract *IBrevisUniNFTTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIBrevisUniNFT creates a new instance of IBrevisUniNFT, bound to a specific deployed contract.
func NewIBrevisUniNFT(address common.Address, backend bind.ContractBackend) (*IBrevisUniNFT, error) {
	contract, err := bindIBrevisUniNFT(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IBrevisUniNFT{IBrevisUniNFTCaller: IBrevisUniNFTCaller{contract: contract}, IBrevisUniNFTTransactor: IBrevisUniNFTTransactor{contract: contract}, IBrevisUniNFTFilterer: IBrevisUniNFTFilterer{contract: contract}}, nil
}

// NewIBrevisUniNFTCaller creates a new read-only instance of IBrevisUniNFT, bound to a specific deployed contract.
func NewIBrevisUniNFTCaller(address common.Address, caller bind.ContractCaller) (*IBrevisUniNFTCaller, error) {
	contract, err := bindIBrevisUniNFT(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IBrevisUniNFTCaller{contract: contract}, nil
}

// NewIBrevisUniNFTTransactor creates a new write-only instance of IBrevisUniNFT, bound to a specific deployed contract.
func NewIBrevisUniNFTTransactor(address common.Address, transactor bind.ContractTransactor) (*IBrevisUniNFTTransactor, error) {
	contract, err := bindIBrevisUniNFT(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IBrevisUniNFTTransactor{contract: contract}, nil
}

// NewIBrevisUniNFTFilterer creates a new log filterer instance of IBrevisUniNFT, bound to a specific deployed contract.
func NewIBrevisUniNFTFilterer(address common.Address, filterer bind.ContractFilterer) (*IBrevisUniNFTFilterer, error) {
	contract, err := bindIBrevisUniNFT(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IBrevisUniNFTFilterer{contract: contract}, nil
}

// bindIBrevisUniNFT binds a generic wrapper to an already deployed contract.
func bindIBrevisUniNFT(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IBrevisUniNFTMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IBrevisUniNFT *IBrevisUniNFTRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IBrevisUniNFT.Contract.IBrevisUniNFTCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IBrevisUniNFT *IBrevisUniNFTRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IBrevisUniNFT.Contract.IBrevisUniNFTTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IBrevisUniNFT *IBrevisUniNFTRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IBrevisUniNFT.Contract.IBrevisUniNFTTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IBrevisUniNFT *IBrevisUniNFTCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IBrevisUniNFT.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IBrevisUniNFT *IBrevisUniNFTTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IBrevisUniNFT.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IBrevisUniNFT *IBrevisUniNFTTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IBrevisUniNFT.Contract.contract.Transact(opts, method, params...)
}

// Mint is a paid mutator transaction binding the contract method 0x6a627842.
//
// Solidity: function mint(address to) returns()
func (_IBrevisUniNFT *IBrevisUniNFTTransactor) Mint(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _IBrevisUniNFT.contract.Transact(opts, "mint", to)
}

// Mint is a paid mutator transaction binding the contract method 0x6a627842.
//
// Solidity: function mint(address to) returns()
func (_IBrevisUniNFT *IBrevisUniNFTSession) Mint(to common.Address) (*types.Transaction, error) {
	return _IBrevisUniNFT.Contract.Mint(&_IBrevisUniNFT.TransactOpts, to)
}

// Mint is a paid mutator transaction binding the contract method 0x6a627842.
//
// Solidity: function mint(address to) returns()
func (_IBrevisUniNFT *IBrevisUniNFTTransactorSession) Mint(to common.Address) (*types.Transaction, error) {
	return _IBrevisUniNFT.Contract.Mint(&_IBrevisUniNFT.TransactOpts, to)
}

// IDynamicFeeManagerMetaData contains all meta data concerning the IDynamicFeeManager contract.
var IDynamicFeeManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"structIPoolManager.SwapParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IDynamicFeeManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use IDynamicFeeManagerMetaData.ABI instead.
var IDynamicFeeManagerABI = IDynamicFeeManagerMetaData.ABI

// IDynamicFeeManager is an auto generated Go binding around an Ethereum contract.
type IDynamicFeeManager struct {
	IDynamicFeeManagerCaller     // Read-only binding to the contract
	IDynamicFeeManagerTransactor // Write-only binding to the contract
	IDynamicFeeManagerFilterer   // Log filterer for contract events
}

// IDynamicFeeManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type IDynamicFeeManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDynamicFeeManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IDynamicFeeManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDynamicFeeManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IDynamicFeeManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IDynamicFeeManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IDynamicFeeManagerSession struct {
	Contract     *IDynamicFeeManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// IDynamicFeeManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IDynamicFeeManagerCallerSession struct {
	Contract *IDynamicFeeManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// IDynamicFeeManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IDynamicFeeManagerTransactorSession struct {
	Contract     *IDynamicFeeManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// IDynamicFeeManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type IDynamicFeeManagerRaw struct {
	Contract *IDynamicFeeManager // Generic contract binding to access the raw methods on
}

// IDynamicFeeManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IDynamicFeeManagerCallerRaw struct {
	Contract *IDynamicFeeManagerCaller // Generic read-only contract binding to access the raw methods on
}

// IDynamicFeeManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IDynamicFeeManagerTransactorRaw struct {
	Contract *IDynamicFeeManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIDynamicFeeManager creates a new instance of IDynamicFeeManager, bound to a specific deployed contract.
func NewIDynamicFeeManager(address common.Address, backend bind.ContractBackend) (*IDynamicFeeManager, error) {
	contract, err := bindIDynamicFeeManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IDynamicFeeManager{IDynamicFeeManagerCaller: IDynamicFeeManagerCaller{contract: contract}, IDynamicFeeManagerTransactor: IDynamicFeeManagerTransactor{contract: contract}, IDynamicFeeManagerFilterer: IDynamicFeeManagerFilterer{contract: contract}}, nil
}

// NewIDynamicFeeManagerCaller creates a new read-only instance of IDynamicFeeManager, bound to a specific deployed contract.
func NewIDynamicFeeManagerCaller(address common.Address, caller bind.ContractCaller) (*IDynamicFeeManagerCaller, error) {
	contract, err := bindIDynamicFeeManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IDynamicFeeManagerCaller{contract: contract}, nil
}

// NewIDynamicFeeManagerTransactor creates a new write-only instance of IDynamicFeeManager, bound to a specific deployed contract.
func NewIDynamicFeeManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*IDynamicFeeManagerTransactor, error) {
	contract, err := bindIDynamicFeeManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IDynamicFeeManagerTransactor{contract: contract}, nil
}

// NewIDynamicFeeManagerFilterer creates a new log filterer instance of IDynamicFeeManager, bound to a specific deployed contract.
func NewIDynamicFeeManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*IDynamicFeeManagerFilterer, error) {
	contract, err := bindIDynamicFeeManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IDynamicFeeManagerFilterer{contract: contract}, nil
}

// bindIDynamicFeeManager binds a generic wrapper to an already deployed contract.
func bindIDynamicFeeManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IDynamicFeeManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IDynamicFeeManager *IDynamicFeeManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IDynamicFeeManager.Contract.IDynamicFeeManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IDynamicFeeManager *IDynamicFeeManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IDynamicFeeManager.Contract.IDynamicFeeManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IDynamicFeeManager *IDynamicFeeManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IDynamicFeeManager.Contract.IDynamicFeeManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IDynamicFeeManager *IDynamicFeeManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IDynamicFeeManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IDynamicFeeManager *IDynamicFeeManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IDynamicFeeManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IDynamicFeeManager *IDynamicFeeManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IDynamicFeeManager.Contract.contract.Transact(opts, method, params...)
}

// GetFee is a paid mutator transaction binding the contract method 0x2ab7a3e2.
//
// Solidity: function getFee(address sender, (address,address,uint24,int24,address) key, (bool,int256,uint160) params, bytes data) returns(uint24)
func (_IDynamicFeeManager *IDynamicFeeManagerTransactor) GetFee(opts *bind.TransactOpts, sender common.Address, key PoolKey, params IPoolManagerSwapParams, data []byte) (*types.Transaction, error) {
	return _IDynamicFeeManager.contract.Transact(opts, "getFee", sender, key, params, data)
}

// GetFee is a paid mutator transaction binding the contract method 0x2ab7a3e2.
//
// Solidity: function getFee(address sender, (address,address,uint24,int24,address) key, (bool,int256,uint160) params, bytes data) returns(uint24)
func (_IDynamicFeeManager *IDynamicFeeManagerSession) GetFee(sender common.Address, key PoolKey, params IPoolManagerSwapParams, data []byte) (*types.Transaction, error) {
	return _IDynamicFeeManager.Contract.GetFee(&_IDynamicFeeManager.TransactOpts, sender, key, params, data)
}

// GetFee is a paid mutator transaction binding the contract method 0x2ab7a3e2.
//
// Solidity: function getFee(address sender, (address,address,uint24,int24,address) key, (bool,int256,uint160) params, bytes data) returns(uint24)
func (_IDynamicFeeManager *IDynamicFeeManagerTransactorSession) GetFee(sender common.Address, key PoolKey, params IPoolManagerSwapParams, data []byte) (*types.Transaction, error) {
	return _IDynamicFeeManager.Contract.GetFee(&_IDynamicFeeManager.TransactOpts, sender, key, params, data)
}

// IERC1155MetaData contains all meta data concerning the IERC1155 contract.
var IERC1155MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IERC1155ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC1155MetaData.ABI instead.
var IERC1155ABI = IERC1155MetaData.ABI

// IERC1155 is an auto generated Go binding around an Ethereum contract.
type IERC1155 struct {
	IERC1155Caller     // Read-only binding to the contract
	IERC1155Transactor // Write-only binding to the contract
	IERC1155Filterer   // Log filterer for contract events
}

// IERC1155Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC1155Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC1155Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC1155Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC1155Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC1155Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC1155Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC1155Session struct {
	Contract     *IERC1155         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC1155CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC1155CallerSession struct {
	Contract *IERC1155Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// IERC1155TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC1155TransactorSession struct {
	Contract     *IERC1155Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// IERC1155Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC1155Raw struct {
	Contract *IERC1155 // Generic contract binding to access the raw methods on
}

// IERC1155CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC1155CallerRaw struct {
	Contract *IERC1155Caller // Generic read-only contract binding to access the raw methods on
}

// IERC1155TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC1155TransactorRaw struct {
	Contract *IERC1155Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC1155 creates a new instance of IERC1155, bound to a specific deployed contract.
func NewIERC1155(address common.Address, backend bind.ContractBackend) (*IERC1155, error) {
	contract, err := bindIERC1155(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC1155{IERC1155Caller: IERC1155Caller{contract: contract}, IERC1155Transactor: IERC1155Transactor{contract: contract}, IERC1155Filterer: IERC1155Filterer{contract: contract}}, nil
}

// NewIERC1155Caller creates a new read-only instance of IERC1155, bound to a specific deployed contract.
func NewIERC1155Caller(address common.Address, caller bind.ContractCaller) (*IERC1155Caller, error) {
	contract, err := bindIERC1155(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC1155Caller{contract: contract}, nil
}

// NewIERC1155Transactor creates a new write-only instance of IERC1155, bound to a specific deployed contract.
func NewIERC1155Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC1155Transactor, error) {
	contract, err := bindIERC1155(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC1155Transactor{contract: contract}, nil
}

// NewIERC1155Filterer creates a new log filterer instance of IERC1155, bound to a specific deployed contract.
func NewIERC1155Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC1155Filterer, error) {
	contract, err := bindIERC1155(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC1155Filterer{contract: contract}, nil
}

// bindIERC1155 binds a generic wrapper to an already deployed contract.
func bindIERC1155(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC1155MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC1155 *IERC1155Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC1155.Contract.IERC1155Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC1155 *IERC1155Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC1155.Contract.IERC1155Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC1155 *IERC1155Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC1155.Contract.IERC1155Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC1155 *IERC1155CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC1155.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC1155 *IERC1155TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC1155.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC1155 *IERC1155TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC1155.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_IERC1155 *IERC1155Caller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IERC1155.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_IERC1155 *IERC1155Session) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _IERC1155.Contract.BalanceOf(&_IERC1155.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_IERC1155 *IERC1155CallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _IERC1155.Contract.BalanceOf(&_IERC1155.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_IERC1155 *IERC1155Caller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _IERC1155.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_IERC1155 *IERC1155Session) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _IERC1155.Contract.BalanceOfBatch(&_IERC1155.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_IERC1155 *IERC1155CallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _IERC1155.Contract.BalanceOfBatch(&_IERC1155.CallOpts, accounts, ids)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_IERC1155 *IERC1155Caller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _IERC1155.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_IERC1155 *IERC1155Session) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _IERC1155.Contract.IsApprovedForAll(&_IERC1155.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_IERC1155 *IERC1155CallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _IERC1155.Contract.IsApprovedForAll(&_IERC1155.CallOpts, account, operator)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC1155 *IERC1155Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _IERC1155.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC1155 *IERC1155Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC1155.Contract.SupportsInterface(&_IERC1155.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC1155 *IERC1155CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC1155.Contract.SupportsInterface(&_IERC1155.CallOpts, interfaceId)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_IERC1155 *IERC1155Transactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _IERC1155.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_IERC1155 *IERC1155Session) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _IERC1155.Contract.SafeBatchTransferFrom(&_IERC1155.TransactOpts, from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_IERC1155 *IERC1155TransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _IERC1155.Contract.SafeBatchTransferFrom(&_IERC1155.TransactOpts, from, to, ids, amounts, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_IERC1155 *IERC1155Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC1155.contract.Transact(opts, "safeTransferFrom", from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_IERC1155 *IERC1155Session) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC1155.Contract.SafeTransferFrom(&_IERC1155.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_IERC1155 *IERC1155TransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC1155.Contract.SafeTransferFrom(&_IERC1155.TransactOpts, from, to, id, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_IERC1155 *IERC1155Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _IERC1155.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_IERC1155 *IERC1155Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _IERC1155.Contract.SetApprovalForAll(&_IERC1155.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_IERC1155 *IERC1155TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _IERC1155.Contract.SetApprovalForAll(&_IERC1155.TransactOpts, operator, approved)
}

// IERC1155ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the IERC1155 contract.
type IERC1155ApprovalForAllIterator struct {
	Event *IERC1155ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC1155ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC1155ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC1155ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC1155ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC1155ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC1155ApprovalForAll represents a ApprovalForAll event raised by the IERC1155 contract.
type IERC1155ApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_IERC1155 *IERC1155Filterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*IERC1155ApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _IERC1155.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &IERC1155ApprovalForAllIterator{contract: _IERC1155.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_IERC1155 *IERC1155Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *IERC1155ApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _IERC1155.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC1155ApprovalForAll)
				if err := _IERC1155.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_IERC1155 *IERC1155Filterer) ParseApprovalForAll(log types.Log) (*IERC1155ApprovalForAll, error) {
	event := new(IERC1155ApprovalForAll)
	if err := _IERC1155.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC1155TransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the IERC1155 contract.
type IERC1155TransferBatchIterator struct {
	Event *IERC1155TransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC1155TransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC1155TransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC1155TransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC1155TransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC1155TransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC1155TransferBatch represents a TransferBatch event raised by the IERC1155 contract.
type IERC1155TransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_IERC1155 *IERC1155Filterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*IERC1155TransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC1155.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC1155TransferBatchIterator{contract: _IERC1155.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_IERC1155 *IERC1155Filterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *IERC1155TransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC1155.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC1155TransferBatch)
				if err := _IERC1155.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_IERC1155 *IERC1155Filterer) ParseTransferBatch(log types.Log) (*IERC1155TransferBatch, error) {
	event := new(IERC1155TransferBatch)
	if err := _IERC1155.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC1155TransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the IERC1155 contract.
type IERC1155TransferSingleIterator struct {
	Event *IERC1155TransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC1155TransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC1155TransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC1155TransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC1155TransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC1155TransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC1155TransferSingle represents a TransferSingle event raised by the IERC1155 contract.
type IERC1155TransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_IERC1155 *IERC1155Filterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*IERC1155TransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC1155.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC1155TransferSingleIterator{contract: _IERC1155.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_IERC1155 *IERC1155Filterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *IERC1155TransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC1155.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC1155TransferSingle)
				if err := _IERC1155.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_IERC1155 *IERC1155Filterer) ParseTransferSingle(log types.Log) (*IERC1155TransferSingle, error) {
	event := new(IERC1155TransferSingle)
	if err := _IERC1155.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC1155URIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the IERC1155 contract.
type IERC1155URIIterator struct {
	Event *IERC1155URI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC1155URIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC1155URI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC1155URI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC1155URIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC1155URIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC1155URI represents a URI event raised by the IERC1155 contract.
type IERC1155URI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_IERC1155 *IERC1155Filterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*IERC1155URIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _IERC1155.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &IERC1155URIIterator{contract: _IERC1155.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_IERC1155 *IERC1155Filterer) WatchURI(opts *bind.WatchOpts, sink chan<- *IERC1155URI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _IERC1155.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC1155URI)
				if err := _IERC1155.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_IERC1155 *IERC1155Filterer) ParseURI(log types.Log) (*IERC1155URI, error) {
	event := new(IERC1155URI)
	if err := _IERC1155.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC165MetaData contains all meta data concerning the IERC165 contract.
var IERC165MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IERC165ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC165MetaData.ABI instead.
var IERC165ABI = IERC165MetaData.ABI

// IERC165 is an auto generated Go binding around an Ethereum contract.
type IERC165 struct {
	IERC165Caller     // Read-only binding to the contract
	IERC165Transactor // Write-only binding to the contract
	IERC165Filterer   // Log filterer for contract events
}

// IERC165Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC165Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC165Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC165Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC165Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC165Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC165Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC165Session struct {
	Contract     *IERC165          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC165CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC165CallerSession struct {
	Contract *IERC165Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IERC165TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC165TransactorSession struct {
	Contract     *IERC165Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IERC165Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC165Raw struct {
	Contract *IERC165 // Generic contract binding to access the raw methods on
}

// IERC165CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC165CallerRaw struct {
	Contract *IERC165Caller // Generic read-only contract binding to access the raw methods on
}

// IERC165TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC165TransactorRaw struct {
	Contract *IERC165Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC165 creates a new instance of IERC165, bound to a specific deployed contract.
func NewIERC165(address common.Address, backend bind.ContractBackend) (*IERC165, error) {
	contract, err := bindIERC165(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC165{IERC165Caller: IERC165Caller{contract: contract}, IERC165Transactor: IERC165Transactor{contract: contract}, IERC165Filterer: IERC165Filterer{contract: contract}}, nil
}

// NewIERC165Caller creates a new read-only instance of IERC165, bound to a specific deployed contract.
func NewIERC165Caller(address common.Address, caller bind.ContractCaller) (*IERC165Caller, error) {
	contract, err := bindIERC165(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC165Caller{contract: contract}, nil
}

// NewIERC165Transactor creates a new write-only instance of IERC165, bound to a specific deployed contract.
func NewIERC165Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC165Transactor, error) {
	contract, err := bindIERC165(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC165Transactor{contract: contract}, nil
}

// NewIERC165Filterer creates a new log filterer instance of IERC165, bound to a specific deployed contract.
func NewIERC165Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC165Filterer, error) {
	contract, err := bindIERC165(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC165Filterer{contract: contract}, nil
}

// bindIERC165 binds a generic wrapper to an already deployed contract.
func bindIERC165(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC165MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC165 *IERC165Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC165.Contract.IERC165Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC165 *IERC165Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC165.Contract.IERC165Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC165 *IERC165Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC165.Contract.IERC165Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC165 *IERC165CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC165.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC165 *IERC165TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC165.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC165 *IERC165TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC165.Contract.contract.Transact(opts, method, params...)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC165 *IERC165Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _IERC165.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC165 *IERC165Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC165.Contract.SupportsInterface(&_IERC165.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC165 *IERC165CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC165.Contract.SupportsInterface(&_IERC165.CallOpts, interfaceId)
}

// IERC20MetaData contains all meta data concerning the IERC20 contract.
var IERC20MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20MetaData.ABI instead.
var IERC20ABI = IERC20MetaData.ABI

// IERC20 is an auto generated Go binding around an Ethereum contract.
type IERC20 struct {
	IERC20Caller     // Read-only binding to the contract
	IERC20Transactor // Write-only binding to the contract
	IERC20Filterer   // Log filterer for contract events
}

// IERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20Session struct {
	Contract     *IERC20           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20CallerSession struct {
	Contract *IERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20TransactorSession struct {
	Contract     *IERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20Raw struct {
	Contract *IERC20 // Generic contract binding to access the raw methods on
}

// IERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20CallerRaw struct {
	Contract *IERC20Caller // Generic read-only contract binding to access the raw methods on
}

// IERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20TransactorRaw struct {
	Contract *IERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20 creates a new instance of IERC20, bound to a specific deployed contract.
func NewIERC20(address common.Address, backend bind.ContractBackend) (*IERC20, error) {
	contract, err := bindIERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20{IERC20Caller: IERC20Caller{contract: contract}, IERC20Transactor: IERC20Transactor{contract: contract}, IERC20Filterer: IERC20Filterer{contract: contract}}, nil
}

// NewIERC20Caller creates a new read-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Caller(address common.Address, caller bind.ContractCaller) (*IERC20Caller, error) {
	contract, err := bindIERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Caller{contract: contract}, nil
}

// NewIERC20Transactor creates a new write-only instance of IERC20, bound to a specific deployed contract.
func NewIERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC20Transactor, error) {
	contract, err := bindIERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20Transactor{contract: contract}, nil
}

// NewIERC20Filterer creates a new log filterer instance of IERC20, bound to a specific deployed contract.
func NewIERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC20Filterer, error) {
	contract, err := bindIERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20Filterer{contract: contract}, nil
}

// bindIERC20 binds a generic wrapper to an already deployed contract.
func bindIERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC20MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.IERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.IERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20 *IERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20 *IERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20 *IERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20 *IERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20.Contract.Allowance(&_IERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20 *IERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20.Contract.BalanceOf(&_IERC20.CallOpts, account)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20Session) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20 *IERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _IERC20.Contract.TotalSupply(&_IERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Approve(&_IERC20.TransactOpts, spender, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.Transfer(&_IERC20.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20Session) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20 *IERC20TransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20.Contract.TransferFrom(&_IERC20.TransactOpts, from, to, amount)
}

// IERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20 contract.
type IERC20ApprovalIterator struct {
	Event *IERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Approval represents a Approval event raised by the IERC20 contract.
type IERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IERC20ApprovalIterator{contract: _IERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Approval)
				if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20 *IERC20Filterer) ParseApproval(log types.Log) (*IERC20Approval, error) {
	event := new(IERC20Approval)
	if err := _IERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20 contract.
type IERC20TransferIterator struct {
	Event *IERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20Transfer represents a Transfer event raised by the IERC20 contract.
type IERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC20TransferIterator{contract: _IERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20Transfer)
				if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20 *IERC20Filterer) ParseTransfer(log types.Log) (*IERC20Transfer, error) {
	event := new(IERC20Transfer)
	if err := _IERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20MetadataMetaData contains all meta data concerning the IERC20Metadata contract.
var IERC20MetadataMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC20MetadataABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20MetadataMetaData.ABI instead.
var IERC20MetadataABI = IERC20MetadataMetaData.ABI

// IERC20Metadata is an auto generated Go binding around an Ethereum contract.
type IERC20Metadata struct {
	IERC20MetadataCaller     // Read-only binding to the contract
	IERC20MetadataTransactor // Write-only binding to the contract
	IERC20MetadataFilterer   // Log filterer for contract events
}

// IERC20MetadataCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20MetadataCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20MetadataTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20MetadataTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20MetadataFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20MetadataFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20MetadataSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20MetadataSession struct {
	Contract     *IERC20Metadata   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20MetadataCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20MetadataCallerSession struct {
	Contract *IERC20MetadataCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// IERC20MetadataTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20MetadataTransactorSession struct {
	Contract     *IERC20MetadataTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IERC20MetadataRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20MetadataRaw struct {
	Contract *IERC20Metadata // Generic contract binding to access the raw methods on
}

// IERC20MetadataCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20MetadataCallerRaw struct {
	Contract *IERC20MetadataCaller // Generic read-only contract binding to access the raw methods on
}

// IERC20MetadataTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20MetadataTransactorRaw struct {
	Contract *IERC20MetadataTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20Metadata creates a new instance of IERC20Metadata, bound to a specific deployed contract.
func NewIERC20Metadata(address common.Address, backend bind.ContractBackend) (*IERC20Metadata, error) {
	contract, err := bindIERC20Metadata(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20Metadata{IERC20MetadataCaller: IERC20MetadataCaller{contract: contract}, IERC20MetadataTransactor: IERC20MetadataTransactor{contract: contract}, IERC20MetadataFilterer: IERC20MetadataFilterer{contract: contract}}, nil
}

// NewIERC20MetadataCaller creates a new read-only instance of IERC20Metadata, bound to a specific deployed contract.
func NewIERC20MetadataCaller(address common.Address, caller bind.ContractCaller) (*IERC20MetadataCaller, error) {
	contract, err := bindIERC20Metadata(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataCaller{contract: contract}, nil
}

// NewIERC20MetadataTransactor creates a new write-only instance of IERC20Metadata, bound to a specific deployed contract.
func NewIERC20MetadataTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC20MetadataTransactor, error) {
	contract, err := bindIERC20Metadata(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataTransactor{contract: contract}, nil
}

// NewIERC20MetadataFilterer creates a new log filterer instance of IERC20Metadata, bound to a specific deployed contract.
func NewIERC20MetadataFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC20MetadataFilterer, error) {
	contract, err := bindIERC20Metadata(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataFilterer{contract: contract}, nil
}

// bindIERC20Metadata binds a generic wrapper to an already deployed contract.
func bindIERC20Metadata(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC20MetadataMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Metadata *IERC20MetadataRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Metadata.Contract.IERC20MetadataCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Metadata *IERC20MetadataRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.IERC20MetadataTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Metadata *IERC20MetadataRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.IERC20MetadataTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Metadata *IERC20MetadataCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Metadata.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Metadata *IERC20MetadataTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Metadata *IERC20MetadataTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20Metadata.Contract.Allowance(&_IERC20Metadata.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20Metadata.Contract.Allowance(&_IERC20Metadata.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20Metadata.Contract.BalanceOf(&_IERC20Metadata.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20Metadata.Contract.BalanceOf(&_IERC20Metadata.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20Metadata *IERC20MetadataCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20Metadata *IERC20MetadataSession) Decimals() (uint8, error) {
	return _IERC20Metadata.Contract.Decimals(&_IERC20Metadata.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_IERC20Metadata *IERC20MetadataCallerSession) Decimals() (uint8, error) {
	return _IERC20Metadata.Contract.Decimals(&_IERC20Metadata.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20Metadata *IERC20MetadataCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20Metadata *IERC20MetadataSession) Name() (string, error) {
	return _IERC20Metadata.Contract.Name(&_IERC20Metadata.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC20Metadata *IERC20MetadataCallerSession) Name() (string, error) {
	return _IERC20Metadata.Contract.Name(&_IERC20Metadata.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20Metadata *IERC20MetadataCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20Metadata *IERC20MetadataSession) Symbol() (string, error) {
	return _IERC20Metadata.Contract.Symbol(&_IERC20Metadata.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC20Metadata *IERC20MetadataCallerSession) Symbol() (string, error) {
	return _IERC20Metadata.Contract.Symbol(&_IERC20Metadata.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Metadata.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20Metadata *IERC20MetadataSession) TotalSupply() (*big.Int, error) {
	return _IERC20Metadata.Contract.TotalSupply(&_IERC20Metadata.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_IERC20Metadata *IERC20MetadataCallerSession) TotalSupply() (*big.Int, error) {
	return _IERC20Metadata.Contract.TotalSupply(&_IERC20Metadata.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.Approve(&_IERC20Metadata.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.Approve(&_IERC20Metadata.TransactOpts, spender, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.Transfer(&_IERC20Metadata.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.Transfer(&_IERC20Metadata.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.TransferFrom(&_IERC20Metadata.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_IERC20Metadata *IERC20MetadataTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Metadata.Contract.TransferFrom(&_IERC20Metadata.TransactOpts, from, to, amount)
}

// IERC20MetadataApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20Metadata contract.
type IERC20MetadataApprovalIterator struct {
	Event *IERC20MetadataApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20MetadataApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20MetadataApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20MetadataApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20MetadataApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20MetadataApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20MetadataApproval represents a Approval event raised by the IERC20Metadata contract.
type IERC20MetadataApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20MetadataApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20Metadata.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataApprovalIterator{contract: _IERC20Metadata.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20MetadataApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20Metadata.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20MetadataApproval)
				if err := _IERC20Metadata.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) ParseApproval(log types.Log) (*IERC20MetadataApproval, error) {
	event := new(IERC20MetadataApproval)
	if err := _IERC20Metadata.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20MetadataTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20Metadata contract.
type IERC20MetadataTransferIterator struct {
	Event *IERC20MetadataTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20MetadataTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20MetadataTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20MetadataTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20MetadataTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20MetadataTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20MetadataTransfer represents a Transfer event raised by the IERC20Metadata contract.
type IERC20MetadataTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20MetadataTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20Metadata.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC20MetadataTransferIterator{contract: _IERC20Metadata.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20MetadataTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20Metadata.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20MetadataTransfer)
				if err := _IERC20Metadata.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Metadata *IERC20MetadataFilterer) ParseTransfer(log types.Log) (*IERC20MetadataTransfer, error) {
	event := new(IERC20MetadataTransfer)
	if err := _IERC20Metadata.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20MinimalMetaData contains all meta data concerning the IERC20Minimal contract.
var IERC20MinimalMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC20MinimalABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC20MinimalMetaData.ABI instead.
var IERC20MinimalABI = IERC20MinimalMetaData.ABI

// IERC20Minimal is an auto generated Go binding around an Ethereum contract.
type IERC20Minimal struct {
	IERC20MinimalCaller     // Read-only binding to the contract
	IERC20MinimalTransactor // Write-only binding to the contract
	IERC20MinimalFilterer   // Log filterer for contract events
}

// IERC20MinimalCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC20MinimalCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20MinimalTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC20MinimalTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20MinimalFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC20MinimalFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC20MinimalSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC20MinimalSession struct {
	Contract     *IERC20Minimal    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC20MinimalCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC20MinimalCallerSession struct {
	Contract *IERC20MinimalCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// IERC20MinimalTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC20MinimalTransactorSession struct {
	Contract     *IERC20MinimalTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// IERC20MinimalRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC20MinimalRaw struct {
	Contract *IERC20Minimal // Generic contract binding to access the raw methods on
}

// IERC20MinimalCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC20MinimalCallerRaw struct {
	Contract *IERC20MinimalCaller // Generic read-only contract binding to access the raw methods on
}

// IERC20MinimalTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC20MinimalTransactorRaw struct {
	Contract *IERC20MinimalTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC20Minimal creates a new instance of IERC20Minimal, bound to a specific deployed contract.
func NewIERC20Minimal(address common.Address, backend bind.ContractBackend) (*IERC20Minimal, error) {
	contract, err := bindIERC20Minimal(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC20Minimal{IERC20MinimalCaller: IERC20MinimalCaller{contract: contract}, IERC20MinimalTransactor: IERC20MinimalTransactor{contract: contract}, IERC20MinimalFilterer: IERC20MinimalFilterer{contract: contract}}, nil
}

// NewIERC20MinimalCaller creates a new read-only instance of IERC20Minimal, bound to a specific deployed contract.
func NewIERC20MinimalCaller(address common.Address, caller bind.ContractCaller) (*IERC20MinimalCaller, error) {
	contract, err := bindIERC20Minimal(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20MinimalCaller{contract: contract}, nil
}

// NewIERC20MinimalTransactor creates a new write-only instance of IERC20Minimal, bound to a specific deployed contract.
func NewIERC20MinimalTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC20MinimalTransactor, error) {
	contract, err := bindIERC20Minimal(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC20MinimalTransactor{contract: contract}, nil
}

// NewIERC20MinimalFilterer creates a new log filterer instance of IERC20Minimal, bound to a specific deployed contract.
func NewIERC20MinimalFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC20MinimalFilterer, error) {
	contract, err := bindIERC20Minimal(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC20MinimalFilterer{contract: contract}, nil
}

// bindIERC20Minimal binds a generic wrapper to an already deployed contract.
func bindIERC20Minimal(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC20MinimalMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Minimal *IERC20MinimalRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Minimal.Contract.IERC20MinimalCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Minimal *IERC20MinimalRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Minimal.Contract.IERC20MinimalTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Minimal *IERC20MinimalRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Minimal.Contract.IERC20MinimalTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC20Minimal *IERC20MinimalCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC20Minimal.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC20Minimal *IERC20MinimalTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC20Minimal.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC20Minimal *IERC20MinimalTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC20Minimal.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Minimal *IERC20MinimalCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Minimal.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Minimal *IERC20MinimalSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20Minimal.Contract.Allowance(&_IERC20Minimal.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_IERC20Minimal *IERC20MinimalCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _IERC20Minimal.Contract.Allowance(&_IERC20Minimal.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Minimal *IERC20MinimalCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC20Minimal.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Minimal *IERC20MinimalSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20Minimal.Contract.BalanceOf(&_IERC20Minimal.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_IERC20Minimal *IERC20MinimalCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _IERC20Minimal.Contract.BalanceOf(&_IERC20Minimal.CallOpts, account)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Minimal *IERC20MinimalTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Minimal.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Minimal *IERC20MinimalSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Minimal.Contract.Approve(&_IERC20Minimal.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_IERC20Minimal *IERC20MinimalTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Minimal.Contract.Approve(&_IERC20Minimal.TransactOpts, spender, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20Minimal *IERC20MinimalTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Minimal.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20Minimal *IERC20MinimalSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Minimal.Contract.Transfer(&_IERC20Minimal.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_IERC20Minimal *IERC20MinimalTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Minimal.Contract.Transfer(&_IERC20Minimal.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20Minimal *IERC20MinimalTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Minimal.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20Minimal *IERC20MinimalSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Minimal.Contract.TransferFrom(&_IERC20Minimal.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_IERC20Minimal *IERC20MinimalTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IERC20Minimal.Contract.TransferFrom(&_IERC20Minimal.TransactOpts, sender, recipient, amount)
}

// IERC20MinimalApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC20Minimal contract.
type IERC20MinimalApprovalIterator struct {
	Event *IERC20MinimalApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20MinimalApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20MinimalApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20MinimalApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20MinimalApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20MinimalApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20MinimalApproval represents a Approval event raised by the IERC20Minimal contract.
type IERC20MinimalApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Minimal *IERC20MinimalFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*IERC20MinimalApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20Minimal.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &IERC20MinimalApprovalIterator{contract: _IERC20Minimal.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Minimal *IERC20MinimalFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC20MinimalApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _IERC20Minimal.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20MinimalApproval)
				if err := _IERC20Minimal.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_IERC20Minimal *IERC20MinimalFilterer) ParseApproval(log types.Log) (*IERC20MinimalApproval, error) {
	event := new(IERC20MinimalApproval)
	if err := _IERC20Minimal.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC20MinimalTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC20Minimal contract.
type IERC20MinimalTransferIterator struct {
	Event *IERC20MinimalTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC20MinimalTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC20MinimalTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC20MinimalTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC20MinimalTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC20MinimalTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC20MinimalTransfer represents a Transfer event raised by the IERC20Minimal contract.
type IERC20MinimalTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Minimal *IERC20MinimalFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*IERC20MinimalTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20Minimal.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IERC20MinimalTransferIterator{contract: _IERC20Minimal.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Minimal *IERC20MinimalFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC20MinimalTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IERC20Minimal.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC20MinimalTransfer)
				if err := _IERC20Minimal.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_IERC20Minimal *IERC20MinimalFilterer) ParseTransfer(log types.Log) (*IERC20MinimalTransfer, error) {
	event := new(IERC20MinimalTransfer)
	if err := _IERC20Minimal.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721MetaData contains all meta data concerning the IERC721 contract.
var IERC721MetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC721ABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721MetaData.ABI instead.
var IERC721ABI = IERC721MetaData.ABI

// IERC721 is an auto generated Go binding around an Ethereum contract.
type IERC721 struct {
	IERC721Caller     // Read-only binding to the contract
	IERC721Transactor // Write-only binding to the contract
	IERC721Filterer   // Log filterer for contract events
}

// IERC721Caller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721Transactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721Session struct {
	Contract     *IERC721          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC721CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721CallerSession struct {
	Contract *IERC721Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// IERC721TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721TransactorSession struct {
	Contract     *IERC721Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IERC721Raw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721Raw struct {
	Contract *IERC721 // Generic contract binding to access the raw methods on
}

// IERC721CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721CallerRaw struct {
	Contract *IERC721Caller // Generic read-only contract binding to access the raw methods on
}

// IERC721TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721TransactorRaw struct {
	Contract *IERC721Transactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721 creates a new instance of IERC721, bound to a specific deployed contract.
func NewIERC721(address common.Address, backend bind.ContractBackend) (*IERC721, error) {
	contract, err := bindIERC721(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721{IERC721Caller: IERC721Caller{contract: contract}, IERC721Transactor: IERC721Transactor{contract: contract}, IERC721Filterer: IERC721Filterer{contract: contract}}, nil
}

// NewIERC721Caller creates a new read-only instance of IERC721, bound to a specific deployed contract.
func NewIERC721Caller(address common.Address, caller bind.ContractCaller) (*IERC721Caller, error) {
	contract, err := bindIERC721(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721Caller{contract: contract}, nil
}

// NewIERC721Transactor creates a new write-only instance of IERC721, bound to a specific deployed contract.
func NewIERC721Transactor(address common.Address, transactor bind.ContractTransactor) (*IERC721Transactor, error) {
	contract, err := bindIERC721(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721Transactor{contract: contract}, nil
}

// NewIERC721Filterer creates a new log filterer instance of IERC721, bound to a specific deployed contract.
func NewIERC721Filterer(address common.Address, filterer bind.ContractFilterer) (*IERC721Filterer, error) {
	contract, err := bindIERC721(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721Filterer{contract: contract}, nil
}

// bindIERC721 binds a generic wrapper to an already deployed contract.
func bindIERC721(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC721MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721 *IERC721Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721.Contract.IERC721Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721 *IERC721Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721.Contract.IERC721Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721 *IERC721Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721.Contract.IERC721Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721 *IERC721CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721 *IERC721TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721 *IERC721TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721 *IERC721Caller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721 *IERC721Session) BalanceOf(owner common.Address) (*big.Int, error) {
	return _IERC721.Contract.BalanceOf(&_IERC721.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721 *IERC721CallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _IERC721.Contract.BalanceOf(&_IERC721.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721 *IERC721Caller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721 *IERC721Session) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _IERC721.Contract.GetApproved(&_IERC721.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721 *IERC721CallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _IERC721.Contract.GetApproved(&_IERC721.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721 *IERC721Caller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721 *IERC721Session) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _IERC721.Contract.IsApprovedForAll(&_IERC721.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721 *IERC721CallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _IERC721.Contract.IsApprovedForAll(&_IERC721.CallOpts, owner, operator)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721 *IERC721Caller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721 *IERC721Session) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _IERC721.Contract.OwnerOf(&_IERC721.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721 *IERC721CallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _IERC721.Contract.OwnerOf(&_IERC721.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721 *IERC721Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _IERC721.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721 *IERC721Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC721.Contract.SupportsInterface(&_IERC721.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721 *IERC721CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC721.Contract.SupportsInterface(&_IERC721.CallOpts, interfaceId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Transactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Session) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.Approve(&_IERC721.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721 *IERC721TransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.Approve(&_IERC721.TransactOpts, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Session) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.SafeTransferFrom(&_IERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721TransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.SafeTransferFrom(&_IERC721.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721 *IERC721Transactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721 *IERC721Session) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721.Contract.SafeTransferFrom0(&_IERC721.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721 *IERC721TransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721.Contract.SafeTransferFrom0(&_IERC721.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721 *IERC721Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "setApprovalForAll", operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721 *IERC721Session) SetApprovalForAll(operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721.Contract.SetApprovalForAll(&_IERC721.TransactOpts, operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721 *IERC721TransactorSession) SetApprovalForAll(operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721.Contract.SetApprovalForAll(&_IERC721.TransactOpts, operator, _approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721Session) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.TransferFrom(&_IERC721.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721 *IERC721TransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721.Contract.TransferFrom(&_IERC721.TransactOpts, from, to, tokenId)
}

// IERC721ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC721 contract.
type IERC721ApprovalIterator struct {
	Event *IERC721Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721Approval represents a Approval event raised by the IERC721 contract.
type IERC721Approval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*IERC721ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721ApprovalIterator{contract: _IERC721.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC721Approval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721Approval)
				if err := _IERC721.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) ParseApproval(log types.Log) (*IERC721Approval, error) {
	event := new(IERC721Approval)
	if err := _IERC721.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the IERC721 contract.
type IERC721ApprovalForAllIterator struct {
	Event *IERC721ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721ApprovalForAll represents a ApprovalForAll event raised by the IERC721 contract.
type IERC721ApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721 *IERC721Filterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*IERC721ApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _IERC721.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &IERC721ApprovalForAllIterator{contract: _IERC721.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721 *IERC721Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *IERC721ApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _IERC721.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721ApprovalForAll)
				if err := _IERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721 *IERC721Filterer) ParseApprovalForAll(log types.Log) (*IERC721ApprovalForAll, error) {
	event := new(IERC721ApprovalForAll)
	if err := _IERC721.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC721 contract.
type IERC721TransferIterator struct {
	Event *IERC721Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721Transfer represents a Transfer event raised by the IERC721 contract.
type IERC721Transfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*IERC721TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721TransferIterator{contract: _IERC721.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC721Transfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721Transfer)
				if err := _IERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721 *IERC721Filterer) ParseTransfer(log types.Log) (*IERC721Transfer, error) {
	event := new(IERC721Transfer)
	if err := _IERC721.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721MetadataMetaData contains all meta data concerning the IERC721Metadata contract.
var IERC721MetadataMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC721MetadataABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721MetadataMetaData.ABI instead.
var IERC721MetadataABI = IERC721MetadataMetaData.ABI

// IERC721Metadata is an auto generated Go binding around an Ethereum contract.
type IERC721Metadata struct {
	IERC721MetadataCaller     // Read-only binding to the contract
	IERC721MetadataTransactor // Write-only binding to the contract
	IERC721MetadataFilterer   // Log filterer for contract events
}

// IERC721MetadataCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721MetadataCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721MetadataTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721MetadataTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721MetadataFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721MetadataFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721MetadataSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721MetadataSession struct {
	Contract     *IERC721Metadata  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC721MetadataCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721MetadataCallerSession struct {
	Contract *IERC721MetadataCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// IERC721MetadataTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721MetadataTransactorSession struct {
	Contract     *IERC721MetadataTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// IERC721MetadataRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721MetadataRaw struct {
	Contract *IERC721Metadata // Generic contract binding to access the raw methods on
}

// IERC721MetadataCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721MetadataCallerRaw struct {
	Contract *IERC721MetadataCaller // Generic read-only contract binding to access the raw methods on
}

// IERC721MetadataTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721MetadataTransactorRaw struct {
	Contract *IERC721MetadataTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721Metadata creates a new instance of IERC721Metadata, bound to a specific deployed contract.
func NewIERC721Metadata(address common.Address, backend bind.ContractBackend) (*IERC721Metadata, error) {
	contract, err := bindIERC721Metadata(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721Metadata{IERC721MetadataCaller: IERC721MetadataCaller{contract: contract}, IERC721MetadataTransactor: IERC721MetadataTransactor{contract: contract}, IERC721MetadataFilterer: IERC721MetadataFilterer{contract: contract}}, nil
}

// NewIERC721MetadataCaller creates a new read-only instance of IERC721Metadata, bound to a specific deployed contract.
func NewIERC721MetadataCaller(address common.Address, caller bind.ContractCaller) (*IERC721MetadataCaller, error) {
	contract, err := bindIERC721Metadata(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataCaller{contract: contract}, nil
}

// NewIERC721MetadataTransactor creates a new write-only instance of IERC721Metadata, bound to a specific deployed contract.
func NewIERC721MetadataTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC721MetadataTransactor, error) {
	contract, err := bindIERC721Metadata(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataTransactor{contract: contract}, nil
}

// NewIERC721MetadataFilterer creates a new log filterer instance of IERC721Metadata, bound to a specific deployed contract.
func NewIERC721MetadataFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC721MetadataFilterer, error) {
	contract, err := bindIERC721Metadata(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataFilterer{contract: contract}, nil
}

// bindIERC721Metadata binds a generic wrapper to an already deployed contract.
func bindIERC721Metadata(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC721MetadataMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Metadata *IERC721MetadataRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Metadata.Contract.IERC721MetadataCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Metadata *IERC721MetadataRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.IERC721MetadataTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Metadata *IERC721MetadataRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.IERC721MetadataTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Metadata *IERC721MetadataCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Metadata.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Metadata *IERC721MetadataTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Metadata *IERC721MetadataTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721Metadata *IERC721MetadataCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721Metadata *IERC721MetadataSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _IERC721Metadata.Contract.BalanceOf(&_IERC721Metadata.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256 balance)
func (_IERC721Metadata *IERC721MetadataCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _IERC721Metadata.Contract.BalanceOf(&_IERC721Metadata.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721Metadata *IERC721MetadataCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721Metadata *IERC721MetadataSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _IERC721Metadata.Contract.GetApproved(&_IERC721Metadata.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address operator)
func (_IERC721Metadata *IERC721MetadataCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _IERC721Metadata.Contract.GetApproved(&_IERC721Metadata.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721Metadata *IERC721MetadataCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721Metadata *IERC721MetadataSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _IERC721Metadata.Contract.IsApprovedForAll(&_IERC721Metadata.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_IERC721Metadata *IERC721MetadataCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _IERC721Metadata.Contract.IsApprovedForAll(&_IERC721Metadata.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC721Metadata *IERC721MetadataCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC721Metadata *IERC721MetadataSession) Name() (string, error) {
	return _IERC721Metadata.Contract.Name(&_IERC721Metadata.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_IERC721Metadata *IERC721MetadataCallerSession) Name() (string, error) {
	return _IERC721Metadata.Contract.Name(&_IERC721Metadata.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721Metadata *IERC721MetadataCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721Metadata *IERC721MetadataSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _IERC721Metadata.Contract.OwnerOf(&_IERC721Metadata.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address owner)
func (_IERC721Metadata *IERC721MetadataCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _IERC721Metadata.Contract.OwnerOf(&_IERC721Metadata.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721Metadata *IERC721MetadataCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721Metadata *IERC721MetadataSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC721Metadata.Contract.SupportsInterface(&_IERC721Metadata.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IERC721Metadata *IERC721MetadataCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IERC721Metadata.Contract.SupportsInterface(&_IERC721Metadata.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC721Metadata *IERC721MetadataCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC721Metadata *IERC721MetadataSession) Symbol() (string, error) {
	return _IERC721Metadata.Contract.Symbol(&_IERC721Metadata.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_IERC721Metadata *IERC721MetadataCallerSession) Symbol() (string, error) {
	return _IERC721Metadata.Contract.Symbol(&_IERC721Metadata.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_IERC721Metadata *IERC721MetadataCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _IERC721Metadata.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_IERC721Metadata *IERC721MetadataSession) TokenURI(tokenId *big.Int) (string, error) {
	return _IERC721Metadata.Contract.TokenURI(&_IERC721Metadata.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_IERC721Metadata *IERC721MetadataCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _IERC721Metadata.Contract.TokenURI(&_IERC721Metadata.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.Approve(&_IERC721Metadata.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.Approve(&_IERC721Metadata.TransactOpts, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SafeTransferFrom(&_IERC721Metadata.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SafeTransferFrom(&_IERC721Metadata.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721Metadata *IERC721MetadataTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Metadata.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721Metadata *IERC721MetadataSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SafeTransferFrom0(&_IERC721Metadata.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_IERC721Metadata *IERC721MetadataTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SafeTransferFrom0(&_IERC721Metadata.TransactOpts, from, to, tokenId, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721Metadata *IERC721MetadataTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721Metadata.contract.Transact(opts, "setApprovalForAll", operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721Metadata *IERC721MetadataSession) SetApprovalForAll(operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SetApprovalForAll(&_IERC721Metadata.TransactOpts, operator, _approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool _approved) returns()
func (_IERC721Metadata *IERC721MetadataTransactorSession) SetApprovalForAll(operator common.Address, _approved bool) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.SetApprovalForAll(&_IERC721Metadata.TransactOpts, operator, _approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.TransferFrom(&_IERC721Metadata.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_IERC721Metadata *IERC721MetadataTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _IERC721Metadata.Contract.TransferFrom(&_IERC721Metadata.TransactOpts, from, to, tokenId)
}

// IERC721MetadataApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the IERC721Metadata contract.
type IERC721MetadataApprovalIterator struct {
	Event *IERC721MetadataApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721MetadataApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721MetadataApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721MetadataApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721MetadataApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721MetadataApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721MetadataApproval represents a Approval event raised by the IERC721Metadata contract.
type IERC721MetadataApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*IERC721MetadataApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721Metadata.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataApprovalIterator{contract: _IERC721Metadata.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *IERC721MetadataApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721Metadata.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721MetadataApproval)
				if err := _IERC721Metadata.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) ParseApproval(log types.Log) (*IERC721MetadataApproval, error) {
	event := new(IERC721MetadataApproval)
	if err := _IERC721Metadata.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721MetadataApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the IERC721Metadata contract.
type IERC721MetadataApprovalForAllIterator struct {
	Event *IERC721MetadataApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721MetadataApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721MetadataApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721MetadataApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721MetadataApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721MetadataApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721MetadataApprovalForAll represents a ApprovalForAll event raised by the IERC721Metadata contract.
type IERC721MetadataApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721Metadata *IERC721MetadataFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*IERC721MetadataApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _IERC721Metadata.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataApprovalForAllIterator{contract: _IERC721Metadata.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721Metadata *IERC721MetadataFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *IERC721MetadataApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _IERC721Metadata.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721MetadataApprovalForAll)
				if err := _IERC721Metadata.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_IERC721Metadata *IERC721MetadataFilterer) ParseApprovalForAll(log types.Log) (*IERC721MetadataApprovalForAll, error) {
	event := new(IERC721MetadataApprovalForAll)
	if err := _IERC721Metadata.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721MetadataTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the IERC721Metadata contract.
type IERC721MetadataTransferIterator struct {
	Event *IERC721MetadataTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IERC721MetadataTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IERC721MetadataTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IERC721MetadataTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IERC721MetadataTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IERC721MetadataTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IERC721MetadataTransfer represents a Transfer event raised by the IERC721Metadata contract.
type IERC721MetadataTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*IERC721MetadataTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721Metadata.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &IERC721MetadataTransferIterator{contract: _IERC721Metadata.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *IERC721MetadataTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _IERC721Metadata.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IERC721MetadataTransfer)
				if err := _IERC721Metadata.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_IERC721Metadata *IERC721MetadataFilterer) ParseTransfer(log types.Log) (*IERC721MetadataTransfer, error) {
	event := new(IERC721MetadataTransfer)
	if err := _IERC721Metadata.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IERC721ReceiverMetaData contains all meta data concerning the IERC721Receiver contract.
var IERC721ReceiverMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IERC721ReceiverABI is the input ABI used to generate the binding from.
// Deprecated: Use IERC721ReceiverMetaData.ABI instead.
var IERC721ReceiverABI = IERC721ReceiverMetaData.ABI

// IERC721Receiver is an auto generated Go binding around an Ethereum contract.
type IERC721Receiver struct {
	IERC721ReceiverCaller     // Read-only binding to the contract
	IERC721ReceiverTransactor // Write-only binding to the contract
	IERC721ReceiverFilterer   // Log filterer for contract events
}

// IERC721ReceiverCaller is an auto generated read-only Go binding around an Ethereum contract.
type IERC721ReceiverCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721ReceiverTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IERC721ReceiverTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721ReceiverFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IERC721ReceiverFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IERC721ReceiverSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IERC721ReceiverSession struct {
	Contract     *IERC721Receiver  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IERC721ReceiverCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IERC721ReceiverCallerSession struct {
	Contract *IERC721ReceiverCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// IERC721ReceiverTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IERC721ReceiverTransactorSession struct {
	Contract     *IERC721ReceiverTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// IERC721ReceiverRaw is an auto generated low-level Go binding around an Ethereum contract.
type IERC721ReceiverRaw struct {
	Contract *IERC721Receiver // Generic contract binding to access the raw methods on
}

// IERC721ReceiverCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IERC721ReceiverCallerRaw struct {
	Contract *IERC721ReceiverCaller // Generic read-only contract binding to access the raw methods on
}

// IERC721ReceiverTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IERC721ReceiverTransactorRaw struct {
	Contract *IERC721ReceiverTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIERC721Receiver creates a new instance of IERC721Receiver, bound to a specific deployed contract.
func NewIERC721Receiver(address common.Address, backend bind.ContractBackend) (*IERC721Receiver, error) {
	contract, err := bindIERC721Receiver(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IERC721Receiver{IERC721ReceiverCaller: IERC721ReceiverCaller{contract: contract}, IERC721ReceiverTransactor: IERC721ReceiverTransactor{contract: contract}, IERC721ReceiverFilterer: IERC721ReceiverFilterer{contract: contract}}, nil
}

// NewIERC721ReceiverCaller creates a new read-only instance of IERC721Receiver, bound to a specific deployed contract.
func NewIERC721ReceiverCaller(address common.Address, caller bind.ContractCaller) (*IERC721ReceiverCaller, error) {
	contract, err := bindIERC721Receiver(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721ReceiverCaller{contract: contract}, nil
}

// NewIERC721ReceiverTransactor creates a new write-only instance of IERC721Receiver, bound to a specific deployed contract.
func NewIERC721ReceiverTransactor(address common.Address, transactor bind.ContractTransactor) (*IERC721ReceiverTransactor, error) {
	contract, err := bindIERC721Receiver(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IERC721ReceiverTransactor{contract: contract}, nil
}

// NewIERC721ReceiverFilterer creates a new log filterer instance of IERC721Receiver, bound to a specific deployed contract.
func NewIERC721ReceiverFilterer(address common.Address, filterer bind.ContractFilterer) (*IERC721ReceiverFilterer, error) {
	contract, err := bindIERC721Receiver(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IERC721ReceiverFilterer{contract: contract}, nil
}

// bindIERC721Receiver binds a generic wrapper to an already deployed contract.
func bindIERC721Receiver(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IERC721ReceiverMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Receiver *IERC721ReceiverRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Receiver.Contract.IERC721ReceiverCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Receiver *IERC721ReceiverRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.IERC721ReceiverTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Receiver *IERC721ReceiverRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.IERC721ReceiverTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IERC721Receiver *IERC721ReceiverCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IERC721Receiver.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IERC721Receiver *IERC721ReceiverTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IERC721Receiver *IERC721ReceiverTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.contract.Transact(opts, method, params...)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes data) returns(bytes4)
func (_IERC721Receiver *IERC721ReceiverTransactor) OnERC721Received(opts *bind.TransactOpts, operator common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Receiver.contract.Transact(opts, "onERC721Received", operator, from, tokenId, data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes data) returns(bytes4)
func (_IERC721Receiver *IERC721ReceiverSession) OnERC721Received(operator common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.OnERC721Received(&_IERC721Receiver.TransactOpts, operator, from, tokenId, data)
}

// OnERC721Received is a paid mutator transaction binding the contract method 0x150b7a02.
//
// Solidity: function onERC721Received(address operator, address from, uint256 tokenId, bytes data) returns(bytes4)
func (_IERC721Receiver *IERC721ReceiverTransactorSession) OnERC721Received(operator common.Address, from common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _IERC721Receiver.Contract.OnERC721Received(&_IERC721Receiver.TransactOpts, operator, from, tokenId, data)
}

// IEthereumLightClientMetaData contains all meta data concerning the IEthereumLightClient contract.
var IEthereumLightClientMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"finalizedExecutionStateRootAndSlot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optimisticExecutionStateRootAndSlot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IEthereumLightClientABI is the input ABI used to generate the binding from.
// Deprecated: Use IEthereumLightClientMetaData.ABI instead.
var IEthereumLightClientABI = IEthereumLightClientMetaData.ABI

// IEthereumLightClient is an auto generated Go binding around an Ethereum contract.
type IEthereumLightClient struct {
	IEthereumLightClientCaller     // Read-only binding to the contract
	IEthereumLightClientTransactor // Write-only binding to the contract
	IEthereumLightClientFilterer   // Log filterer for contract events
}

// IEthereumLightClientCaller is an auto generated read-only Go binding around an Ethereum contract.
type IEthereumLightClientCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IEthereumLightClientTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IEthereumLightClientTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IEthereumLightClientFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IEthereumLightClientFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IEthereumLightClientSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IEthereumLightClientSession struct {
	Contract     *IEthereumLightClient // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// IEthereumLightClientCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IEthereumLightClientCallerSession struct {
	Contract *IEthereumLightClientCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// IEthereumLightClientTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IEthereumLightClientTransactorSession struct {
	Contract     *IEthereumLightClientTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// IEthereumLightClientRaw is an auto generated low-level Go binding around an Ethereum contract.
type IEthereumLightClientRaw struct {
	Contract *IEthereumLightClient // Generic contract binding to access the raw methods on
}

// IEthereumLightClientCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IEthereumLightClientCallerRaw struct {
	Contract *IEthereumLightClientCaller // Generic read-only contract binding to access the raw methods on
}

// IEthereumLightClientTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IEthereumLightClientTransactorRaw struct {
	Contract *IEthereumLightClientTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIEthereumLightClient creates a new instance of IEthereumLightClient, bound to a specific deployed contract.
func NewIEthereumLightClient(address common.Address, backend bind.ContractBackend) (*IEthereumLightClient, error) {
	contract, err := bindIEthereumLightClient(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IEthereumLightClient{IEthereumLightClientCaller: IEthereumLightClientCaller{contract: contract}, IEthereumLightClientTransactor: IEthereumLightClientTransactor{contract: contract}, IEthereumLightClientFilterer: IEthereumLightClientFilterer{contract: contract}}, nil
}

// NewIEthereumLightClientCaller creates a new read-only instance of IEthereumLightClient, bound to a specific deployed contract.
func NewIEthereumLightClientCaller(address common.Address, caller bind.ContractCaller) (*IEthereumLightClientCaller, error) {
	contract, err := bindIEthereumLightClient(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IEthereumLightClientCaller{contract: contract}, nil
}

// NewIEthereumLightClientTransactor creates a new write-only instance of IEthereumLightClient, bound to a specific deployed contract.
func NewIEthereumLightClientTransactor(address common.Address, transactor bind.ContractTransactor) (*IEthereumLightClientTransactor, error) {
	contract, err := bindIEthereumLightClient(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IEthereumLightClientTransactor{contract: contract}, nil
}

// NewIEthereumLightClientFilterer creates a new log filterer instance of IEthereumLightClient, bound to a specific deployed contract.
func NewIEthereumLightClientFilterer(address common.Address, filterer bind.ContractFilterer) (*IEthereumLightClientFilterer, error) {
	contract, err := bindIEthereumLightClient(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IEthereumLightClientFilterer{contract: contract}, nil
}

// bindIEthereumLightClient binds a generic wrapper to an already deployed contract.
func bindIEthereumLightClient(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IEthereumLightClientMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IEthereumLightClient *IEthereumLightClientRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IEthereumLightClient.Contract.IEthereumLightClientCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IEthereumLightClient *IEthereumLightClientRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IEthereumLightClient.Contract.IEthereumLightClientTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IEthereumLightClient *IEthereumLightClientRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IEthereumLightClient.Contract.IEthereumLightClientTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IEthereumLightClient *IEthereumLightClientCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IEthereumLightClient.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IEthereumLightClient *IEthereumLightClientTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IEthereumLightClient.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IEthereumLightClient *IEthereumLightClientTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IEthereumLightClient.Contract.contract.Transact(opts, method, params...)
}

// FinalizedExecutionStateRootAndSlot is a free data retrieval call binding the contract method 0x12420766.
//
// Solidity: function finalizedExecutionStateRootAndSlot() view returns(bytes32 root, uint64 slot)
func (_IEthereumLightClient *IEthereumLightClientCaller) FinalizedExecutionStateRootAndSlot(opts *bind.CallOpts) (struct {
	Root [32]byte
	Slot uint64
}, error) {
	var out []interface{}
	err := _IEthereumLightClient.contract.Call(opts, &out, "finalizedExecutionStateRootAndSlot")

	outstruct := new(struct {
		Root [32]byte
		Slot uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Root = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Slot = *abi.ConvertType(out[1], new(uint64)).(*uint64)

	return *outstruct, err

}

// FinalizedExecutionStateRootAndSlot is a free data retrieval call binding the contract method 0x12420766.
//
// Solidity: function finalizedExecutionStateRootAndSlot() view returns(bytes32 root, uint64 slot)
func (_IEthereumLightClient *IEthereumLightClientSession) FinalizedExecutionStateRootAndSlot() (struct {
	Root [32]byte
	Slot uint64
}, error) {
	return _IEthereumLightClient.Contract.FinalizedExecutionStateRootAndSlot(&_IEthereumLightClient.CallOpts)
}

// FinalizedExecutionStateRootAndSlot is a free data retrieval call binding the contract method 0x12420766.
//
// Solidity: function finalizedExecutionStateRootAndSlot() view returns(bytes32 root, uint64 slot)
func (_IEthereumLightClient *IEthereumLightClientCallerSession) FinalizedExecutionStateRootAndSlot() (struct {
	Root [32]byte
	Slot uint64
}, error) {
	return _IEthereumLightClient.Contract.FinalizedExecutionStateRootAndSlot(&_IEthereumLightClient.CallOpts)
}

// OptimisticExecutionStateRootAndSlot is a free data retrieval call binding the contract method 0x43a6c5a6.
//
// Solidity: function optimisticExecutionStateRootAndSlot() view returns(bytes32 root, uint64 slot)
func (_IEthereumLightClient *IEthereumLightClientCaller) OptimisticExecutionStateRootAndSlot(opts *bind.CallOpts) (struct {
	Root [32]byte
	Slot uint64
}, error) {
	var out []interface{}
	err := _IEthereumLightClient.contract.Call(opts, &out, "optimisticExecutionStateRootAndSlot")

	outstruct := new(struct {
		Root [32]byte
		Slot uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Root = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Slot = *abi.ConvertType(out[1], new(uint64)).(*uint64)

	return *outstruct, err

}

// OptimisticExecutionStateRootAndSlot is a free data retrieval call binding the contract method 0x43a6c5a6.
//
// Solidity: function optimisticExecutionStateRootAndSlot() view returns(bytes32 root, uint64 slot)
func (_IEthereumLightClient *IEthereumLightClientSession) OptimisticExecutionStateRootAndSlot() (struct {
	Root [32]byte
	Slot uint64
}, error) {
	return _IEthereumLightClient.Contract.OptimisticExecutionStateRootAndSlot(&_IEthereumLightClient.CallOpts)
}

// OptimisticExecutionStateRootAndSlot is a free data retrieval call binding the contract method 0x43a6c5a6.
//
// Solidity: function optimisticExecutionStateRootAndSlot() view returns(bytes32 root, uint64 slot)
func (_IEthereumLightClient *IEthereumLightClientCallerSession) OptimisticExecutionStateRootAndSlot() (struct {
	Root [32]byte
	Slot uint64
}, error) {
	return _IEthereumLightClient.Contract.OptimisticExecutionStateRootAndSlot(&_IEthereumLightClient.CallOpts)
}

// IFeesMetaData contains all meta data concerning the IFees contract.
var IFeesMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"FeeTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolFeeCannotBeFetched\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocolFeeController\",\"type\":\"address\"}],\"name\":\"ProtocolFeeControllerUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_PROTOCOL_FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hookFeesAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Currency\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protocolFeesAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IFeesABI is the input ABI used to generate the binding from.
// Deprecated: Use IFeesMetaData.ABI instead.
var IFeesABI = IFeesMetaData.ABI

// IFees is an auto generated Go binding around an Ethereum contract.
type IFees struct {
	IFeesCaller     // Read-only binding to the contract
	IFeesTransactor // Write-only binding to the contract
	IFeesFilterer   // Log filterer for contract events
}

// IFeesCaller is an auto generated read-only Go binding around an Ethereum contract.
type IFeesCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFeesTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IFeesTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFeesFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IFeesFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IFeesSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IFeesSession struct {
	Contract     *IFees            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IFeesCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IFeesCallerSession struct {
	Contract *IFeesCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IFeesTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IFeesTransactorSession struct {
	Contract     *IFeesTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IFeesRaw is an auto generated low-level Go binding around an Ethereum contract.
type IFeesRaw struct {
	Contract *IFees // Generic contract binding to access the raw methods on
}

// IFeesCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IFeesCallerRaw struct {
	Contract *IFeesCaller // Generic read-only contract binding to access the raw methods on
}

// IFeesTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IFeesTransactorRaw struct {
	Contract *IFeesTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIFees creates a new instance of IFees, bound to a specific deployed contract.
func NewIFees(address common.Address, backend bind.ContractBackend) (*IFees, error) {
	contract, err := bindIFees(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IFees{IFeesCaller: IFeesCaller{contract: contract}, IFeesTransactor: IFeesTransactor{contract: contract}, IFeesFilterer: IFeesFilterer{contract: contract}}, nil
}

// NewIFeesCaller creates a new read-only instance of IFees, bound to a specific deployed contract.
func NewIFeesCaller(address common.Address, caller bind.ContractCaller) (*IFeesCaller, error) {
	contract, err := bindIFees(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IFeesCaller{contract: contract}, nil
}

// NewIFeesTransactor creates a new write-only instance of IFees, bound to a specific deployed contract.
func NewIFeesTransactor(address common.Address, transactor bind.ContractTransactor) (*IFeesTransactor, error) {
	contract, err := bindIFees(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IFeesTransactor{contract: contract}, nil
}

// NewIFeesFilterer creates a new log filterer instance of IFees, bound to a specific deployed contract.
func NewIFeesFilterer(address common.Address, filterer bind.ContractFilterer) (*IFeesFilterer, error) {
	contract, err := bindIFees(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IFeesFilterer{contract: contract}, nil
}

// bindIFees binds a generic wrapper to an already deployed contract.
func bindIFees(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IFeesMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFees *IFeesRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IFees.Contract.IFeesCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFees *IFeesRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFees.Contract.IFeesTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFees *IFeesRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFees.Contract.IFeesTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IFees *IFeesCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IFees.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IFees *IFeesTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IFees.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IFees *IFeesTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IFees.Contract.contract.Transact(opts, method, params...)
}

// MINPROTOCOLFEEDENOMINATOR is a free data retrieval call binding the contract method 0x84e41c5e.
//
// Solidity: function MIN_PROTOCOL_FEE_DENOMINATOR() view returns(uint8)
func (_IFees *IFeesCaller) MINPROTOCOLFEEDENOMINATOR(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _IFees.contract.Call(opts, &out, "MIN_PROTOCOL_FEE_DENOMINATOR")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// MINPROTOCOLFEEDENOMINATOR is a free data retrieval call binding the contract method 0x84e41c5e.
//
// Solidity: function MIN_PROTOCOL_FEE_DENOMINATOR() view returns(uint8)
func (_IFees *IFeesSession) MINPROTOCOLFEEDENOMINATOR() (uint8, error) {
	return _IFees.Contract.MINPROTOCOLFEEDENOMINATOR(&_IFees.CallOpts)
}

// MINPROTOCOLFEEDENOMINATOR is a free data retrieval call binding the contract method 0x84e41c5e.
//
// Solidity: function MIN_PROTOCOL_FEE_DENOMINATOR() view returns(uint8)
func (_IFees *IFeesCallerSession) MINPROTOCOLFEEDENOMINATOR() (uint8, error) {
	return _IFees.Contract.MINPROTOCOLFEEDENOMINATOR(&_IFees.CallOpts)
}

// HookFeesAccrued is a free data retrieval call binding the contract method 0xb4c41939.
//
// Solidity: function hookFeesAccrued(address , address ) view returns(uint256)
func (_IFees *IFeesCaller) HookFeesAccrued(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFees.contract.Call(opts, &out, "hookFeesAccrued", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HookFeesAccrued is a free data retrieval call binding the contract method 0xb4c41939.
//
// Solidity: function hookFeesAccrued(address , address ) view returns(uint256)
func (_IFees *IFeesSession) HookFeesAccrued(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _IFees.Contract.HookFeesAccrued(&_IFees.CallOpts, arg0, arg1)
}

// HookFeesAccrued is a free data retrieval call binding the contract method 0xb4c41939.
//
// Solidity: function hookFeesAccrued(address , address ) view returns(uint256)
func (_IFees *IFeesCallerSession) HookFeesAccrued(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _IFees.Contract.HookFeesAccrued(&_IFees.CallOpts, arg0, arg1)
}

// ProtocolFeesAccrued is a free data retrieval call binding the contract method 0x97e8cd4e.
//
// Solidity: function protocolFeesAccrued(address ) view returns(uint256)
func (_IFees *IFeesCaller) ProtocolFeesAccrued(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IFees.contract.Call(opts, &out, "protocolFeesAccrued", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ProtocolFeesAccrued is a free data retrieval call binding the contract method 0x97e8cd4e.
//
// Solidity: function protocolFeesAccrued(address ) view returns(uint256)
func (_IFees *IFeesSession) ProtocolFeesAccrued(arg0 common.Address) (*big.Int, error) {
	return _IFees.Contract.ProtocolFeesAccrued(&_IFees.CallOpts, arg0)
}

// ProtocolFeesAccrued is a free data retrieval call binding the contract method 0x97e8cd4e.
//
// Solidity: function protocolFeesAccrued(address ) view returns(uint256)
func (_IFees *IFeesCallerSession) ProtocolFeesAccrued(arg0 common.Address) (*big.Int, error) {
	return _IFees.Contract.ProtocolFeesAccrued(&_IFees.CallOpts, arg0)
}

// IFeesProtocolFeeControllerUpdatedIterator is returned from FilterProtocolFeeControllerUpdated and is used to iterate over the raw logs and unpacked data for ProtocolFeeControllerUpdated events raised by the IFees contract.
type IFeesProtocolFeeControllerUpdatedIterator struct {
	Event *IFeesProtocolFeeControllerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IFeesProtocolFeeControllerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IFeesProtocolFeeControllerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IFeesProtocolFeeControllerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IFeesProtocolFeeControllerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IFeesProtocolFeeControllerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IFeesProtocolFeeControllerUpdated represents a ProtocolFeeControllerUpdated event raised by the IFees contract.
type IFeesProtocolFeeControllerUpdated struct {
	ProtocolFeeController common.Address
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterProtocolFeeControllerUpdated is a free log retrieval operation binding the contract event 0xb4bd8ef53df690b9943d3318996006dbb82a25f54719d8c8035b516a2a5b8acc.
//
// Solidity: event ProtocolFeeControllerUpdated(address protocolFeeController)
func (_IFees *IFeesFilterer) FilterProtocolFeeControllerUpdated(opts *bind.FilterOpts) (*IFeesProtocolFeeControllerUpdatedIterator, error) {

	logs, sub, err := _IFees.contract.FilterLogs(opts, "ProtocolFeeControllerUpdated")
	if err != nil {
		return nil, err
	}
	return &IFeesProtocolFeeControllerUpdatedIterator{contract: _IFees.contract, event: "ProtocolFeeControllerUpdated", logs: logs, sub: sub}, nil
}

// WatchProtocolFeeControllerUpdated is a free log subscription operation binding the contract event 0xb4bd8ef53df690b9943d3318996006dbb82a25f54719d8c8035b516a2a5b8acc.
//
// Solidity: event ProtocolFeeControllerUpdated(address protocolFeeController)
func (_IFees *IFeesFilterer) WatchProtocolFeeControllerUpdated(opts *bind.WatchOpts, sink chan<- *IFeesProtocolFeeControllerUpdated) (event.Subscription, error) {

	logs, sub, err := _IFees.contract.WatchLogs(opts, "ProtocolFeeControllerUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IFeesProtocolFeeControllerUpdated)
				if err := _IFees.contract.UnpackLog(event, "ProtocolFeeControllerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProtocolFeeControllerUpdated is a log parse operation binding the contract event 0xb4bd8ef53df690b9943d3318996006dbb82a25f54719d8c8035b516a2a5b8acc.
//
// Solidity: event ProtocolFeeControllerUpdated(address protocolFeeController)
func (_IFees *IFeesFilterer) ParseProtocolFeeControllerUpdated(log types.Log) (*IFeesProtocolFeeControllerUpdated, error) {
	event := new(IFeesProtocolFeeControllerUpdated)
	if err := _IFees.contract.UnpackLog(event, "ProtocolFeeControllerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IHookFeeManagerMetaData contains all meta data concerning the IHookFeeManager contract.
var IHookFeeManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"key\",\"type\":\"tuple\"}],\"name\":\"getHookFees\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IHookFeeManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use IHookFeeManagerMetaData.ABI instead.
var IHookFeeManagerABI = IHookFeeManagerMetaData.ABI

// IHookFeeManager is an auto generated Go binding around an Ethereum contract.
type IHookFeeManager struct {
	IHookFeeManagerCaller     // Read-only binding to the contract
	IHookFeeManagerTransactor // Write-only binding to the contract
	IHookFeeManagerFilterer   // Log filterer for contract events
}

// IHookFeeManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type IHookFeeManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IHookFeeManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IHookFeeManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IHookFeeManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IHookFeeManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IHookFeeManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IHookFeeManagerSession struct {
	Contract     *IHookFeeManager  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IHookFeeManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IHookFeeManagerCallerSession struct {
	Contract *IHookFeeManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// IHookFeeManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IHookFeeManagerTransactorSession struct {
	Contract     *IHookFeeManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// IHookFeeManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type IHookFeeManagerRaw struct {
	Contract *IHookFeeManager // Generic contract binding to access the raw methods on
}

// IHookFeeManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IHookFeeManagerCallerRaw struct {
	Contract *IHookFeeManagerCaller // Generic read-only contract binding to access the raw methods on
}

// IHookFeeManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IHookFeeManagerTransactorRaw struct {
	Contract *IHookFeeManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIHookFeeManager creates a new instance of IHookFeeManager, bound to a specific deployed contract.
func NewIHookFeeManager(address common.Address, backend bind.ContractBackend) (*IHookFeeManager, error) {
	contract, err := bindIHookFeeManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IHookFeeManager{IHookFeeManagerCaller: IHookFeeManagerCaller{contract: contract}, IHookFeeManagerTransactor: IHookFeeManagerTransactor{contract: contract}, IHookFeeManagerFilterer: IHookFeeManagerFilterer{contract: contract}}, nil
}

// NewIHookFeeManagerCaller creates a new read-only instance of IHookFeeManager, bound to a specific deployed contract.
func NewIHookFeeManagerCaller(address common.Address, caller bind.ContractCaller) (*IHookFeeManagerCaller, error) {
	contract, err := bindIHookFeeManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IHookFeeManagerCaller{contract: contract}, nil
}

// NewIHookFeeManagerTransactor creates a new write-only instance of IHookFeeManager, bound to a specific deployed contract.
func NewIHookFeeManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*IHookFeeManagerTransactor, error) {
	contract, err := bindIHookFeeManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IHookFeeManagerTransactor{contract: contract}, nil
}

// NewIHookFeeManagerFilterer creates a new log filterer instance of IHookFeeManager, bound to a specific deployed contract.
func NewIHookFeeManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*IHookFeeManagerFilterer, error) {
	contract, err := bindIHookFeeManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IHookFeeManagerFilterer{contract: contract}, nil
}

// bindIHookFeeManager binds a generic wrapper to an already deployed contract.
func bindIHookFeeManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IHookFeeManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IHookFeeManager *IHookFeeManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IHookFeeManager.Contract.IHookFeeManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IHookFeeManager *IHookFeeManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IHookFeeManager.Contract.IHookFeeManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IHookFeeManager *IHookFeeManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IHookFeeManager.Contract.IHookFeeManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IHookFeeManager *IHookFeeManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IHookFeeManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IHookFeeManager *IHookFeeManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IHookFeeManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IHookFeeManager *IHookFeeManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IHookFeeManager.Contract.contract.Transact(opts, method, params...)
}

// GetHookFees is a free data retrieval call binding the contract method 0x5ae4ce58.
//
// Solidity: function getHookFees((address,address,uint24,int24,address) key) view returns(uint24)
func (_IHookFeeManager *IHookFeeManagerCaller) GetHookFees(opts *bind.CallOpts, key PoolKey) (*big.Int, error) {
	var out []interface{}
	err := _IHookFeeManager.contract.Call(opts, &out, "getHookFees", key)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetHookFees is a free data retrieval call binding the contract method 0x5ae4ce58.
//
// Solidity: function getHookFees((address,address,uint24,int24,address) key) view returns(uint24)
func (_IHookFeeManager *IHookFeeManagerSession) GetHookFees(key PoolKey) (*big.Int, error) {
	return _IHookFeeManager.Contract.GetHookFees(&_IHookFeeManager.CallOpts, key)
}

// GetHookFees is a free data retrieval call binding the contract method 0x5ae4ce58.
//
// Solidity: function getHookFees((address,address,uint24,int24,address) key) view returns(uint24)
func (_IHookFeeManager *IHookFeeManagerCallerSession) GetHookFees(key PoolKey) (*big.Int, error) {
	return _IHookFeeManager.Contract.GetHookFees(&_IHookFeeManager.CallOpts, key)
}

// IHooksMetaData contains all meta data concerning the IHooks contract.
var IHooksMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"afterDonate\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"afterInitialize\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"int256\",\"name\":\"liquidityDelta\",\"type\":\"int256\"}],\"internalType\":\"structIPoolManager.ModifyPositionParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"BalanceDelta\",\"name\":\"delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"afterModifyPosition\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"structIPoolManager.SwapParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"BalanceDelta\",\"name\":\"delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"afterSwap\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"beforeDonate\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"beforeInitialize\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"int256\",\"name\":\"liquidityDelta\",\"type\":\"int256\"}],\"internalType\":\"structIPoolManager.ModifyPositionParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"beforeModifyPosition\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"structIPoolManager.SwapParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"beforeSwap\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IHooksABI is the input ABI used to generate the binding from.
// Deprecated: Use IHooksMetaData.ABI instead.
var IHooksABI = IHooksMetaData.ABI

// IHooks is an auto generated Go binding around an Ethereum contract.
type IHooks struct {
	IHooksCaller     // Read-only binding to the contract
	IHooksTransactor // Write-only binding to the contract
	IHooksFilterer   // Log filterer for contract events
}

// IHooksCaller is an auto generated read-only Go binding around an Ethereum contract.
type IHooksCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IHooksTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IHooksTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IHooksFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IHooksFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IHooksSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IHooksSession struct {
	Contract     *IHooks           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IHooksCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IHooksCallerSession struct {
	Contract *IHooksCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IHooksTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IHooksTransactorSession struct {
	Contract     *IHooksTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IHooksRaw is an auto generated low-level Go binding around an Ethereum contract.
type IHooksRaw struct {
	Contract *IHooks // Generic contract binding to access the raw methods on
}

// IHooksCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IHooksCallerRaw struct {
	Contract *IHooksCaller // Generic read-only contract binding to access the raw methods on
}

// IHooksTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IHooksTransactorRaw struct {
	Contract *IHooksTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIHooks creates a new instance of IHooks, bound to a specific deployed contract.
func NewIHooks(address common.Address, backend bind.ContractBackend) (*IHooks, error) {
	contract, err := bindIHooks(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IHooks{IHooksCaller: IHooksCaller{contract: contract}, IHooksTransactor: IHooksTransactor{contract: contract}, IHooksFilterer: IHooksFilterer{contract: contract}}, nil
}

// NewIHooksCaller creates a new read-only instance of IHooks, bound to a specific deployed contract.
func NewIHooksCaller(address common.Address, caller bind.ContractCaller) (*IHooksCaller, error) {
	contract, err := bindIHooks(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IHooksCaller{contract: contract}, nil
}

// NewIHooksTransactor creates a new write-only instance of IHooks, bound to a specific deployed contract.
func NewIHooksTransactor(address common.Address, transactor bind.ContractTransactor) (*IHooksTransactor, error) {
	contract, err := bindIHooks(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IHooksTransactor{contract: contract}, nil
}

// NewIHooksFilterer creates a new log filterer instance of IHooks, bound to a specific deployed contract.
func NewIHooksFilterer(address common.Address, filterer bind.ContractFilterer) (*IHooksFilterer, error) {
	contract, err := bindIHooks(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IHooksFilterer{contract: contract}, nil
}

// bindIHooks binds a generic wrapper to an already deployed contract.
func bindIHooks(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IHooksMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IHooks *IHooksRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IHooks.Contract.IHooksCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IHooks *IHooksRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IHooks.Contract.IHooksTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IHooks *IHooksRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IHooks.Contract.IHooksTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IHooks *IHooksCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IHooks.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IHooks *IHooksTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IHooks.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IHooks *IHooksTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IHooks.Contract.contract.Transact(opts, method, params...)
}

// AfterDonate is a paid mutator transaction binding the contract method 0xe1b4af69.
//
// Solidity: function afterDonate(address sender, (address,address,uint24,int24,address) key, uint256 amount0, uint256 amount1, bytes hookData) returns(bytes4)
func (_IHooks *IHooksTransactor) AfterDonate(opts *bind.TransactOpts, sender common.Address, key PoolKey, amount0 *big.Int, amount1 *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IHooks.contract.Transact(opts, "afterDonate", sender, key, amount0, amount1, hookData)
}

// AfterDonate is a paid mutator transaction binding the contract method 0xe1b4af69.
//
// Solidity: function afterDonate(address sender, (address,address,uint24,int24,address) key, uint256 amount0, uint256 amount1, bytes hookData) returns(bytes4)
func (_IHooks *IHooksSession) AfterDonate(sender common.Address, key PoolKey, amount0 *big.Int, amount1 *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IHooks.Contract.AfterDonate(&_IHooks.TransactOpts, sender, key, amount0, amount1, hookData)
}

// AfterDonate is a paid mutator transaction binding the contract method 0xe1b4af69.
//
// Solidity: function afterDonate(address sender, (address,address,uint24,int24,address) key, uint256 amount0, uint256 amount1, bytes hookData) returns(bytes4)
func (_IHooks *IHooksTransactorSession) AfterDonate(sender common.Address, key PoolKey, amount0 *big.Int, amount1 *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IHooks.Contract.AfterDonate(&_IHooks.TransactOpts, sender, key, amount0, amount1, hookData)
}

// AfterInitialize is a paid mutator transaction binding the contract method 0xa910f80f.
//
// Solidity: function afterInitialize(address sender, (address,address,uint24,int24,address) key, uint160 sqrtPriceX96, int24 tick, bytes hookData) returns(bytes4)
func (_IHooks *IHooksTransactor) AfterInitialize(opts *bind.TransactOpts, sender common.Address, key PoolKey, sqrtPriceX96 *big.Int, tick *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IHooks.contract.Transact(opts, "afterInitialize", sender, key, sqrtPriceX96, tick, hookData)
}

// AfterInitialize is a paid mutator transaction binding the contract method 0xa910f80f.
//
// Solidity: function afterInitialize(address sender, (address,address,uint24,int24,address) key, uint160 sqrtPriceX96, int24 tick, bytes hookData) returns(bytes4)
func (_IHooks *IHooksSession) AfterInitialize(sender common.Address, key PoolKey, sqrtPriceX96 *big.Int, tick *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IHooks.Contract.AfterInitialize(&_IHooks.TransactOpts, sender, key, sqrtPriceX96, tick, hookData)
}

// AfterInitialize is a paid mutator transaction binding the contract method 0xa910f80f.
//
// Solidity: function afterInitialize(address sender, (address,address,uint24,int24,address) key, uint160 sqrtPriceX96, int24 tick, bytes hookData) returns(bytes4)
func (_IHooks *IHooksTransactorSession) AfterInitialize(sender common.Address, key PoolKey, sqrtPriceX96 *big.Int, tick *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IHooks.Contract.AfterInitialize(&_IHooks.TransactOpts, sender, key, sqrtPriceX96, tick, hookData)
}

// AfterModifyPosition is a paid mutator transaction binding the contract method 0x30b7cdef.
//
// Solidity: function afterModifyPosition(address sender, (address,address,uint24,int24,address) key, (int24,int24,int256) params, int256 delta, bytes hookData) returns(bytes4)
func (_IHooks *IHooksTransactor) AfterModifyPosition(opts *bind.TransactOpts, sender common.Address, key PoolKey, params IPoolManagerModifyPositionParams, delta *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IHooks.contract.Transact(opts, "afterModifyPosition", sender, key, params, delta, hookData)
}

// AfterModifyPosition is a paid mutator transaction binding the contract method 0x30b7cdef.
//
// Solidity: function afterModifyPosition(address sender, (address,address,uint24,int24,address) key, (int24,int24,int256) params, int256 delta, bytes hookData) returns(bytes4)
func (_IHooks *IHooksSession) AfterModifyPosition(sender common.Address, key PoolKey, params IPoolManagerModifyPositionParams, delta *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IHooks.Contract.AfterModifyPosition(&_IHooks.TransactOpts, sender, key, params, delta, hookData)
}

// AfterModifyPosition is a paid mutator transaction binding the contract method 0x30b7cdef.
//
// Solidity: function afterModifyPosition(address sender, (address,address,uint24,int24,address) key, (int24,int24,int256) params, int256 delta, bytes hookData) returns(bytes4)
func (_IHooks *IHooksTransactorSession) AfterModifyPosition(sender common.Address, key PoolKey, params IPoolManagerModifyPositionParams, delta *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IHooks.Contract.AfterModifyPosition(&_IHooks.TransactOpts, sender, key, params, delta, hookData)
}

// AfterSwap is a paid mutator transaction binding the contract method 0xb47b2fb1.
//
// Solidity: function afterSwap(address sender, (address,address,uint24,int24,address) key, (bool,int256,uint160) params, int256 delta, bytes hookData) returns(bytes4)
func (_IHooks *IHooksTransactor) AfterSwap(opts *bind.TransactOpts, sender common.Address, key PoolKey, params IPoolManagerSwapParams, delta *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IHooks.contract.Transact(opts, "afterSwap", sender, key, params, delta, hookData)
}

// AfterSwap is a paid mutator transaction binding the contract method 0xb47b2fb1.
//
// Solidity: function afterSwap(address sender, (address,address,uint24,int24,address) key, (bool,int256,uint160) params, int256 delta, bytes hookData) returns(bytes4)
func (_IHooks *IHooksSession) AfterSwap(sender common.Address, key PoolKey, params IPoolManagerSwapParams, delta *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IHooks.Contract.AfterSwap(&_IHooks.TransactOpts, sender, key, params, delta, hookData)
}

// AfterSwap is a paid mutator transaction binding the contract method 0xb47b2fb1.
//
// Solidity: function afterSwap(address sender, (address,address,uint24,int24,address) key, (bool,int256,uint160) params, int256 delta, bytes hookData) returns(bytes4)
func (_IHooks *IHooksTransactorSession) AfterSwap(sender common.Address, key PoolKey, params IPoolManagerSwapParams, delta *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IHooks.Contract.AfterSwap(&_IHooks.TransactOpts, sender, key, params, delta, hookData)
}

// BeforeDonate is a paid mutator transaction binding the contract method 0xb6a8b0fa.
//
// Solidity: function beforeDonate(address sender, (address,address,uint24,int24,address) key, uint256 amount0, uint256 amount1, bytes hookData) returns(bytes4)
func (_IHooks *IHooksTransactor) BeforeDonate(opts *bind.TransactOpts, sender common.Address, key PoolKey, amount0 *big.Int, amount1 *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IHooks.contract.Transact(opts, "beforeDonate", sender, key, amount0, amount1, hookData)
}

// BeforeDonate is a paid mutator transaction binding the contract method 0xb6a8b0fa.
//
// Solidity: function beforeDonate(address sender, (address,address,uint24,int24,address) key, uint256 amount0, uint256 amount1, bytes hookData) returns(bytes4)
func (_IHooks *IHooksSession) BeforeDonate(sender common.Address, key PoolKey, amount0 *big.Int, amount1 *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IHooks.Contract.BeforeDonate(&_IHooks.TransactOpts, sender, key, amount0, amount1, hookData)
}

// BeforeDonate is a paid mutator transaction binding the contract method 0xb6a8b0fa.
//
// Solidity: function beforeDonate(address sender, (address,address,uint24,int24,address) key, uint256 amount0, uint256 amount1, bytes hookData) returns(bytes4)
func (_IHooks *IHooksTransactorSession) BeforeDonate(sender common.Address, key PoolKey, amount0 *big.Int, amount1 *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IHooks.Contract.BeforeDonate(&_IHooks.TransactOpts, sender, key, amount0, amount1, hookData)
}

// BeforeInitialize is a paid mutator transaction binding the contract method 0x3440d820.
//
// Solidity: function beforeInitialize(address sender, (address,address,uint24,int24,address) key, uint160 sqrtPriceX96, bytes hookData) returns(bytes4)
func (_IHooks *IHooksTransactor) BeforeInitialize(opts *bind.TransactOpts, sender common.Address, key PoolKey, sqrtPriceX96 *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IHooks.contract.Transact(opts, "beforeInitialize", sender, key, sqrtPriceX96, hookData)
}

// BeforeInitialize is a paid mutator transaction binding the contract method 0x3440d820.
//
// Solidity: function beforeInitialize(address sender, (address,address,uint24,int24,address) key, uint160 sqrtPriceX96, bytes hookData) returns(bytes4)
func (_IHooks *IHooksSession) BeforeInitialize(sender common.Address, key PoolKey, sqrtPriceX96 *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IHooks.Contract.BeforeInitialize(&_IHooks.TransactOpts, sender, key, sqrtPriceX96, hookData)
}

// BeforeInitialize is a paid mutator transaction binding the contract method 0x3440d820.
//
// Solidity: function beforeInitialize(address sender, (address,address,uint24,int24,address) key, uint160 sqrtPriceX96, bytes hookData) returns(bytes4)
func (_IHooks *IHooksTransactorSession) BeforeInitialize(sender common.Address, key PoolKey, sqrtPriceX96 *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IHooks.Contract.BeforeInitialize(&_IHooks.TransactOpts, sender, key, sqrtPriceX96, hookData)
}

// BeforeModifyPosition is a paid mutator transaction binding the contract method 0xfe9a6f45.
//
// Solidity: function beforeModifyPosition(address sender, (address,address,uint24,int24,address) key, (int24,int24,int256) params, bytes hookData) returns(bytes4)
func (_IHooks *IHooksTransactor) BeforeModifyPosition(opts *bind.TransactOpts, sender common.Address, key PoolKey, params IPoolManagerModifyPositionParams, hookData []byte) (*types.Transaction, error) {
	return _IHooks.contract.Transact(opts, "beforeModifyPosition", sender, key, params, hookData)
}

// BeforeModifyPosition is a paid mutator transaction binding the contract method 0xfe9a6f45.
//
// Solidity: function beforeModifyPosition(address sender, (address,address,uint24,int24,address) key, (int24,int24,int256) params, bytes hookData) returns(bytes4)
func (_IHooks *IHooksSession) BeforeModifyPosition(sender common.Address, key PoolKey, params IPoolManagerModifyPositionParams, hookData []byte) (*types.Transaction, error) {
	return _IHooks.Contract.BeforeModifyPosition(&_IHooks.TransactOpts, sender, key, params, hookData)
}

// BeforeModifyPosition is a paid mutator transaction binding the contract method 0xfe9a6f45.
//
// Solidity: function beforeModifyPosition(address sender, (address,address,uint24,int24,address) key, (int24,int24,int256) params, bytes hookData) returns(bytes4)
func (_IHooks *IHooksTransactorSession) BeforeModifyPosition(sender common.Address, key PoolKey, params IPoolManagerModifyPositionParams, hookData []byte) (*types.Transaction, error) {
	return _IHooks.Contract.BeforeModifyPosition(&_IHooks.TransactOpts, sender, key, params, hookData)
}

// BeforeSwap is a paid mutator transaction binding the contract method 0x575e24b4.
//
// Solidity: function beforeSwap(address sender, (address,address,uint24,int24,address) key, (bool,int256,uint160) params, bytes hookData) returns(bytes4)
func (_IHooks *IHooksTransactor) BeforeSwap(opts *bind.TransactOpts, sender common.Address, key PoolKey, params IPoolManagerSwapParams, hookData []byte) (*types.Transaction, error) {
	return _IHooks.contract.Transact(opts, "beforeSwap", sender, key, params, hookData)
}

// BeforeSwap is a paid mutator transaction binding the contract method 0x575e24b4.
//
// Solidity: function beforeSwap(address sender, (address,address,uint24,int24,address) key, (bool,int256,uint160) params, bytes hookData) returns(bytes4)
func (_IHooks *IHooksSession) BeforeSwap(sender common.Address, key PoolKey, params IPoolManagerSwapParams, hookData []byte) (*types.Transaction, error) {
	return _IHooks.Contract.BeforeSwap(&_IHooks.TransactOpts, sender, key, params, hookData)
}

// BeforeSwap is a paid mutator transaction binding the contract method 0x575e24b4.
//
// Solidity: function beforeSwap(address sender, (address,address,uint24,int24,address) key, (bool,int256,uint160) params, bytes hookData) returns(bytes4)
func (_IHooks *IHooksTransactorSession) BeforeSwap(sender common.Address, key PoolKey, params IPoolManagerSwapParams, hookData []byte) (*types.Transaction, error) {
	return _IHooks.Contract.BeforeSwap(&_IHooks.TransactOpts, sender, key, params, hookData)
}

// IMessageBridgeMetaData contains all meta data concerning the IMessageBridge contract.
var IMessageBridgeMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"MessageCallReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"MessageExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"accountProof\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"storageProof\",\"type\":\"bytes[]\"}],\"name\":\"executeMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"getExecutionStateRootAndSlot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"lightClients\",\"outputs\":[{\"internalType\":\"contractIEthereumLightClient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IMessageBridgeABI is the input ABI used to generate the binding from.
// Deprecated: Use IMessageBridgeMetaData.ABI instead.
var IMessageBridgeABI = IMessageBridgeMetaData.ABI

// IMessageBridge is an auto generated Go binding around an Ethereum contract.
type IMessageBridge struct {
	IMessageBridgeCaller     // Read-only binding to the contract
	IMessageBridgeTransactor // Write-only binding to the contract
	IMessageBridgeFilterer   // Log filterer for contract events
}

// IMessageBridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type IMessageBridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMessageBridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IMessageBridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMessageBridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IMessageBridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMessageBridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IMessageBridgeSession struct {
	Contract     *IMessageBridge   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IMessageBridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IMessageBridgeCallerSession struct {
	Contract *IMessageBridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// IMessageBridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IMessageBridgeTransactorSession struct {
	Contract     *IMessageBridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// IMessageBridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type IMessageBridgeRaw struct {
	Contract *IMessageBridge // Generic contract binding to access the raw methods on
}

// IMessageBridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IMessageBridgeCallerRaw struct {
	Contract *IMessageBridgeCaller // Generic read-only contract binding to access the raw methods on
}

// IMessageBridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IMessageBridgeTransactorRaw struct {
	Contract *IMessageBridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIMessageBridge creates a new instance of IMessageBridge, bound to a specific deployed contract.
func NewIMessageBridge(address common.Address, backend bind.ContractBackend) (*IMessageBridge, error) {
	contract, err := bindIMessageBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IMessageBridge{IMessageBridgeCaller: IMessageBridgeCaller{contract: contract}, IMessageBridgeTransactor: IMessageBridgeTransactor{contract: contract}, IMessageBridgeFilterer: IMessageBridgeFilterer{contract: contract}}, nil
}

// NewIMessageBridgeCaller creates a new read-only instance of IMessageBridge, bound to a specific deployed contract.
func NewIMessageBridgeCaller(address common.Address, caller bind.ContractCaller) (*IMessageBridgeCaller, error) {
	contract, err := bindIMessageBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IMessageBridgeCaller{contract: contract}, nil
}

// NewIMessageBridgeTransactor creates a new write-only instance of IMessageBridge, bound to a specific deployed contract.
func NewIMessageBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*IMessageBridgeTransactor, error) {
	contract, err := bindIMessageBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IMessageBridgeTransactor{contract: contract}, nil
}

// NewIMessageBridgeFilterer creates a new log filterer instance of IMessageBridge, bound to a specific deployed contract.
func NewIMessageBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*IMessageBridgeFilterer, error) {
	contract, err := bindIMessageBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IMessageBridgeFilterer{contract: contract}, nil
}

// bindIMessageBridge binds a generic wrapper to an already deployed contract.
func bindIMessageBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IMessageBridgeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IMessageBridge *IMessageBridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IMessageBridge.Contract.IMessageBridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IMessageBridge *IMessageBridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IMessageBridge.Contract.IMessageBridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IMessageBridge *IMessageBridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IMessageBridge.Contract.IMessageBridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IMessageBridge *IMessageBridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IMessageBridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IMessageBridge *IMessageBridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IMessageBridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IMessageBridge *IMessageBridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IMessageBridge.Contract.contract.Transact(opts, method, params...)
}

// GetExecutionStateRootAndSlot is a free data retrieval call binding the contract method 0x6e98da7d.
//
// Solidity: function getExecutionStateRootAndSlot(uint64 chainId) view returns(bytes32 root, uint64 slot)
func (_IMessageBridge *IMessageBridgeCaller) GetExecutionStateRootAndSlot(opts *bind.CallOpts, chainId uint64) (struct {
	Root [32]byte
	Slot uint64
}, error) {
	var out []interface{}
	err := _IMessageBridge.contract.Call(opts, &out, "getExecutionStateRootAndSlot", chainId)

	outstruct := new(struct {
		Root [32]byte
		Slot uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Root = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Slot = *abi.ConvertType(out[1], new(uint64)).(*uint64)

	return *outstruct, err

}

// GetExecutionStateRootAndSlot is a free data retrieval call binding the contract method 0x6e98da7d.
//
// Solidity: function getExecutionStateRootAndSlot(uint64 chainId) view returns(bytes32 root, uint64 slot)
func (_IMessageBridge *IMessageBridgeSession) GetExecutionStateRootAndSlot(chainId uint64) (struct {
	Root [32]byte
	Slot uint64
}, error) {
	return _IMessageBridge.Contract.GetExecutionStateRootAndSlot(&_IMessageBridge.CallOpts, chainId)
}

// GetExecutionStateRootAndSlot is a free data retrieval call binding the contract method 0x6e98da7d.
//
// Solidity: function getExecutionStateRootAndSlot(uint64 chainId) view returns(bytes32 root, uint64 slot)
func (_IMessageBridge *IMessageBridgeCallerSession) GetExecutionStateRootAndSlot(chainId uint64) (struct {
	Root [32]byte
	Slot uint64
}, error) {
	return _IMessageBridge.Contract.GetExecutionStateRootAndSlot(&_IMessageBridge.CallOpts, chainId)
}

// LightClients is a free data retrieval call binding the contract method 0x970b3240.
//
// Solidity: function lightClients(uint256 chainId) view returns(address)
func (_IMessageBridge *IMessageBridgeCaller) LightClients(opts *bind.CallOpts, chainId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IMessageBridge.contract.Call(opts, &out, "lightClients", chainId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LightClients is a free data retrieval call binding the contract method 0x970b3240.
//
// Solidity: function lightClients(uint256 chainId) view returns(address)
func (_IMessageBridge *IMessageBridgeSession) LightClients(chainId *big.Int) (common.Address, error) {
	return _IMessageBridge.Contract.LightClients(&_IMessageBridge.CallOpts, chainId)
}

// LightClients is a free data retrieval call binding the contract method 0x970b3240.
//
// Solidity: function lightClients(uint256 chainId) view returns(address)
func (_IMessageBridge *IMessageBridgeCallerSession) LightClients(chainId *big.Int) (common.Address, error) {
	return _IMessageBridge.Contract.LightClients(&_IMessageBridge.CallOpts, chainId)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0x4f256d81.
//
// Solidity: function executeMessage(uint64 srcChainId, uint64 nonce, address sender, address receiver, bytes message, bytes[] accountProof, bytes[] storageProof) returns(bool)
func (_IMessageBridge *IMessageBridgeTransactor) ExecuteMessage(opts *bind.TransactOpts, srcChainId uint64, nonce uint64, sender common.Address, receiver common.Address, message []byte, accountProof [][]byte, storageProof [][]byte) (*types.Transaction, error) {
	return _IMessageBridge.contract.Transact(opts, "executeMessage", srcChainId, nonce, sender, receiver, message, accountProof, storageProof)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0x4f256d81.
//
// Solidity: function executeMessage(uint64 srcChainId, uint64 nonce, address sender, address receiver, bytes message, bytes[] accountProof, bytes[] storageProof) returns(bool)
func (_IMessageBridge *IMessageBridgeSession) ExecuteMessage(srcChainId uint64, nonce uint64, sender common.Address, receiver common.Address, message []byte, accountProof [][]byte, storageProof [][]byte) (*types.Transaction, error) {
	return _IMessageBridge.Contract.ExecuteMessage(&_IMessageBridge.TransactOpts, srcChainId, nonce, sender, receiver, message, accountProof, storageProof)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0x4f256d81.
//
// Solidity: function executeMessage(uint64 srcChainId, uint64 nonce, address sender, address receiver, bytes message, bytes[] accountProof, bytes[] storageProof) returns(bool)
func (_IMessageBridge *IMessageBridgeTransactorSession) ExecuteMessage(srcChainId uint64, nonce uint64, sender common.Address, receiver common.Address, message []byte, accountProof [][]byte, storageProof [][]byte) (*types.Transaction, error) {
	return _IMessageBridge.Contract.ExecuteMessage(&_IMessageBridge.TransactOpts, srcChainId, nonce, sender, receiver, message, accountProof, storageProof)
}

// SendMessage is a paid mutator transaction binding the contract method 0xb90b8352.
//
// Solidity: function sendMessage(uint64 dstChainId, address receiver, bytes message) returns(bytes32)
func (_IMessageBridge *IMessageBridgeTransactor) SendMessage(opts *bind.TransactOpts, dstChainId uint64, receiver common.Address, message []byte) (*types.Transaction, error) {
	return _IMessageBridge.contract.Transact(opts, "sendMessage", dstChainId, receiver, message)
}

// SendMessage is a paid mutator transaction binding the contract method 0xb90b8352.
//
// Solidity: function sendMessage(uint64 dstChainId, address receiver, bytes message) returns(bytes32)
func (_IMessageBridge *IMessageBridgeSession) SendMessage(dstChainId uint64, receiver common.Address, message []byte) (*types.Transaction, error) {
	return _IMessageBridge.Contract.SendMessage(&_IMessageBridge.TransactOpts, dstChainId, receiver, message)
}

// SendMessage is a paid mutator transaction binding the contract method 0xb90b8352.
//
// Solidity: function sendMessage(uint64 dstChainId, address receiver, bytes message) returns(bytes32)
func (_IMessageBridge *IMessageBridgeTransactorSession) SendMessage(dstChainId uint64, receiver common.Address, message []byte) (*types.Transaction, error) {
	return _IMessageBridge.Contract.SendMessage(&_IMessageBridge.TransactOpts, dstChainId, receiver, message)
}

// IMessageBridgeMessageCallRevertedIterator is returned from FilterMessageCallReverted and is used to iterate over the raw logs and unpacked data for MessageCallReverted events raised by the IMessageBridge contract.
type IMessageBridgeMessageCallRevertedIterator struct {
	Event *IMessageBridgeMessageCallReverted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IMessageBridgeMessageCallRevertedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IMessageBridgeMessageCallReverted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IMessageBridgeMessageCallReverted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IMessageBridgeMessageCallRevertedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IMessageBridgeMessageCallRevertedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IMessageBridgeMessageCallReverted represents a MessageCallReverted event raised by the IMessageBridge contract.
type IMessageBridgeMessageCallReverted struct {
	MessageId [32]byte
	Reason    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMessageCallReverted is a free log retrieval operation binding the contract event 0xc666137142d7507d306f3aee4e2e08927034d27fc7c790316e8860c69782c94e.
//
// Solidity: event MessageCallReverted(bytes32 messageId, string reason)
func (_IMessageBridge *IMessageBridgeFilterer) FilterMessageCallReverted(opts *bind.FilterOpts) (*IMessageBridgeMessageCallRevertedIterator, error) {

	logs, sub, err := _IMessageBridge.contract.FilterLogs(opts, "MessageCallReverted")
	if err != nil {
		return nil, err
	}
	return &IMessageBridgeMessageCallRevertedIterator{contract: _IMessageBridge.contract, event: "MessageCallReverted", logs: logs, sub: sub}, nil
}

// WatchMessageCallReverted is a free log subscription operation binding the contract event 0xc666137142d7507d306f3aee4e2e08927034d27fc7c790316e8860c69782c94e.
//
// Solidity: event MessageCallReverted(bytes32 messageId, string reason)
func (_IMessageBridge *IMessageBridgeFilterer) WatchMessageCallReverted(opts *bind.WatchOpts, sink chan<- *IMessageBridgeMessageCallReverted) (event.Subscription, error) {

	logs, sub, err := _IMessageBridge.contract.WatchLogs(opts, "MessageCallReverted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IMessageBridgeMessageCallReverted)
				if err := _IMessageBridge.contract.UnpackLog(event, "MessageCallReverted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMessageCallReverted is a log parse operation binding the contract event 0xc666137142d7507d306f3aee4e2e08927034d27fc7c790316e8860c69782c94e.
//
// Solidity: event MessageCallReverted(bytes32 messageId, string reason)
func (_IMessageBridge *IMessageBridgeFilterer) ParseMessageCallReverted(log types.Log) (*IMessageBridgeMessageCallReverted, error) {
	event := new(IMessageBridgeMessageCallReverted)
	if err := _IMessageBridge.contract.UnpackLog(event, "MessageCallReverted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IMessageBridgeMessageExecutedIterator is returned from FilterMessageExecuted and is used to iterate over the raw logs and unpacked data for MessageExecuted events raised by the IMessageBridge contract.
type IMessageBridgeMessageExecutedIterator struct {
	Event *IMessageBridgeMessageExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IMessageBridgeMessageExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IMessageBridgeMessageExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IMessageBridgeMessageExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IMessageBridgeMessageExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IMessageBridgeMessageExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IMessageBridgeMessageExecuted represents a MessageExecuted event raised by the IMessageBridge contract.
type IMessageBridgeMessageExecuted struct {
	MessageId  [32]byte
	Nonce      *big.Int
	SrcChainId uint64
	Sender     common.Address
	Receiver   common.Address
	Message    []byte
	Success    bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterMessageExecuted is a free log retrieval operation binding the contract event 0xbf79e9ebbcf1fdc699f3a386de83f09cb080ab7e07f7b872118a93aef293102d.
//
// Solidity: event MessageExecuted(bytes32 indexed messageId, uint256 indexed nonce, uint64 srcChainId, address sender, address receiver, bytes message, bool success)
func (_IMessageBridge *IMessageBridgeFilterer) FilterMessageExecuted(opts *bind.FilterOpts, messageId [][32]byte, nonce []*big.Int) (*IMessageBridgeMessageExecutedIterator, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}
	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}

	logs, sub, err := _IMessageBridge.contract.FilterLogs(opts, "MessageExecuted", messageIdRule, nonceRule)
	if err != nil {
		return nil, err
	}
	return &IMessageBridgeMessageExecutedIterator{contract: _IMessageBridge.contract, event: "MessageExecuted", logs: logs, sub: sub}, nil
}

// WatchMessageExecuted is a free log subscription operation binding the contract event 0xbf79e9ebbcf1fdc699f3a386de83f09cb080ab7e07f7b872118a93aef293102d.
//
// Solidity: event MessageExecuted(bytes32 indexed messageId, uint256 indexed nonce, uint64 srcChainId, address sender, address receiver, bytes message, bool success)
func (_IMessageBridge *IMessageBridgeFilterer) WatchMessageExecuted(opts *bind.WatchOpts, sink chan<- *IMessageBridgeMessageExecuted, messageId [][32]byte, nonce []*big.Int) (event.Subscription, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}
	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}

	logs, sub, err := _IMessageBridge.contract.WatchLogs(opts, "MessageExecuted", messageIdRule, nonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IMessageBridgeMessageExecuted)
				if err := _IMessageBridge.contract.UnpackLog(event, "MessageExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMessageExecuted is a log parse operation binding the contract event 0xbf79e9ebbcf1fdc699f3a386de83f09cb080ab7e07f7b872118a93aef293102d.
//
// Solidity: event MessageExecuted(bytes32 indexed messageId, uint256 indexed nonce, uint64 srcChainId, address sender, address receiver, bytes message, bool success)
func (_IMessageBridge *IMessageBridgeFilterer) ParseMessageExecuted(log types.Log) (*IMessageBridgeMessageExecuted, error) {
	event := new(IMessageBridgeMessageExecuted)
	if err := _IMessageBridge.contract.UnpackLog(event, "MessageExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IMessageBridgeMessageSentIterator is returned from FilterMessageSent and is used to iterate over the raw logs and unpacked data for MessageSent events raised by the IMessageBridge contract.
type IMessageBridgeMessageSentIterator struct {
	Event *IMessageBridgeMessageSent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IMessageBridgeMessageSentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IMessageBridgeMessageSent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IMessageBridgeMessageSent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IMessageBridgeMessageSentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IMessageBridgeMessageSentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IMessageBridgeMessageSent represents a MessageSent event raised by the IMessageBridge contract.
type IMessageBridgeMessageSent struct {
	MessageId  [32]byte
	Nonce      *big.Int
	DstChainId uint64
	Sender     common.Address
	Receiver   common.Address
	Message    []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterMessageSent is a free log retrieval operation binding the contract event 0xd4c077d3ac449bc1b439559b537c6550f793c2432e3d74082b023162296dc566.
//
// Solidity: event MessageSent(bytes32 indexed messageId, uint256 indexed nonce, uint64 dstChainId, address sender, address receiver, bytes message)
func (_IMessageBridge *IMessageBridgeFilterer) FilterMessageSent(opts *bind.FilterOpts, messageId [][32]byte, nonce []*big.Int) (*IMessageBridgeMessageSentIterator, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}
	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}

	logs, sub, err := _IMessageBridge.contract.FilterLogs(opts, "MessageSent", messageIdRule, nonceRule)
	if err != nil {
		return nil, err
	}
	return &IMessageBridgeMessageSentIterator{contract: _IMessageBridge.contract, event: "MessageSent", logs: logs, sub: sub}, nil
}

// WatchMessageSent is a free log subscription operation binding the contract event 0xd4c077d3ac449bc1b439559b537c6550f793c2432e3d74082b023162296dc566.
//
// Solidity: event MessageSent(bytes32 indexed messageId, uint256 indexed nonce, uint64 dstChainId, address sender, address receiver, bytes message)
func (_IMessageBridge *IMessageBridgeFilterer) WatchMessageSent(opts *bind.WatchOpts, sink chan<- *IMessageBridgeMessageSent, messageId [][32]byte, nonce []*big.Int) (event.Subscription, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}
	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}

	logs, sub, err := _IMessageBridge.contract.WatchLogs(opts, "MessageSent", messageIdRule, nonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IMessageBridgeMessageSent)
				if err := _IMessageBridge.contract.UnpackLog(event, "MessageSent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMessageSent is a log parse operation binding the contract event 0xd4c077d3ac449bc1b439559b537c6550f793c2432e3d74082b023162296dc566.
//
// Solidity: event MessageSent(bytes32 indexed messageId, uint256 indexed nonce, uint64 dstChainId, address sender, address receiver, bytes message)
func (_IMessageBridge *IMessageBridgeFilterer) ParseMessageSent(log types.Log) (*IMessageBridgeMessageSent, error) {
	event := new(IMessageBridgeMessageSent)
	if err := _IMessageBridge.contract.UnpackLog(event, "MessageSent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IMessageReceiverAppMetaData contains all meta data concerning the IMessageReceiverApp contract.
var IMessageReceiverAppMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"executeMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IMessageReceiverAppABI is the input ABI used to generate the binding from.
// Deprecated: Use IMessageReceiverAppMetaData.ABI instead.
var IMessageReceiverAppABI = IMessageReceiverAppMetaData.ABI

// IMessageReceiverApp is an auto generated Go binding around an Ethereum contract.
type IMessageReceiverApp struct {
	IMessageReceiverAppCaller     // Read-only binding to the contract
	IMessageReceiverAppTransactor // Write-only binding to the contract
	IMessageReceiverAppFilterer   // Log filterer for contract events
}

// IMessageReceiverAppCaller is an auto generated read-only Go binding around an Ethereum contract.
type IMessageReceiverAppCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMessageReceiverAppTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IMessageReceiverAppTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMessageReceiverAppFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IMessageReceiverAppFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IMessageReceiverAppSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IMessageReceiverAppSession struct {
	Contract     *IMessageReceiverApp // Generic contract binding to set the session for
	CallOpts     bind.CallOpts        // Call options to use throughout this session
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// IMessageReceiverAppCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IMessageReceiverAppCallerSession struct {
	Contract *IMessageReceiverAppCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts              // Call options to use throughout this session
}

// IMessageReceiverAppTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IMessageReceiverAppTransactorSession struct {
	Contract     *IMessageReceiverAppTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// IMessageReceiverAppRaw is an auto generated low-level Go binding around an Ethereum contract.
type IMessageReceiverAppRaw struct {
	Contract *IMessageReceiverApp // Generic contract binding to access the raw methods on
}

// IMessageReceiverAppCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IMessageReceiverAppCallerRaw struct {
	Contract *IMessageReceiverAppCaller // Generic read-only contract binding to access the raw methods on
}

// IMessageReceiverAppTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IMessageReceiverAppTransactorRaw struct {
	Contract *IMessageReceiverAppTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIMessageReceiverApp creates a new instance of IMessageReceiverApp, bound to a specific deployed contract.
func NewIMessageReceiverApp(address common.Address, backend bind.ContractBackend) (*IMessageReceiverApp, error) {
	contract, err := bindIMessageReceiverApp(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IMessageReceiverApp{IMessageReceiverAppCaller: IMessageReceiverAppCaller{contract: contract}, IMessageReceiverAppTransactor: IMessageReceiverAppTransactor{contract: contract}, IMessageReceiverAppFilterer: IMessageReceiverAppFilterer{contract: contract}}, nil
}

// NewIMessageReceiverAppCaller creates a new read-only instance of IMessageReceiverApp, bound to a specific deployed contract.
func NewIMessageReceiverAppCaller(address common.Address, caller bind.ContractCaller) (*IMessageReceiverAppCaller, error) {
	contract, err := bindIMessageReceiverApp(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IMessageReceiverAppCaller{contract: contract}, nil
}

// NewIMessageReceiverAppTransactor creates a new write-only instance of IMessageReceiverApp, bound to a specific deployed contract.
func NewIMessageReceiverAppTransactor(address common.Address, transactor bind.ContractTransactor) (*IMessageReceiverAppTransactor, error) {
	contract, err := bindIMessageReceiverApp(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IMessageReceiverAppTransactor{contract: contract}, nil
}

// NewIMessageReceiverAppFilterer creates a new log filterer instance of IMessageReceiverApp, bound to a specific deployed contract.
func NewIMessageReceiverAppFilterer(address common.Address, filterer bind.ContractFilterer) (*IMessageReceiverAppFilterer, error) {
	contract, err := bindIMessageReceiverApp(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IMessageReceiverAppFilterer{contract: contract}, nil
}

// bindIMessageReceiverApp binds a generic wrapper to an already deployed contract.
func bindIMessageReceiverApp(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IMessageReceiverAppMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IMessageReceiverApp *IMessageReceiverAppRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IMessageReceiverApp.Contract.IMessageReceiverAppCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IMessageReceiverApp *IMessageReceiverAppRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IMessageReceiverApp.Contract.IMessageReceiverAppTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IMessageReceiverApp *IMessageReceiverAppRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IMessageReceiverApp.Contract.IMessageReceiverAppTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IMessageReceiverApp *IMessageReceiverAppCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IMessageReceiverApp.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IMessageReceiverApp *IMessageReceiverAppTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IMessageReceiverApp.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IMessageReceiverApp *IMessageReceiverAppTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IMessageReceiverApp.Contract.contract.Transact(opts, method, params...)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0xaec95a14.
//
// Solidity: function executeMessage(uint64 _srcChainId, address _sender, bytes _message, address _executor) returns(bool)
func (_IMessageReceiverApp *IMessageReceiverAppTransactor) ExecuteMessage(opts *bind.TransactOpts, _srcChainId uint64, _sender common.Address, _message []byte, _executor common.Address) (*types.Transaction, error) {
	return _IMessageReceiverApp.contract.Transact(opts, "executeMessage", _srcChainId, _sender, _message, _executor)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0xaec95a14.
//
// Solidity: function executeMessage(uint64 _srcChainId, address _sender, bytes _message, address _executor) returns(bool)
func (_IMessageReceiverApp *IMessageReceiverAppSession) ExecuteMessage(_srcChainId uint64, _sender common.Address, _message []byte, _executor common.Address) (*types.Transaction, error) {
	return _IMessageReceiverApp.Contract.ExecuteMessage(&_IMessageReceiverApp.TransactOpts, _srcChainId, _sender, _message, _executor)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0xaec95a14.
//
// Solidity: function executeMessage(uint64 _srcChainId, address _sender, bytes _message, address _executor) returns(bool)
func (_IMessageReceiverApp *IMessageReceiverAppTransactorSession) ExecuteMessage(_srcChainId uint64, _sender common.Address, _message []byte, _executor common.Address) (*types.Transaction, error) {
	return _IMessageReceiverApp.Contract.ExecuteMessage(&_IMessageReceiverApp.TransactOpts, _srcChainId, _sender, _message, _executor)
}

// IPeggedTokenMetaData contains all meta data concerning the IPeggedToken contract.
var IPeggedTokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IPeggedTokenABI is the input ABI used to generate the binding from.
// Deprecated: Use IPeggedTokenMetaData.ABI instead.
var IPeggedTokenABI = IPeggedTokenMetaData.ABI

// IPeggedToken is an auto generated Go binding around an Ethereum contract.
type IPeggedToken struct {
	IPeggedTokenCaller     // Read-only binding to the contract
	IPeggedTokenTransactor // Write-only binding to the contract
	IPeggedTokenFilterer   // Log filterer for contract events
}

// IPeggedTokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type IPeggedTokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IPeggedTokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IPeggedTokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IPeggedTokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IPeggedTokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IPeggedTokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IPeggedTokenSession struct {
	Contract     *IPeggedToken     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IPeggedTokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IPeggedTokenCallerSession struct {
	Contract *IPeggedTokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// IPeggedTokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IPeggedTokenTransactorSession struct {
	Contract     *IPeggedTokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// IPeggedTokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type IPeggedTokenRaw struct {
	Contract *IPeggedToken // Generic contract binding to access the raw methods on
}

// IPeggedTokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IPeggedTokenCallerRaw struct {
	Contract *IPeggedTokenCaller // Generic read-only contract binding to access the raw methods on
}

// IPeggedTokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IPeggedTokenTransactorRaw struct {
	Contract *IPeggedTokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIPeggedToken creates a new instance of IPeggedToken, bound to a specific deployed contract.
func NewIPeggedToken(address common.Address, backend bind.ContractBackend) (*IPeggedToken, error) {
	contract, err := bindIPeggedToken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IPeggedToken{IPeggedTokenCaller: IPeggedTokenCaller{contract: contract}, IPeggedTokenTransactor: IPeggedTokenTransactor{contract: contract}, IPeggedTokenFilterer: IPeggedTokenFilterer{contract: contract}}, nil
}

// NewIPeggedTokenCaller creates a new read-only instance of IPeggedToken, bound to a specific deployed contract.
func NewIPeggedTokenCaller(address common.Address, caller bind.ContractCaller) (*IPeggedTokenCaller, error) {
	contract, err := bindIPeggedToken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IPeggedTokenCaller{contract: contract}, nil
}

// NewIPeggedTokenTransactor creates a new write-only instance of IPeggedToken, bound to a specific deployed contract.
func NewIPeggedTokenTransactor(address common.Address, transactor bind.ContractTransactor) (*IPeggedTokenTransactor, error) {
	contract, err := bindIPeggedToken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IPeggedTokenTransactor{contract: contract}, nil
}

// NewIPeggedTokenFilterer creates a new log filterer instance of IPeggedToken, bound to a specific deployed contract.
func NewIPeggedTokenFilterer(address common.Address, filterer bind.ContractFilterer) (*IPeggedTokenFilterer, error) {
	contract, err := bindIPeggedToken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IPeggedTokenFilterer{contract: contract}, nil
}

// bindIPeggedToken binds a generic wrapper to an already deployed contract.
func bindIPeggedToken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IPeggedTokenMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IPeggedToken *IPeggedTokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IPeggedToken.Contract.IPeggedTokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IPeggedToken *IPeggedTokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IPeggedToken.Contract.IPeggedTokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IPeggedToken *IPeggedTokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IPeggedToken.Contract.IPeggedTokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IPeggedToken *IPeggedTokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IPeggedToken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IPeggedToken *IPeggedTokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IPeggedToken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IPeggedToken *IPeggedTokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IPeggedToken.Contract.contract.Transact(opts, method, params...)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address _from, uint256 _amount) returns()
func (_IPeggedToken *IPeggedTokenTransactor) BurnFrom(opts *bind.TransactOpts, _from common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IPeggedToken.contract.Transact(opts, "burnFrom", _from, _amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address _from, uint256 _amount) returns()
func (_IPeggedToken *IPeggedTokenSession) BurnFrom(_from common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IPeggedToken.Contract.BurnFrom(&_IPeggedToken.TransactOpts, _from, _amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address _from, uint256 _amount) returns()
func (_IPeggedToken *IPeggedTokenTransactorSession) BurnFrom(_from common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IPeggedToken.Contract.BurnFrom(&_IPeggedToken.TransactOpts, _from, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 _amount) returns()
func (_IPeggedToken *IPeggedTokenTransactor) Mint(opts *bind.TransactOpts, _to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IPeggedToken.contract.Transact(opts, "mint", _to, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 _amount) returns()
func (_IPeggedToken *IPeggedTokenSession) Mint(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IPeggedToken.Contract.Mint(&_IPeggedToken.TransactOpts, _to, _amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address _to, uint256 _amount) returns()
func (_IPeggedToken *IPeggedTokenTransactorSession) Mint(_to common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _IPeggedToken.Contract.Mint(&_IPeggedToken.TransactOpts, _to, _amount)
}

// IPoolManagerMetaData contains all meta data concerning the IPoolManager contract.
var IPoolManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"CurrenciesInitializedOutOfOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CurrencyNotSettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTooLarge\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"name\":\"LockedBy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxCurrenciesTouched\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPoolManagerToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolFeeCannotBeFetched\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TickSpacingTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TickSpacingTooSmall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"PoolId\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"hookFees\",\"type\":\"uint24\"}],\"name\":\"HookFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"PoolId\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"PoolId\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"liquidityDelta\",\"type\":\"int256\"}],\"name\":\"ModifyPosition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocolFeeController\",\"type\":\"address\"}],\"name\":\"ProtocolFeeControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"PoolId\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"protocolFees\",\"type\":\"uint24\"}],\"name\":\"ProtocolFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"PoolId\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"amount0\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"amount1\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TICK_SPACING\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_PROTOCOL_FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TICK_SPACING\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"currencyDelta\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"donate\",\"outputs\":[{\"internalType\":\"BalanceDelta\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"extsload\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"nSlots\",\"type\":\"uint256\"}],\"name\":\"extsload\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"PoolId\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"PoolId\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"locker\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"PoolId\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"getPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside0LastX128\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeGrowthInside1LastX128\",\"type\":\"uint256\"}],\"internalType\":\"structPosition.Info\",\"name\":\"position\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"PoolId\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getSlot0\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"uint24\",\"name\":\"protocolFees\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"hookFees\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hookFeesAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockData\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"length\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"nonzeroDeltaCount\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Currency\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"int256\",\"name\":\"liquidityDelta\",\"type\":\"int256\"}],\"internalType\":\"structIPoolManager.ModifyPositionParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"modifyPosition\",\"outputs\":[{\"internalType\":\"BalanceDelta\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Currency\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protocolFeesAccrued\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Currency\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"reservesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"key\",\"type\":\"tuple\"}],\"name\":\"setHookFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"key\",\"type\":\"tuple\"}],\"name\":\"setProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Currency\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"structIPoolManager.SwapParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"hookData\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"BalanceDelta\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Currency\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"take\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IPoolManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use IPoolManagerMetaData.ABI instead.
var IPoolManagerABI = IPoolManagerMetaData.ABI

// IPoolManager is an auto generated Go binding around an Ethereum contract.
type IPoolManager struct {
	IPoolManagerCaller     // Read-only binding to the contract
	IPoolManagerTransactor // Write-only binding to the contract
	IPoolManagerFilterer   // Log filterer for contract events
}

// IPoolManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type IPoolManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IPoolManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IPoolManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IPoolManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IPoolManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IPoolManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IPoolManagerSession struct {
	Contract     *IPoolManager     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IPoolManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IPoolManagerCallerSession struct {
	Contract *IPoolManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// IPoolManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IPoolManagerTransactorSession struct {
	Contract     *IPoolManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// IPoolManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type IPoolManagerRaw struct {
	Contract *IPoolManager // Generic contract binding to access the raw methods on
}

// IPoolManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IPoolManagerCallerRaw struct {
	Contract *IPoolManagerCaller // Generic read-only contract binding to access the raw methods on
}

// IPoolManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IPoolManagerTransactorRaw struct {
	Contract *IPoolManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIPoolManager creates a new instance of IPoolManager, bound to a specific deployed contract.
func NewIPoolManager(address common.Address, backend bind.ContractBackend) (*IPoolManager, error) {
	contract, err := bindIPoolManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IPoolManager{IPoolManagerCaller: IPoolManagerCaller{contract: contract}, IPoolManagerTransactor: IPoolManagerTransactor{contract: contract}, IPoolManagerFilterer: IPoolManagerFilterer{contract: contract}}, nil
}

// NewIPoolManagerCaller creates a new read-only instance of IPoolManager, bound to a specific deployed contract.
func NewIPoolManagerCaller(address common.Address, caller bind.ContractCaller) (*IPoolManagerCaller, error) {
	contract, err := bindIPoolManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IPoolManagerCaller{contract: contract}, nil
}

// NewIPoolManagerTransactor creates a new write-only instance of IPoolManager, bound to a specific deployed contract.
func NewIPoolManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*IPoolManagerTransactor, error) {
	contract, err := bindIPoolManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IPoolManagerTransactor{contract: contract}, nil
}

// NewIPoolManagerFilterer creates a new log filterer instance of IPoolManager, bound to a specific deployed contract.
func NewIPoolManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*IPoolManagerFilterer, error) {
	contract, err := bindIPoolManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IPoolManagerFilterer{contract: contract}, nil
}

// bindIPoolManager binds a generic wrapper to an already deployed contract.
func bindIPoolManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IPoolManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IPoolManager *IPoolManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IPoolManager.Contract.IPoolManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IPoolManager *IPoolManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IPoolManager.Contract.IPoolManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IPoolManager *IPoolManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IPoolManager.Contract.IPoolManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IPoolManager *IPoolManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IPoolManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IPoolManager *IPoolManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IPoolManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IPoolManager *IPoolManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IPoolManager.Contract.contract.Transact(opts, method, params...)
}

// MAXTICKSPACING is a free data retrieval call binding the contract method 0x60460f06.
//
// Solidity: function MAX_TICK_SPACING() view returns(int24)
func (_IPoolManager *IPoolManagerCaller) MAXTICKSPACING(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IPoolManager.contract.Call(opts, &out, "MAX_TICK_SPACING")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MAXTICKSPACING is a free data retrieval call binding the contract method 0x60460f06.
//
// Solidity: function MAX_TICK_SPACING() view returns(int24)
func (_IPoolManager *IPoolManagerSession) MAXTICKSPACING() (*big.Int, error) {
	return _IPoolManager.Contract.MAXTICKSPACING(&_IPoolManager.CallOpts)
}

// MAXTICKSPACING is a free data retrieval call binding the contract method 0x60460f06.
//
// Solidity: function MAX_TICK_SPACING() view returns(int24)
func (_IPoolManager *IPoolManagerCallerSession) MAXTICKSPACING() (*big.Int, error) {
	return _IPoolManager.Contract.MAXTICKSPACING(&_IPoolManager.CallOpts)
}

// MINPROTOCOLFEEDENOMINATOR is a free data retrieval call binding the contract method 0x84e41c5e.
//
// Solidity: function MIN_PROTOCOL_FEE_DENOMINATOR() view returns(uint8)
func (_IPoolManager *IPoolManagerCaller) MINPROTOCOLFEEDENOMINATOR(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _IPoolManager.contract.Call(opts, &out, "MIN_PROTOCOL_FEE_DENOMINATOR")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// MINPROTOCOLFEEDENOMINATOR is a free data retrieval call binding the contract method 0x84e41c5e.
//
// Solidity: function MIN_PROTOCOL_FEE_DENOMINATOR() view returns(uint8)
func (_IPoolManager *IPoolManagerSession) MINPROTOCOLFEEDENOMINATOR() (uint8, error) {
	return _IPoolManager.Contract.MINPROTOCOLFEEDENOMINATOR(&_IPoolManager.CallOpts)
}

// MINPROTOCOLFEEDENOMINATOR is a free data retrieval call binding the contract method 0x84e41c5e.
//
// Solidity: function MIN_PROTOCOL_FEE_DENOMINATOR() view returns(uint8)
func (_IPoolManager *IPoolManagerCallerSession) MINPROTOCOLFEEDENOMINATOR() (uint8, error) {
	return _IPoolManager.Contract.MINPROTOCOLFEEDENOMINATOR(&_IPoolManager.CallOpts)
}

// MINTICKSPACING is a free data retrieval call binding the contract method 0x07eff0dd.
//
// Solidity: function MIN_TICK_SPACING() view returns(int24)
func (_IPoolManager *IPoolManagerCaller) MINTICKSPACING(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _IPoolManager.contract.Call(opts, &out, "MIN_TICK_SPACING")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MINTICKSPACING is a free data retrieval call binding the contract method 0x07eff0dd.
//
// Solidity: function MIN_TICK_SPACING() view returns(int24)
func (_IPoolManager *IPoolManagerSession) MINTICKSPACING() (*big.Int, error) {
	return _IPoolManager.Contract.MINTICKSPACING(&_IPoolManager.CallOpts)
}

// MINTICKSPACING is a free data retrieval call binding the contract method 0x07eff0dd.
//
// Solidity: function MIN_TICK_SPACING() view returns(int24)
func (_IPoolManager *IPoolManagerCallerSession) MINTICKSPACING() (*big.Int, error) {
	return _IPoolManager.Contract.MINTICKSPACING(&_IPoolManager.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_IPoolManager *IPoolManagerCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IPoolManager.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_IPoolManager *IPoolManagerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _IPoolManager.Contract.BalanceOf(&_IPoolManager.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_IPoolManager *IPoolManagerCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _IPoolManager.Contract.BalanceOf(&_IPoolManager.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_IPoolManager *IPoolManagerCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _IPoolManager.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_IPoolManager *IPoolManagerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _IPoolManager.Contract.BalanceOfBatch(&_IPoolManager.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_IPoolManager *IPoolManagerCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _IPoolManager.Contract.BalanceOfBatch(&_IPoolManager.CallOpts, accounts, ids)
}

// CurrencyDelta is a free data retrieval call binding the contract method 0xa54b2831.
//
// Solidity: function currencyDelta(address locker, address currency) view returns(int256)
func (_IPoolManager *IPoolManagerCaller) CurrencyDelta(opts *bind.CallOpts, locker common.Address, currency common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IPoolManager.contract.Call(opts, &out, "currencyDelta", locker, currency)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CurrencyDelta is a free data retrieval call binding the contract method 0xa54b2831.
//
// Solidity: function currencyDelta(address locker, address currency) view returns(int256)
func (_IPoolManager *IPoolManagerSession) CurrencyDelta(locker common.Address, currency common.Address) (*big.Int, error) {
	return _IPoolManager.Contract.CurrencyDelta(&_IPoolManager.CallOpts, locker, currency)
}

// CurrencyDelta is a free data retrieval call binding the contract method 0xa54b2831.
//
// Solidity: function currencyDelta(address locker, address currency) view returns(int256)
func (_IPoolManager *IPoolManagerCallerSession) CurrencyDelta(locker common.Address, currency common.Address) (*big.Int, error) {
	return _IPoolManager.Contract.CurrencyDelta(&_IPoolManager.CallOpts, locker, currency)
}

// Extsload is a free data retrieval call binding the contract method 0x1e2eaeaf.
//
// Solidity: function extsload(bytes32 slot) view returns(bytes32 value)
func (_IPoolManager *IPoolManagerCaller) Extsload(opts *bind.CallOpts, slot [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _IPoolManager.contract.Call(opts, &out, "extsload", slot)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Extsload is a free data retrieval call binding the contract method 0x1e2eaeaf.
//
// Solidity: function extsload(bytes32 slot) view returns(bytes32 value)
func (_IPoolManager *IPoolManagerSession) Extsload(slot [32]byte) ([32]byte, error) {
	return _IPoolManager.Contract.Extsload(&_IPoolManager.CallOpts, slot)
}

// Extsload is a free data retrieval call binding the contract method 0x1e2eaeaf.
//
// Solidity: function extsload(bytes32 slot) view returns(bytes32 value)
func (_IPoolManager *IPoolManagerCallerSession) Extsload(slot [32]byte) ([32]byte, error) {
	return _IPoolManager.Contract.Extsload(&_IPoolManager.CallOpts, slot)
}

// Extsload0 is a free data retrieval call binding the contract method 0x35fd631a.
//
// Solidity: function extsload(bytes32 slot, uint256 nSlots) view returns(bytes value)
func (_IPoolManager *IPoolManagerCaller) Extsload0(opts *bind.CallOpts, slot [32]byte, nSlots *big.Int) ([]byte, error) {
	var out []interface{}
	err := _IPoolManager.contract.Call(opts, &out, "extsload0", slot, nSlots)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// Extsload0 is a free data retrieval call binding the contract method 0x35fd631a.
//
// Solidity: function extsload(bytes32 slot, uint256 nSlots) view returns(bytes value)
func (_IPoolManager *IPoolManagerSession) Extsload0(slot [32]byte, nSlots *big.Int) ([]byte, error) {
	return _IPoolManager.Contract.Extsload0(&_IPoolManager.CallOpts, slot, nSlots)
}

// Extsload0 is a free data retrieval call binding the contract method 0x35fd631a.
//
// Solidity: function extsload(bytes32 slot, uint256 nSlots) view returns(bytes value)
func (_IPoolManager *IPoolManagerCallerSession) Extsload0(slot [32]byte, nSlots *big.Int) ([]byte, error) {
	return _IPoolManager.Contract.Extsload0(&_IPoolManager.CallOpts, slot, nSlots)
}

// GetLiquidity is a free data retrieval call binding the contract method 0x33aa955b.
//
// Solidity: function getLiquidity(bytes32 id, address owner, int24 tickLower, int24 tickUpper) view returns(uint128 liquidity)
func (_IPoolManager *IPoolManagerCaller) GetLiquidity(opts *bind.CallOpts, id [32]byte, owner common.Address, tickLower *big.Int, tickUpper *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _IPoolManager.contract.Call(opts, &out, "getLiquidity", id, owner, tickLower, tickUpper)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLiquidity is a free data retrieval call binding the contract method 0x33aa955b.
//
// Solidity: function getLiquidity(bytes32 id, address owner, int24 tickLower, int24 tickUpper) view returns(uint128 liquidity)
func (_IPoolManager *IPoolManagerSession) GetLiquidity(id [32]byte, owner common.Address, tickLower *big.Int, tickUpper *big.Int) (*big.Int, error) {
	return _IPoolManager.Contract.GetLiquidity(&_IPoolManager.CallOpts, id, owner, tickLower, tickUpper)
}

// GetLiquidity is a free data retrieval call binding the contract method 0x33aa955b.
//
// Solidity: function getLiquidity(bytes32 id, address owner, int24 tickLower, int24 tickUpper) view returns(uint128 liquidity)
func (_IPoolManager *IPoolManagerCallerSession) GetLiquidity(id [32]byte, owner common.Address, tickLower *big.Int, tickUpper *big.Int) (*big.Int, error) {
	return _IPoolManager.Contract.GetLiquidity(&_IPoolManager.CallOpts, id, owner, tickLower, tickUpper)
}

// GetLiquidity0 is a free data retrieval call binding the contract method 0xfa6793d5.
//
// Solidity: function getLiquidity(bytes32 id) view returns(uint128 liquidity)
func (_IPoolManager *IPoolManagerCaller) GetLiquidity0(opts *bind.CallOpts, id [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _IPoolManager.contract.Call(opts, &out, "getLiquidity0", id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLiquidity0 is a free data retrieval call binding the contract method 0xfa6793d5.
//
// Solidity: function getLiquidity(bytes32 id) view returns(uint128 liquidity)
func (_IPoolManager *IPoolManagerSession) GetLiquidity0(id [32]byte) (*big.Int, error) {
	return _IPoolManager.Contract.GetLiquidity0(&_IPoolManager.CallOpts, id)
}

// GetLiquidity0 is a free data retrieval call binding the contract method 0xfa6793d5.
//
// Solidity: function getLiquidity(bytes32 id) view returns(uint128 liquidity)
func (_IPoolManager *IPoolManagerCallerSession) GetLiquidity0(id [32]byte) (*big.Int, error) {
	return _IPoolManager.Contract.GetLiquidity0(&_IPoolManager.CallOpts, id)
}

// GetLock is a free data retrieval call binding the contract method 0xd68f4dd1.
//
// Solidity: function getLock(uint256 i) view returns(address locker)
func (_IPoolManager *IPoolManagerCaller) GetLock(opts *bind.CallOpts, i *big.Int) (common.Address, error) {
	var out []interface{}
	err := _IPoolManager.contract.Call(opts, &out, "getLock", i)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetLock is a free data retrieval call binding the contract method 0xd68f4dd1.
//
// Solidity: function getLock(uint256 i) view returns(address locker)
func (_IPoolManager *IPoolManagerSession) GetLock(i *big.Int) (common.Address, error) {
	return _IPoolManager.Contract.GetLock(&_IPoolManager.CallOpts, i)
}

// GetLock is a free data retrieval call binding the contract method 0xd68f4dd1.
//
// Solidity: function getLock(uint256 i) view returns(address locker)
func (_IPoolManager *IPoolManagerCallerSession) GetLock(i *big.Int) (common.Address, error) {
	return _IPoolManager.Contract.GetLock(&_IPoolManager.CallOpts, i)
}

// GetPosition is a free data retrieval call binding the contract method 0x048d9c70.
//
// Solidity: function getPosition(bytes32 id, address owner, int24 tickLower, int24 tickUpper) view returns((uint128,uint256,uint256) position)
func (_IPoolManager *IPoolManagerCaller) GetPosition(opts *bind.CallOpts, id [32]byte, owner common.Address, tickLower *big.Int, tickUpper *big.Int) (PositionInfo, error) {
	var out []interface{}
	err := _IPoolManager.contract.Call(opts, &out, "getPosition", id, owner, tickLower, tickUpper)

	if err != nil {
		return *new(PositionInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(PositionInfo)).(*PositionInfo)

	return out0, err

}

// GetPosition is a free data retrieval call binding the contract method 0x048d9c70.
//
// Solidity: function getPosition(bytes32 id, address owner, int24 tickLower, int24 tickUpper) view returns((uint128,uint256,uint256) position)
func (_IPoolManager *IPoolManagerSession) GetPosition(id [32]byte, owner common.Address, tickLower *big.Int, tickUpper *big.Int) (PositionInfo, error) {
	return _IPoolManager.Contract.GetPosition(&_IPoolManager.CallOpts, id, owner, tickLower, tickUpper)
}

// GetPosition is a free data retrieval call binding the contract method 0x048d9c70.
//
// Solidity: function getPosition(bytes32 id, address owner, int24 tickLower, int24 tickUpper) view returns((uint128,uint256,uint256) position)
func (_IPoolManager *IPoolManagerCallerSession) GetPosition(id [32]byte, owner common.Address, tickLower *big.Int, tickUpper *big.Int) (PositionInfo, error) {
	return _IPoolManager.Contract.GetPosition(&_IPoolManager.CallOpts, id, owner, tickLower, tickUpper)
}

// GetSlot0 is a free data retrieval call binding the contract method 0xc815641c.
//
// Solidity: function getSlot0(bytes32 id) view returns(uint160 sqrtPriceX96, int24 tick, uint24 protocolFees, uint24 hookFees)
func (_IPoolManager *IPoolManagerCaller) GetSlot0(opts *bind.CallOpts, id [32]byte) (struct {
	SqrtPriceX96 *big.Int
	Tick         *big.Int
	ProtocolFees *big.Int
	HookFees     *big.Int
}, error) {
	var out []interface{}
	err := _IPoolManager.contract.Call(opts, &out, "getSlot0", id)

	outstruct := new(struct {
		SqrtPriceX96 *big.Int
		Tick         *big.Int
		ProtocolFees *big.Int
		HookFees     *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.SqrtPriceX96 = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Tick = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.ProtocolFees = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.HookFees = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetSlot0 is a free data retrieval call binding the contract method 0xc815641c.
//
// Solidity: function getSlot0(bytes32 id) view returns(uint160 sqrtPriceX96, int24 tick, uint24 protocolFees, uint24 hookFees)
func (_IPoolManager *IPoolManagerSession) GetSlot0(id [32]byte) (struct {
	SqrtPriceX96 *big.Int
	Tick         *big.Int
	ProtocolFees *big.Int
	HookFees     *big.Int
}, error) {
	return _IPoolManager.Contract.GetSlot0(&_IPoolManager.CallOpts, id)
}

// GetSlot0 is a free data retrieval call binding the contract method 0xc815641c.
//
// Solidity: function getSlot0(bytes32 id) view returns(uint160 sqrtPriceX96, int24 tick, uint24 protocolFees, uint24 hookFees)
func (_IPoolManager *IPoolManagerCallerSession) GetSlot0(id [32]byte) (struct {
	SqrtPriceX96 *big.Int
	Tick         *big.Int
	ProtocolFees *big.Int
	HookFees     *big.Int
}, error) {
	return _IPoolManager.Contract.GetSlot0(&_IPoolManager.CallOpts, id)
}

// HookFeesAccrued is a free data retrieval call binding the contract method 0xb4c41939.
//
// Solidity: function hookFeesAccrued(address , address ) view returns(uint256)
func (_IPoolManager *IPoolManagerCaller) HookFeesAccrued(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IPoolManager.contract.Call(opts, &out, "hookFeesAccrued", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// HookFeesAccrued is a free data retrieval call binding the contract method 0xb4c41939.
//
// Solidity: function hookFeesAccrued(address , address ) view returns(uint256)
func (_IPoolManager *IPoolManagerSession) HookFeesAccrued(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _IPoolManager.Contract.HookFeesAccrued(&_IPoolManager.CallOpts, arg0, arg1)
}

// HookFeesAccrued is a free data retrieval call binding the contract method 0xb4c41939.
//
// Solidity: function hookFeesAccrued(address , address ) view returns(uint256)
func (_IPoolManager *IPoolManagerCallerSession) HookFeesAccrued(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _IPoolManager.Contract.HookFeesAccrued(&_IPoolManager.CallOpts, arg0, arg1)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_IPoolManager *IPoolManagerCaller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _IPoolManager.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_IPoolManager *IPoolManagerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _IPoolManager.Contract.IsApprovedForAll(&_IPoolManager.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_IPoolManager *IPoolManagerCallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _IPoolManager.Contract.IsApprovedForAll(&_IPoolManager.CallOpts, account, operator)
}

// LockData is a free data retrieval call binding the contract method 0xf8fcd156.
//
// Solidity: function lockData() view returns(uint128 length, uint128 nonzeroDeltaCount)
func (_IPoolManager *IPoolManagerCaller) LockData(opts *bind.CallOpts) (struct {
	Length            *big.Int
	NonzeroDeltaCount *big.Int
}, error) {
	var out []interface{}
	err := _IPoolManager.contract.Call(opts, &out, "lockData")

	outstruct := new(struct {
		Length            *big.Int
		NonzeroDeltaCount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Length = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.NonzeroDeltaCount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// LockData is a free data retrieval call binding the contract method 0xf8fcd156.
//
// Solidity: function lockData() view returns(uint128 length, uint128 nonzeroDeltaCount)
func (_IPoolManager *IPoolManagerSession) LockData() (struct {
	Length            *big.Int
	NonzeroDeltaCount *big.Int
}, error) {
	return _IPoolManager.Contract.LockData(&_IPoolManager.CallOpts)
}

// LockData is a free data retrieval call binding the contract method 0xf8fcd156.
//
// Solidity: function lockData() view returns(uint128 length, uint128 nonzeroDeltaCount)
func (_IPoolManager *IPoolManagerCallerSession) LockData() (struct {
	Length            *big.Int
	NonzeroDeltaCount *big.Int
}, error) {
	return _IPoolManager.Contract.LockData(&_IPoolManager.CallOpts)
}

// ProtocolFeesAccrued is a free data retrieval call binding the contract method 0x97e8cd4e.
//
// Solidity: function protocolFeesAccrued(address ) view returns(uint256)
func (_IPoolManager *IPoolManagerCaller) ProtocolFeesAccrued(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IPoolManager.contract.Call(opts, &out, "protocolFeesAccrued", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ProtocolFeesAccrued is a free data retrieval call binding the contract method 0x97e8cd4e.
//
// Solidity: function protocolFeesAccrued(address ) view returns(uint256)
func (_IPoolManager *IPoolManagerSession) ProtocolFeesAccrued(arg0 common.Address) (*big.Int, error) {
	return _IPoolManager.Contract.ProtocolFeesAccrued(&_IPoolManager.CallOpts, arg0)
}

// ProtocolFeesAccrued is a free data retrieval call binding the contract method 0x97e8cd4e.
//
// Solidity: function protocolFeesAccrued(address ) view returns(uint256)
func (_IPoolManager *IPoolManagerCallerSession) ProtocolFeesAccrued(arg0 common.Address) (*big.Int, error) {
	return _IPoolManager.Contract.ProtocolFeesAccrued(&_IPoolManager.CallOpts, arg0)
}

// ReservesOf is a free data retrieval call binding the contract method 0x93c85a21.
//
// Solidity: function reservesOf(address currency) view returns(uint256)
func (_IPoolManager *IPoolManagerCaller) ReservesOf(opts *bind.CallOpts, currency common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IPoolManager.contract.Call(opts, &out, "reservesOf", currency)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ReservesOf is a free data retrieval call binding the contract method 0x93c85a21.
//
// Solidity: function reservesOf(address currency) view returns(uint256)
func (_IPoolManager *IPoolManagerSession) ReservesOf(currency common.Address) (*big.Int, error) {
	return _IPoolManager.Contract.ReservesOf(&_IPoolManager.CallOpts, currency)
}

// ReservesOf is a free data retrieval call binding the contract method 0x93c85a21.
//
// Solidity: function reservesOf(address currency) view returns(uint256)
func (_IPoolManager *IPoolManagerCallerSession) ReservesOf(currency common.Address) (*big.Int, error) {
	return _IPoolManager.Contract.ReservesOf(&_IPoolManager.CallOpts, currency)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IPoolManager *IPoolManagerCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _IPoolManager.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IPoolManager *IPoolManagerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IPoolManager.Contract.SupportsInterface(&_IPoolManager.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_IPoolManager *IPoolManagerCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _IPoolManager.Contract.SupportsInterface(&_IPoolManager.CallOpts, interfaceId)
}

// Donate is a paid mutator transaction binding the contract method 0x234266d7.
//
// Solidity: function donate((address,address,uint24,int24,address) key, uint256 amount0, uint256 amount1, bytes hookData) returns(int256)
func (_IPoolManager *IPoolManagerTransactor) Donate(opts *bind.TransactOpts, key PoolKey, amount0 *big.Int, amount1 *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IPoolManager.contract.Transact(opts, "donate", key, amount0, amount1, hookData)
}

// Donate is a paid mutator transaction binding the contract method 0x234266d7.
//
// Solidity: function donate((address,address,uint24,int24,address) key, uint256 amount0, uint256 amount1, bytes hookData) returns(int256)
func (_IPoolManager *IPoolManagerSession) Donate(key PoolKey, amount0 *big.Int, amount1 *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IPoolManager.Contract.Donate(&_IPoolManager.TransactOpts, key, amount0, amount1, hookData)
}

// Donate is a paid mutator transaction binding the contract method 0x234266d7.
//
// Solidity: function donate((address,address,uint24,int24,address) key, uint256 amount0, uint256 amount1, bytes hookData) returns(int256)
func (_IPoolManager *IPoolManagerTransactorSession) Donate(key PoolKey, amount0 *big.Int, amount1 *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IPoolManager.Contract.Donate(&_IPoolManager.TransactOpts, key, amount0, amount1, hookData)
}

// Initialize is a paid mutator transaction binding the contract method 0x695c5bf5.
//
// Solidity: function initialize((address,address,uint24,int24,address) key, uint160 sqrtPriceX96, bytes hookData) returns(int24 tick)
func (_IPoolManager *IPoolManagerTransactor) Initialize(opts *bind.TransactOpts, key PoolKey, sqrtPriceX96 *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IPoolManager.contract.Transact(opts, "initialize", key, sqrtPriceX96, hookData)
}

// Initialize is a paid mutator transaction binding the contract method 0x695c5bf5.
//
// Solidity: function initialize((address,address,uint24,int24,address) key, uint160 sqrtPriceX96, bytes hookData) returns(int24 tick)
func (_IPoolManager *IPoolManagerSession) Initialize(key PoolKey, sqrtPriceX96 *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IPoolManager.Contract.Initialize(&_IPoolManager.TransactOpts, key, sqrtPriceX96, hookData)
}

// Initialize is a paid mutator transaction binding the contract method 0x695c5bf5.
//
// Solidity: function initialize((address,address,uint24,int24,address) key, uint160 sqrtPriceX96, bytes hookData) returns(int24 tick)
func (_IPoolManager *IPoolManagerTransactorSession) Initialize(key PoolKey, sqrtPriceX96 *big.Int, hookData []byte) (*types.Transaction, error) {
	return _IPoolManager.Contract.Initialize(&_IPoolManager.TransactOpts, key, sqrtPriceX96, hookData)
}

// Lock is a paid mutator transaction binding the contract method 0x81548319.
//
// Solidity: function lock(bytes data) returns(bytes)
func (_IPoolManager *IPoolManagerTransactor) Lock(opts *bind.TransactOpts, data []byte) (*types.Transaction, error) {
	return _IPoolManager.contract.Transact(opts, "lock", data)
}

// Lock is a paid mutator transaction binding the contract method 0x81548319.
//
// Solidity: function lock(bytes data) returns(bytes)
func (_IPoolManager *IPoolManagerSession) Lock(data []byte) (*types.Transaction, error) {
	return _IPoolManager.Contract.Lock(&_IPoolManager.TransactOpts, data)
}

// Lock is a paid mutator transaction binding the contract method 0x81548319.
//
// Solidity: function lock(bytes data) returns(bytes)
func (_IPoolManager *IPoolManagerTransactorSession) Lock(data []byte) (*types.Transaction, error) {
	return _IPoolManager.Contract.Lock(&_IPoolManager.TransactOpts, data)
}

// Mint is a paid mutator transaction binding the contract method 0xc6c3bbe6.
//
// Solidity: function mint(address token, address to, uint256 amount) returns()
func (_IPoolManager *IPoolManagerTransactor) Mint(opts *bind.TransactOpts, token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IPoolManager.contract.Transact(opts, "mint", token, to, amount)
}

// Mint is a paid mutator transaction binding the contract method 0xc6c3bbe6.
//
// Solidity: function mint(address token, address to, uint256 amount) returns()
func (_IPoolManager *IPoolManagerSession) Mint(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IPoolManager.Contract.Mint(&_IPoolManager.TransactOpts, token, to, amount)
}

// Mint is a paid mutator transaction binding the contract method 0xc6c3bbe6.
//
// Solidity: function mint(address token, address to, uint256 amount) returns()
func (_IPoolManager *IPoolManagerTransactorSession) Mint(token common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IPoolManager.Contract.Mint(&_IPoolManager.TransactOpts, token, to, amount)
}

// ModifyPosition is a paid mutator transaction binding the contract method 0x61ae449a.
//
// Solidity: function modifyPosition((address,address,uint24,int24,address) key, (int24,int24,int256) params, bytes hookData) returns(int256)
func (_IPoolManager *IPoolManagerTransactor) ModifyPosition(opts *bind.TransactOpts, key PoolKey, params IPoolManagerModifyPositionParams, hookData []byte) (*types.Transaction, error) {
	return _IPoolManager.contract.Transact(opts, "modifyPosition", key, params, hookData)
}

// ModifyPosition is a paid mutator transaction binding the contract method 0x61ae449a.
//
// Solidity: function modifyPosition((address,address,uint24,int24,address) key, (int24,int24,int256) params, bytes hookData) returns(int256)
func (_IPoolManager *IPoolManagerSession) ModifyPosition(key PoolKey, params IPoolManagerModifyPositionParams, hookData []byte) (*types.Transaction, error) {
	return _IPoolManager.Contract.ModifyPosition(&_IPoolManager.TransactOpts, key, params, hookData)
}

// ModifyPosition is a paid mutator transaction binding the contract method 0x61ae449a.
//
// Solidity: function modifyPosition((address,address,uint24,int24,address) key, (int24,int24,int256) params, bytes hookData) returns(int256)
func (_IPoolManager *IPoolManagerTransactorSession) ModifyPosition(key PoolKey, params IPoolManagerModifyPositionParams, hookData []byte) (*types.Transaction, error) {
	return _IPoolManager.Contract.ModifyPosition(&_IPoolManager.TransactOpts, key, params, hookData)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_IPoolManager *IPoolManagerTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _IPoolManager.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_IPoolManager *IPoolManagerSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _IPoolManager.Contract.SafeBatchTransferFrom(&_IPoolManager.TransactOpts, from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_IPoolManager *IPoolManagerTransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _IPoolManager.Contract.SafeBatchTransferFrom(&_IPoolManager.TransactOpts, from, to, ids, amounts, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_IPoolManager *IPoolManagerTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _IPoolManager.contract.Transact(opts, "safeTransferFrom", from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_IPoolManager *IPoolManagerSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _IPoolManager.Contract.SafeTransferFrom(&_IPoolManager.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_IPoolManager *IPoolManagerTransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _IPoolManager.Contract.SafeTransferFrom(&_IPoolManager.TransactOpts, from, to, id, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_IPoolManager *IPoolManagerTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _IPoolManager.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_IPoolManager *IPoolManagerSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _IPoolManager.Contract.SetApprovalForAll(&_IPoolManager.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_IPoolManager *IPoolManagerTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _IPoolManager.Contract.SetApprovalForAll(&_IPoolManager.TransactOpts, operator, approved)
}

// SetHookFees is a paid mutator transaction binding the contract method 0xaf440f82.
//
// Solidity: function setHookFees((address,address,uint24,int24,address) key) returns()
func (_IPoolManager *IPoolManagerTransactor) SetHookFees(opts *bind.TransactOpts, key PoolKey) (*types.Transaction, error) {
	return _IPoolManager.contract.Transact(opts, "setHookFees", key)
}

// SetHookFees is a paid mutator transaction binding the contract method 0xaf440f82.
//
// Solidity: function setHookFees((address,address,uint24,int24,address) key) returns()
func (_IPoolManager *IPoolManagerSession) SetHookFees(key PoolKey) (*types.Transaction, error) {
	return _IPoolManager.Contract.SetHookFees(&_IPoolManager.TransactOpts, key)
}

// SetHookFees is a paid mutator transaction binding the contract method 0xaf440f82.
//
// Solidity: function setHookFees((address,address,uint24,int24,address) key) returns()
func (_IPoolManager *IPoolManagerTransactorSession) SetHookFees(key PoolKey) (*types.Transaction, error) {
	return _IPoolManager.Contract.SetHookFees(&_IPoolManager.TransactOpts, key)
}

// SetProtocolFees is a paid mutator transaction binding the contract method 0x282076cc.
//
// Solidity: function setProtocolFees((address,address,uint24,int24,address) key) returns()
func (_IPoolManager *IPoolManagerTransactor) SetProtocolFees(opts *bind.TransactOpts, key PoolKey) (*types.Transaction, error) {
	return _IPoolManager.contract.Transact(opts, "setProtocolFees", key)
}

// SetProtocolFees is a paid mutator transaction binding the contract method 0x282076cc.
//
// Solidity: function setProtocolFees((address,address,uint24,int24,address) key) returns()
func (_IPoolManager *IPoolManagerSession) SetProtocolFees(key PoolKey) (*types.Transaction, error) {
	return _IPoolManager.Contract.SetProtocolFees(&_IPoolManager.TransactOpts, key)
}

// SetProtocolFees is a paid mutator transaction binding the contract method 0x282076cc.
//
// Solidity: function setProtocolFees((address,address,uint24,int24,address) key) returns()
func (_IPoolManager *IPoolManagerTransactorSession) SetProtocolFees(key PoolKey) (*types.Transaction, error) {
	return _IPoolManager.Contract.SetProtocolFees(&_IPoolManager.TransactOpts, key)
}

// Settle is a paid mutator transaction binding the contract method 0x6a256b29.
//
// Solidity: function settle(address token) payable returns(uint256 paid)
func (_IPoolManager *IPoolManagerTransactor) Settle(opts *bind.TransactOpts, token common.Address) (*types.Transaction, error) {
	return _IPoolManager.contract.Transact(opts, "settle", token)
}

// Settle is a paid mutator transaction binding the contract method 0x6a256b29.
//
// Solidity: function settle(address token) payable returns(uint256 paid)
func (_IPoolManager *IPoolManagerSession) Settle(token common.Address) (*types.Transaction, error) {
	return _IPoolManager.Contract.Settle(&_IPoolManager.TransactOpts, token)
}

// Settle is a paid mutator transaction binding the contract method 0x6a256b29.
//
// Solidity: function settle(address token) payable returns(uint256 paid)
func (_IPoolManager *IPoolManagerTransactorSession) Settle(token common.Address) (*types.Transaction, error) {
	return _IPoolManager.Contract.Settle(&_IPoolManager.TransactOpts, token)
}

// Swap is a paid mutator transaction binding the contract method 0xf3cd914c.
//
// Solidity: function swap((address,address,uint24,int24,address) key, (bool,int256,uint160) params, bytes hookData) returns(int256)
func (_IPoolManager *IPoolManagerTransactor) Swap(opts *bind.TransactOpts, key PoolKey, params IPoolManagerSwapParams, hookData []byte) (*types.Transaction, error) {
	return _IPoolManager.contract.Transact(opts, "swap", key, params, hookData)
}

// Swap is a paid mutator transaction binding the contract method 0xf3cd914c.
//
// Solidity: function swap((address,address,uint24,int24,address) key, (bool,int256,uint160) params, bytes hookData) returns(int256)
func (_IPoolManager *IPoolManagerSession) Swap(key PoolKey, params IPoolManagerSwapParams, hookData []byte) (*types.Transaction, error) {
	return _IPoolManager.Contract.Swap(&_IPoolManager.TransactOpts, key, params, hookData)
}

// Swap is a paid mutator transaction binding the contract method 0xf3cd914c.
//
// Solidity: function swap((address,address,uint24,int24,address) key, (bool,int256,uint160) params, bytes hookData) returns(int256)
func (_IPoolManager *IPoolManagerTransactorSession) Swap(key PoolKey, params IPoolManagerSwapParams, hookData []byte) (*types.Transaction, error) {
	return _IPoolManager.Contract.Swap(&_IPoolManager.TransactOpts, key, params, hookData)
}

// Take is a paid mutator transaction binding the contract method 0x0b0d9c09.
//
// Solidity: function take(address currency, address to, uint256 amount) returns()
func (_IPoolManager *IPoolManagerTransactor) Take(opts *bind.TransactOpts, currency common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IPoolManager.contract.Transact(opts, "take", currency, to, amount)
}

// Take is a paid mutator transaction binding the contract method 0x0b0d9c09.
//
// Solidity: function take(address currency, address to, uint256 amount) returns()
func (_IPoolManager *IPoolManagerSession) Take(currency common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IPoolManager.Contract.Take(&_IPoolManager.TransactOpts, currency, to, amount)
}

// Take is a paid mutator transaction binding the contract method 0x0b0d9c09.
//
// Solidity: function take(address currency, address to, uint256 amount) returns()
func (_IPoolManager *IPoolManagerTransactorSession) Take(currency common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _IPoolManager.Contract.Take(&_IPoolManager.TransactOpts, currency, to, amount)
}

// IPoolManagerApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the IPoolManager contract.
type IPoolManagerApprovalForAllIterator struct {
	Event *IPoolManagerApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPoolManagerApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPoolManagerApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPoolManagerApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPoolManagerApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPoolManagerApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPoolManagerApprovalForAll represents a ApprovalForAll event raised by the IPoolManager contract.
type IPoolManagerApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_IPoolManager *IPoolManagerFilterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*IPoolManagerApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _IPoolManager.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &IPoolManagerApprovalForAllIterator{contract: _IPoolManager.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_IPoolManager *IPoolManagerFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *IPoolManagerApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _IPoolManager.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPoolManagerApprovalForAll)
				if err := _IPoolManager.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_IPoolManager *IPoolManagerFilterer) ParseApprovalForAll(log types.Log) (*IPoolManagerApprovalForAll, error) {
	event := new(IPoolManagerApprovalForAll)
	if err := _IPoolManager.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPoolManagerHookFeeUpdatedIterator is returned from FilterHookFeeUpdated and is used to iterate over the raw logs and unpacked data for HookFeeUpdated events raised by the IPoolManager contract.
type IPoolManagerHookFeeUpdatedIterator struct {
	Event *IPoolManagerHookFeeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPoolManagerHookFeeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPoolManagerHookFeeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPoolManagerHookFeeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPoolManagerHookFeeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPoolManagerHookFeeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPoolManagerHookFeeUpdated represents a HookFeeUpdated event raised by the IPoolManager contract.
type IPoolManagerHookFeeUpdated struct {
	Id       [32]byte
	HookFees *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterHookFeeUpdated is a free log retrieval operation binding the contract event 0xc939c5b4f4e3398eb275de825cd913cca3ade8d1f42daa0ffe1d88accd407158.
//
// Solidity: event HookFeeUpdated(bytes32 indexed id, uint24 hookFees)
func (_IPoolManager *IPoolManagerFilterer) FilterHookFeeUpdated(opts *bind.FilterOpts, id [][32]byte) (*IPoolManagerHookFeeUpdatedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _IPoolManager.contract.FilterLogs(opts, "HookFeeUpdated", idRule)
	if err != nil {
		return nil, err
	}
	return &IPoolManagerHookFeeUpdatedIterator{contract: _IPoolManager.contract, event: "HookFeeUpdated", logs: logs, sub: sub}, nil
}

// WatchHookFeeUpdated is a free log subscription operation binding the contract event 0xc939c5b4f4e3398eb275de825cd913cca3ade8d1f42daa0ffe1d88accd407158.
//
// Solidity: event HookFeeUpdated(bytes32 indexed id, uint24 hookFees)
func (_IPoolManager *IPoolManagerFilterer) WatchHookFeeUpdated(opts *bind.WatchOpts, sink chan<- *IPoolManagerHookFeeUpdated, id [][32]byte) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _IPoolManager.contract.WatchLogs(opts, "HookFeeUpdated", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPoolManagerHookFeeUpdated)
				if err := _IPoolManager.contract.UnpackLog(event, "HookFeeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseHookFeeUpdated is a log parse operation binding the contract event 0xc939c5b4f4e3398eb275de825cd913cca3ade8d1f42daa0ffe1d88accd407158.
//
// Solidity: event HookFeeUpdated(bytes32 indexed id, uint24 hookFees)
func (_IPoolManager *IPoolManagerFilterer) ParseHookFeeUpdated(log types.Log) (*IPoolManagerHookFeeUpdated, error) {
	event := new(IPoolManagerHookFeeUpdated)
	if err := _IPoolManager.contract.UnpackLog(event, "HookFeeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPoolManagerInitializeIterator is returned from FilterInitialize and is used to iterate over the raw logs and unpacked data for Initialize events raised by the IPoolManager contract.
type IPoolManagerInitializeIterator struct {
	Event *IPoolManagerInitialize // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPoolManagerInitializeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPoolManagerInitialize)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPoolManagerInitialize)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPoolManagerInitializeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPoolManagerInitializeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPoolManagerInitialize represents a Initialize event raised by the IPoolManager contract.
type IPoolManagerInitialize struct {
	Id          [32]byte
	Currency0   common.Address
	Currency1   common.Address
	Fee         *big.Int
	TickSpacing *big.Int
	Hooks       common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterInitialize is a free log retrieval operation binding the contract event 0x3fd553db44f207b1f41348cfc4d251860814af9eadc470e8e7895e4d120511f4.
//
// Solidity: event Initialize(bytes32 indexed id, address indexed currency0, address indexed currency1, uint24 fee, int24 tickSpacing, address hooks)
func (_IPoolManager *IPoolManagerFilterer) FilterInitialize(opts *bind.FilterOpts, id [][32]byte, currency0 []common.Address, currency1 []common.Address) (*IPoolManagerInitializeIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var currency0Rule []interface{}
	for _, currency0Item := range currency0 {
		currency0Rule = append(currency0Rule, currency0Item)
	}
	var currency1Rule []interface{}
	for _, currency1Item := range currency1 {
		currency1Rule = append(currency1Rule, currency1Item)
	}

	logs, sub, err := _IPoolManager.contract.FilterLogs(opts, "Initialize", idRule, currency0Rule, currency1Rule)
	if err != nil {
		return nil, err
	}
	return &IPoolManagerInitializeIterator{contract: _IPoolManager.contract, event: "Initialize", logs: logs, sub: sub}, nil
}

// WatchInitialize is a free log subscription operation binding the contract event 0x3fd553db44f207b1f41348cfc4d251860814af9eadc470e8e7895e4d120511f4.
//
// Solidity: event Initialize(bytes32 indexed id, address indexed currency0, address indexed currency1, uint24 fee, int24 tickSpacing, address hooks)
func (_IPoolManager *IPoolManagerFilterer) WatchInitialize(opts *bind.WatchOpts, sink chan<- *IPoolManagerInitialize, id [][32]byte, currency0 []common.Address, currency1 []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var currency0Rule []interface{}
	for _, currency0Item := range currency0 {
		currency0Rule = append(currency0Rule, currency0Item)
	}
	var currency1Rule []interface{}
	for _, currency1Item := range currency1 {
		currency1Rule = append(currency1Rule, currency1Item)
	}

	logs, sub, err := _IPoolManager.contract.WatchLogs(opts, "Initialize", idRule, currency0Rule, currency1Rule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPoolManagerInitialize)
				if err := _IPoolManager.contract.UnpackLog(event, "Initialize", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialize is a log parse operation binding the contract event 0x3fd553db44f207b1f41348cfc4d251860814af9eadc470e8e7895e4d120511f4.
//
// Solidity: event Initialize(bytes32 indexed id, address indexed currency0, address indexed currency1, uint24 fee, int24 tickSpacing, address hooks)
func (_IPoolManager *IPoolManagerFilterer) ParseInitialize(log types.Log) (*IPoolManagerInitialize, error) {
	event := new(IPoolManagerInitialize)
	if err := _IPoolManager.contract.UnpackLog(event, "Initialize", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPoolManagerModifyPositionIterator is returned from FilterModifyPosition and is used to iterate over the raw logs and unpacked data for ModifyPosition events raised by the IPoolManager contract.
type IPoolManagerModifyPositionIterator struct {
	Event *IPoolManagerModifyPosition // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPoolManagerModifyPositionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPoolManagerModifyPosition)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPoolManagerModifyPosition)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPoolManagerModifyPositionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPoolManagerModifyPositionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPoolManagerModifyPosition represents a ModifyPosition event raised by the IPoolManager contract.
type IPoolManagerModifyPosition struct {
	Id             [32]byte
	Sender         common.Address
	TickLower      *big.Int
	TickUpper      *big.Int
	LiquidityDelta *big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterModifyPosition is a free log retrieval operation binding the contract event 0xc54f65a0367b92850ef8e90f7e302da8b0a137ab343132a9b8d0e63e684bf53c.
//
// Solidity: event ModifyPosition(bytes32 indexed id, address indexed sender, int24 tickLower, int24 tickUpper, int256 liquidityDelta)
func (_IPoolManager *IPoolManagerFilterer) FilterModifyPosition(opts *bind.FilterOpts, id [][32]byte, sender []common.Address) (*IPoolManagerModifyPositionIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IPoolManager.contract.FilterLogs(opts, "ModifyPosition", idRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &IPoolManagerModifyPositionIterator{contract: _IPoolManager.contract, event: "ModifyPosition", logs: logs, sub: sub}, nil
}

// WatchModifyPosition is a free log subscription operation binding the contract event 0xc54f65a0367b92850ef8e90f7e302da8b0a137ab343132a9b8d0e63e684bf53c.
//
// Solidity: event ModifyPosition(bytes32 indexed id, address indexed sender, int24 tickLower, int24 tickUpper, int256 liquidityDelta)
func (_IPoolManager *IPoolManagerFilterer) WatchModifyPosition(opts *bind.WatchOpts, sink chan<- *IPoolManagerModifyPosition, id [][32]byte, sender []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IPoolManager.contract.WatchLogs(opts, "ModifyPosition", idRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPoolManagerModifyPosition)
				if err := _IPoolManager.contract.UnpackLog(event, "ModifyPosition", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseModifyPosition is a log parse operation binding the contract event 0xc54f65a0367b92850ef8e90f7e302da8b0a137ab343132a9b8d0e63e684bf53c.
//
// Solidity: event ModifyPosition(bytes32 indexed id, address indexed sender, int24 tickLower, int24 tickUpper, int256 liquidityDelta)
func (_IPoolManager *IPoolManagerFilterer) ParseModifyPosition(log types.Log) (*IPoolManagerModifyPosition, error) {
	event := new(IPoolManagerModifyPosition)
	if err := _IPoolManager.contract.UnpackLog(event, "ModifyPosition", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPoolManagerProtocolFeeControllerUpdatedIterator is returned from FilterProtocolFeeControllerUpdated and is used to iterate over the raw logs and unpacked data for ProtocolFeeControllerUpdated events raised by the IPoolManager contract.
type IPoolManagerProtocolFeeControllerUpdatedIterator struct {
	Event *IPoolManagerProtocolFeeControllerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPoolManagerProtocolFeeControllerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPoolManagerProtocolFeeControllerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPoolManagerProtocolFeeControllerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPoolManagerProtocolFeeControllerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPoolManagerProtocolFeeControllerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPoolManagerProtocolFeeControllerUpdated represents a ProtocolFeeControllerUpdated event raised by the IPoolManager contract.
type IPoolManagerProtocolFeeControllerUpdated struct {
	ProtocolFeeController common.Address
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterProtocolFeeControllerUpdated is a free log retrieval operation binding the contract event 0xb4bd8ef53df690b9943d3318996006dbb82a25f54719d8c8035b516a2a5b8acc.
//
// Solidity: event ProtocolFeeControllerUpdated(address protocolFeeController)
func (_IPoolManager *IPoolManagerFilterer) FilterProtocolFeeControllerUpdated(opts *bind.FilterOpts) (*IPoolManagerProtocolFeeControllerUpdatedIterator, error) {

	logs, sub, err := _IPoolManager.contract.FilterLogs(opts, "ProtocolFeeControllerUpdated")
	if err != nil {
		return nil, err
	}
	return &IPoolManagerProtocolFeeControllerUpdatedIterator{contract: _IPoolManager.contract, event: "ProtocolFeeControllerUpdated", logs: logs, sub: sub}, nil
}

// WatchProtocolFeeControllerUpdated is a free log subscription operation binding the contract event 0xb4bd8ef53df690b9943d3318996006dbb82a25f54719d8c8035b516a2a5b8acc.
//
// Solidity: event ProtocolFeeControllerUpdated(address protocolFeeController)
func (_IPoolManager *IPoolManagerFilterer) WatchProtocolFeeControllerUpdated(opts *bind.WatchOpts, sink chan<- *IPoolManagerProtocolFeeControllerUpdated) (event.Subscription, error) {

	logs, sub, err := _IPoolManager.contract.WatchLogs(opts, "ProtocolFeeControllerUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPoolManagerProtocolFeeControllerUpdated)
				if err := _IPoolManager.contract.UnpackLog(event, "ProtocolFeeControllerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProtocolFeeControllerUpdated is a log parse operation binding the contract event 0xb4bd8ef53df690b9943d3318996006dbb82a25f54719d8c8035b516a2a5b8acc.
//
// Solidity: event ProtocolFeeControllerUpdated(address protocolFeeController)
func (_IPoolManager *IPoolManagerFilterer) ParseProtocolFeeControllerUpdated(log types.Log) (*IPoolManagerProtocolFeeControllerUpdated, error) {
	event := new(IPoolManagerProtocolFeeControllerUpdated)
	if err := _IPoolManager.contract.UnpackLog(event, "ProtocolFeeControllerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPoolManagerProtocolFeeUpdatedIterator is returned from FilterProtocolFeeUpdated and is used to iterate over the raw logs and unpacked data for ProtocolFeeUpdated events raised by the IPoolManager contract.
type IPoolManagerProtocolFeeUpdatedIterator struct {
	Event *IPoolManagerProtocolFeeUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPoolManagerProtocolFeeUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPoolManagerProtocolFeeUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPoolManagerProtocolFeeUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPoolManagerProtocolFeeUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPoolManagerProtocolFeeUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPoolManagerProtocolFeeUpdated represents a ProtocolFeeUpdated event raised by the IPoolManager contract.
type IPoolManagerProtocolFeeUpdated struct {
	Id           [32]byte
	ProtocolFees *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterProtocolFeeUpdated is a free log retrieval operation binding the contract event 0xe9c42593e71f84403b84352cd168d693e2c9fcd1fdbcc3feb21d92b43e6696f9.
//
// Solidity: event ProtocolFeeUpdated(bytes32 indexed id, uint24 protocolFees)
func (_IPoolManager *IPoolManagerFilterer) FilterProtocolFeeUpdated(opts *bind.FilterOpts, id [][32]byte) (*IPoolManagerProtocolFeeUpdatedIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _IPoolManager.contract.FilterLogs(opts, "ProtocolFeeUpdated", idRule)
	if err != nil {
		return nil, err
	}
	return &IPoolManagerProtocolFeeUpdatedIterator{contract: _IPoolManager.contract, event: "ProtocolFeeUpdated", logs: logs, sub: sub}, nil
}

// WatchProtocolFeeUpdated is a free log subscription operation binding the contract event 0xe9c42593e71f84403b84352cd168d693e2c9fcd1fdbcc3feb21d92b43e6696f9.
//
// Solidity: event ProtocolFeeUpdated(bytes32 indexed id, uint24 protocolFees)
func (_IPoolManager *IPoolManagerFilterer) WatchProtocolFeeUpdated(opts *bind.WatchOpts, sink chan<- *IPoolManagerProtocolFeeUpdated, id [][32]byte) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _IPoolManager.contract.WatchLogs(opts, "ProtocolFeeUpdated", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPoolManagerProtocolFeeUpdated)
				if err := _IPoolManager.contract.UnpackLog(event, "ProtocolFeeUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProtocolFeeUpdated is a log parse operation binding the contract event 0xe9c42593e71f84403b84352cd168d693e2c9fcd1fdbcc3feb21d92b43e6696f9.
//
// Solidity: event ProtocolFeeUpdated(bytes32 indexed id, uint24 protocolFees)
func (_IPoolManager *IPoolManagerFilterer) ParseProtocolFeeUpdated(log types.Log) (*IPoolManagerProtocolFeeUpdated, error) {
	event := new(IPoolManagerProtocolFeeUpdated)
	if err := _IPoolManager.contract.UnpackLog(event, "ProtocolFeeUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPoolManagerSwapIterator is returned from FilterSwap and is used to iterate over the raw logs and unpacked data for Swap events raised by the IPoolManager contract.
type IPoolManagerSwapIterator struct {
	Event *IPoolManagerSwap // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPoolManagerSwapIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPoolManagerSwap)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPoolManagerSwap)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPoolManagerSwapIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPoolManagerSwapIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPoolManagerSwap represents a Swap event raised by the IPoolManager contract.
type IPoolManagerSwap struct {
	Id           [32]byte
	Sender       common.Address
	Amount0      *big.Int
	Amount1      *big.Int
	SqrtPriceX96 *big.Int
	Liquidity    *big.Int
	Tick         *big.Int
	Fee          *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterSwap is a free log retrieval operation binding the contract event 0x40e9cecb9f5f1f1c5b9c97dec2917b7ee92e57ba5563708daca94dd84ad7112f.
//
// Solidity: event Swap(bytes32 indexed id, address indexed sender, int128 amount0, int128 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick, uint24 fee)
func (_IPoolManager *IPoolManagerFilterer) FilterSwap(opts *bind.FilterOpts, id [][32]byte, sender []common.Address) (*IPoolManagerSwapIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IPoolManager.contract.FilterLogs(opts, "Swap", idRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &IPoolManagerSwapIterator{contract: _IPoolManager.contract, event: "Swap", logs: logs, sub: sub}, nil
}

// WatchSwap is a free log subscription operation binding the contract event 0x40e9cecb9f5f1f1c5b9c97dec2917b7ee92e57ba5563708daca94dd84ad7112f.
//
// Solidity: event Swap(bytes32 indexed id, address indexed sender, int128 amount0, int128 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick, uint24 fee)
func (_IPoolManager *IPoolManagerFilterer) WatchSwap(opts *bind.WatchOpts, sink chan<- *IPoolManagerSwap, id [][32]byte, sender []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _IPoolManager.contract.WatchLogs(opts, "Swap", idRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPoolManagerSwap)
				if err := _IPoolManager.contract.UnpackLog(event, "Swap", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSwap is a log parse operation binding the contract event 0x40e9cecb9f5f1f1c5b9c97dec2917b7ee92e57ba5563708daca94dd84ad7112f.
//
// Solidity: event Swap(bytes32 indexed id, address indexed sender, int128 amount0, int128 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick, uint24 fee)
func (_IPoolManager *IPoolManagerFilterer) ParseSwap(log types.Log) (*IPoolManagerSwap, error) {
	event := new(IPoolManagerSwap)
	if err := _IPoolManager.contract.UnpackLog(event, "Swap", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPoolManagerTransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the IPoolManager contract.
type IPoolManagerTransferBatchIterator struct {
	Event *IPoolManagerTransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPoolManagerTransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPoolManagerTransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPoolManagerTransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPoolManagerTransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPoolManagerTransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPoolManagerTransferBatch represents a TransferBatch event raised by the IPoolManager contract.
type IPoolManagerTransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_IPoolManager *IPoolManagerFilterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*IPoolManagerTransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IPoolManager.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IPoolManagerTransferBatchIterator{contract: _IPoolManager.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_IPoolManager *IPoolManagerFilterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *IPoolManagerTransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IPoolManager.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPoolManagerTransferBatch)
				if err := _IPoolManager.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_IPoolManager *IPoolManagerFilterer) ParseTransferBatch(log types.Log) (*IPoolManagerTransferBatch, error) {
	event := new(IPoolManagerTransferBatch)
	if err := _IPoolManager.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPoolManagerTransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the IPoolManager contract.
type IPoolManagerTransferSingleIterator struct {
	Event *IPoolManagerTransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPoolManagerTransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPoolManagerTransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPoolManagerTransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPoolManagerTransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPoolManagerTransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPoolManagerTransferSingle represents a TransferSingle event raised by the IPoolManager contract.
type IPoolManagerTransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_IPoolManager *IPoolManagerFilterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*IPoolManagerTransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IPoolManager.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &IPoolManagerTransferSingleIterator{contract: _IPoolManager.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_IPoolManager *IPoolManagerFilterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *IPoolManagerTransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _IPoolManager.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPoolManagerTransferSingle)
				if err := _IPoolManager.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_IPoolManager *IPoolManagerFilterer) ParseTransferSingle(log types.Log) (*IPoolManagerTransferSingle, error) {
	event := new(IPoolManagerTransferSingle)
	if err := _IPoolManager.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IPoolManagerURIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the IPoolManager contract.
type IPoolManagerURIIterator struct {
	Event *IPoolManagerURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IPoolManagerURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IPoolManagerURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IPoolManagerURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IPoolManagerURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IPoolManagerURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IPoolManagerURI represents a URI event raised by the IPoolManager contract.
type IPoolManagerURI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_IPoolManager *IPoolManagerFilterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*IPoolManagerURIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _IPoolManager.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &IPoolManagerURIIterator{contract: _IPoolManager.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_IPoolManager *IPoolManagerFilterer) WatchURI(opts *bind.WatchOpts, sink chan<- *IPoolManagerURI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _IPoolManager.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IPoolManagerURI)
				if err := _IPoolManager.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_IPoolManager *IPoolManagerFilterer) ParseURI(log types.Log) (*IPoolManagerURI, error) {
	event := new(IPoolManagerURI)
	if err := _IPoolManager.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IReceiptVerifierMetaData contains all meta data concerning the IReceiptVerifier contract.
var IReceiptVerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"receiptRaw\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"auxiBlkVerifyInfo\",\"type\":\"bytes\"}],\"name\":\"verifyReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"blkHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"blkNum\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"blkTime\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"topics\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structIReceiptVerifier.LogInfo[]\",\"name\":\"logs\",\"type\":\"tuple[]\"}],\"internalType\":\"structIReceiptVerifier.ReceiptInfo\",\"name\":\"receiptInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"receiptRaw\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"auxiBlkVerifyInfo\",\"type\":\"bytes\"}],\"name\":\"verifyReceiptAndLog\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"blkHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"blkNum\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"blkTime\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"topics\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structIReceiptVerifier.LogInfo[]\",\"name\":\"logs\",\"type\":\"tuple[]\"}],\"internalType\":\"structIReceiptVerifier.ReceiptInfo\",\"name\":\"receiptInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// IReceiptVerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use IReceiptVerifierMetaData.ABI instead.
var IReceiptVerifierABI = IReceiptVerifierMetaData.ABI

// IReceiptVerifier is an auto generated Go binding around an Ethereum contract.
type IReceiptVerifier struct {
	IReceiptVerifierCaller     // Read-only binding to the contract
	IReceiptVerifierTransactor // Write-only binding to the contract
	IReceiptVerifierFilterer   // Log filterer for contract events
}

// IReceiptVerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type IReceiptVerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IReceiptVerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IReceiptVerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IReceiptVerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IReceiptVerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IReceiptVerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IReceiptVerifierSession struct {
	Contract     *IReceiptVerifier // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IReceiptVerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IReceiptVerifierCallerSession struct {
	Contract *IReceiptVerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// IReceiptVerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IReceiptVerifierTransactorSession struct {
	Contract     *IReceiptVerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// IReceiptVerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type IReceiptVerifierRaw struct {
	Contract *IReceiptVerifier // Generic contract binding to access the raw methods on
}

// IReceiptVerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IReceiptVerifierCallerRaw struct {
	Contract *IReceiptVerifierCaller // Generic read-only contract binding to access the raw methods on
}

// IReceiptVerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IReceiptVerifierTransactorRaw struct {
	Contract *IReceiptVerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIReceiptVerifier creates a new instance of IReceiptVerifier, bound to a specific deployed contract.
func NewIReceiptVerifier(address common.Address, backend bind.ContractBackend) (*IReceiptVerifier, error) {
	contract, err := bindIReceiptVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IReceiptVerifier{IReceiptVerifierCaller: IReceiptVerifierCaller{contract: contract}, IReceiptVerifierTransactor: IReceiptVerifierTransactor{contract: contract}, IReceiptVerifierFilterer: IReceiptVerifierFilterer{contract: contract}}, nil
}

// NewIReceiptVerifierCaller creates a new read-only instance of IReceiptVerifier, bound to a specific deployed contract.
func NewIReceiptVerifierCaller(address common.Address, caller bind.ContractCaller) (*IReceiptVerifierCaller, error) {
	contract, err := bindIReceiptVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IReceiptVerifierCaller{contract: contract}, nil
}

// NewIReceiptVerifierTransactor creates a new write-only instance of IReceiptVerifier, bound to a specific deployed contract.
func NewIReceiptVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*IReceiptVerifierTransactor, error) {
	contract, err := bindIReceiptVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IReceiptVerifierTransactor{contract: contract}, nil
}

// NewIReceiptVerifierFilterer creates a new log filterer instance of IReceiptVerifier, bound to a specific deployed contract.
func NewIReceiptVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*IReceiptVerifierFilterer, error) {
	contract, err := bindIReceiptVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IReceiptVerifierFilterer{contract: contract}, nil
}

// bindIReceiptVerifier binds a generic wrapper to an already deployed contract.
func bindIReceiptVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IReceiptVerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IReceiptVerifier *IReceiptVerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IReceiptVerifier.Contract.IReceiptVerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IReceiptVerifier *IReceiptVerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IReceiptVerifier.Contract.IReceiptVerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IReceiptVerifier *IReceiptVerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IReceiptVerifier.Contract.IReceiptVerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IReceiptVerifier *IReceiptVerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IReceiptVerifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IReceiptVerifier *IReceiptVerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IReceiptVerifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IReceiptVerifier *IReceiptVerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IReceiptVerifier.Contract.contract.Transact(opts, method, params...)
}

// VerifyReceipt is a free data retrieval call binding the contract method 0x68ac2f78.
//
// Solidity: function verifyReceipt(bytes receiptRaw, bytes proofData, bytes auxiBlkVerifyInfo) view returns((bool,uint64,bytes32,uint32,uint64,(address,bytes32[],bytes)[]) receiptInfo)
func (_IReceiptVerifier *IReceiptVerifierCaller) VerifyReceipt(opts *bind.CallOpts, receiptRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (IReceiptVerifierReceiptInfo, error) {
	var out []interface{}
	err := _IReceiptVerifier.contract.Call(opts, &out, "verifyReceipt", receiptRaw, proofData, auxiBlkVerifyInfo)

	if err != nil {
		return *new(IReceiptVerifierReceiptInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(IReceiptVerifierReceiptInfo)).(*IReceiptVerifierReceiptInfo)

	return out0, err

}

// VerifyReceipt is a free data retrieval call binding the contract method 0x68ac2f78.
//
// Solidity: function verifyReceipt(bytes receiptRaw, bytes proofData, bytes auxiBlkVerifyInfo) view returns((bool,uint64,bytes32,uint32,uint64,(address,bytes32[],bytes)[]) receiptInfo)
func (_IReceiptVerifier *IReceiptVerifierSession) VerifyReceipt(receiptRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (IReceiptVerifierReceiptInfo, error) {
	return _IReceiptVerifier.Contract.VerifyReceipt(&_IReceiptVerifier.CallOpts, receiptRaw, proofData, auxiBlkVerifyInfo)
}

// VerifyReceipt is a free data retrieval call binding the contract method 0x68ac2f78.
//
// Solidity: function verifyReceipt(bytes receiptRaw, bytes proofData, bytes auxiBlkVerifyInfo) view returns((bool,uint64,bytes32,uint32,uint64,(address,bytes32[],bytes)[]) receiptInfo)
func (_IReceiptVerifier *IReceiptVerifierCallerSession) VerifyReceipt(receiptRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (IReceiptVerifierReceiptInfo, error) {
	return _IReceiptVerifier.Contract.VerifyReceipt(&_IReceiptVerifier.CallOpts, receiptRaw, proofData, auxiBlkVerifyInfo)
}

// VerifyReceiptAndLog is a paid mutator transaction binding the contract method 0x3996da7a.
//
// Solidity: function verifyReceiptAndLog(bytes receiptRaw, bytes proofData, bytes auxiBlkVerifyInfo) returns((bool,uint64,bytes32,uint32,uint64,(address,bytes32[],bytes)[]) receiptInfo)
func (_IReceiptVerifier *IReceiptVerifierTransactor) VerifyReceiptAndLog(opts *bind.TransactOpts, receiptRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (*types.Transaction, error) {
	return _IReceiptVerifier.contract.Transact(opts, "verifyReceiptAndLog", receiptRaw, proofData, auxiBlkVerifyInfo)
}

// VerifyReceiptAndLog is a paid mutator transaction binding the contract method 0x3996da7a.
//
// Solidity: function verifyReceiptAndLog(bytes receiptRaw, bytes proofData, bytes auxiBlkVerifyInfo) returns((bool,uint64,bytes32,uint32,uint64,(address,bytes32[],bytes)[]) receiptInfo)
func (_IReceiptVerifier *IReceiptVerifierSession) VerifyReceiptAndLog(receiptRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (*types.Transaction, error) {
	return _IReceiptVerifier.Contract.VerifyReceiptAndLog(&_IReceiptVerifier.TransactOpts, receiptRaw, proofData, auxiBlkVerifyInfo)
}

// VerifyReceiptAndLog is a paid mutator transaction binding the contract method 0x3996da7a.
//
// Solidity: function verifyReceiptAndLog(bytes receiptRaw, bytes proofData, bytes auxiBlkVerifyInfo) returns((bool,uint64,bytes32,uint32,uint64,(address,bytes32[],bytes)[]) receiptInfo)
func (_IReceiptVerifier *IReceiptVerifierTransactorSession) VerifyReceiptAndLog(receiptRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (*types.Transaction, error) {
	return _IReceiptVerifier.Contract.VerifyReceiptAndLog(&_IReceiptVerifier.TransactOpts, receiptRaw, proofData, auxiBlkVerifyInfo)
}

// ISMTMetaData contains all meta data concerning the ISMT contract.
var ISMTMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"}],\"name\":\"isSmtRootValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"newSmtRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"endBlockNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"endBlockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextChunkMerkleRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"structIVerifier.Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"commitPub\",\"type\":\"bytes32\"}],\"internalType\":\"structISMT.SmtUpdate\",\"name\":\"u\",\"type\":\"tuple\"}],\"name\":\"updateRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ISMTABI is the input ABI used to generate the binding from.
// Deprecated: Use ISMTMetaData.ABI instead.
var ISMTABI = ISMTMetaData.ABI

// ISMT is an auto generated Go binding around an Ethereum contract.
type ISMT struct {
	ISMTCaller     // Read-only binding to the contract
	ISMTTransactor // Write-only binding to the contract
	ISMTFilterer   // Log filterer for contract events
}

// ISMTCaller is an auto generated read-only Go binding around an Ethereum contract.
type ISMTCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISMTTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ISMTTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISMTFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ISMTFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISMTSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ISMTSession struct {
	Contract     *ISMT             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ISMTCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ISMTCallerSession struct {
	Contract *ISMTCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ISMTTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ISMTTransactorSession struct {
	Contract     *ISMTTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ISMTRaw is an auto generated low-level Go binding around an Ethereum contract.
type ISMTRaw struct {
	Contract *ISMT // Generic contract binding to access the raw methods on
}

// ISMTCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ISMTCallerRaw struct {
	Contract *ISMTCaller // Generic read-only contract binding to access the raw methods on
}

// ISMTTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ISMTTransactorRaw struct {
	Contract *ISMTTransactor // Generic write-only contract binding to access the raw methods on
}

// NewISMT creates a new instance of ISMT, bound to a specific deployed contract.
func NewISMT(address common.Address, backend bind.ContractBackend) (*ISMT, error) {
	contract, err := bindISMT(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ISMT{ISMTCaller: ISMTCaller{contract: contract}, ISMTTransactor: ISMTTransactor{contract: contract}, ISMTFilterer: ISMTFilterer{contract: contract}}, nil
}

// NewISMTCaller creates a new read-only instance of ISMT, bound to a specific deployed contract.
func NewISMTCaller(address common.Address, caller bind.ContractCaller) (*ISMTCaller, error) {
	contract, err := bindISMT(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ISMTCaller{contract: contract}, nil
}

// NewISMTTransactor creates a new write-only instance of ISMT, bound to a specific deployed contract.
func NewISMTTransactor(address common.Address, transactor bind.ContractTransactor) (*ISMTTransactor, error) {
	contract, err := bindISMT(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ISMTTransactor{contract: contract}, nil
}

// NewISMTFilterer creates a new log filterer instance of ISMT, bound to a specific deployed contract.
func NewISMTFilterer(address common.Address, filterer bind.ContractFilterer) (*ISMTFilterer, error) {
	contract, err := bindISMT(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ISMTFilterer{contract: contract}, nil
}

// bindISMT binds a generic wrapper to an already deployed contract.
func bindISMT(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ISMTMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ISMT *ISMTRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ISMT.Contract.ISMTCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ISMT *ISMTRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISMT.Contract.ISMTTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ISMT *ISMTRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ISMT.Contract.ISMTTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ISMT *ISMTCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ISMT.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ISMT *ISMTTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISMT.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ISMT *ISMTTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ISMT.Contract.contract.Transact(opts, method, params...)
}

// IsSmtRootValid is a free data retrieval call binding the contract method 0x1019b616.
//
// Solidity: function isSmtRootValid(uint64 chainId, bytes32 smtRoot) view returns(bool)
func (_ISMT *ISMTCaller) IsSmtRootValid(opts *bind.CallOpts, chainId uint64, smtRoot [32]byte) (bool, error) {
	var out []interface{}
	err := _ISMT.contract.Call(opts, &out, "isSmtRootValid", chainId, smtRoot)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsSmtRootValid is a free data retrieval call binding the contract method 0x1019b616.
//
// Solidity: function isSmtRootValid(uint64 chainId, bytes32 smtRoot) view returns(bool)
func (_ISMT *ISMTSession) IsSmtRootValid(chainId uint64, smtRoot [32]byte) (bool, error) {
	return _ISMT.Contract.IsSmtRootValid(&_ISMT.CallOpts, chainId, smtRoot)
}

// IsSmtRootValid is a free data retrieval call binding the contract method 0x1019b616.
//
// Solidity: function isSmtRootValid(uint64 chainId, bytes32 smtRoot) view returns(bool)
func (_ISMT *ISMTCallerSession) IsSmtRootValid(chainId uint64, smtRoot [32]byte) (bool, error) {
	return _ISMT.Contract.IsSmtRootValid(&_ISMT.CallOpts, chainId, smtRoot)
}

// UpdateRoot is a paid mutator transaction binding the contract method 0x318a492d.
//
// Solidity: function updateRoot(uint64 chainId, (bytes32,uint64,bytes32,bytes32,(uint256[2],uint256[2][2],uint256[2],uint256[2]),bytes32) u) returns()
func (_ISMT *ISMTTransactor) UpdateRoot(opts *bind.TransactOpts, chainId uint64, u ISMTSmtUpdate) (*types.Transaction, error) {
	return _ISMT.contract.Transact(opts, "updateRoot", chainId, u)
}

// UpdateRoot is a paid mutator transaction binding the contract method 0x318a492d.
//
// Solidity: function updateRoot(uint64 chainId, (bytes32,uint64,bytes32,bytes32,(uint256[2],uint256[2][2],uint256[2],uint256[2]),bytes32) u) returns()
func (_ISMT *ISMTSession) UpdateRoot(chainId uint64, u ISMTSmtUpdate) (*types.Transaction, error) {
	return _ISMT.Contract.UpdateRoot(&_ISMT.TransactOpts, chainId, u)
}

// UpdateRoot is a paid mutator transaction binding the contract method 0x318a492d.
//
// Solidity: function updateRoot(uint64 chainId, (bytes32,uint64,bytes32,bytes32,(uint256[2],uint256[2][2],uint256[2],uint256[2]),bytes32) u) returns()
func (_ISMT *ISMTTransactorSession) UpdateRoot(chainId uint64, u ISMTSmtUpdate) (*types.Transaction, error) {
	return _ISMT.Contract.UpdateRoot(&_ISMT.TransactOpts, chainId, u)
}

// ISlotValueVerifierMetaData contains all meta data concerning the ISlotValueVerifier contract.
var ISlotValueVerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"blkVerifyInfo\",\"type\":\"bytes\"}],\"name\":\"verifySlotValue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"addrHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"slotKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"slotValue\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"blkNum\",\"type\":\"uint32\"}],\"internalType\":\"structISlotValueVerifier.SlotInfo\",\"name\":\"slotInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// ISlotValueVerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use ISlotValueVerifierMetaData.ABI instead.
var ISlotValueVerifierABI = ISlotValueVerifierMetaData.ABI

// ISlotValueVerifier is an auto generated Go binding around an Ethereum contract.
type ISlotValueVerifier struct {
	ISlotValueVerifierCaller     // Read-only binding to the contract
	ISlotValueVerifierTransactor // Write-only binding to the contract
	ISlotValueVerifierFilterer   // Log filterer for contract events
}

// ISlotValueVerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type ISlotValueVerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISlotValueVerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ISlotValueVerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISlotValueVerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ISlotValueVerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ISlotValueVerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ISlotValueVerifierSession struct {
	Contract     *ISlotValueVerifier // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ISlotValueVerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ISlotValueVerifierCallerSession struct {
	Contract *ISlotValueVerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// ISlotValueVerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ISlotValueVerifierTransactorSession struct {
	Contract     *ISlotValueVerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// ISlotValueVerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type ISlotValueVerifierRaw struct {
	Contract *ISlotValueVerifier // Generic contract binding to access the raw methods on
}

// ISlotValueVerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ISlotValueVerifierCallerRaw struct {
	Contract *ISlotValueVerifierCaller // Generic read-only contract binding to access the raw methods on
}

// ISlotValueVerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ISlotValueVerifierTransactorRaw struct {
	Contract *ISlotValueVerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewISlotValueVerifier creates a new instance of ISlotValueVerifier, bound to a specific deployed contract.
func NewISlotValueVerifier(address common.Address, backend bind.ContractBackend) (*ISlotValueVerifier, error) {
	contract, err := bindISlotValueVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ISlotValueVerifier{ISlotValueVerifierCaller: ISlotValueVerifierCaller{contract: contract}, ISlotValueVerifierTransactor: ISlotValueVerifierTransactor{contract: contract}, ISlotValueVerifierFilterer: ISlotValueVerifierFilterer{contract: contract}}, nil
}

// NewISlotValueVerifierCaller creates a new read-only instance of ISlotValueVerifier, bound to a specific deployed contract.
func NewISlotValueVerifierCaller(address common.Address, caller bind.ContractCaller) (*ISlotValueVerifierCaller, error) {
	contract, err := bindISlotValueVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ISlotValueVerifierCaller{contract: contract}, nil
}

// NewISlotValueVerifierTransactor creates a new write-only instance of ISlotValueVerifier, bound to a specific deployed contract.
func NewISlotValueVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*ISlotValueVerifierTransactor, error) {
	contract, err := bindISlotValueVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ISlotValueVerifierTransactor{contract: contract}, nil
}

// NewISlotValueVerifierFilterer creates a new log filterer instance of ISlotValueVerifier, bound to a specific deployed contract.
func NewISlotValueVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*ISlotValueVerifierFilterer, error) {
	contract, err := bindISlotValueVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ISlotValueVerifierFilterer{contract: contract}, nil
}

// bindISlotValueVerifier binds a generic wrapper to an already deployed contract.
func bindISlotValueVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ISlotValueVerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ISlotValueVerifier *ISlotValueVerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ISlotValueVerifier.Contract.ISlotValueVerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ISlotValueVerifier *ISlotValueVerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISlotValueVerifier.Contract.ISlotValueVerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ISlotValueVerifier *ISlotValueVerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ISlotValueVerifier.Contract.ISlotValueVerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ISlotValueVerifier *ISlotValueVerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ISlotValueVerifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ISlotValueVerifier *ISlotValueVerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ISlotValueVerifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ISlotValueVerifier *ISlotValueVerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ISlotValueVerifier.Contract.contract.Transact(opts, method, params...)
}

// VerifySlotValue is a free data retrieval call binding the contract method 0x0b885e53.
//
// Solidity: function verifySlotValue(uint64 chainId, bytes proofData, bytes blkVerifyInfo) view returns((uint64,bytes32,bytes32,bytes32,bytes32,uint32) slotInfo)
func (_ISlotValueVerifier *ISlotValueVerifierCaller) VerifySlotValue(opts *bind.CallOpts, chainId uint64, proofData []byte, blkVerifyInfo []byte) (ISlotValueVerifierSlotInfo, error) {
	var out []interface{}
	err := _ISlotValueVerifier.contract.Call(opts, &out, "verifySlotValue", chainId, proofData, blkVerifyInfo)

	if err != nil {
		return *new(ISlotValueVerifierSlotInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(ISlotValueVerifierSlotInfo)).(*ISlotValueVerifierSlotInfo)

	return out0, err

}

// VerifySlotValue is a free data retrieval call binding the contract method 0x0b885e53.
//
// Solidity: function verifySlotValue(uint64 chainId, bytes proofData, bytes blkVerifyInfo) view returns((uint64,bytes32,bytes32,bytes32,bytes32,uint32) slotInfo)
func (_ISlotValueVerifier *ISlotValueVerifierSession) VerifySlotValue(chainId uint64, proofData []byte, blkVerifyInfo []byte) (ISlotValueVerifierSlotInfo, error) {
	return _ISlotValueVerifier.Contract.VerifySlotValue(&_ISlotValueVerifier.CallOpts, chainId, proofData, blkVerifyInfo)
}

// VerifySlotValue is a free data retrieval call binding the contract method 0x0b885e53.
//
// Solidity: function verifySlotValue(uint64 chainId, bytes proofData, bytes blkVerifyInfo) view returns((uint64,bytes32,bytes32,bytes32,bytes32,uint32) slotInfo)
func (_ISlotValueVerifier *ISlotValueVerifierCallerSession) VerifySlotValue(chainId uint64, proofData []byte, blkVerifyInfo []byte) (ISlotValueVerifierSlotInfo, error) {
	return _ISlotValueVerifier.Contract.VerifySlotValue(&_ISlotValueVerifier.CallOpts, chainId, proofData, blkVerifyInfo)
}

// ITxVerifierMetaData contains all meta data concerning the ITxVerifier contract.
var ITxVerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"txRaw\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"auxiBlkVerifyInfo\",\"type\":\"bytes\"}],\"name\":\"verifyTx\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"gasTipCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasFeeCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"blkNum\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"blkHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blkTime\",\"type\":\"uint64\"}],\"internalType\":\"structITxVerifier.TxInfo\",\"name\":\"txInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"txRaw\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"auxiBlkVerifyInfo\",\"type\":\"bytes\"}],\"name\":\"verifyTxAndLog\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"gasTipCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasFeeCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"blkNum\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"blkHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blkTime\",\"type\":\"uint64\"}],\"internalType\":\"structITxVerifier.TxInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// ITxVerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use ITxVerifierMetaData.ABI instead.
var ITxVerifierABI = ITxVerifierMetaData.ABI

// ITxVerifier is an auto generated Go binding around an Ethereum contract.
type ITxVerifier struct {
	ITxVerifierCaller     // Read-only binding to the contract
	ITxVerifierTransactor // Write-only binding to the contract
	ITxVerifierFilterer   // Log filterer for contract events
}

// ITxVerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type ITxVerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ITxVerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ITxVerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ITxVerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ITxVerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ITxVerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ITxVerifierSession struct {
	Contract     *ITxVerifier      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ITxVerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ITxVerifierCallerSession struct {
	Contract *ITxVerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// ITxVerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ITxVerifierTransactorSession struct {
	Contract     *ITxVerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ITxVerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type ITxVerifierRaw struct {
	Contract *ITxVerifier // Generic contract binding to access the raw methods on
}

// ITxVerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ITxVerifierCallerRaw struct {
	Contract *ITxVerifierCaller // Generic read-only contract binding to access the raw methods on
}

// ITxVerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ITxVerifierTransactorRaw struct {
	Contract *ITxVerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewITxVerifier creates a new instance of ITxVerifier, bound to a specific deployed contract.
func NewITxVerifier(address common.Address, backend bind.ContractBackend) (*ITxVerifier, error) {
	contract, err := bindITxVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ITxVerifier{ITxVerifierCaller: ITxVerifierCaller{contract: contract}, ITxVerifierTransactor: ITxVerifierTransactor{contract: contract}, ITxVerifierFilterer: ITxVerifierFilterer{contract: contract}}, nil
}

// NewITxVerifierCaller creates a new read-only instance of ITxVerifier, bound to a specific deployed contract.
func NewITxVerifierCaller(address common.Address, caller bind.ContractCaller) (*ITxVerifierCaller, error) {
	contract, err := bindITxVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ITxVerifierCaller{contract: contract}, nil
}

// NewITxVerifierTransactor creates a new write-only instance of ITxVerifier, bound to a specific deployed contract.
func NewITxVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*ITxVerifierTransactor, error) {
	contract, err := bindITxVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ITxVerifierTransactor{contract: contract}, nil
}

// NewITxVerifierFilterer creates a new log filterer instance of ITxVerifier, bound to a specific deployed contract.
func NewITxVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*ITxVerifierFilterer, error) {
	contract, err := bindITxVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ITxVerifierFilterer{contract: contract}, nil
}

// bindITxVerifier binds a generic wrapper to an already deployed contract.
func bindITxVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ITxVerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ITxVerifier *ITxVerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ITxVerifier.Contract.ITxVerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ITxVerifier *ITxVerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ITxVerifier.Contract.ITxVerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ITxVerifier *ITxVerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ITxVerifier.Contract.ITxVerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ITxVerifier *ITxVerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ITxVerifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ITxVerifier *ITxVerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ITxVerifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ITxVerifier *ITxVerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ITxVerifier.Contract.contract.Transact(opts, method, params...)
}

// VerifyTx is a free data retrieval call binding the contract method 0xa8da8d69.
//
// Solidity: function verifyTx(bytes txRaw, bytes proofData, bytes auxiBlkVerifyInfo) view returns((uint64,uint64,uint256,uint256,uint256,address,uint256,bytes,address,uint32,bytes32,uint64) txInfo)
func (_ITxVerifier *ITxVerifierCaller) VerifyTx(opts *bind.CallOpts, txRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (ITxVerifierTxInfo, error) {
	var out []interface{}
	err := _ITxVerifier.contract.Call(opts, &out, "verifyTx", txRaw, proofData, auxiBlkVerifyInfo)

	if err != nil {
		return *new(ITxVerifierTxInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(ITxVerifierTxInfo)).(*ITxVerifierTxInfo)

	return out0, err

}

// VerifyTx is a free data retrieval call binding the contract method 0xa8da8d69.
//
// Solidity: function verifyTx(bytes txRaw, bytes proofData, bytes auxiBlkVerifyInfo) view returns((uint64,uint64,uint256,uint256,uint256,address,uint256,bytes,address,uint32,bytes32,uint64) txInfo)
func (_ITxVerifier *ITxVerifierSession) VerifyTx(txRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (ITxVerifierTxInfo, error) {
	return _ITxVerifier.Contract.VerifyTx(&_ITxVerifier.CallOpts, txRaw, proofData, auxiBlkVerifyInfo)
}

// VerifyTx is a free data retrieval call binding the contract method 0xa8da8d69.
//
// Solidity: function verifyTx(bytes txRaw, bytes proofData, bytes auxiBlkVerifyInfo) view returns((uint64,uint64,uint256,uint256,uint256,address,uint256,bytes,address,uint32,bytes32,uint64) txInfo)
func (_ITxVerifier *ITxVerifierCallerSession) VerifyTx(txRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (ITxVerifierTxInfo, error) {
	return _ITxVerifier.Contract.VerifyTx(&_ITxVerifier.CallOpts, txRaw, proofData, auxiBlkVerifyInfo)
}

// VerifyTxAndLog is a paid mutator transaction binding the contract method 0x361108de.
//
// Solidity: function verifyTxAndLog(bytes txRaw, bytes proofData, bytes auxiBlkVerifyInfo) returns((uint64,uint64,uint256,uint256,uint256,address,uint256,bytes,address,uint32,bytes32,uint64) info)
func (_ITxVerifier *ITxVerifierTransactor) VerifyTxAndLog(opts *bind.TransactOpts, txRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (*types.Transaction, error) {
	return _ITxVerifier.contract.Transact(opts, "verifyTxAndLog", txRaw, proofData, auxiBlkVerifyInfo)
}

// VerifyTxAndLog is a paid mutator transaction binding the contract method 0x361108de.
//
// Solidity: function verifyTxAndLog(bytes txRaw, bytes proofData, bytes auxiBlkVerifyInfo) returns((uint64,uint64,uint256,uint256,uint256,address,uint256,bytes,address,uint32,bytes32,uint64) info)
func (_ITxVerifier *ITxVerifierSession) VerifyTxAndLog(txRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (*types.Transaction, error) {
	return _ITxVerifier.Contract.VerifyTxAndLog(&_ITxVerifier.TransactOpts, txRaw, proofData, auxiBlkVerifyInfo)
}

// VerifyTxAndLog is a paid mutator transaction binding the contract method 0x361108de.
//
// Solidity: function verifyTxAndLog(bytes txRaw, bytes proofData, bytes auxiBlkVerifyInfo) returns((uint64,uint64,uint256,uint256,uint256,address,uint256,bytes,address,uint32,bytes32,uint64) info)
func (_ITxVerifier *ITxVerifierTransactorSession) VerifyTxAndLog(txRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (*types.Transaction, error) {
	return _ITxVerifier.Contract.VerifyTxAndLog(&_ITxVerifier.TransactOpts, txRaw, proofData, auxiBlkVerifyInfo)
}

// IUniswapSumVolumeMetaData contains all meta data concerning the IUniswapSumVolume contract.
var IUniswapSumVolumeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"}],\"name\":\"getAttestedSwapSumVolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IUniswapSumVolumeABI is the input ABI used to generate the binding from.
// Deprecated: Use IUniswapSumVolumeMetaData.ABI instead.
var IUniswapSumVolumeABI = IUniswapSumVolumeMetaData.ABI

// IUniswapSumVolume is an auto generated Go binding around an Ethereum contract.
type IUniswapSumVolume struct {
	IUniswapSumVolumeCaller     // Read-only binding to the contract
	IUniswapSumVolumeTransactor // Write-only binding to the contract
	IUniswapSumVolumeFilterer   // Log filterer for contract events
}

// IUniswapSumVolumeCaller is an auto generated read-only Go binding around an Ethereum contract.
type IUniswapSumVolumeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IUniswapSumVolumeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IUniswapSumVolumeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IUniswapSumVolumeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IUniswapSumVolumeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IUniswapSumVolumeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IUniswapSumVolumeSession struct {
	Contract     *IUniswapSumVolume // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// IUniswapSumVolumeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IUniswapSumVolumeCallerSession struct {
	Contract *IUniswapSumVolumeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// IUniswapSumVolumeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IUniswapSumVolumeTransactorSession struct {
	Contract     *IUniswapSumVolumeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// IUniswapSumVolumeRaw is an auto generated low-level Go binding around an Ethereum contract.
type IUniswapSumVolumeRaw struct {
	Contract *IUniswapSumVolume // Generic contract binding to access the raw methods on
}

// IUniswapSumVolumeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IUniswapSumVolumeCallerRaw struct {
	Contract *IUniswapSumVolumeCaller // Generic read-only contract binding to access the raw methods on
}

// IUniswapSumVolumeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IUniswapSumVolumeTransactorRaw struct {
	Contract *IUniswapSumVolumeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIUniswapSumVolume creates a new instance of IUniswapSumVolume, bound to a specific deployed contract.
func NewIUniswapSumVolume(address common.Address, backend bind.ContractBackend) (*IUniswapSumVolume, error) {
	contract, err := bindIUniswapSumVolume(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IUniswapSumVolume{IUniswapSumVolumeCaller: IUniswapSumVolumeCaller{contract: contract}, IUniswapSumVolumeTransactor: IUniswapSumVolumeTransactor{contract: contract}, IUniswapSumVolumeFilterer: IUniswapSumVolumeFilterer{contract: contract}}, nil
}

// NewIUniswapSumVolumeCaller creates a new read-only instance of IUniswapSumVolume, bound to a specific deployed contract.
func NewIUniswapSumVolumeCaller(address common.Address, caller bind.ContractCaller) (*IUniswapSumVolumeCaller, error) {
	contract, err := bindIUniswapSumVolume(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IUniswapSumVolumeCaller{contract: contract}, nil
}

// NewIUniswapSumVolumeTransactor creates a new write-only instance of IUniswapSumVolume, bound to a specific deployed contract.
func NewIUniswapSumVolumeTransactor(address common.Address, transactor bind.ContractTransactor) (*IUniswapSumVolumeTransactor, error) {
	contract, err := bindIUniswapSumVolume(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IUniswapSumVolumeTransactor{contract: contract}, nil
}

// NewIUniswapSumVolumeFilterer creates a new log filterer instance of IUniswapSumVolume, bound to a specific deployed contract.
func NewIUniswapSumVolumeFilterer(address common.Address, filterer bind.ContractFilterer) (*IUniswapSumVolumeFilterer, error) {
	contract, err := bindIUniswapSumVolume(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IUniswapSumVolumeFilterer{contract: contract}, nil
}

// bindIUniswapSumVolume binds a generic wrapper to an already deployed contract.
func bindIUniswapSumVolume(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IUniswapSumVolumeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IUniswapSumVolume *IUniswapSumVolumeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IUniswapSumVolume.Contract.IUniswapSumVolumeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IUniswapSumVolume *IUniswapSumVolumeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IUniswapSumVolume.Contract.IUniswapSumVolumeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IUniswapSumVolume *IUniswapSumVolumeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IUniswapSumVolume.Contract.IUniswapSumVolumeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IUniswapSumVolume *IUniswapSumVolumeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IUniswapSumVolume.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IUniswapSumVolume *IUniswapSumVolumeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IUniswapSumVolume.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IUniswapSumVolume *IUniswapSumVolumeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IUniswapSumVolume.Contract.contract.Transact(opts, method, params...)
}

// GetAttestedSwapSumVolume is a free data retrieval call binding the contract method 0x950650c1.
//
// Solidity: function getAttestedSwapSumVolume(address swapper) view returns(uint256 volume)
func (_IUniswapSumVolume *IUniswapSumVolumeCaller) GetAttestedSwapSumVolume(opts *bind.CallOpts, swapper common.Address) (*big.Int, error) {
	var out []interface{}
	err := _IUniswapSumVolume.contract.Call(opts, &out, "getAttestedSwapSumVolume", swapper)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAttestedSwapSumVolume is a free data retrieval call binding the contract method 0x950650c1.
//
// Solidity: function getAttestedSwapSumVolume(address swapper) view returns(uint256 volume)
func (_IUniswapSumVolume *IUniswapSumVolumeSession) GetAttestedSwapSumVolume(swapper common.Address) (*big.Int, error) {
	return _IUniswapSumVolume.Contract.GetAttestedSwapSumVolume(&_IUniswapSumVolume.CallOpts, swapper)
}

// GetAttestedSwapSumVolume is a free data retrieval call binding the contract method 0x950650c1.
//
// Solidity: function getAttestedSwapSumVolume(address swapper) view returns(uint256 volume)
func (_IUniswapSumVolume *IUniswapSumVolumeCallerSession) GetAttestedSwapSumVolume(swapper common.Address) (*big.Int, error) {
	return _IUniswapSumVolume.Contract.GetAttestedSwapSumVolume(&_IUniswapSumVolume.CallOpts, swapper)
}

// IVerifierMetaData contains all meta data concerning the IVerifier contract.
var IVerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commit\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[10]\",\"name\":\"input\",\"type\":\"uint256[10]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IVerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use IVerifierMetaData.ABI instead.
var IVerifierABI = IVerifierMetaData.ABI

// IVerifier is an auto generated Go binding around an Ethereum contract.
type IVerifier struct {
	IVerifierCaller     // Read-only binding to the contract
	IVerifierTransactor // Write-only binding to the contract
	IVerifierFilterer   // Log filterer for contract events
}

// IVerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type IVerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IVerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IVerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IVerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IVerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IVerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IVerifierSession struct {
	Contract     *IVerifier        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IVerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IVerifierCallerSession struct {
	Contract *IVerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// IVerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IVerifierTransactorSession struct {
	Contract     *IVerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// IVerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type IVerifierRaw struct {
	Contract *IVerifier // Generic contract binding to access the raw methods on
}

// IVerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IVerifierCallerRaw struct {
	Contract *IVerifierCaller // Generic read-only contract binding to access the raw methods on
}

// IVerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IVerifierTransactorRaw struct {
	Contract *IVerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIVerifier creates a new instance of IVerifier, bound to a specific deployed contract.
func NewIVerifier(address common.Address, backend bind.ContractBackend) (*IVerifier, error) {
	contract, err := bindIVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IVerifier{IVerifierCaller: IVerifierCaller{contract: contract}, IVerifierTransactor: IVerifierTransactor{contract: contract}, IVerifierFilterer: IVerifierFilterer{contract: contract}}, nil
}

// NewIVerifierCaller creates a new read-only instance of IVerifier, bound to a specific deployed contract.
func NewIVerifierCaller(address common.Address, caller bind.ContractCaller) (*IVerifierCaller, error) {
	contract, err := bindIVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IVerifierCaller{contract: contract}, nil
}

// NewIVerifierTransactor creates a new write-only instance of IVerifier, bound to a specific deployed contract.
func NewIVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*IVerifierTransactor, error) {
	contract, err := bindIVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IVerifierTransactor{contract: contract}, nil
}

// NewIVerifierFilterer creates a new log filterer instance of IVerifier, bound to a specific deployed contract.
func NewIVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*IVerifierFilterer, error) {
	contract, err := bindIVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IVerifierFilterer{contract: contract}, nil
}

// bindIVerifier binds a generic wrapper to an already deployed contract.
func bindIVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IVerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IVerifier *IVerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IVerifier.Contract.IVerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IVerifier *IVerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IVerifier.Contract.IVerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IVerifier *IVerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IVerifier.Contract.IVerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IVerifier *IVerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IVerifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IVerifier *IVerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IVerifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IVerifier *IVerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IVerifier.Contract.contract.Transact(opts, method, params...)
}

// VerifyProof is a free data retrieval call binding the contract method 0x9d210a18.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[2] commit, uint256[10] input) view returns(bool r)
func (_IVerifier *IVerifierCaller) VerifyProof(opts *bind.CallOpts, a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, commit [2]*big.Int, input [10]*big.Int) (bool, error) {
	var out []interface{}
	err := _IVerifier.contract.Call(opts, &out, "verifyProof", a, b, c, commit, input)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyProof is a free data retrieval call binding the contract method 0x9d210a18.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[2] commit, uint256[10] input) view returns(bool r)
func (_IVerifier *IVerifierSession) VerifyProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, commit [2]*big.Int, input [10]*big.Int) (bool, error) {
	return _IVerifier.Contract.VerifyProof(&_IVerifier.CallOpts, a, b, c, commit, input)
}

// VerifyProof is a free data retrieval call binding the contract method 0x9d210a18.
//
// Solidity: function verifyProof(uint256[2] a, uint256[2][2] b, uint256[2] c, uint256[2] commit, uint256[10] input) view returns(bool r)
func (_IVerifier *IVerifierCallerSession) VerifyProof(a [2]*big.Int, b [2][2]*big.Int, c [2]*big.Int, commit [2]*big.Int, input [10]*big.Int) (bool, error) {
	return _IVerifier.Contract.VerifyProof(&_IVerifier.CallOpts, a, b, c, commit, input)
}

// IZkpVerifierMetaData contains all meta data concerning the IZkpVerifier contract.
var IZkpVerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"}],\"name\":\"verifyRaw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// IZkpVerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use IZkpVerifierMetaData.ABI instead.
var IZkpVerifierABI = IZkpVerifierMetaData.ABI

// IZkpVerifier is an auto generated Go binding around an Ethereum contract.
type IZkpVerifier struct {
	IZkpVerifierCaller     // Read-only binding to the contract
	IZkpVerifierTransactor // Write-only binding to the contract
	IZkpVerifierFilterer   // Log filterer for contract events
}

// IZkpVerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type IZkpVerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IZkpVerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IZkpVerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IZkpVerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IZkpVerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IZkpVerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IZkpVerifierSession struct {
	Contract     *IZkpVerifier     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IZkpVerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IZkpVerifierCallerSession struct {
	Contract *IZkpVerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// IZkpVerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IZkpVerifierTransactorSession struct {
	Contract     *IZkpVerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// IZkpVerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type IZkpVerifierRaw struct {
	Contract *IZkpVerifier // Generic contract binding to access the raw methods on
}

// IZkpVerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IZkpVerifierCallerRaw struct {
	Contract *IZkpVerifierCaller // Generic read-only contract binding to access the raw methods on
}

// IZkpVerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IZkpVerifierTransactorRaw struct {
	Contract *IZkpVerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIZkpVerifier creates a new instance of IZkpVerifier, bound to a specific deployed contract.
func NewIZkpVerifier(address common.Address, backend bind.ContractBackend) (*IZkpVerifier, error) {
	contract, err := bindIZkpVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &IZkpVerifier{IZkpVerifierCaller: IZkpVerifierCaller{contract: contract}, IZkpVerifierTransactor: IZkpVerifierTransactor{contract: contract}, IZkpVerifierFilterer: IZkpVerifierFilterer{contract: contract}}, nil
}

// NewIZkpVerifierCaller creates a new read-only instance of IZkpVerifier, bound to a specific deployed contract.
func NewIZkpVerifierCaller(address common.Address, caller bind.ContractCaller) (*IZkpVerifierCaller, error) {
	contract, err := bindIZkpVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IZkpVerifierCaller{contract: contract}, nil
}

// NewIZkpVerifierTransactor creates a new write-only instance of IZkpVerifier, bound to a specific deployed contract.
func NewIZkpVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*IZkpVerifierTransactor, error) {
	contract, err := bindIZkpVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IZkpVerifierTransactor{contract: contract}, nil
}

// NewIZkpVerifierFilterer creates a new log filterer instance of IZkpVerifier, bound to a specific deployed contract.
func NewIZkpVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*IZkpVerifierFilterer, error) {
	contract, err := bindIZkpVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IZkpVerifierFilterer{contract: contract}, nil
}

// bindIZkpVerifier binds a generic wrapper to an already deployed contract.
func bindIZkpVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IZkpVerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IZkpVerifier *IZkpVerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IZkpVerifier.Contract.IZkpVerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IZkpVerifier *IZkpVerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IZkpVerifier.Contract.IZkpVerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IZkpVerifier *IZkpVerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IZkpVerifier.Contract.IZkpVerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_IZkpVerifier *IZkpVerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _IZkpVerifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_IZkpVerifier *IZkpVerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _IZkpVerifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_IZkpVerifier *IZkpVerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _IZkpVerifier.Contract.contract.Transact(opts, method, params...)
}

// VerifyRaw is a free data retrieval call binding the contract method 0x457726e6.
//
// Solidity: function verifyRaw(bytes proofData) view returns(bool r)
func (_IZkpVerifier *IZkpVerifierCaller) VerifyRaw(opts *bind.CallOpts, proofData []byte) (bool, error) {
	var out []interface{}
	err := _IZkpVerifier.contract.Call(opts, &out, "verifyRaw", proofData)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// VerifyRaw is a free data retrieval call binding the contract method 0x457726e6.
//
// Solidity: function verifyRaw(bytes proofData) view returns(bool r)
func (_IZkpVerifier *IZkpVerifierSession) VerifyRaw(proofData []byte) (bool, error) {
	return _IZkpVerifier.Contract.VerifyRaw(&_IZkpVerifier.CallOpts, proofData)
}

// VerifyRaw is a free data retrieval call binding the contract method 0x457726e6.
//
// Solidity: function verifyRaw(bytes proofData) view returns(bool r)
func (_IZkpVerifier *IZkpVerifierCallerSession) VerifyRaw(proofData []byte) (bool, error) {
	return _IZkpVerifier.Contract.VerifyRaw(&_IZkpVerifier.CallOpts, proofData)
}

// LightClientStoreMetaData contains all meta data concerning the LightClientStore contract.
var LightClientStoreMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"bestValidUpdate\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"proposerIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"parentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bodyRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBeaconBlockHeader\",\"name\":\"beacon\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"stateRoot\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"blockHash\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"blockNumber\",\"type\":\"tuple\"}],\"internalType\":\"structExecutionPayload\",\"name\":\"execution\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"executionRoot\",\"type\":\"tuple\"}],\"internalType\":\"structHeaderWithExecution\",\"name\":\"attestedHeader\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"proposerIndex\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"parentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"bodyRoot\",\"type\":\"bytes32\"}],\"internalType\":\"structBeaconBlockHeader\",\"name\":\"beacon\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"stateRoot\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"blockHash\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"blockNumber\",\"type\":\"tuple\"}],\"internalType\":\"structExecutionPayload\",\"name\":\"execution\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"branch\",\"type\":\"bytes32[]\"}],\"internalType\":\"structLeafWithBranch\",\"name\":\"executionRoot\",\"type\":\"tuple\"}],\"internalType\":\"structHeaderWithExecution\",\"name\":\"finalizedHeader\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"nextSyncCommitteeRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextSyncCommitteePoseidonRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"structIBeaconVerifier.Proof\",\"name\":\"nextSyncCommitteeRootMappingProof\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"participation\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"poseidonRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"structIBeaconVerifier.Proof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"internalType\":\"structSyncAggregate\",\"name\":\"syncAggregate\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"signatureSlot\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSyncCommitteePoseidonRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSyncCommitteeRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizedExecutionStateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizedSlot\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"forkEpochs\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"forkVersions\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextSyncCommitteePoseidonRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextSyncCommitteeRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optimisticExecutionStateRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optimisticSlot\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zkVerifier\",\"outputs\":[{\"internalType\":\"contractIBeaconVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// LightClientStoreABI is the input ABI used to generate the binding from.
// Deprecated: Use LightClientStoreMetaData.ABI instead.
var LightClientStoreABI = LightClientStoreMetaData.ABI

// LightClientStore is an auto generated Go binding around an Ethereum contract.
type LightClientStore struct {
	LightClientStoreCaller     // Read-only binding to the contract
	LightClientStoreTransactor // Write-only binding to the contract
	LightClientStoreFilterer   // Log filterer for contract events
}

// LightClientStoreCaller is an auto generated read-only Go binding around an Ethereum contract.
type LightClientStoreCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LightClientStoreTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LightClientStoreTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LightClientStoreFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LightClientStoreFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LightClientStoreSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LightClientStoreSession struct {
	Contract     *LightClientStore // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LightClientStoreCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LightClientStoreCallerSession struct {
	Contract *LightClientStoreCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// LightClientStoreTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LightClientStoreTransactorSession struct {
	Contract     *LightClientStoreTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// LightClientStoreRaw is an auto generated low-level Go binding around an Ethereum contract.
type LightClientStoreRaw struct {
	Contract *LightClientStore // Generic contract binding to access the raw methods on
}

// LightClientStoreCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LightClientStoreCallerRaw struct {
	Contract *LightClientStoreCaller // Generic read-only contract binding to access the raw methods on
}

// LightClientStoreTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LightClientStoreTransactorRaw struct {
	Contract *LightClientStoreTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLightClientStore creates a new instance of LightClientStore, bound to a specific deployed contract.
func NewLightClientStore(address common.Address, backend bind.ContractBackend) (*LightClientStore, error) {
	contract, err := bindLightClientStore(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &LightClientStore{LightClientStoreCaller: LightClientStoreCaller{contract: contract}, LightClientStoreTransactor: LightClientStoreTransactor{contract: contract}, LightClientStoreFilterer: LightClientStoreFilterer{contract: contract}}, nil
}

// NewLightClientStoreCaller creates a new read-only instance of LightClientStore, bound to a specific deployed contract.
func NewLightClientStoreCaller(address common.Address, caller bind.ContractCaller) (*LightClientStoreCaller, error) {
	contract, err := bindLightClientStore(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LightClientStoreCaller{contract: contract}, nil
}

// NewLightClientStoreTransactor creates a new write-only instance of LightClientStore, bound to a specific deployed contract.
func NewLightClientStoreTransactor(address common.Address, transactor bind.ContractTransactor) (*LightClientStoreTransactor, error) {
	contract, err := bindLightClientStore(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LightClientStoreTransactor{contract: contract}, nil
}

// NewLightClientStoreFilterer creates a new log filterer instance of LightClientStore, bound to a specific deployed contract.
func NewLightClientStoreFilterer(address common.Address, filterer bind.ContractFilterer) (*LightClientStoreFilterer, error) {
	contract, err := bindLightClientStore(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LightClientStoreFilterer{contract: contract}, nil
}

// bindLightClientStore binds a generic wrapper to an already deployed contract.
func bindLightClientStore(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := LightClientStoreMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LightClientStore *LightClientStoreRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LightClientStore.Contract.LightClientStoreCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LightClientStore *LightClientStoreRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LightClientStore.Contract.LightClientStoreTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LightClientStore *LightClientStoreRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LightClientStore.Contract.LightClientStoreTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_LightClientStore *LightClientStoreCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _LightClientStore.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_LightClientStore *LightClientStoreTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _LightClientStore.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_LightClientStore *LightClientStoreTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _LightClientStore.Contract.contract.Transact(opts, method, params...)
}

// BestValidUpdate is a free data retrieval call binding the contract method 0xba67ee48.
//
// Solidity: function bestValidUpdate() view returns(((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])) attestedHeader, ((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])) finalizedHeader, bytes32 nextSyncCommitteeRoot, bytes32 nextSyncCommitteePoseidonRoot, (uint256[2],uint256[2][2],uint256[2],uint256[2]) nextSyncCommitteeRootMappingProof, (uint64,bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2])) syncAggregate, uint64 signatureSlot)
func (_LightClientStore *LightClientStoreCaller) BestValidUpdate(opts *bind.CallOpts) (struct {
	AttestedHeader                    HeaderWithExecution
	FinalizedHeader                   HeaderWithExecution
	NextSyncCommitteeRoot             [32]byte
	NextSyncCommitteePoseidonRoot     [32]byte
	NextSyncCommitteeRootMappingProof IBeaconVerifierProof
	SyncAggregate                     SyncAggregate
	SignatureSlot                     uint64
}, error) {
	var out []interface{}
	err := _LightClientStore.contract.Call(opts, &out, "bestValidUpdate")

	outstruct := new(struct {
		AttestedHeader                    HeaderWithExecution
		FinalizedHeader                   HeaderWithExecution
		NextSyncCommitteeRoot             [32]byte
		NextSyncCommitteePoseidonRoot     [32]byte
		NextSyncCommitteeRootMappingProof IBeaconVerifierProof
		SyncAggregate                     SyncAggregate
		SignatureSlot                     uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AttestedHeader = *abi.ConvertType(out[0], new(HeaderWithExecution)).(*HeaderWithExecution)
	outstruct.FinalizedHeader = *abi.ConvertType(out[1], new(HeaderWithExecution)).(*HeaderWithExecution)
	outstruct.NextSyncCommitteeRoot = *abi.ConvertType(out[2], new([32]byte)).(*[32]byte)
	outstruct.NextSyncCommitteePoseidonRoot = *abi.ConvertType(out[3], new([32]byte)).(*[32]byte)
	outstruct.NextSyncCommitteeRootMappingProof = *abi.ConvertType(out[4], new(IBeaconVerifierProof)).(*IBeaconVerifierProof)
	outstruct.SyncAggregate = *abi.ConvertType(out[5], new(SyncAggregate)).(*SyncAggregate)
	outstruct.SignatureSlot = *abi.ConvertType(out[6], new(uint64)).(*uint64)

	return *outstruct, err

}

// BestValidUpdate is a free data retrieval call binding the contract method 0xba67ee48.
//
// Solidity: function bestValidUpdate() view returns(((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])) attestedHeader, ((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])) finalizedHeader, bytes32 nextSyncCommitteeRoot, bytes32 nextSyncCommitteePoseidonRoot, (uint256[2],uint256[2][2],uint256[2],uint256[2]) nextSyncCommitteeRootMappingProof, (uint64,bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2])) syncAggregate, uint64 signatureSlot)
func (_LightClientStore *LightClientStoreSession) BestValidUpdate() (struct {
	AttestedHeader                    HeaderWithExecution
	FinalizedHeader                   HeaderWithExecution
	NextSyncCommitteeRoot             [32]byte
	NextSyncCommitteePoseidonRoot     [32]byte
	NextSyncCommitteeRootMappingProof IBeaconVerifierProof
	SyncAggregate                     SyncAggregate
	SignatureSlot                     uint64
}, error) {
	return _LightClientStore.Contract.BestValidUpdate(&_LightClientStore.CallOpts)
}

// BestValidUpdate is a free data retrieval call binding the contract method 0xba67ee48.
//
// Solidity: function bestValidUpdate() view returns(((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])) attestedHeader, ((uint64,uint64,bytes32,bytes32,bytes32),((bytes32,bytes32[]),(bytes32,bytes32[]),(bytes32,bytes32[])),(bytes32,bytes32[])) finalizedHeader, bytes32 nextSyncCommitteeRoot, bytes32 nextSyncCommitteePoseidonRoot, (uint256[2],uint256[2][2],uint256[2],uint256[2]) nextSyncCommitteeRootMappingProof, (uint64,bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2])) syncAggregate, uint64 signatureSlot)
func (_LightClientStore *LightClientStoreCallerSession) BestValidUpdate() (struct {
	AttestedHeader                    HeaderWithExecution
	FinalizedHeader                   HeaderWithExecution
	NextSyncCommitteeRoot             [32]byte
	NextSyncCommitteePoseidonRoot     [32]byte
	NextSyncCommitteeRootMappingProof IBeaconVerifierProof
	SyncAggregate                     SyncAggregate
	SignatureSlot                     uint64
}, error) {
	return _LightClientStore.Contract.BestValidUpdate(&_LightClientStore.CallOpts)
}

// CurrentSyncCommitteePoseidonRoot is a free data retrieval call binding the contract method 0x65e700de.
//
// Solidity: function currentSyncCommitteePoseidonRoot() view returns(bytes32)
func (_LightClientStore *LightClientStoreCaller) CurrentSyncCommitteePoseidonRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LightClientStore.contract.Call(opts, &out, "currentSyncCommitteePoseidonRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CurrentSyncCommitteePoseidonRoot is a free data retrieval call binding the contract method 0x65e700de.
//
// Solidity: function currentSyncCommitteePoseidonRoot() view returns(bytes32)
func (_LightClientStore *LightClientStoreSession) CurrentSyncCommitteePoseidonRoot() ([32]byte, error) {
	return _LightClientStore.Contract.CurrentSyncCommitteePoseidonRoot(&_LightClientStore.CallOpts)
}

// CurrentSyncCommitteePoseidonRoot is a free data retrieval call binding the contract method 0x65e700de.
//
// Solidity: function currentSyncCommitteePoseidonRoot() view returns(bytes32)
func (_LightClientStore *LightClientStoreCallerSession) CurrentSyncCommitteePoseidonRoot() ([32]byte, error) {
	return _LightClientStore.Contract.CurrentSyncCommitteePoseidonRoot(&_LightClientStore.CallOpts)
}

// CurrentSyncCommitteeRoot is a free data retrieval call binding the contract method 0xa4059e07.
//
// Solidity: function currentSyncCommitteeRoot() view returns(bytes32)
func (_LightClientStore *LightClientStoreCaller) CurrentSyncCommitteeRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LightClientStore.contract.Call(opts, &out, "currentSyncCommitteeRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// CurrentSyncCommitteeRoot is a free data retrieval call binding the contract method 0xa4059e07.
//
// Solidity: function currentSyncCommitteeRoot() view returns(bytes32)
func (_LightClientStore *LightClientStoreSession) CurrentSyncCommitteeRoot() ([32]byte, error) {
	return _LightClientStore.Contract.CurrentSyncCommitteeRoot(&_LightClientStore.CallOpts)
}

// CurrentSyncCommitteeRoot is a free data retrieval call binding the contract method 0xa4059e07.
//
// Solidity: function currentSyncCommitteeRoot() view returns(bytes32)
func (_LightClientStore *LightClientStoreCallerSession) CurrentSyncCommitteeRoot() ([32]byte, error) {
	return _LightClientStore.Contract.CurrentSyncCommitteeRoot(&_LightClientStore.CallOpts)
}

// FinalizedExecutionStateRoot is a free data retrieval call binding the contract method 0xc5190436.
//
// Solidity: function finalizedExecutionStateRoot() view returns(bytes32)
func (_LightClientStore *LightClientStoreCaller) FinalizedExecutionStateRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LightClientStore.contract.Call(opts, &out, "finalizedExecutionStateRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// FinalizedExecutionStateRoot is a free data retrieval call binding the contract method 0xc5190436.
//
// Solidity: function finalizedExecutionStateRoot() view returns(bytes32)
func (_LightClientStore *LightClientStoreSession) FinalizedExecutionStateRoot() ([32]byte, error) {
	return _LightClientStore.Contract.FinalizedExecutionStateRoot(&_LightClientStore.CallOpts)
}

// FinalizedExecutionStateRoot is a free data retrieval call binding the contract method 0xc5190436.
//
// Solidity: function finalizedExecutionStateRoot() view returns(bytes32)
func (_LightClientStore *LightClientStoreCallerSession) FinalizedExecutionStateRoot() ([32]byte, error) {
	return _LightClientStore.Contract.FinalizedExecutionStateRoot(&_LightClientStore.CallOpts)
}

// FinalizedSlot is a free data retrieval call binding the contract method 0xd1802369.
//
// Solidity: function finalizedSlot() view returns(uint64)
func (_LightClientStore *LightClientStoreCaller) FinalizedSlot(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _LightClientStore.contract.Call(opts, &out, "finalizedSlot")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// FinalizedSlot is a free data retrieval call binding the contract method 0xd1802369.
//
// Solidity: function finalizedSlot() view returns(uint64)
func (_LightClientStore *LightClientStoreSession) FinalizedSlot() (uint64, error) {
	return _LightClientStore.Contract.FinalizedSlot(&_LightClientStore.CallOpts)
}

// FinalizedSlot is a free data retrieval call binding the contract method 0xd1802369.
//
// Solidity: function finalizedSlot() view returns(uint64)
func (_LightClientStore *LightClientStoreCallerSession) FinalizedSlot() (uint64, error) {
	return _LightClientStore.Contract.FinalizedSlot(&_LightClientStore.CallOpts)
}

// ForkEpochs is a free data retrieval call binding the contract method 0xbcbaf770.
//
// Solidity: function forkEpochs(uint256 ) view returns(uint64)
func (_LightClientStore *LightClientStoreCaller) ForkEpochs(opts *bind.CallOpts, arg0 *big.Int) (uint64, error) {
	var out []interface{}
	err := _LightClientStore.contract.Call(opts, &out, "forkEpochs", arg0)

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// ForkEpochs is a free data retrieval call binding the contract method 0xbcbaf770.
//
// Solidity: function forkEpochs(uint256 ) view returns(uint64)
func (_LightClientStore *LightClientStoreSession) ForkEpochs(arg0 *big.Int) (uint64, error) {
	return _LightClientStore.Contract.ForkEpochs(&_LightClientStore.CallOpts, arg0)
}

// ForkEpochs is a free data retrieval call binding the contract method 0xbcbaf770.
//
// Solidity: function forkEpochs(uint256 ) view returns(uint64)
func (_LightClientStore *LightClientStoreCallerSession) ForkEpochs(arg0 *big.Int) (uint64, error) {
	return _LightClientStore.Contract.ForkEpochs(&_LightClientStore.CallOpts, arg0)
}

// ForkVersions is a free data retrieval call binding the contract method 0xbaa94ea2.
//
// Solidity: function forkVersions(uint256 ) view returns(bytes4)
func (_LightClientStore *LightClientStoreCaller) ForkVersions(opts *bind.CallOpts, arg0 *big.Int) ([4]byte, error) {
	var out []interface{}
	err := _LightClientStore.contract.Call(opts, &out, "forkVersions", arg0)

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// ForkVersions is a free data retrieval call binding the contract method 0xbaa94ea2.
//
// Solidity: function forkVersions(uint256 ) view returns(bytes4)
func (_LightClientStore *LightClientStoreSession) ForkVersions(arg0 *big.Int) ([4]byte, error) {
	return _LightClientStore.Contract.ForkVersions(&_LightClientStore.CallOpts, arg0)
}

// ForkVersions is a free data retrieval call binding the contract method 0xbaa94ea2.
//
// Solidity: function forkVersions(uint256 ) view returns(bytes4)
func (_LightClientStore *LightClientStoreCallerSession) ForkVersions(arg0 *big.Int) ([4]byte, error) {
	return _LightClientStore.Contract.ForkVersions(&_LightClientStore.CallOpts, arg0)
}

// NextSyncCommitteePoseidonRoot is a free data retrieval call binding the contract method 0xe1861b08.
//
// Solidity: function nextSyncCommitteePoseidonRoot() view returns(bytes32)
func (_LightClientStore *LightClientStoreCaller) NextSyncCommitteePoseidonRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LightClientStore.contract.Call(opts, &out, "nextSyncCommitteePoseidonRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// NextSyncCommitteePoseidonRoot is a free data retrieval call binding the contract method 0xe1861b08.
//
// Solidity: function nextSyncCommitteePoseidonRoot() view returns(bytes32)
func (_LightClientStore *LightClientStoreSession) NextSyncCommitteePoseidonRoot() ([32]byte, error) {
	return _LightClientStore.Contract.NextSyncCommitteePoseidonRoot(&_LightClientStore.CallOpts)
}

// NextSyncCommitteePoseidonRoot is a free data retrieval call binding the contract method 0xe1861b08.
//
// Solidity: function nextSyncCommitteePoseidonRoot() view returns(bytes32)
func (_LightClientStore *LightClientStoreCallerSession) NextSyncCommitteePoseidonRoot() ([32]byte, error) {
	return _LightClientStore.Contract.NextSyncCommitteePoseidonRoot(&_LightClientStore.CallOpts)
}

// NextSyncCommitteeRoot is a free data retrieval call binding the contract method 0x67b49cc7.
//
// Solidity: function nextSyncCommitteeRoot() view returns(bytes32)
func (_LightClientStore *LightClientStoreCaller) NextSyncCommitteeRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LightClientStore.contract.Call(opts, &out, "nextSyncCommitteeRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// NextSyncCommitteeRoot is a free data retrieval call binding the contract method 0x67b49cc7.
//
// Solidity: function nextSyncCommitteeRoot() view returns(bytes32)
func (_LightClientStore *LightClientStoreSession) NextSyncCommitteeRoot() ([32]byte, error) {
	return _LightClientStore.Contract.NextSyncCommitteeRoot(&_LightClientStore.CallOpts)
}

// NextSyncCommitteeRoot is a free data retrieval call binding the contract method 0x67b49cc7.
//
// Solidity: function nextSyncCommitteeRoot() view returns(bytes32)
func (_LightClientStore *LightClientStoreCallerSession) NextSyncCommitteeRoot() ([32]byte, error) {
	return _LightClientStore.Contract.NextSyncCommitteeRoot(&_LightClientStore.CallOpts)
}

// OptimisticExecutionStateRoot is a free data retrieval call binding the contract method 0x39536c8f.
//
// Solidity: function optimisticExecutionStateRoot() view returns(bytes32)
func (_LightClientStore *LightClientStoreCaller) OptimisticExecutionStateRoot(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _LightClientStore.contract.Call(opts, &out, "optimisticExecutionStateRoot")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// OptimisticExecutionStateRoot is a free data retrieval call binding the contract method 0x39536c8f.
//
// Solidity: function optimisticExecutionStateRoot() view returns(bytes32)
func (_LightClientStore *LightClientStoreSession) OptimisticExecutionStateRoot() ([32]byte, error) {
	return _LightClientStore.Contract.OptimisticExecutionStateRoot(&_LightClientStore.CallOpts)
}

// OptimisticExecutionStateRoot is a free data retrieval call binding the contract method 0x39536c8f.
//
// Solidity: function optimisticExecutionStateRoot() view returns(bytes32)
func (_LightClientStore *LightClientStoreCallerSession) OptimisticExecutionStateRoot() ([32]byte, error) {
	return _LightClientStore.Contract.OptimisticExecutionStateRoot(&_LightClientStore.CallOpts)
}

// OptimisticSlot is a free data retrieval call binding the contract method 0x3cf5ea9e.
//
// Solidity: function optimisticSlot() view returns(uint64)
func (_LightClientStore *LightClientStoreCaller) OptimisticSlot(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _LightClientStore.contract.Call(opts, &out, "optimisticSlot")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// OptimisticSlot is a free data retrieval call binding the contract method 0x3cf5ea9e.
//
// Solidity: function optimisticSlot() view returns(uint64)
func (_LightClientStore *LightClientStoreSession) OptimisticSlot() (uint64, error) {
	return _LightClientStore.Contract.OptimisticSlot(&_LightClientStore.CallOpts)
}

// OptimisticSlot is a free data retrieval call binding the contract method 0x3cf5ea9e.
//
// Solidity: function optimisticSlot() view returns(uint64)
func (_LightClientStore *LightClientStoreCallerSession) OptimisticSlot() (uint64, error) {
	return _LightClientStore.Contract.OptimisticSlot(&_LightClientStore.CallOpts)
}

// ZkVerifier is a free data retrieval call binding the contract method 0xd6df096d.
//
// Solidity: function zkVerifier() view returns(address)
func (_LightClientStore *LightClientStoreCaller) ZkVerifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _LightClientStore.contract.Call(opts, &out, "zkVerifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ZkVerifier is a free data retrieval call binding the contract method 0xd6df096d.
//
// Solidity: function zkVerifier() view returns(address)
func (_LightClientStore *LightClientStoreSession) ZkVerifier() (common.Address, error) {
	return _LightClientStore.Contract.ZkVerifier(&_LightClientStore.CallOpts)
}

// ZkVerifier is a free data retrieval call binding the contract method 0xd6df096d.
//
// Solidity: function zkVerifier() view returns(address)
func (_LightClientStore *LightClientStoreCallerSession) ZkVerifier() (common.Address, error) {
	return _LightClientStore.Contract.ZkVerifier(&_LightClientStore.CallOpts)
}

// MerkleProofTreeMetaData contains all meta data concerning the MerkleProofTree contract.
var MerkleProofTreeMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220f21bdda95a87dfec00e7ce7dea65545b0870e83f2844cb96feb6b13ba56a956664736f6c63430008150033",
}

// MerkleProofTreeABI is the input ABI used to generate the binding from.
// Deprecated: Use MerkleProofTreeMetaData.ABI instead.
var MerkleProofTreeABI = MerkleProofTreeMetaData.ABI

// MerkleProofTreeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MerkleProofTreeMetaData.Bin instead.
var MerkleProofTreeBin = MerkleProofTreeMetaData.Bin

// DeployMerkleProofTree deploys a new Ethereum contract, binding an instance of MerkleProofTree to it.
func DeployMerkleProofTree(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MerkleProofTree, error) {
	parsed, err := MerkleProofTreeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MerkleProofTreeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MerkleProofTree{MerkleProofTreeCaller: MerkleProofTreeCaller{contract: contract}, MerkleProofTreeTransactor: MerkleProofTreeTransactor{contract: contract}, MerkleProofTreeFilterer: MerkleProofTreeFilterer{contract: contract}}, nil
}

// MerkleProofTree is an auto generated Go binding around an Ethereum contract.
type MerkleProofTree struct {
	MerkleProofTreeCaller     // Read-only binding to the contract
	MerkleProofTreeTransactor // Write-only binding to the contract
	MerkleProofTreeFilterer   // Log filterer for contract events
}

// MerkleProofTreeCaller is an auto generated read-only Go binding around an Ethereum contract.
type MerkleProofTreeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofTreeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MerkleProofTreeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofTreeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MerkleProofTreeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MerkleProofTreeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MerkleProofTreeSession struct {
	Contract     *MerkleProofTree  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MerkleProofTreeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MerkleProofTreeCallerSession struct {
	Contract *MerkleProofTreeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// MerkleProofTreeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MerkleProofTreeTransactorSession struct {
	Contract     *MerkleProofTreeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// MerkleProofTreeRaw is an auto generated low-level Go binding around an Ethereum contract.
type MerkleProofTreeRaw struct {
	Contract *MerkleProofTree // Generic contract binding to access the raw methods on
}

// MerkleProofTreeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MerkleProofTreeCallerRaw struct {
	Contract *MerkleProofTreeCaller // Generic read-only contract binding to access the raw methods on
}

// MerkleProofTreeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MerkleProofTreeTransactorRaw struct {
	Contract *MerkleProofTreeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMerkleProofTree creates a new instance of MerkleProofTree, bound to a specific deployed contract.
func NewMerkleProofTree(address common.Address, backend bind.ContractBackend) (*MerkleProofTree, error) {
	contract, err := bindMerkleProofTree(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MerkleProofTree{MerkleProofTreeCaller: MerkleProofTreeCaller{contract: contract}, MerkleProofTreeTransactor: MerkleProofTreeTransactor{contract: contract}, MerkleProofTreeFilterer: MerkleProofTreeFilterer{contract: contract}}, nil
}

// NewMerkleProofTreeCaller creates a new read-only instance of MerkleProofTree, bound to a specific deployed contract.
func NewMerkleProofTreeCaller(address common.Address, caller bind.ContractCaller) (*MerkleProofTreeCaller, error) {
	contract, err := bindMerkleProofTree(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MerkleProofTreeCaller{contract: contract}, nil
}

// NewMerkleProofTreeTransactor creates a new write-only instance of MerkleProofTree, bound to a specific deployed contract.
func NewMerkleProofTreeTransactor(address common.Address, transactor bind.ContractTransactor) (*MerkleProofTreeTransactor, error) {
	contract, err := bindMerkleProofTree(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MerkleProofTreeTransactor{contract: contract}, nil
}

// NewMerkleProofTreeFilterer creates a new log filterer instance of MerkleProofTree, bound to a specific deployed contract.
func NewMerkleProofTreeFilterer(address common.Address, filterer bind.ContractFilterer) (*MerkleProofTreeFilterer, error) {
	contract, err := bindMerkleProofTree(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MerkleProofTreeFilterer{contract: contract}, nil
}

// bindMerkleProofTree binds a generic wrapper to an already deployed contract.
func bindMerkleProofTree(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MerkleProofTreeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MerkleProofTree *MerkleProofTreeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MerkleProofTree.Contract.MerkleProofTreeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MerkleProofTree *MerkleProofTreeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleProofTree.Contract.MerkleProofTreeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MerkleProofTree *MerkleProofTreeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MerkleProofTree.Contract.MerkleProofTreeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MerkleProofTree *MerkleProofTreeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MerkleProofTree.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MerkleProofTree *MerkleProofTreeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MerkleProofTree.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MerkleProofTree *MerkleProofTreeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MerkleProofTree.Contract.contract.Transact(opts, method, params...)
}

// MessageAppMetaData contains all meta data concerning the MessageApp contract.
var MessageAppMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"executeMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBridge\",\"outputs\":[{\"internalType\":\"contractIMessageBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// MessageAppABI is the input ABI used to generate the binding from.
// Deprecated: Use MessageAppMetaData.ABI instead.
var MessageAppABI = MessageAppMetaData.ABI

// MessageApp is an auto generated Go binding around an Ethereum contract.
type MessageApp struct {
	MessageAppCaller     // Read-only binding to the contract
	MessageAppTransactor // Write-only binding to the contract
	MessageAppFilterer   // Log filterer for contract events
}

// MessageAppCaller is an auto generated read-only Go binding around an Ethereum contract.
type MessageAppCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MessageAppTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MessageAppTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MessageAppFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MessageAppFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MessageAppSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MessageAppSession struct {
	Contract     *MessageApp       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MessageAppCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MessageAppCallerSession struct {
	Contract *MessageAppCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// MessageAppTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MessageAppTransactorSession struct {
	Contract     *MessageAppTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// MessageAppRaw is an auto generated low-level Go binding around an Ethereum contract.
type MessageAppRaw struct {
	Contract *MessageApp // Generic contract binding to access the raw methods on
}

// MessageAppCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MessageAppCallerRaw struct {
	Contract *MessageAppCaller // Generic read-only contract binding to access the raw methods on
}

// MessageAppTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MessageAppTransactorRaw struct {
	Contract *MessageAppTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMessageApp creates a new instance of MessageApp, bound to a specific deployed contract.
func NewMessageApp(address common.Address, backend bind.ContractBackend) (*MessageApp, error) {
	contract, err := bindMessageApp(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MessageApp{MessageAppCaller: MessageAppCaller{contract: contract}, MessageAppTransactor: MessageAppTransactor{contract: contract}, MessageAppFilterer: MessageAppFilterer{contract: contract}}, nil
}

// NewMessageAppCaller creates a new read-only instance of MessageApp, bound to a specific deployed contract.
func NewMessageAppCaller(address common.Address, caller bind.ContractCaller) (*MessageAppCaller, error) {
	contract, err := bindMessageApp(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MessageAppCaller{contract: contract}, nil
}

// NewMessageAppTransactor creates a new write-only instance of MessageApp, bound to a specific deployed contract.
func NewMessageAppTransactor(address common.Address, transactor bind.ContractTransactor) (*MessageAppTransactor, error) {
	contract, err := bindMessageApp(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MessageAppTransactor{contract: contract}, nil
}

// NewMessageAppFilterer creates a new log filterer instance of MessageApp, bound to a specific deployed contract.
func NewMessageAppFilterer(address common.Address, filterer bind.ContractFilterer) (*MessageAppFilterer, error) {
	contract, err := bindMessageApp(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MessageAppFilterer{contract: contract}, nil
}

// bindMessageApp binds a generic wrapper to an already deployed contract.
func bindMessageApp(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MessageAppMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MessageApp *MessageAppRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MessageApp.Contract.MessageAppCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MessageApp *MessageAppRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MessageApp.Contract.MessageAppTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MessageApp *MessageAppRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MessageApp.Contract.MessageAppTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MessageApp *MessageAppCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MessageApp.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MessageApp *MessageAppTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MessageApp.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MessageApp *MessageAppTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MessageApp.Contract.contract.Transact(opts, method, params...)
}

// MessageBridge is a free data retrieval call binding the contract method 0x33a42db1.
//
// Solidity: function messageBridge() view returns(address)
func (_MessageApp *MessageAppCaller) MessageBridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MessageApp.contract.Call(opts, &out, "messageBridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MessageBridge is a free data retrieval call binding the contract method 0x33a42db1.
//
// Solidity: function messageBridge() view returns(address)
func (_MessageApp *MessageAppSession) MessageBridge() (common.Address, error) {
	return _MessageApp.Contract.MessageBridge(&_MessageApp.CallOpts)
}

// MessageBridge is a free data retrieval call binding the contract method 0x33a42db1.
//
// Solidity: function messageBridge() view returns(address)
func (_MessageApp *MessageAppCallerSession) MessageBridge() (common.Address, error) {
	return _MessageApp.Contract.MessageBridge(&_MessageApp.CallOpts)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0xaec95a14.
//
// Solidity: function executeMessage(uint64 srcChainId, address sender, bytes message, address executor) returns(bool)
func (_MessageApp *MessageAppTransactor) ExecuteMessage(opts *bind.TransactOpts, srcChainId uint64, sender common.Address, message []byte, executor common.Address) (*types.Transaction, error) {
	return _MessageApp.contract.Transact(opts, "executeMessage", srcChainId, sender, message, executor)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0xaec95a14.
//
// Solidity: function executeMessage(uint64 srcChainId, address sender, bytes message, address executor) returns(bool)
func (_MessageApp *MessageAppSession) ExecuteMessage(srcChainId uint64, sender common.Address, message []byte, executor common.Address) (*types.Transaction, error) {
	return _MessageApp.Contract.ExecuteMessage(&_MessageApp.TransactOpts, srcChainId, sender, message, executor)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0xaec95a14.
//
// Solidity: function executeMessage(uint64 srcChainId, address sender, bytes message, address executor) returns(bool)
func (_MessageApp *MessageAppTransactorSession) ExecuteMessage(srcChainId uint64, sender common.Address, message []byte, executor common.Address) (*types.Transaction, error) {
	return _MessageApp.Contract.ExecuteMessage(&_MessageApp.TransactOpts, srcChainId, sender, message, executor)
}

// MessageBridgeMetaData contains all meta data concerning the MessageBridge contract.
var MessageBridgeMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"MessageCallReverted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"MessageExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_accountProof\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_storageProof\",\"type\":\"bytes[]\"}],\"name\":\"executeMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_zkProofData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_blkVerifyInfo\",\"type\":\"bytes\"}],\"name\":\"executeMessageWithZkProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"}],\"name\":\"getExecutionStateRootAndSlot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"slot\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lightClients\",\"outputs\":[{\"internalType\":\"contractIEthereumLightClient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"preExecuteMessageGasUsage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"receivedMessages\",\"outputs\":[{\"internalType\":\"enumIMessageBridge.MessageStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"remoteMessageBridgeHashes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"remoteMessageBridges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"sentMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_lightClient\",\"type\":\"address\"}],\"name\":\"setLightClient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usage\",\"type\":\"uint256\"}],\"name\":\"setPreExecuteMessageGasUsage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_remoteMessageBridge\",\"type\":\"address\"}],\"name\":\"setRemoteMessageBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_slotValueVerifier\",\"type\":\"address\"}],\"name\":\"setSlotValueVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotValueVerifier\",\"outputs\":[{\"internalType\":\"contractISlotValueVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080806040523461005d5760015f8181558154336001600160a01b0319821681179093556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3611f1c90816100628239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c80630bbd09ab14610144578063127387081461013f578063456cb9f61461013a5780634586f331146101355780634f256d8114610130578063584e45e11461012b57806363c6ccb2146101265780636b217c0d146101215780636e98da7d1461011c578063715018a614610117578063735267cf146101125780638da5cb5b1461010d578063903e4d1e14610108578063970b324014610103578063975f5e1f146100fe578063affed0e0146100f9578063b90b8352146100f4578063f2fde38b146100ef5763f69f8151146100ea575f80fd5b61089c565b6107f1565b610704565b6106dd565b61066a565b61063d565b610600565b6105da565b610593565b610531565b6104f2565b6104c5565b61049f565b610482565b6103e3565b610389565b610365565b61029e565b6101c6565b67ffffffffffffffff81160361015b57565b5f80fd5b6024359061016c82610149565b565b602435906001600160a01b038216820361015b57565b604435906001600160a01b038216820361015b57565b606435906001600160a01b038216820361015b57565b600435906001600160a01b038216820361015b57565b3461015b57604036600319011261015b576004356101e381610149565b67ffffffffffffffff6101f461016e565b9161020b6001600160a01b03600154163314610c32565b165f81815260066020526040812080546001600160a01b0319166001600160a01b0385161790559160405160208101916bffffffffffffffffffffffff199060601b1682526014815261025d81610c91565b5190209082526007602052604082205580f35b9181601f8401121561015b5782359167ffffffffffffffff831161015b576020838186019501011161015b57565b3461015b5760e036600319011261015b576004356102bb81610149565b6102c361015f565b906102cc610184565b916102d561019a565b67ffffffffffffffff929060843584811161015b576102f8903690600401610270565b60a49291923586811161015b57610313903690600401610270565b93909260c43597881161015b5761034f9861033561033d993690600401610270565b989097610b27565b60405190151581529081906020820190565b0390f35b602090600319011261015b5760043590565b3461015b5761037336610353565b5f526007602052602060405f2054604051908152f35b3461015b5761039736610353565b6103ad6001600160a01b03600154163314610c32565b600955005b9181601f8401121561015b5782359167ffffffffffffffff831161015b576020808501948460051b01011161015b57565b3461015b5760e036600319011261015b5760043561040081610149565b61040861015f565b90610411610184565b9161041a61019a565b67ffffffffffffffff929060843584811161015b5761043d903690600401610270565b60a49291923586811161015b576104589036906004016103b2565b93909260c43597881161015b5761034f9861047a61033d9936906004016103b2565b9890976109a2565b3461015b575f36600319011261015b576020600954604051908152f35b3461015b575f36600319011261015b5760206001600160a01b0360085416604051908152f35b3461015b576104d336610353565b5f52600660205260206001600160a01b0360405f205416604051908152f35b3461015b57602036600319011261015b57604067ffffffffffffffff61052260043561051d81610149565b610cdf565b83519182529091166020820152f35b3461015b575f8060031936011261059057806001546001600160a01b03196001600160a01b03821691610565338414610c32565b166001557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b3461015b57602036600319011261015b576105ac6101b0565b6001600160a01b03906105c482600154163314610c32565b166001600160a01b031960085416176008555f80f35b3461015b575f36600319011261015b5760206001600160a01b0360015416604051908152f35b3461015b57602036600319011261015b5767ffffffffffffffff60043561062681610149565b165f526002602052602060405f2054604051908152f35b3461015b5761064b36610353565b5f52600560205260206001600160a01b0360405f205416604051908152f35b3461015b57604036600319011261015b576106db60043561068a81610149565b61069261016e565b67ffffffffffffffff6001600160a01b03926106b384600154163314610c32565b165f5260056020521660405f20906001600160a01b03166001600160a01b0319825416179055565b005b3461015b575f36600319011261015b57602067ffffffffffffffff60035416604051908152f35b3461015b57606036600319011261015b5760043561072181610149565b61072961016e565b67ffffffffffffffff60443581811161015b5761074a903690600401610270565b82600354169361076182848887461685338b6118c2565b945f5260026020528460405f205583600354169384146107ec5761034f956107d97fd4c077d3ac449bc1b439559b537c6550f793c2432e3d74082b023162296dc5669387956107cb6001890167ffffffffffffffff1667ffffffffffffffff196003541617600355565b60405194859433908661091a565b0390a36040519081529081906020820190565b6108e6565b3461015b57602036600319011261015b5761080a6101b0565b6001600160a01b0361082181600154163314610c32565b811615610831576106db90611e9f565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b3461015b57602036600319011261015b576004355f52600460205260ff60405f20541660405160038210156108d2576020918152f35b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b908060209392818452848401375f828201840152601f01601f1916010190565b9091610953959367ffffffffffffffff6080941683526001600160a01b03809216602084015216604082015281606082015201916108fa565b90565b1561095d57565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b92959093969194976109b860025f541415610956565b60025f556109ca898989898989610d70565b9a90936109d686610cdf565b50938415610abc57610ab29c610a598795610aa795610a9b610a81610a7b610a69610a648f8b610aad9f8c610a50610aa29f94610a5f9f610a5994610a2b610a24610a5f99610a3894610e8d565b3691610ef6565b6020815191012014611074565b67ffffffffffffffff165f52600760205260405f2090565b54923691610f9c565b90611789565b611af9565b611b1f565b610a7660048251146110e6565b611158565b51611c14565b610a8e610a248486610e8d565b6020815191012014610f2c565b3691610f9c565b611c14565b1461101c565b611450565b9061016c60015f55565b60405162461bcd60e51b815260206004820152602d60248201527f4d6573736167654272696467653a20657865637574696f6e207374617465207260448201527f6f6f74206e6f7420666f756e64000000000000000000000000000000000000006064820152608490fd5b929590939691949760c090610b4060025f541415610956565b60025f55610b528a8a8a8a8a8a610d70565b939094610b76610b6a6008546001600160a01b031690565b6001600160a01b031690565b91610b986040519e8f9586948594630b885e5360e01b86528c60048701611212565b03915afa988915610c2d57610ab299610aad926020925f92610bf9575b50610bc590606083015114611248565b610bd48460808301511461129e565b0151610bf28467ffffffffffffffff165f52600760205260405f2090565b54146112f6565b610bc5919250610c1f9060c03d8111610c26575b610c178183610cb2565b810190611199565b9190610bb5565b503d610c0d565b610cd4565b15610c3957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b634e487b7160e01b5f52604160045260245ffd5b6040810190811067ffffffffffffffff821117610cad57604052565b610c7d565b90601f8019910116810190811067ffffffffffffffff821117610cad57604052565b6040513d5f823e3d90fd5b9067ffffffffffffffff5f92168252600560205260406004816001600160a01b0381862054168151928380926321d362d360e11b82525afa938415610c2d5780928195610d2e575b5050509190565b919450915083813d8111610d69575b610d478183610cb2565b8101031261059057506020825192015191610d6183610149565b5f8080610d27565b503d610d3d565b610d8b94929196959367ffffffffffffffff461692886118c2565b91825f52600460205260ff60405f20541660038110156108d257610e0e576040519081610dd4602082019283602060029193929367ffffffffffffffff60408201951681520152565b0391610de8601f1993848101835282610cb2565b51902060408051602081019283529281018352909190610e089082610cb2565b51902090565b60405162461bcd60e51b815260206004820152602760248201527f4d6573736167654272696467653a206d65737361676520616c7265616479206560448201527f78656375746564000000000000000000000000000000000000000000000000006064820152608490fd5b634e487b7160e01b5f52603260045260245ffd5b9015610ec857803590601e198136030182121561015b57019081359167ffffffffffffffff831161015b57602001823603811361015b579190565b610e79565b6040519061016c82610c91565b67ffffffffffffffff8111610cad57601f01601f191660200190565b929192610f0282610eda565b91610f106040519384610cb2565b82948184528183011161015b578281602093845f960137010152565b15610f3357565b60405162461bcd60e51b815260206004820152602360248201527f4d6573736167654272696467653a20696e76616c69642073746f7261676520726044820152621bdbdd60ea1b6064820152608490fd5b67ffffffffffffffff8111610cad5760051b60200190565b92919092610fa984610f84565b91610fb76040519384610cb2565b829480845260208094019060051b83019282841161015b5780915b848310610fe157505050505050565b823567ffffffffffffffff811161015b57820184601f8201121561015b5786916110118683858095359101610ef6565b815201920191610fd2565b1561102357565b60405162461bcd60e51b815260206004820152602360248201527f4d6573736167654272696467653a20696e76616c6964206d65737361676520686044820152620c2e6d60eb1b6064820152608490fd5b1561107b57565b60405162461bcd60e51b815260206004820152602960248201527f4d6573736167654272696467653a20696e76616c6964206163636f756e74207060448201527f726f6f6620726f6f7400000000000000000000000000000000000000000000006064820152608490fd5b156110ed57565b60405162461bcd60e51b815260206004820152602f60248201527f4d6573736167654272696467653a20696e76616c6964206163636f756e74206460448201527f65636f6465642066726f6d20524c5000000000000000000000000000000000006064820152608490fd5b805160021015610ec85760600190565b805115610ec85760200190565b805160011015610ec85760400190565b8051821015610ec85760209160051b010190565b908160c091031261015b576040519060c082019082821067ffffffffffffffff831117610cad5760a09160405280516111d181610149565b835260208101516020840152604081015160408401526060810151606084015260808101516080840152015163ffffffff8116810361015b5760a082015290565b9391610953959367ffffffffffffffff61123a931686526060602087015260608601916108fa565b9260408185039101526108fa565b1561124f57565b60405162461bcd60e51b815260206004820152602160248201527f4d6573736167654272696467653a20736c6f74206b6579206e6f74206d6174636044820152600d60fb1b6064820152608490fd5b156112a557565b60405162461bcd60e51b815260206004820152602360248201527f4d6573736167654272696467653a20736c6f742076616c7565206e6f74206d616044820152620e8c6d60eb1b6064820152608490fd5b156112fd57565b60405162461bcd60e51b815260206004820152602560248201527f4d6573736167654272696467653a2073726320636f6e7472616374206e6f742060448201527f6d617463680000000000000000000000000000000000000000000000000000006064820152608490fd5b939260609367ffffffffffffffff6113a1939897981686526001600160a01b0380941660208701526080604087015260808601916108fa565b9416910152565b3d156113d2573d906113b982610eda565b916113c76040519384610cb2565b82523d5f602084013e565b606090565b9081602091031261015b5751801515810361015b5790565b9060038110156108d25760ff80198354169116179055565b9490916114489367ffffffffffffffff608096949998991687526001600160a01b03809216602088015216604086015260a0606086015260a08501916108fa565b931515910152565b939590949291925f604051905f8060208401632bb2568560e21b8152611490856114828d8a8a8d339360248701611368565b03601f198101875286610cb2565b5a945190828d5af1916114a16113a8565b9215611532575050927fbf79e9ebbcf1fdc699f3a386de83f09cb080ab7e07f7b872118a93aef293102d9492611522926114ed8660208067ffffffffffffffff995183010191016113d7565b998a935b84156115285761151460015b61150f8c5f52600460205260405f2090565b6113ef565b604051978897169a87611407565b0390a390565b61151460026114fd565b92819967ffffffffffffffff966115717fbf79e9ebbcf1fdc699f3a386de83f09cb080ab7e07f7b872118a93aef293102d99979495611522978c611614565b6114f1565b60bf198101919082116107ec57565b607f198101919082116107ec57565b60200390602082116107ec57565b5f198101919082116107ec57565b60f6198101919082116107ec57565b60b6198101919082116107ec57565b5f5b8381106115df5750505f910152565b81810151838201526020016115d0565b90602091611608815180928185528580860191016115ce565b601f01601f1916010190565b905a60095445034581116107ec5782109182611688575b50506116865761165b7fc666137142d7507d306f3aee4e2e08927034d27fc7c790316e8860c69782c94e92611952565b9061166582611a18565b61168160405192839283526040602084015260408301906115ef565b0390a1565bfe5b60061c101590505f8061162b565b1561169d57565b60405162461bcd60e51b815260206004820152602760248201527f4d6573736167654272696467653a2049696e76616c696420524c50206c69737460448201527f206c656e677468000000000000000000000000000000000000000000000000006064820152608490fd5b90600182018092116107ec57565b919082018092116107ec57565b5f1981146107ec5760010190565b1561173857565b60405162461bcd60e51b815260206004820152602360248201527f4d6573736167654272696467653a206e6f64652068617368206d69736d6174636044820152621a195960ea1b6064820152608490fd5b905f9061179581611168565b51926117a4610a648495611af9565b938451601181145f1461180e575090919293610a646117e76117e1610a7b6117a494600f886117d289611723565b98603f0360021b1c1690611185565b96611723565b956118046117f58888611185565b51918251602084012014611731565b9594939295611af9565b600261181a9114611696565b61183d61183761183261182c88611168565b51611c82565b61187d565b92611716565b9015611853575050505061182c61095391611175565b90919293610a646117e76117e1610a7b6117a494611175565b908151811015610ec8570160200190565b90815115610ec857602082015160fc1c91515f1981019081116107ec578060011b90808204600214901517156107ec576001831681018091116107ec57600190921190565b949580919660609493610e0896604051988996602088019b8c947fffffffffffffffff0000000000000000000000000000000000000000000000009586809560c01b1690526bffffffffffffffffffffffff1980928c1b1660288b01528a1b16603c89015260c01b16605087015260c01b1660588501528484013781015f83820152036040810184520182610cb2565b60448151106119cd5760048101518101906020816024840193031261015b5760248101519067ffffffffffffffff821161015b57018160438201121561015b5760248101516119a081610eda565b926119ae6040519485610cb2565b8184526044828401011161015b576109539160446020850191016115ce565b506040516119da81610c91565b601d81527f5472616e73616374696f6e2072657665727465642073696c656e746c79000000602082015290565b9060206109539281815201906115ef565b604051611a2481610c91565b600b81527f4d53473a3a41424f52543a0000000000000000000000000000000000000000006020820152600b82511015611a5c575050565b5f5b8151811015611ac357611a82611a74828561186c565b516001600160f81b03191690565b611a9f611a92611a74848661186c565b6001600160f81b03191690565b6001600160f81b031990911603611abe57611ab990611723565b611a5e565b505050565b60405162461bcd60e51b815280611add8560048301611a07565b0390fd5b60405190611aee82610c91565b5f6020838281520152565b611b01611ae1565b50602081519160405192611b1484610c91565b835201602082015290565b611b2881611bf0565b1561015b57611b3681611ccf565b611b3f81610f84565b91611b4d6040519384610cb2565b818352601f19611b5c83610f84565b015f5b818110611bd9575050611b80602080920151611b7a81611db5565b90611716565b5f905b838210611b91575050505090565b611bcd81611ba1611bd393611d30565b90611baa610ecd565b8281528187820152611bbc868a611185565b52611bc78589611185565b50611716565b91611723565b90611b83565b602090611be4611ae1565b82828801015201611b5f565b805115611c0f57602060c0910151515f1a10611c0b57600190565b5f90565b505f90565b80518015159081611c4a575b501561015b57611c2f90611c56565b90519060208110611c3e575090565b6020036101000a900490565b6021915011155f611c20565b906020820191611c668351611db5565b9251908382018092116107ec57519283039283116107ec579190565b80511561015b57611c9561095391611c56565b611ca181939293610eda565b92611caf6040519485610cb2565b818452601f19611cbe83610eda565b013660208601378360200190611e22565b805115611c0f575f9060208101908151611ce881611db5565b81018091116107ec579151905181018091116107ec5791905b828110611d0e5750905090565b611d1781611d30565b81018091116107ec57611d2a9091611723565b90611d01565b80515f1a906080821015611d45575050600190565b60b8821015611d605750611d5b61095391611585565b611708565b9060c0811015611d845760b51991600160b783602003016101000a91015104010190565b9060f8821015611d9b5750611d5b61095391611576565b60010151602082900360f7016101000a90040160f5190190565b515f1a6080811015611dc657505f90565b60b881108015611dfd575b15611ddc5750600190565b60c0811015611df157611d5b610953916115bf565b611d5b610953916115b0565b5060c08110158015611dd1575060f88110611dd1565b601f81116107ec576101000a90565b929091928315611e995792915b602093848410611e6457805182528481018091116107ec579381018091116107ec5791601f1981019081116107ec5791611e2f565b9193509180611e7257505050565b611e86611e81611e8b92611594565b611e13565b6115a2565b905182518216911916179052565b50915050565b600154906001600160a01b0380911691826001600160a01b0319821617600155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a356fea26469706673582212208b2855df5231cc52f42f284ad1b115a3d6d72e3c75d4bcace8477eaf87a49a1864736f6c63430008150033",
}

// MessageBridgeABI is the input ABI used to generate the binding from.
// Deprecated: Use MessageBridgeMetaData.ABI instead.
var MessageBridgeABI = MessageBridgeMetaData.ABI

// MessageBridgeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MessageBridgeMetaData.Bin instead.
var MessageBridgeBin = MessageBridgeMetaData.Bin

// DeployMessageBridge deploys a new Ethereum contract, binding an instance of MessageBridge to it.
func DeployMessageBridge(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MessageBridge, error) {
	parsed, err := MessageBridgeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MessageBridgeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MessageBridge{MessageBridgeCaller: MessageBridgeCaller{contract: contract}, MessageBridgeTransactor: MessageBridgeTransactor{contract: contract}, MessageBridgeFilterer: MessageBridgeFilterer{contract: contract}}, nil
}

// MessageBridge is an auto generated Go binding around an Ethereum contract.
type MessageBridge struct {
	MessageBridgeCaller     // Read-only binding to the contract
	MessageBridgeTransactor // Write-only binding to the contract
	MessageBridgeFilterer   // Log filterer for contract events
}

// MessageBridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type MessageBridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MessageBridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MessageBridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MessageBridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MessageBridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MessageBridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MessageBridgeSession struct {
	Contract     *MessageBridge    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MessageBridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MessageBridgeCallerSession struct {
	Contract *MessageBridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// MessageBridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MessageBridgeTransactorSession struct {
	Contract     *MessageBridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// MessageBridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type MessageBridgeRaw struct {
	Contract *MessageBridge // Generic contract binding to access the raw methods on
}

// MessageBridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MessageBridgeCallerRaw struct {
	Contract *MessageBridgeCaller // Generic read-only contract binding to access the raw methods on
}

// MessageBridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MessageBridgeTransactorRaw struct {
	Contract *MessageBridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMessageBridge creates a new instance of MessageBridge, bound to a specific deployed contract.
func NewMessageBridge(address common.Address, backend bind.ContractBackend) (*MessageBridge, error) {
	contract, err := bindMessageBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MessageBridge{MessageBridgeCaller: MessageBridgeCaller{contract: contract}, MessageBridgeTransactor: MessageBridgeTransactor{contract: contract}, MessageBridgeFilterer: MessageBridgeFilterer{contract: contract}}, nil
}

// NewMessageBridgeCaller creates a new read-only instance of MessageBridge, bound to a specific deployed contract.
func NewMessageBridgeCaller(address common.Address, caller bind.ContractCaller) (*MessageBridgeCaller, error) {
	contract, err := bindMessageBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MessageBridgeCaller{contract: contract}, nil
}

// NewMessageBridgeTransactor creates a new write-only instance of MessageBridge, bound to a specific deployed contract.
func NewMessageBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*MessageBridgeTransactor, error) {
	contract, err := bindMessageBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MessageBridgeTransactor{contract: contract}, nil
}

// NewMessageBridgeFilterer creates a new log filterer instance of MessageBridge, bound to a specific deployed contract.
func NewMessageBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*MessageBridgeFilterer, error) {
	contract, err := bindMessageBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MessageBridgeFilterer{contract: contract}, nil
}

// bindMessageBridge binds a generic wrapper to an already deployed contract.
func bindMessageBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MessageBridgeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MessageBridge *MessageBridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MessageBridge.Contract.MessageBridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MessageBridge *MessageBridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MessageBridge.Contract.MessageBridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MessageBridge *MessageBridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MessageBridge.Contract.MessageBridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MessageBridge *MessageBridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MessageBridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MessageBridge *MessageBridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MessageBridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MessageBridge *MessageBridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MessageBridge.Contract.contract.Transact(opts, method, params...)
}

// GetExecutionStateRootAndSlot is a free data retrieval call binding the contract method 0x6e98da7d.
//
// Solidity: function getExecutionStateRootAndSlot(uint64 _chainId) view returns(bytes32 root, uint64 slot)
func (_MessageBridge *MessageBridgeCaller) GetExecutionStateRootAndSlot(opts *bind.CallOpts, _chainId uint64) (struct {
	Root [32]byte
	Slot uint64
}, error) {
	var out []interface{}
	err := _MessageBridge.contract.Call(opts, &out, "getExecutionStateRootAndSlot", _chainId)

	outstruct := new(struct {
		Root [32]byte
		Slot uint64
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Root = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.Slot = *abi.ConvertType(out[1], new(uint64)).(*uint64)

	return *outstruct, err

}

// GetExecutionStateRootAndSlot is a free data retrieval call binding the contract method 0x6e98da7d.
//
// Solidity: function getExecutionStateRootAndSlot(uint64 _chainId) view returns(bytes32 root, uint64 slot)
func (_MessageBridge *MessageBridgeSession) GetExecutionStateRootAndSlot(_chainId uint64) (struct {
	Root [32]byte
	Slot uint64
}, error) {
	return _MessageBridge.Contract.GetExecutionStateRootAndSlot(&_MessageBridge.CallOpts, _chainId)
}

// GetExecutionStateRootAndSlot is a free data retrieval call binding the contract method 0x6e98da7d.
//
// Solidity: function getExecutionStateRootAndSlot(uint64 _chainId) view returns(bytes32 root, uint64 slot)
func (_MessageBridge *MessageBridgeCallerSession) GetExecutionStateRootAndSlot(_chainId uint64) (struct {
	Root [32]byte
	Slot uint64
}, error) {
	return _MessageBridge.Contract.GetExecutionStateRootAndSlot(&_MessageBridge.CallOpts, _chainId)
}

// LightClients is a free data retrieval call binding the contract method 0x970b3240.
//
// Solidity: function lightClients(uint256 ) view returns(address)
func (_MessageBridge *MessageBridgeCaller) LightClients(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _MessageBridge.contract.Call(opts, &out, "lightClients", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// LightClients is a free data retrieval call binding the contract method 0x970b3240.
//
// Solidity: function lightClients(uint256 ) view returns(address)
func (_MessageBridge *MessageBridgeSession) LightClients(arg0 *big.Int) (common.Address, error) {
	return _MessageBridge.Contract.LightClients(&_MessageBridge.CallOpts, arg0)
}

// LightClients is a free data retrieval call binding the contract method 0x970b3240.
//
// Solidity: function lightClients(uint256 ) view returns(address)
func (_MessageBridge *MessageBridgeCallerSession) LightClients(arg0 *big.Int) (common.Address, error) {
	return _MessageBridge.Contract.LightClients(&_MessageBridge.CallOpts, arg0)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint64)
func (_MessageBridge *MessageBridgeCaller) Nonce(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _MessageBridge.contract.Call(opts, &out, "nonce")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint64)
func (_MessageBridge *MessageBridgeSession) Nonce() (uint64, error) {
	return _MessageBridge.Contract.Nonce(&_MessageBridge.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint64)
func (_MessageBridge *MessageBridgeCallerSession) Nonce() (uint64, error) {
	return _MessageBridge.Contract.Nonce(&_MessageBridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MessageBridge *MessageBridgeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MessageBridge.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MessageBridge *MessageBridgeSession) Owner() (common.Address, error) {
	return _MessageBridge.Contract.Owner(&_MessageBridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MessageBridge *MessageBridgeCallerSession) Owner() (common.Address, error) {
	return _MessageBridge.Contract.Owner(&_MessageBridge.CallOpts)
}

// PreExecuteMessageGasUsage is a free data retrieval call binding the contract method 0x584e45e1.
//
// Solidity: function preExecuteMessageGasUsage() view returns(uint256)
func (_MessageBridge *MessageBridgeCaller) PreExecuteMessageGasUsage(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MessageBridge.contract.Call(opts, &out, "preExecuteMessageGasUsage")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PreExecuteMessageGasUsage is a free data retrieval call binding the contract method 0x584e45e1.
//
// Solidity: function preExecuteMessageGasUsage() view returns(uint256)
func (_MessageBridge *MessageBridgeSession) PreExecuteMessageGasUsage() (*big.Int, error) {
	return _MessageBridge.Contract.PreExecuteMessageGasUsage(&_MessageBridge.CallOpts)
}

// PreExecuteMessageGasUsage is a free data retrieval call binding the contract method 0x584e45e1.
//
// Solidity: function preExecuteMessageGasUsage() view returns(uint256)
func (_MessageBridge *MessageBridgeCallerSession) PreExecuteMessageGasUsage() (*big.Int, error) {
	return _MessageBridge.Contract.PreExecuteMessageGasUsage(&_MessageBridge.CallOpts)
}

// ReceivedMessages is a free data retrieval call binding the contract method 0xf69f8151.
//
// Solidity: function receivedMessages(bytes32 ) view returns(uint8)
func (_MessageBridge *MessageBridgeCaller) ReceivedMessages(opts *bind.CallOpts, arg0 [32]byte) (uint8, error) {
	var out []interface{}
	err := _MessageBridge.contract.Call(opts, &out, "receivedMessages", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// ReceivedMessages is a free data retrieval call binding the contract method 0xf69f8151.
//
// Solidity: function receivedMessages(bytes32 ) view returns(uint8)
func (_MessageBridge *MessageBridgeSession) ReceivedMessages(arg0 [32]byte) (uint8, error) {
	return _MessageBridge.Contract.ReceivedMessages(&_MessageBridge.CallOpts, arg0)
}

// ReceivedMessages is a free data retrieval call binding the contract method 0xf69f8151.
//
// Solidity: function receivedMessages(bytes32 ) view returns(uint8)
func (_MessageBridge *MessageBridgeCallerSession) ReceivedMessages(arg0 [32]byte) (uint8, error) {
	return _MessageBridge.Contract.ReceivedMessages(&_MessageBridge.CallOpts, arg0)
}

// RemoteMessageBridgeHashes is a free data retrieval call binding the contract method 0x456cb9f6.
//
// Solidity: function remoteMessageBridgeHashes(uint256 ) view returns(bytes32)
func (_MessageBridge *MessageBridgeCaller) RemoteMessageBridgeHashes(opts *bind.CallOpts, arg0 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _MessageBridge.contract.Call(opts, &out, "remoteMessageBridgeHashes", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// RemoteMessageBridgeHashes is a free data retrieval call binding the contract method 0x456cb9f6.
//
// Solidity: function remoteMessageBridgeHashes(uint256 ) view returns(bytes32)
func (_MessageBridge *MessageBridgeSession) RemoteMessageBridgeHashes(arg0 *big.Int) ([32]byte, error) {
	return _MessageBridge.Contract.RemoteMessageBridgeHashes(&_MessageBridge.CallOpts, arg0)
}

// RemoteMessageBridgeHashes is a free data retrieval call binding the contract method 0x456cb9f6.
//
// Solidity: function remoteMessageBridgeHashes(uint256 ) view returns(bytes32)
func (_MessageBridge *MessageBridgeCallerSession) RemoteMessageBridgeHashes(arg0 *big.Int) ([32]byte, error) {
	return _MessageBridge.Contract.RemoteMessageBridgeHashes(&_MessageBridge.CallOpts, arg0)
}

// RemoteMessageBridges is a free data retrieval call binding the contract method 0x6b217c0d.
//
// Solidity: function remoteMessageBridges(uint256 ) view returns(address)
func (_MessageBridge *MessageBridgeCaller) RemoteMessageBridges(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _MessageBridge.contract.Call(opts, &out, "remoteMessageBridges", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RemoteMessageBridges is a free data retrieval call binding the contract method 0x6b217c0d.
//
// Solidity: function remoteMessageBridges(uint256 ) view returns(address)
func (_MessageBridge *MessageBridgeSession) RemoteMessageBridges(arg0 *big.Int) (common.Address, error) {
	return _MessageBridge.Contract.RemoteMessageBridges(&_MessageBridge.CallOpts, arg0)
}

// RemoteMessageBridges is a free data retrieval call binding the contract method 0x6b217c0d.
//
// Solidity: function remoteMessageBridges(uint256 ) view returns(address)
func (_MessageBridge *MessageBridgeCallerSession) RemoteMessageBridges(arg0 *big.Int) (common.Address, error) {
	return _MessageBridge.Contract.RemoteMessageBridges(&_MessageBridge.CallOpts, arg0)
}

// SentMessages is a free data retrieval call binding the contract method 0x903e4d1e.
//
// Solidity: function sentMessages(uint64 ) view returns(bytes32)
func (_MessageBridge *MessageBridgeCaller) SentMessages(opts *bind.CallOpts, arg0 uint64) ([32]byte, error) {
	var out []interface{}
	err := _MessageBridge.contract.Call(opts, &out, "sentMessages", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SentMessages is a free data retrieval call binding the contract method 0x903e4d1e.
//
// Solidity: function sentMessages(uint64 ) view returns(bytes32)
func (_MessageBridge *MessageBridgeSession) SentMessages(arg0 uint64) ([32]byte, error) {
	return _MessageBridge.Contract.SentMessages(&_MessageBridge.CallOpts, arg0)
}

// SentMessages is a free data retrieval call binding the contract method 0x903e4d1e.
//
// Solidity: function sentMessages(uint64 ) view returns(bytes32)
func (_MessageBridge *MessageBridgeCallerSession) SentMessages(arg0 uint64) ([32]byte, error) {
	return _MessageBridge.Contract.SentMessages(&_MessageBridge.CallOpts, arg0)
}

// SlotValueVerifier is a free data retrieval call binding the contract method 0x63c6ccb2.
//
// Solidity: function slotValueVerifier() view returns(address)
func (_MessageBridge *MessageBridgeCaller) SlotValueVerifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MessageBridge.contract.Call(opts, &out, "slotValueVerifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SlotValueVerifier is a free data retrieval call binding the contract method 0x63c6ccb2.
//
// Solidity: function slotValueVerifier() view returns(address)
func (_MessageBridge *MessageBridgeSession) SlotValueVerifier() (common.Address, error) {
	return _MessageBridge.Contract.SlotValueVerifier(&_MessageBridge.CallOpts)
}

// SlotValueVerifier is a free data retrieval call binding the contract method 0x63c6ccb2.
//
// Solidity: function slotValueVerifier() view returns(address)
func (_MessageBridge *MessageBridgeCallerSession) SlotValueVerifier() (common.Address, error) {
	return _MessageBridge.Contract.SlotValueVerifier(&_MessageBridge.CallOpts)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0x4f256d81.
//
// Solidity: function executeMessage(uint64 _srcChainId, uint64 _nonce, address _sender, address _receiver, bytes _message, bytes[] _accountProof, bytes[] _storageProof) returns(bool success)
func (_MessageBridge *MessageBridgeTransactor) ExecuteMessage(opts *bind.TransactOpts, _srcChainId uint64, _nonce uint64, _sender common.Address, _receiver common.Address, _message []byte, _accountProof [][]byte, _storageProof [][]byte) (*types.Transaction, error) {
	return _MessageBridge.contract.Transact(opts, "executeMessage", _srcChainId, _nonce, _sender, _receiver, _message, _accountProof, _storageProof)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0x4f256d81.
//
// Solidity: function executeMessage(uint64 _srcChainId, uint64 _nonce, address _sender, address _receiver, bytes _message, bytes[] _accountProof, bytes[] _storageProof) returns(bool success)
func (_MessageBridge *MessageBridgeSession) ExecuteMessage(_srcChainId uint64, _nonce uint64, _sender common.Address, _receiver common.Address, _message []byte, _accountProof [][]byte, _storageProof [][]byte) (*types.Transaction, error) {
	return _MessageBridge.Contract.ExecuteMessage(&_MessageBridge.TransactOpts, _srcChainId, _nonce, _sender, _receiver, _message, _accountProof, _storageProof)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0x4f256d81.
//
// Solidity: function executeMessage(uint64 _srcChainId, uint64 _nonce, address _sender, address _receiver, bytes _message, bytes[] _accountProof, bytes[] _storageProof) returns(bool success)
func (_MessageBridge *MessageBridgeTransactorSession) ExecuteMessage(_srcChainId uint64, _nonce uint64, _sender common.Address, _receiver common.Address, _message []byte, _accountProof [][]byte, _storageProof [][]byte) (*types.Transaction, error) {
	return _MessageBridge.Contract.ExecuteMessage(&_MessageBridge.TransactOpts, _srcChainId, _nonce, _sender, _receiver, _message, _accountProof, _storageProof)
}

// ExecuteMessageWithZkProof is a paid mutator transaction binding the contract method 0x12738708.
//
// Solidity: function executeMessageWithZkProof(uint64 _srcChainId, uint64 _nonce, address _sender, address _receiver, bytes _message, bytes _zkProofData, bytes _blkVerifyInfo) returns(bool success)
func (_MessageBridge *MessageBridgeTransactor) ExecuteMessageWithZkProof(opts *bind.TransactOpts, _srcChainId uint64, _nonce uint64, _sender common.Address, _receiver common.Address, _message []byte, _zkProofData []byte, _blkVerifyInfo []byte) (*types.Transaction, error) {
	return _MessageBridge.contract.Transact(opts, "executeMessageWithZkProof", _srcChainId, _nonce, _sender, _receiver, _message, _zkProofData, _blkVerifyInfo)
}

// ExecuteMessageWithZkProof is a paid mutator transaction binding the contract method 0x12738708.
//
// Solidity: function executeMessageWithZkProof(uint64 _srcChainId, uint64 _nonce, address _sender, address _receiver, bytes _message, bytes _zkProofData, bytes _blkVerifyInfo) returns(bool success)
func (_MessageBridge *MessageBridgeSession) ExecuteMessageWithZkProof(_srcChainId uint64, _nonce uint64, _sender common.Address, _receiver common.Address, _message []byte, _zkProofData []byte, _blkVerifyInfo []byte) (*types.Transaction, error) {
	return _MessageBridge.Contract.ExecuteMessageWithZkProof(&_MessageBridge.TransactOpts, _srcChainId, _nonce, _sender, _receiver, _message, _zkProofData, _blkVerifyInfo)
}

// ExecuteMessageWithZkProof is a paid mutator transaction binding the contract method 0x12738708.
//
// Solidity: function executeMessageWithZkProof(uint64 _srcChainId, uint64 _nonce, address _sender, address _receiver, bytes _message, bytes _zkProofData, bytes _blkVerifyInfo) returns(bool success)
func (_MessageBridge *MessageBridgeTransactorSession) ExecuteMessageWithZkProof(_srcChainId uint64, _nonce uint64, _sender common.Address, _receiver common.Address, _message []byte, _zkProofData []byte, _blkVerifyInfo []byte) (*types.Transaction, error) {
	return _MessageBridge.Contract.ExecuteMessageWithZkProof(&_MessageBridge.TransactOpts, _srcChainId, _nonce, _sender, _receiver, _message, _zkProofData, _blkVerifyInfo)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MessageBridge *MessageBridgeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MessageBridge.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MessageBridge *MessageBridgeSession) RenounceOwnership() (*types.Transaction, error) {
	return _MessageBridge.Contract.RenounceOwnership(&_MessageBridge.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MessageBridge *MessageBridgeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _MessageBridge.Contract.RenounceOwnership(&_MessageBridge.TransactOpts)
}

// SendMessage is a paid mutator transaction binding the contract method 0xb90b8352.
//
// Solidity: function sendMessage(uint64 _dstChainId, address _receiver, bytes _message) returns(bytes32)
func (_MessageBridge *MessageBridgeTransactor) SendMessage(opts *bind.TransactOpts, _dstChainId uint64, _receiver common.Address, _message []byte) (*types.Transaction, error) {
	return _MessageBridge.contract.Transact(opts, "sendMessage", _dstChainId, _receiver, _message)
}

// SendMessage is a paid mutator transaction binding the contract method 0xb90b8352.
//
// Solidity: function sendMessage(uint64 _dstChainId, address _receiver, bytes _message) returns(bytes32)
func (_MessageBridge *MessageBridgeSession) SendMessage(_dstChainId uint64, _receiver common.Address, _message []byte) (*types.Transaction, error) {
	return _MessageBridge.Contract.SendMessage(&_MessageBridge.TransactOpts, _dstChainId, _receiver, _message)
}

// SendMessage is a paid mutator transaction binding the contract method 0xb90b8352.
//
// Solidity: function sendMessage(uint64 _dstChainId, address _receiver, bytes _message) returns(bytes32)
func (_MessageBridge *MessageBridgeTransactorSession) SendMessage(_dstChainId uint64, _receiver common.Address, _message []byte) (*types.Transaction, error) {
	return _MessageBridge.Contract.SendMessage(&_MessageBridge.TransactOpts, _dstChainId, _receiver, _message)
}

// SetLightClient is a paid mutator transaction binding the contract method 0x975f5e1f.
//
// Solidity: function setLightClient(uint64 _chainId, address _lightClient) returns()
func (_MessageBridge *MessageBridgeTransactor) SetLightClient(opts *bind.TransactOpts, _chainId uint64, _lightClient common.Address) (*types.Transaction, error) {
	return _MessageBridge.contract.Transact(opts, "setLightClient", _chainId, _lightClient)
}

// SetLightClient is a paid mutator transaction binding the contract method 0x975f5e1f.
//
// Solidity: function setLightClient(uint64 _chainId, address _lightClient) returns()
func (_MessageBridge *MessageBridgeSession) SetLightClient(_chainId uint64, _lightClient common.Address) (*types.Transaction, error) {
	return _MessageBridge.Contract.SetLightClient(&_MessageBridge.TransactOpts, _chainId, _lightClient)
}

// SetLightClient is a paid mutator transaction binding the contract method 0x975f5e1f.
//
// Solidity: function setLightClient(uint64 _chainId, address _lightClient) returns()
func (_MessageBridge *MessageBridgeTransactorSession) SetLightClient(_chainId uint64, _lightClient common.Address) (*types.Transaction, error) {
	return _MessageBridge.Contract.SetLightClient(&_MessageBridge.TransactOpts, _chainId, _lightClient)
}

// SetPreExecuteMessageGasUsage is a paid mutator transaction binding the contract method 0x4586f331.
//
// Solidity: function setPreExecuteMessageGasUsage(uint256 _usage) returns()
func (_MessageBridge *MessageBridgeTransactor) SetPreExecuteMessageGasUsage(opts *bind.TransactOpts, _usage *big.Int) (*types.Transaction, error) {
	return _MessageBridge.contract.Transact(opts, "setPreExecuteMessageGasUsage", _usage)
}

// SetPreExecuteMessageGasUsage is a paid mutator transaction binding the contract method 0x4586f331.
//
// Solidity: function setPreExecuteMessageGasUsage(uint256 _usage) returns()
func (_MessageBridge *MessageBridgeSession) SetPreExecuteMessageGasUsage(_usage *big.Int) (*types.Transaction, error) {
	return _MessageBridge.Contract.SetPreExecuteMessageGasUsage(&_MessageBridge.TransactOpts, _usage)
}

// SetPreExecuteMessageGasUsage is a paid mutator transaction binding the contract method 0x4586f331.
//
// Solidity: function setPreExecuteMessageGasUsage(uint256 _usage) returns()
func (_MessageBridge *MessageBridgeTransactorSession) SetPreExecuteMessageGasUsage(_usage *big.Int) (*types.Transaction, error) {
	return _MessageBridge.Contract.SetPreExecuteMessageGasUsage(&_MessageBridge.TransactOpts, _usage)
}

// SetRemoteMessageBridge is a paid mutator transaction binding the contract method 0x0bbd09ab.
//
// Solidity: function setRemoteMessageBridge(uint64 _chainId, address _remoteMessageBridge) returns()
func (_MessageBridge *MessageBridgeTransactor) SetRemoteMessageBridge(opts *bind.TransactOpts, _chainId uint64, _remoteMessageBridge common.Address) (*types.Transaction, error) {
	return _MessageBridge.contract.Transact(opts, "setRemoteMessageBridge", _chainId, _remoteMessageBridge)
}

// SetRemoteMessageBridge is a paid mutator transaction binding the contract method 0x0bbd09ab.
//
// Solidity: function setRemoteMessageBridge(uint64 _chainId, address _remoteMessageBridge) returns()
func (_MessageBridge *MessageBridgeSession) SetRemoteMessageBridge(_chainId uint64, _remoteMessageBridge common.Address) (*types.Transaction, error) {
	return _MessageBridge.Contract.SetRemoteMessageBridge(&_MessageBridge.TransactOpts, _chainId, _remoteMessageBridge)
}

// SetRemoteMessageBridge is a paid mutator transaction binding the contract method 0x0bbd09ab.
//
// Solidity: function setRemoteMessageBridge(uint64 _chainId, address _remoteMessageBridge) returns()
func (_MessageBridge *MessageBridgeTransactorSession) SetRemoteMessageBridge(_chainId uint64, _remoteMessageBridge common.Address) (*types.Transaction, error) {
	return _MessageBridge.Contract.SetRemoteMessageBridge(&_MessageBridge.TransactOpts, _chainId, _remoteMessageBridge)
}

// SetSlotValueVerifier is a paid mutator transaction binding the contract method 0x735267cf.
//
// Solidity: function setSlotValueVerifier(address _slotValueVerifier) returns()
func (_MessageBridge *MessageBridgeTransactor) SetSlotValueVerifier(opts *bind.TransactOpts, _slotValueVerifier common.Address) (*types.Transaction, error) {
	return _MessageBridge.contract.Transact(opts, "setSlotValueVerifier", _slotValueVerifier)
}

// SetSlotValueVerifier is a paid mutator transaction binding the contract method 0x735267cf.
//
// Solidity: function setSlotValueVerifier(address _slotValueVerifier) returns()
func (_MessageBridge *MessageBridgeSession) SetSlotValueVerifier(_slotValueVerifier common.Address) (*types.Transaction, error) {
	return _MessageBridge.Contract.SetSlotValueVerifier(&_MessageBridge.TransactOpts, _slotValueVerifier)
}

// SetSlotValueVerifier is a paid mutator transaction binding the contract method 0x735267cf.
//
// Solidity: function setSlotValueVerifier(address _slotValueVerifier) returns()
func (_MessageBridge *MessageBridgeTransactorSession) SetSlotValueVerifier(_slotValueVerifier common.Address) (*types.Transaction, error) {
	return _MessageBridge.Contract.SetSlotValueVerifier(&_MessageBridge.TransactOpts, _slotValueVerifier)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MessageBridge *MessageBridgeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _MessageBridge.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MessageBridge *MessageBridgeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _MessageBridge.Contract.TransferOwnership(&_MessageBridge.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MessageBridge *MessageBridgeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _MessageBridge.Contract.TransferOwnership(&_MessageBridge.TransactOpts, newOwner)
}

// MessageBridgeMessageCallRevertedIterator is returned from FilterMessageCallReverted and is used to iterate over the raw logs and unpacked data for MessageCallReverted events raised by the MessageBridge contract.
type MessageBridgeMessageCallRevertedIterator struct {
	Event *MessageBridgeMessageCallReverted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MessageBridgeMessageCallRevertedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MessageBridgeMessageCallReverted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MessageBridgeMessageCallReverted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MessageBridgeMessageCallRevertedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MessageBridgeMessageCallRevertedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MessageBridgeMessageCallReverted represents a MessageCallReverted event raised by the MessageBridge contract.
type MessageBridgeMessageCallReverted struct {
	MessageId [32]byte
	Reason    string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMessageCallReverted is a free log retrieval operation binding the contract event 0xc666137142d7507d306f3aee4e2e08927034d27fc7c790316e8860c69782c94e.
//
// Solidity: event MessageCallReverted(bytes32 messageId, string reason)
func (_MessageBridge *MessageBridgeFilterer) FilterMessageCallReverted(opts *bind.FilterOpts) (*MessageBridgeMessageCallRevertedIterator, error) {

	logs, sub, err := _MessageBridge.contract.FilterLogs(opts, "MessageCallReverted")
	if err != nil {
		return nil, err
	}
	return &MessageBridgeMessageCallRevertedIterator{contract: _MessageBridge.contract, event: "MessageCallReverted", logs: logs, sub: sub}, nil
}

// WatchMessageCallReverted is a free log subscription operation binding the contract event 0xc666137142d7507d306f3aee4e2e08927034d27fc7c790316e8860c69782c94e.
//
// Solidity: event MessageCallReverted(bytes32 messageId, string reason)
func (_MessageBridge *MessageBridgeFilterer) WatchMessageCallReverted(opts *bind.WatchOpts, sink chan<- *MessageBridgeMessageCallReverted) (event.Subscription, error) {

	logs, sub, err := _MessageBridge.contract.WatchLogs(opts, "MessageCallReverted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MessageBridgeMessageCallReverted)
				if err := _MessageBridge.contract.UnpackLog(event, "MessageCallReverted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMessageCallReverted is a log parse operation binding the contract event 0xc666137142d7507d306f3aee4e2e08927034d27fc7c790316e8860c69782c94e.
//
// Solidity: event MessageCallReverted(bytes32 messageId, string reason)
func (_MessageBridge *MessageBridgeFilterer) ParseMessageCallReverted(log types.Log) (*MessageBridgeMessageCallReverted, error) {
	event := new(MessageBridgeMessageCallReverted)
	if err := _MessageBridge.contract.UnpackLog(event, "MessageCallReverted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MessageBridgeMessageExecutedIterator is returned from FilterMessageExecuted and is used to iterate over the raw logs and unpacked data for MessageExecuted events raised by the MessageBridge contract.
type MessageBridgeMessageExecutedIterator struct {
	Event *MessageBridgeMessageExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MessageBridgeMessageExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MessageBridgeMessageExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MessageBridgeMessageExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MessageBridgeMessageExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MessageBridgeMessageExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MessageBridgeMessageExecuted represents a MessageExecuted event raised by the MessageBridge contract.
type MessageBridgeMessageExecuted struct {
	MessageId  [32]byte
	Nonce      *big.Int
	SrcChainId uint64
	Sender     common.Address
	Receiver   common.Address
	Message    []byte
	Success    bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterMessageExecuted is a free log retrieval operation binding the contract event 0xbf79e9ebbcf1fdc699f3a386de83f09cb080ab7e07f7b872118a93aef293102d.
//
// Solidity: event MessageExecuted(bytes32 indexed messageId, uint256 indexed nonce, uint64 srcChainId, address sender, address receiver, bytes message, bool success)
func (_MessageBridge *MessageBridgeFilterer) FilterMessageExecuted(opts *bind.FilterOpts, messageId [][32]byte, nonce []*big.Int) (*MessageBridgeMessageExecutedIterator, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}
	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}

	logs, sub, err := _MessageBridge.contract.FilterLogs(opts, "MessageExecuted", messageIdRule, nonceRule)
	if err != nil {
		return nil, err
	}
	return &MessageBridgeMessageExecutedIterator{contract: _MessageBridge.contract, event: "MessageExecuted", logs: logs, sub: sub}, nil
}

// WatchMessageExecuted is a free log subscription operation binding the contract event 0xbf79e9ebbcf1fdc699f3a386de83f09cb080ab7e07f7b872118a93aef293102d.
//
// Solidity: event MessageExecuted(bytes32 indexed messageId, uint256 indexed nonce, uint64 srcChainId, address sender, address receiver, bytes message, bool success)
func (_MessageBridge *MessageBridgeFilterer) WatchMessageExecuted(opts *bind.WatchOpts, sink chan<- *MessageBridgeMessageExecuted, messageId [][32]byte, nonce []*big.Int) (event.Subscription, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}
	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}

	logs, sub, err := _MessageBridge.contract.WatchLogs(opts, "MessageExecuted", messageIdRule, nonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MessageBridgeMessageExecuted)
				if err := _MessageBridge.contract.UnpackLog(event, "MessageExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMessageExecuted is a log parse operation binding the contract event 0xbf79e9ebbcf1fdc699f3a386de83f09cb080ab7e07f7b872118a93aef293102d.
//
// Solidity: event MessageExecuted(bytes32 indexed messageId, uint256 indexed nonce, uint64 srcChainId, address sender, address receiver, bytes message, bool success)
func (_MessageBridge *MessageBridgeFilterer) ParseMessageExecuted(log types.Log) (*MessageBridgeMessageExecuted, error) {
	event := new(MessageBridgeMessageExecuted)
	if err := _MessageBridge.contract.UnpackLog(event, "MessageExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MessageBridgeMessageSentIterator is returned from FilterMessageSent and is used to iterate over the raw logs and unpacked data for MessageSent events raised by the MessageBridge contract.
type MessageBridgeMessageSentIterator struct {
	Event *MessageBridgeMessageSent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MessageBridgeMessageSentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MessageBridgeMessageSent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MessageBridgeMessageSent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MessageBridgeMessageSentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MessageBridgeMessageSentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MessageBridgeMessageSent represents a MessageSent event raised by the MessageBridge contract.
type MessageBridgeMessageSent struct {
	MessageId  [32]byte
	Nonce      *big.Int
	DstChainId uint64
	Sender     common.Address
	Receiver   common.Address
	Message    []byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterMessageSent is a free log retrieval operation binding the contract event 0xd4c077d3ac449bc1b439559b537c6550f793c2432e3d74082b023162296dc566.
//
// Solidity: event MessageSent(bytes32 indexed messageId, uint256 indexed nonce, uint64 dstChainId, address sender, address receiver, bytes message)
func (_MessageBridge *MessageBridgeFilterer) FilterMessageSent(opts *bind.FilterOpts, messageId [][32]byte, nonce []*big.Int) (*MessageBridgeMessageSentIterator, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}
	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}

	logs, sub, err := _MessageBridge.contract.FilterLogs(opts, "MessageSent", messageIdRule, nonceRule)
	if err != nil {
		return nil, err
	}
	return &MessageBridgeMessageSentIterator{contract: _MessageBridge.contract, event: "MessageSent", logs: logs, sub: sub}, nil
}

// WatchMessageSent is a free log subscription operation binding the contract event 0xd4c077d3ac449bc1b439559b537c6550f793c2432e3d74082b023162296dc566.
//
// Solidity: event MessageSent(bytes32 indexed messageId, uint256 indexed nonce, uint64 dstChainId, address sender, address receiver, bytes message)
func (_MessageBridge *MessageBridgeFilterer) WatchMessageSent(opts *bind.WatchOpts, sink chan<- *MessageBridgeMessageSent, messageId [][32]byte, nonce []*big.Int) (event.Subscription, error) {

	var messageIdRule []interface{}
	for _, messageIdItem := range messageId {
		messageIdRule = append(messageIdRule, messageIdItem)
	}
	var nonceRule []interface{}
	for _, nonceItem := range nonce {
		nonceRule = append(nonceRule, nonceItem)
	}

	logs, sub, err := _MessageBridge.contract.WatchLogs(opts, "MessageSent", messageIdRule, nonceRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MessageBridgeMessageSent)
				if err := _MessageBridge.contract.UnpackLog(event, "MessageSent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMessageSent is a log parse operation binding the contract event 0xd4c077d3ac449bc1b439559b537c6550f793c2432e3d74082b023162296dc566.
//
// Solidity: event MessageSent(bytes32 indexed messageId, uint256 indexed nonce, uint64 dstChainId, address sender, address receiver, bytes message)
func (_MessageBridge *MessageBridgeFilterer) ParseMessageSent(log types.Log) (*MessageBridgeMessageSent, error) {
	event := new(MessageBridgeMessageSent)
	if err := _MessageBridge.contract.UnpackLog(event, "MessageSent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MessageBridgeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the MessageBridge contract.
type MessageBridgeOwnershipTransferredIterator struct {
	Event *MessageBridgeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MessageBridgeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MessageBridgeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MessageBridgeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MessageBridgeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MessageBridgeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MessageBridgeOwnershipTransferred represents a OwnershipTransferred event raised by the MessageBridge contract.
type MessageBridgeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MessageBridge *MessageBridgeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*MessageBridgeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _MessageBridge.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &MessageBridgeOwnershipTransferredIterator{contract: _MessageBridge.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MessageBridge *MessageBridgeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MessageBridgeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _MessageBridge.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MessageBridgeOwnershipTransferred)
				if err := _MessageBridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MessageBridge *MessageBridgeFilterer) ParseOwnershipTransferred(log types.Log) (*MessageBridgeOwnershipTransferred, error) {
	event := new(MessageBridgeOwnershipTransferred)
	if err := _MessageBridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MessageBridgeAddressMetaData contains all meta data concerning the MessageBridgeAddress contract.
var MessageBridgeAddressMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"messageBridge\",\"outputs\":[{\"internalType\":\"contractIMessageBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// MessageBridgeAddressABI is the input ABI used to generate the binding from.
// Deprecated: Use MessageBridgeAddressMetaData.ABI instead.
var MessageBridgeAddressABI = MessageBridgeAddressMetaData.ABI

// MessageBridgeAddress is an auto generated Go binding around an Ethereum contract.
type MessageBridgeAddress struct {
	MessageBridgeAddressCaller     // Read-only binding to the contract
	MessageBridgeAddressTransactor // Write-only binding to the contract
	MessageBridgeAddressFilterer   // Log filterer for contract events
}

// MessageBridgeAddressCaller is an auto generated read-only Go binding around an Ethereum contract.
type MessageBridgeAddressCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MessageBridgeAddressTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MessageBridgeAddressTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MessageBridgeAddressFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MessageBridgeAddressFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MessageBridgeAddressSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MessageBridgeAddressSession struct {
	Contract     *MessageBridgeAddress // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// MessageBridgeAddressCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MessageBridgeAddressCallerSession struct {
	Contract *MessageBridgeAddressCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// MessageBridgeAddressTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MessageBridgeAddressTransactorSession struct {
	Contract     *MessageBridgeAddressTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// MessageBridgeAddressRaw is an auto generated low-level Go binding around an Ethereum contract.
type MessageBridgeAddressRaw struct {
	Contract *MessageBridgeAddress // Generic contract binding to access the raw methods on
}

// MessageBridgeAddressCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MessageBridgeAddressCallerRaw struct {
	Contract *MessageBridgeAddressCaller // Generic read-only contract binding to access the raw methods on
}

// MessageBridgeAddressTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MessageBridgeAddressTransactorRaw struct {
	Contract *MessageBridgeAddressTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMessageBridgeAddress creates a new instance of MessageBridgeAddress, bound to a specific deployed contract.
func NewMessageBridgeAddress(address common.Address, backend bind.ContractBackend) (*MessageBridgeAddress, error) {
	contract, err := bindMessageBridgeAddress(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MessageBridgeAddress{MessageBridgeAddressCaller: MessageBridgeAddressCaller{contract: contract}, MessageBridgeAddressTransactor: MessageBridgeAddressTransactor{contract: contract}, MessageBridgeAddressFilterer: MessageBridgeAddressFilterer{contract: contract}}, nil
}

// NewMessageBridgeAddressCaller creates a new read-only instance of MessageBridgeAddress, bound to a specific deployed contract.
func NewMessageBridgeAddressCaller(address common.Address, caller bind.ContractCaller) (*MessageBridgeAddressCaller, error) {
	contract, err := bindMessageBridgeAddress(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MessageBridgeAddressCaller{contract: contract}, nil
}

// NewMessageBridgeAddressTransactor creates a new write-only instance of MessageBridgeAddress, bound to a specific deployed contract.
func NewMessageBridgeAddressTransactor(address common.Address, transactor bind.ContractTransactor) (*MessageBridgeAddressTransactor, error) {
	contract, err := bindMessageBridgeAddress(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MessageBridgeAddressTransactor{contract: contract}, nil
}

// NewMessageBridgeAddressFilterer creates a new log filterer instance of MessageBridgeAddress, bound to a specific deployed contract.
func NewMessageBridgeAddressFilterer(address common.Address, filterer bind.ContractFilterer) (*MessageBridgeAddressFilterer, error) {
	contract, err := bindMessageBridgeAddress(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MessageBridgeAddressFilterer{contract: contract}, nil
}

// bindMessageBridgeAddress binds a generic wrapper to an already deployed contract.
func bindMessageBridgeAddress(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MessageBridgeAddressMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MessageBridgeAddress *MessageBridgeAddressRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MessageBridgeAddress.Contract.MessageBridgeAddressCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MessageBridgeAddress *MessageBridgeAddressRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MessageBridgeAddress.Contract.MessageBridgeAddressTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MessageBridgeAddress *MessageBridgeAddressRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MessageBridgeAddress.Contract.MessageBridgeAddressTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MessageBridgeAddress *MessageBridgeAddressCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MessageBridgeAddress.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MessageBridgeAddress *MessageBridgeAddressTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MessageBridgeAddress.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MessageBridgeAddress *MessageBridgeAddressTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MessageBridgeAddress.Contract.contract.Transact(opts, method, params...)
}

// MessageBridge is a free data retrieval call binding the contract method 0x33a42db1.
//
// Solidity: function messageBridge() view returns(address)
func (_MessageBridgeAddress *MessageBridgeAddressCaller) MessageBridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MessageBridgeAddress.contract.Call(opts, &out, "messageBridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MessageBridge is a free data retrieval call binding the contract method 0x33a42db1.
//
// Solidity: function messageBridge() view returns(address)
func (_MessageBridgeAddress *MessageBridgeAddressSession) MessageBridge() (common.Address, error) {
	return _MessageBridgeAddress.Contract.MessageBridge(&_MessageBridgeAddress.CallOpts)
}

// MessageBridge is a free data retrieval call binding the contract method 0x33a42db1.
//
// Solidity: function messageBridge() view returns(address)
func (_MessageBridgeAddress *MessageBridgeAddressCallerSession) MessageBridge() (common.Address, error) {
	return _MessageBridgeAddress.Contract.MessageBridge(&_MessageBridgeAddress.CallOpts)
}

// MessageReceiverAppMetaData contains all meta data concerning the MessageReceiverApp contract.
var MessageReceiverAppMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"executeMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBridge\",\"outputs\":[{\"internalType\":\"contractIMessageBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// MessageReceiverAppABI is the input ABI used to generate the binding from.
// Deprecated: Use MessageReceiverAppMetaData.ABI instead.
var MessageReceiverAppABI = MessageReceiverAppMetaData.ABI

// MessageReceiverApp is an auto generated Go binding around an Ethereum contract.
type MessageReceiverApp struct {
	MessageReceiverAppCaller     // Read-only binding to the contract
	MessageReceiverAppTransactor // Write-only binding to the contract
	MessageReceiverAppFilterer   // Log filterer for contract events
}

// MessageReceiverAppCaller is an auto generated read-only Go binding around an Ethereum contract.
type MessageReceiverAppCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MessageReceiverAppTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MessageReceiverAppTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MessageReceiverAppFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MessageReceiverAppFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MessageReceiverAppSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MessageReceiverAppSession struct {
	Contract     *MessageReceiverApp // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// MessageReceiverAppCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MessageReceiverAppCallerSession struct {
	Contract *MessageReceiverAppCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// MessageReceiverAppTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MessageReceiverAppTransactorSession struct {
	Contract     *MessageReceiverAppTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// MessageReceiverAppRaw is an auto generated low-level Go binding around an Ethereum contract.
type MessageReceiverAppRaw struct {
	Contract *MessageReceiverApp // Generic contract binding to access the raw methods on
}

// MessageReceiverAppCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MessageReceiverAppCallerRaw struct {
	Contract *MessageReceiverAppCaller // Generic read-only contract binding to access the raw methods on
}

// MessageReceiverAppTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MessageReceiverAppTransactorRaw struct {
	Contract *MessageReceiverAppTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMessageReceiverApp creates a new instance of MessageReceiverApp, bound to a specific deployed contract.
func NewMessageReceiverApp(address common.Address, backend bind.ContractBackend) (*MessageReceiverApp, error) {
	contract, err := bindMessageReceiverApp(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MessageReceiverApp{MessageReceiverAppCaller: MessageReceiverAppCaller{contract: contract}, MessageReceiverAppTransactor: MessageReceiverAppTransactor{contract: contract}, MessageReceiverAppFilterer: MessageReceiverAppFilterer{contract: contract}}, nil
}

// NewMessageReceiverAppCaller creates a new read-only instance of MessageReceiverApp, bound to a specific deployed contract.
func NewMessageReceiverAppCaller(address common.Address, caller bind.ContractCaller) (*MessageReceiverAppCaller, error) {
	contract, err := bindMessageReceiverApp(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MessageReceiverAppCaller{contract: contract}, nil
}

// NewMessageReceiverAppTransactor creates a new write-only instance of MessageReceiverApp, bound to a specific deployed contract.
func NewMessageReceiverAppTransactor(address common.Address, transactor bind.ContractTransactor) (*MessageReceiverAppTransactor, error) {
	contract, err := bindMessageReceiverApp(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MessageReceiverAppTransactor{contract: contract}, nil
}

// NewMessageReceiverAppFilterer creates a new log filterer instance of MessageReceiverApp, bound to a specific deployed contract.
func NewMessageReceiverAppFilterer(address common.Address, filterer bind.ContractFilterer) (*MessageReceiverAppFilterer, error) {
	contract, err := bindMessageReceiverApp(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MessageReceiverAppFilterer{contract: contract}, nil
}

// bindMessageReceiverApp binds a generic wrapper to an already deployed contract.
func bindMessageReceiverApp(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MessageReceiverAppMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MessageReceiverApp *MessageReceiverAppRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MessageReceiverApp.Contract.MessageReceiverAppCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MessageReceiverApp *MessageReceiverAppRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MessageReceiverApp.Contract.MessageReceiverAppTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MessageReceiverApp *MessageReceiverAppRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MessageReceiverApp.Contract.MessageReceiverAppTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MessageReceiverApp *MessageReceiverAppCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MessageReceiverApp.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MessageReceiverApp *MessageReceiverAppTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MessageReceiverApp.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MessageReceiverApp *MessageReceiverAppTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MessageReceiverApp.Contract.contract.Transact(opts, method, params...)
}

// MessageBridge is a free data retrieval call binding the contract method 0x33a42db1.
//
// Solidity: function messageBridge() view returns(address)
func (_MessageReceiverApp *MessageReceiverAppCaller) MessageBridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MessageReceiverApp.contract.Call(opts, &out, "messageBridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MessageBridge is a free data retrieval call binding the contract method 0x33a42db1.
//
// Solidity: function messageBridge() view returns(address)
func (_MessageReceiverApp *MessageReceiverAppSession) MessageBridge() (common.Address, error) {
	return _MessageReceiverApp.Contract.MessageBridge(&_MessageReceiverApp.CallOpts)
}

// MessageBridge is a free data retrieval call binding the contract method 0x33a42db1.
//
// Solidity: function messageBridge() view returns(address)
func (_MessageReceiverApp *MessageReceiverAppCallerSession) MessageBridge() (common.Address, error) {
	return _MessageReceiverApp.Contract.MessageBridge(&_MessageReceiverApp.CallOpts)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0xaec95a14.
//
// Solidity: function executeMessage(uint64 srcChainId, address sender, bytes message, address executor) returns(bool)
func (_MessageReceiverApp *MessageReceiverAppTransactor) ExecuteMessage(opts *bind.TransactOpts, srcChainId uint64, sender common.Address, message []byte, executor common.Address) (*types.Transaction, error) {
	return _MessageReceiverApp.contract.Transact(opts, "executeMessage", srcChainId, sender, message, executor)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0xaec95a14.
//
// Solidity: function executeMessage(uint64 srcChainId, address sender, bytes message, address executor) returns(bool)
func (_MessageReceiverApp *MessageReceiverAppSession) ExecuteMessage(srcChainId uint64, sender common.Address, message []byte, executor common.Address) (*types.Transaction, error) {
	return _MessageReceiverApp.Contract.ExecuteMessage(&_MessageReceiverApp.TransactOpts, srcChainId, sender, message, executor)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0xaec95a14.
//
// Solidity: function executeMessage(uint64 srcChainId, address sender, bytes message, address executor) returns(bool)
func (_MessageReceiverApp *MessageReceiverAppTransactorSession) ExecuteMessage(srcChainId uint64, sender common.Address, message []byte, executor common.Address) (*types.Transaction, error) {
	return _MessageReceiverApp.Contract.ExecuteMessage(&_MessageReceiverApp.TransactOpts, srcChainId, sender, message, executor)
}

// MessageSenderAppMetaData contains all meta data concerning the MessageSenderApp contract.
var MessageSenderAppMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"messageBridge\",\"outputs\":[{\"internalType\":\"contractIMessageBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
}

// MessageSenderAppABI is the input ABI used to generate the binding from.
// Deprecated: Use MessageSenderAppMetaData.ABI instead.
var MessageSenderAppABI = MessageSenderAppMetaData.ABI

// MessageSenderApp is an auto generated Go binding around an Ethereum contract.
type MessageSenderApp struct {
	MessageSenderAppCaller     // Read-only binding to the contract
	MessageSenderAppTransactor // Write-only binding to the contract
	MessageSenderAppFilterer   // Log filterer for contract events
}

// MessageSenderAppCaller is an auto generated read-only Go binding around an Ethereum contract.
type MessageSenderAppCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MessageSenderAppTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MessageSenderAppTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MessageSenderAppFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MessageSenderAppFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MessageSenderAppSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MessageSenderAppSession struct {
	Contract     *MessageSenderApp // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MessageSenderAppCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MessageSenderAppCallerSession struct {
	Contract *MessageSenderAppCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// MessageSenderAppTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MessageSenderAppTransactorSession struct {
	Contract     *MessageSenderAppTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// MessageSenderAppRaw is an auto generated low-level Go binding around an Ethereum contract.
type MessageSenderAppRaw struct {
	Contract *MessageSenderApp // Generic contract binding to access the raw methods on
}

// MessageSenderAppCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MessageSenderAppCallerRaw struct {
	Contract *MessageSenderAppCaller // Generic read-only contract binding to access the raw methods on
}

// MessageSenderAppTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MessageSenderAppTransactorRaw struct {
	Contract *MessageSenderAppTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMessageSenderApp creates a new instance of MessageSenderApp, bound to a specific deployed contract.
func NewMessageSenderApp(address common.Address, backend bind.ContractBackend) (*MessageSenderApp, error) {
	contract, err := bindMessageSenderApp(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MessageSenderApp{MessageSenderAppCaller: MessageSenderAppCaller{contract: contract}, MessageSenderAppTransactor: MessageSenderAppTransactor{contract: contract}, MessageSenderAppFilterer: MessageSenderAppFilterer{contract: contract}}, nil
}

// NewMessageSenderAppCaller creates a new read-only instance of MessageSenderApp, bound to a specific deployed contract.
func NewMessageSenderAppCaller(address common.Address, caller bind.ContractCaller) (*MessageSenderAppCaller, error) {
	contract, err := bindMessageSenderApp(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MessageSenderAppCaller{contract: contract}, nil
}

// NewMessageSenderAppTransactor creates a new write-only instance of MessageSenderApp, bound to a specific deployed contract.
func NewMessageSenderAppTransactor(address common.Address, transactor bind.ContractTransactor) (*MessageSenderAppTransactor, error) {
	contract, err := bindMessageSenderApp(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MessageSenderAppTransactor{contract: contract}, nil
}

// NewMessageSenderAppFilterer creates a new log filterer instance of MessageSenderApp, bound to a specific deployed contract.
func NewMessageSenderAppFilterer(address common.Address, filterer bind.ContractFilterer) (*MessageSenderAppFilterer, error) {
	contract, err := bindMessageSenderApp(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MessageSenderAppFilterer{contract: contract}, nil
}

// bindMessageSenderApp binds a generic wrapper to an already deployed contract.
func bindMessageSenderApp(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MessageSenderAppMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MessageSenderApp *MessageSenderAppRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MessageSenderApp.Contract.MessageSenderAppCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MessageSenderApp *MessageSenderAppRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MessageSenderApp.Contract.MessageSenderAppTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MessageSenderApp *MessageSenderAppRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MessageSenderApp.Contract.MessageSenderAppTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MessageSenderApp *MessageSenderAppCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MessageSenderApp.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MessageSenderApp *MessageSenderAppTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MessageSenderApp.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MessageSenderApp *MessageSenderAppTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MessageSenderApp.Contract.contract.Transact(opts, method, params...)
}

// MessageBridge is a free data retrieval call binding the contract method 0x33a42db1.
//
// Solidity: function messageBridge() view returns(address)
func (_MessageSenderApp *MessageSenderAppCaller) MessageBridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MessageSenderApp.contract.Call(opts, &out, "messageBridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MessageBridge is a free data retrieval call binding the contract method 0x33a42db1.
//
// Solidity: function messageBridge() view returns(address)
func (_MessageSenderApp *MessageSenderAppSession) MessageBridge() (common.Address, error) {
	return _MessageSenderApp.Contract.MessageBridge(&_MessageSenderApp.CallOpts)
}

// MessageBridge is a free data retrieval call binding the contract method 0x33a42db1.
//
// Solidity: function messageBridge() view returns(address)
func (_MessageSenderApp *MessageSenderAppCallerSession) MessageBridge() (common.Address, error) {
	return _MessageSenderApp.Contract.MessageBridge(&_MessageSenderApp.CallOpts)
}

// MintableERC20MetaData contains all meta data concerning the MintableERC20 contract.
var MintableERC20MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6040608081523462000424576200131d803803806200001e8162000428565b9283398101608082820312620004245781516001600160401b039290838111620004245782620000509183016200044e565b92602092838301519082821162000424576200006e9184016200044e565b858301519260ff84168403620004245760600151948051928084116200032f5760038054946001938487811c9716801562000419575b8988101462000405578190601f97888111620003b2575b5089908883116001146200034f575f9262000343575b50505f1982841b1c191690841b1781555b83519182116200032f5760049384548481811c9116801562000324575b898210146200031157868111620002c9575b50879086841160011462000262579383949184925f9562000256575b50501b925f19911b1c19161781555b600554865193336001600160a01b0383167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a360ff60a01b60a09190911b1660ff60a01b19339081166001600160a81b0319939093169290921717600555600680546001600160a01b031916821790551562000219575050507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef5f91620001e884600254620004be565b60025533835282815284832062000201858254620004be565b905584519384523393a351610e3c9081620004e18239f35b9260649362461bcd60e51b845283015260248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b015193505f806200012d565b9190601f19841692865f52848a5f20945f5b8c89838310620002b1575050501062000297575b50505050811b0181556200013c565b01519060f8845f19921b161c191690555f80808062000288565b86860151895590970196948501948893500162000274565b855f52885f208780860160051c8201928b871062000307575b0160051c019085905b828110620002fb57505062000111565b5f8155018590620002eb565b92508192620002e2565b602286634e487b7160e01b5f525260245ffd5b90607f1690620000ff565b634e487b7160e01b5f52604160045260245ffd5b015190505f80620000d1565b90869350601f19831691855f528b5f20925f5b8d8282106200039b575050841162000383575b505050811b018155620000e2565b01515f1983861b60f8161c191690555f808062000375565b8385015186558a9790950194938401930162000362565b909150835f52895f208880850160051c8201928c8610620003fb575b918891869594930160051c01915b828110620003ec575050620000bb565b5f8155859450889101620003dc565b92508192620003ce565b634e487b7160e01b5f52602260045260245ffd5b96607f1696620000a4565b5f80fd5b6040519190601f01601f191682016001600160401b038111838210176200032f57604052565b919080601f84011215620004245782516001600160401b0381116200032f5760209062000484601f8201601f1916830162000428565b9281845282828701011162000424575f5b818110620004aa5750825f9394955001015290565b858101830151848201840152820162000495565b91908201809211620004cc57565b634e487b7160e01b5f52601160045260245ffdfe608060409080825260049182361015610016575f80fd5b5f92833560e01c92836306fdde03146107f25750826307546172146107ca578263095ea7b3146107a057826318160ddd1461078157826323b872dd14610744578263313ce5671461071f57826339509351146106d057826340c10f19146105b157826342966c681461059357826370a082311461055d578263715018a6146104f157826379cc6790146104be5782638da5cb5b1461049657826395d89b4114610377578263a457c2d7146102bb578263a9059cbb1461028a578263dd62ed3e1461023d578263f2fde38b1461014b57505063fca3b5aa146100f5575f80fd5b346101485760203660031901126101485761010e610911565b6001600160a01b039061012682600554163314610941565b1673ffffffffffffffffffffffffffffffffffffffff19600654161760065580f35b80fd5b9091503461023957602036600319011261023957610167610911565b90600554906001600160a01b0380831693610183338614610941565b169384156101d057505073ffffffffffffffffffffffffffffffffffffffff191682176005557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b8382346102865780600319360112610286578060209261025b610911565b61026361092b565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b8382346102865780600319360112610286576020906102b46102aa610911565b60243590336109ad565b5160018152f35b83346101485782600319360112610148576102d4610911565b91836024359233815260016020528181206001600160a01b038616825260205220549082821061030e576020856102b48585038733610b50565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152fd5b838234610286578160031936011261028657805190828454600181811c9080831692831561048c575b60209384841081146104795783885290811561045d5750600114610408575b505050829003601f01601f191682019267ffffffffffffffff8411838510176103f557508291826103f19252826108ca565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b83851061044957505050508301018580806103bf565b805488860183015293019284908201610433565b60ff1916878501525050151560051b84010190508580806103bf565b634e487b7160e01b895260228a52602489fd5b91607f16916103a0565b8382346102865781600319360112610286576020906001600160a01b03600554169051908152f35b83823461028657366003190112610148576104ee6104da610911565b602435906104e9823383610c4e565b610ce2565b80f35b83346101485780600319360112610148578060055473ffffffffffffffffffffffffffffffffffffffff196001600160a01b03821691610532338414610941565b166005557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b83823461028657602036600319011261028657806020926001600160a01b03610584610911565b16815280845220549051908152f35b839034610286576020366003190112610286576104ee903533610ce2565b9150346102395780600319360112610239576105cb610911565b90602435916001600160a01b039081600654163303610682571692831561064057506020827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9261061f879560025461098c565b60025585855284835280852061063683825461098c565b905551908152a380f35b6020606492519162461bcd60e51b8352820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b825162461bcd60e51b8152602081870152602260248201527f4d696e7461626c653a2063616c6c6572206973206e6f7420746865206d696e7460448201526132b960f11b6064820152608490fd5b8382346102865780600319360112610286576102b46020926107186106f3610911565b91338152600186528481206001600160a01b038416825286528460243591205461098c565b9033610b50565b83823461028657816003193601126102865760209060ff60055460a01c169051908152f35b838234610286576060366003190112610286576020906102b4610765610911565b61076d61092b565b6044359161077c833383610c4e565b6109ad565b8382346102865781600319360112610286576020906002549051908152f35b8382346102865780600319360112610286576020906102b46107c0610911565b6024359033610b50565b8382346102865781600319360112610286576020906001600160a01b03600654169051908152f35b8491923461023957826003193601126102395782600354600181811c908083169283156108c0575b60209384841081146104795783885290811561045d575060011461086a57505050829003601f01601f191682019267ffffffffffffffff8411838510176103f557508291826103f19252826108ca565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8385106108ac57505050508301018580806103bf565b805488860183015293019284908201610896565b91607f169161081a565b602080825282518183018190529093925f5b8281106108fd57505060409293505f838284010152601f8019910116010190565b8181018601518482016040015285016108dc565b600435906001600160a01b038216820361092757565b5f80fd5b602435906001600160a01b038216820361092757565b1561094857565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b9190820180921161099957565b634e487b7160e01b5f52601160045260245ffd5b6001600160a01b03809116918215610ae55716918215610a94575f82815280602052604081205491808310610a2957604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220610a1e82825461098c565b9055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608490fd5b6001600160a01b03809116918215610bfd5716918215610bad5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591835f526001825260405f20855f5282528060405f2055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b906001600160a01b038083165f52600160205260405f209082165f5260205260405f2054925f198403610c82575b50505050565b808410610c9d57610c94930391610b50565b5f808080610c7c565b60405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606490fd5b6001600160a01b03168015610db7575f91818352826020526040832054818110610d6757819083855284602052036040842055600254818103908111610d53577fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91602091600255604051908152a3565b634e487b7160e01b84526011600452602484fd5b60405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fdfea2646970667358221220ceebb60235edd9bd201abe4a44fefcab95047faaa8e66047f1d2155d8ae0921664736f6c63430008150033",
}

// MintableERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use MintableERC20MetaData.ABI instead.
var MintableERC20ABI = MintableERC20MetaData.ABI

// MintableERC20Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MintableERC20MetaData.Bin instead.
var MintableERC20Bin = MintableERC20MetaData.Bin

// DeployMintableERC20 deploys a new Ethereum contract, binding an instance of MintableERC20 to it.
func DeployMintableERC20(auth *bind.TransactOpts, backend bind.ContractBackend, name_ string, symbol_ string, decimals_ uint8, initialSupply_ *big.Int) (common.Address, *types.Transaction, *MintableERC20, error) {
	parsed, err := MintableERC20MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MintableERC20Bin), backend, name_, symbol_, decimals_, initialSupply_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MintableERC20{MintableERC20Caller: MintableERC20Caller{contract: contract}, MintableERC20Transactor: MintableERC20Transactor{contract: contract}, MintableERC20Filterer: MintableERC20Filterer{contract: contract}}, nil
}

// MintableERC20 is an auto generated Go binding around an Ethereum contract.
type MintableERC20 struct {
	MintableERC20Caller     // Read-only binding to the contract
	MintableERC20Transactor // Write-only binding to the contract
	MintableERC20Filterer   // Log filterer for contract events
}

// MintableERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type MintableERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintableERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type MintableERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintableERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MintableERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MintableERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MintableERC20Session struct {
	Contract     *MintableERC20    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MintableERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MintableERC20CallerSession struct {
	Contract *MintableERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// MintableERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MintableERC20TransactorSession struct {
	Contract     *MintableERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// MintableERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type MintableERC20Raw struct {
	Contract *MintableERC20 // Generic contract binding to access the raw methods on
}

// MintableERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MintableERC20CallerRaw struct {
	Contract *MintableERC20Caller // Generic read-only contract binding to access the raw methods on
}

// MintableERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MintableERC20TransactorRaw struct {
	Contract *MintableERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewMintableERC20 creates a new instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20(address common.Address, backend bind.ContractBackend) (*MintableERC20, error) {
	contract, err := bindMintableERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MintableERC20{MintableERC20Caller: MintableERC20Caller{contract: contract}, MintableERC20Transactor: MintableERC20Transactor{contract: contract}, MintableERC20Filterer: MintableERC20Filterer{contract: contract}}, nil
}

// NewMintableERC20Caller creates a new read-only instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20Caller(address common.Address, caller bind.ContractCaller) (*MintableERC20Caller, error) {
	contract, err := bindMintableERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MintableERC20Caller{contract: contract}, nil
}

// NewMintableERC20Transactor creates a new write-only instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*MintableERC20Transactor, error) {
	contract, err := bindMintableERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MintableERC20Transactor{contract: contract}, nil
}

// NewMintableERC20Filterer creates a new log filterer instance of MintableERC20, bound to a specific deployed contract.
func NewMintableERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*MintableERC20Filterer, error) {
	contract, err := bindMintableERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MintableERC20Filterer{contract: contract}, nil
}

// bindMintableERC20 binds a generic wrapper to an already deployed contract.
func bindMintableERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MintableERC20MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MintableERC20 *MintableERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MintableERC20.Contract.MintableERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MintableERC20 *MintableERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintableERC20.Contract.MintableERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MintableERC20 *MintableERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MintableERC20.Contract.MintableERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MintableERC20 *MintableERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MintableERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MintableERC20 *MintableERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintableERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MintableERC20 *MintableERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MintableERC20.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MintableERC20 *MintableERC20Caller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MintableERC20 *MintableERC20Session) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.Allowance(&_MintableERC20.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_MintableERC20 *MintableERC20CallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.Allowance(&_MintableERC20.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MintableERC20 *MintableERC20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MintableERC20 *MintableERC20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.BalanceOf(&_MintableERC20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_MintableERC20 *MintableERC20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _MintableERC20.Contract.BalanceOf(&_MintableERC20.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MintableERC20 *MintableERC20Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MintableERC20 *MintableERC20Session) Decimals() (uint8, error) {
	return _MintableERC20.Contract.Decimals(&_MintableERC20.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_MintableERC20 *MintableERC20CallerSession) Decimals() (uint8, error) {
	return _MintableERC20.Contract.Decimals(&_MintableERC20.CallOpts)
}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() view returns(address)
func (_MintableERC20 *MintableERC20Caller) Minter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "minter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() view returns(address)
func (_MintableERC20 *MintableERC20Session) Minter() (common.Address, error) {
	return _MintableERC20.Contract.Minter(&_MintableERC20.CallOpts)
}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() view returns(address)
func (_MintableERC20 *MintableERC20CallerSession) Minter() (common.Address, error) {
	return _MintableERC20.Contract.Minter(&_MintableERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MintableERC20 *MintableERC20Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MintableERC20 *MintableERC20Session) Name() (string, error) {
	return _MintableERC20.Contract.Name(&_MintableERC20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_MintableERC20 *MintableERC20CallerSession) Name() (string, error) {
	return _MintableERC20.Contract.Name(&_MintableERC20.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MintableERC20 *MintableERC20Caller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MintableERC20 *MintableERC20Session) Owner() (common.Address, error) {
	return _MintableERC20.Contract.Owner(&_MintableERC20.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_MintableERC20 *MintableERC20CallerSession) Owner() (common.Address, error) {
	return _MintableERC20.Contract.Owner(&_MintableERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MintableERC20 *MintableERC20Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MintableERC20 *MintableERC20Session) Symbol() (string, error) {
	return _MintableERC20.Contract.Symbol(&_MintableERC20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_MintableERC20 *MintableERC20CallerSession) Symbol() (string, error) {
	return _MintableERC20.Contract.Symbol(&_MintableERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MintableERC20 *MintableERC20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _MintableERC20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MintableERC20 *MintableERC20Session) TotalSupply() (*big.Int, error) {
	return _MintableERC20.Contract.TotalSupply(&_MintableERC20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_MintableERC20 *MintableERC20CallerSession) TotalSupply() (*big.Int, error) {
	return _MintableERC20.Contract.TotalSupply(&_MintableERC20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MintableERC20 *MintableERC20Session) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Approve(&_MintableERC20.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Approve(&_MintableERC20.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_MintableERC20 *MintableERC20Transactor) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "burn", amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_MintableERC20 *MintableERC20Session) Burn(amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Burn(&_MintableERC20.TransactOpts, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_MintableERC20 *MintableERC20TransactorSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Burn(&_MintableERC20.TransactOpts, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_MintableERC20 *MintableERC20Transactor) BurnFrom(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "burnFrom", account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_MintableERC20 *MintableERC20Session) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.BurnFrom(&_MintableERC20.TransactOpts, account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_MintableERC20 *MintableERC20TransactorSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.BurnFrom(&_MintableERC20.TransactOpts, account, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MintableERC20 *MintableERC20Session) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.DecreaseAllowance(&_MintableERC20.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.DecreaseAllowance(&_MintableERC20.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MintableERC20 *MintableERC20Session) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.IncreaseAllowance(&_MintableERC20.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.IncreaseAllowance(&_MintableERC20.TransactOpts, spender, addedValue)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_MintableERC20 *MintableERC20Transactor) Mint(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "mint", to, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_MintableERC20 *MintableERC20Session) Mint(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Mint(&_MintableERC20.TransactOpts, to, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address to, uint256 amount) returns()
func (_MintableERC20 *MintableERC20TransactorSession) Mint(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Mint(&_MintableERC20.TransactOpts, to, amount)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MintableERC20 *MintableERC20Transactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MintableERC20 *MintableERC20Session) RenounceOwnership() (*types.Transaction, error) {
	return _MintableERC20.Contract.RenounceOwnership(&_MintableERC20.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_MintableERC20 *MintableERC20TransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _MintableERC20.Contract.RenounceOwnership(&_MintableERC20.TransactOpts)
}

// SetMinter is a paid mutator transaction binding the contract method 0xfca3b5aa.
//
// Solidity: function setMinter(address minter_) returns()
func (_MintableERC20 *MintableERC20Transactor) SetMinter(opts *bind.TransactOpts, minter_ common.Address) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "setMinter", minter_)
}

// SetMinter is a paid mutator transaction binding the contract method 0xfca3b5aa.
//
// Solidity: function setMinter(address minter_) returns()
func (_MintableERC20 *MintableERC20Session) SetMinter(minter_ common.Address) (*types.Transaction, error) {
	return _MintableERC20.Contract.SetMinter(&_MintableERC20.TransactOpts, minter_)
}

// SetMinter is a paid mutator transaction binding the contract method 0xfca3b5aa.
//
// Solidity: function setMinter(address minter_) returns()
func (_MintableERC20 *MintableERC20TransactorSession) SetMinter(minter_ common.Address) (*types.Transaction, error) {
	return _MintableERC20.Contract.SetMinter(&_MintableERC20.TransactOpts, minter_)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_MintableERC20 *MintableERC20Session) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Transfer(&_MintableERC20.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.Transfer(&_MintableERC20.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_MintableERC20 *MintableERC20Transactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_MintableERC20 *MintableERC20Session) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.TransferFrom(&_MintableERC20.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_MintableERC20 *MintableERC20TransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _MintableERC20.Contract.TransferFrom(&_MintableERC20.TransactOpts, from, to, amount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MintableERC20 *MintableERC20Transactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _MintableERC20.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MintableERC20 *MintableERC20Session) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _MintableERC20.Contract.TransferOwnership(&_MintableERC20.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_MintableERC20 *MintableERC20TransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _MintableERC20.Contract.TransferOwnership(&_MintableERC20.TransactOpts, newOwner)
}

// MintableERC20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the MintableERC20 contract.
type MintableERC20ApprovalIterator struct {
	Event *MintableERC20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MintableERC20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MintableERC20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MintableERC20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MintableERC20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MintableERC20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MintableERC20Approval represents a Approval event raised by the MintableERC20 contract.
type MintableERC20Approval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MintableERC20 *MintableERC20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*MintableERC20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MintableERC20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &MintableERC20ApprovalIterator{contract: _MintableERC20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MintableERC20 *MintableERC20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *MintableERC20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _MintableERC20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MintableERC20Approval)
				if err := _MintableERC20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_MintableERC20 *MintableERC20Filterer) ParseApproval(log types.Log) (*MintableERC20Approval, error) {
	event := new(MintableERC20Approval)
	if err := _MintableERC20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MintableERC20OwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the MintableERC20 contract.
type MintableERC20OwnershipTransferredIterator struct {
	Event *MintableERC20OwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MintableERC20OwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MintableERC20OwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MintableERC20OwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MintableERC20OwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MintableERC20OwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MintableERC20OwnershipTransferred represents a OwnershipTransferred event raised by the MintableERC20 contract.
type MintableERC20OwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MintableERC20 *MintableERC20Filterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*MintableERC20OwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _MintableERC20.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &MintableERC20OwnershipTransferredIterator{contract: _MintableERC20.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MintableERC20 *MintableERC20Filterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *MintableERC20OwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _MintableERC20.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MintableERC20OwnershipTransferred)
				if err := _MintableERC20.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_MintableERC20 *MintableERC20Filterer) ParseOwnershipTransferred(log types.Log) (*MintableERC20OwnershipTransferred, error) {
	event := new(MintableERC20OwnershipTransferred)
	if err := _MintableERC20.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MintableERC20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the MintableERC20 contract.
type MintableERC20TransferIterator struct {
	Event *MintableERC20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MintableERC20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MintableERC20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MintableERC20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MintableERC20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MintableERC20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MintableERC20Transfer represents a Transfer event raised by the MintableERC20 contract.
type MintableERC20Transfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MintableERC20 *MintableERC20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*MintableERC20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MintableERC20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &MintableERC20TransferIterator{contract: _MintableERC20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MintableERC20 *MintableERC20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *MintableERC20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _MintableERC20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MintableERC20Transfer)
				if err := _MintableERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_MintableERC20 *MintableERC20Filterer) ParseTransfer(log types.Log) (*MintableERC20Transfer, error) {
	event := new(MintableERC20Transfer)
	if err := _MintableERC20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MockUniswapSumVolumeMetaData contains all meta data concerning the MockUniswapSumVolume contract.
var MockUniswapSumVolumeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getAttestedSwapSumVolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x60808060405234601457609390816100198239f35b5f80fdfe60808060405260043610156011575f80fd5b5f90813560e01c63950650c1146025575f80fd5b34605957602036600319011260595760043573ffffffffffffffffffffffffffffffffffffffff8116036059576020918152f35b5080fdfea2646970667358221220995515b9b9eac841ae252ac2d103e42b76e6a68c9ee5577896dbd476e1e5c89464736f6c63430008150033",
}

// MockUniswapSumVolumeABI is the input ABI used to generate the binding from.
// Deprecated: Use MockUniswapSumVolumeMetaData.ABI instead.
var MockUniswapSumVolumeABI = MockUniswapSumVolumeMetaData.ABI

// MockUniswapSumVolumeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MockUniswapSumVolumeMetaData.Bin instead.
var MockUniswapSumVolumeBin = MockUniswapSumVolumeMetaData.Bin

// DeployMockUniswapSumVolume deploys a new Ethereum contract, binding an instance of MockUniswapSumVolume to it.
func DeployMockUniswapSumVolume(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MockUniswapSumVolume, error) {
	parsed, err := MockUniswapSumVolumeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MockUniswapSumVolumeBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MockUniswapSumVolume{MockUniswapSumVolumeCaller: MockUniswapSumVolumeCaller{contract: contract}, MockUniswapSumVolumeTransactor: MockUniswapSumVolumeTransactor{contract: contract}, MockUniswapSumVolumeFilterer: MockUniswapSumVolumeFilterer{contract: contract}}, nil
}

// MockUniswapSumVolume is an auto generated Go binding around an Ethereum contract.
type MockUniswapSumVolume struct {
	MockUniswapSumVolumeCaller     // Read-only binding to the contract
	MockUniswapSumVolumeTransactor // Write-only binding to the contract
	MockUniswapSumVolumeFilterer   // Log filterer for contract events
}

// MockUniswapSumVolumeCaller is an auto generated read-only Go binding around an Ethereum contract.
type MockUniswapSumVolumeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockUniswapSumVolumeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MockUniswapSumVolumeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockUniswapSumVolumeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MockUniswapSumVolumeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MockUniswapSumVolumeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MockUniswapSumVolumeSession struct {
	Contract     *MockUniswapSumVolume // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// MockUniswapSumVolumeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MockUniswapSumVolumeCallerSession struct {
	Contract *MockUniswapSumVolumeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// MockUniswapSumVolumeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MockUniswapSumVolumeTransactorSession struct {
	Contract     *MockUniswapSumVolumeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// MockUniswapSumVolumeRaw is an auto generated low-level Go binding around an Ethereum contract.
type MockUniswapSumVolumeRaw struct {
	Contract *MockUniswapSumVolume // Generic contract binding to access the raw methods on
}

// MockUniswapSumVolumeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MockUniswapSumVolumeCallerRaw struct {
	Contract *MockUniswapSumVolumeCaller // Generic read-only contract binding to access the raw methods on
}

// MockUniswapSumVolumeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MockUniswapSumVolumeTransactorRaw struct {
	Contract *MockUniswapSumVolumeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMockUniswapSumVolume creates a new instance of MockUniswapSumVolume, bound to a specific deployed contract.
func NewMockUniswapSumVolume(address common.Address, backend bind.ContractBackend) (*MockUniswapSumVolume, error) {
	contract, err := bindMockUniswapSumVolume(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MockUniswapSumVolume{MockUniswapSumVolumeCaller: MockUniswapSumVolumeCaller{contract: contract}, MockUniswapSumVolumeTransactor: MockUniswapSumVolumeTransactor{contract: contract}, MockUniswapSumVolumeFilterer: MockUniswapSumVolumeFilterer{contract: contract}}, nil
}

// NewMockUniswapSumVolumeCaller creates a new read-only instance of MockUniswapSumVolume, bound to a specific deployed contract.
func NewMockUniswapSumVolumeCaller(address common.Address, caller bind.ContractCaller) (*MockUniswapSumVolumeCaller, error) {
	contract, err := bindMockUniswapSumVolume(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MockUniswapSumVolumeCaller{contract: contract}, nil
}

// NewMockUniswapSumVolumeTransactor creates a new write-only instance of MockUniswapSumVolume, bound to a specific deployed contract.
func NewMockUniswapSumVolumeTransactor(address common.Address, transactor bind.ContractTransactor) (*MockUniswapSumVolumeTransactor, error) {
	contract, err := bindMockUniswapSumVolume(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MockUniswapSumVolumeTransactor{contract: contract}, nil
}

// NewMockUniswapSumVolumeFilterer creates a new log filterer instance of MockUniswapSumVolume, bound to a specific deployed contract.
func NewMockUniswapSumVolumeFilterer(address common.Address, filterer bind.ContractFilterer) (*MockUniswapSumVolumeFilterer, error) {
	contract, err := bindMockUniswapSumVolume(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MockUniswapSumVolumeFilterer{contract: contract}, nil
}

// bindMockUniswapSumVolume binds a generic wrapper to an already deployed contract.
func bindMockUniswapSumVolume(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MockUniswapSumVolumeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MockUniswapSumVolume *MockUniswapSumVolumeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MockUniswapSumVolume.Contract.MockUniswapSumVolumeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MockUniswapSumVolume *MockUniswapSumVolumeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MockUniswapSumVolume.Contract.MockUniswapSumVolumeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MockUniswapSumVolume *MockUniswapSumVolumeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MockUniswapSumVolume.Contract.MockUniswapSumVolumeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MockUniswapSumVolume *MockUniswapSumVolumeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MockUniswapSumVolume.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MockUniswapSumVolume *MockUniswapSumVolumeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MockUniswapSumVolume.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MockUniswapSumVolume *MockUniswapSumVolumeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MockUniswapSumVolume.Contract.contract.Transact(opts, method, params...)
}

// GetAttestedSwapSumVolume is a free data retrieval call binding the contract method 0x950650c1.
//
// Solidity: function getAttestedSwapSumVolume(address ) pure returns(uint256)
func (_MockUniswapSumVolume *MockUniswapSumVolumeCaller) GetAttestedSwapSumVolume(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _MockUniswapSumVolume.contract.Call(opts, &out, "getAttestedSwapSumVolume", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAttestedSwapSumVolume is a free data retrieval call binding the contract method 0x950650c1.
//
// Solidity: function getAttestedSwapSumVolume(address ) pure returns(uint256)
func (_MockUniswapSumVolume *MockUniswapSumVolumeSession) GetAttestedSwapSumVolume(arg0 common.Address) (*big.Int, error) {
	return _MockUniswapSumVolume.Contract.GetAttestedSwapSumVolume(&_MockUniswapSumVolume.CallOpts, arg0)
}

// GetAttestedSwapSumVolume is a free data retrieval call binding the contract method 0x950650c1.
//
// Solidity: function getAttestedSwapSumVolume(address ) pure returns(uint256)
func (_MockUniswapSumVolume *MockUniswapSumVolumeCallerSession) GetAttestedSwapSumVolume(arg0 common.Address) (*big.Int, error) {
	return _MockUniswapSumVolume.Contract.GetAttestedSwapSumVolume(&_MockUniswapSumVolume.CallOpts, arg0)
}

// MsgLibMetaData contains all meta data concerning the MsgLib contract.
var MsgLibMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220b6577e923a68a19c44de1483dde8416bcd3ccc9757f070a38b02ef8876306a4864736f6c63430008150033",
}

// MsgLibABI is the input ABI used to generate the binding from.
// Deprecated: Use MsgLibMetaData.ABI instead.
var MsgLibABI = MsgLibMetaData.ABI

// MsgLibBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MsgLibMetaData.Bin instead.
var MsgLibBin = MsgLibMetaData.Bin

// DeployMsgLib deploys a new Ethereum contract, binding an instance of MsgLib to it.
func DeployMsgLib(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MsgLib, error) {
	parsed, err := MsgLibMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MsgLibBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MsgLib{MsgLibCaller: MsgLibCaller{contract: contract}, MsgLibTransactor: MsgLibTransactor{contract: contract}, MsgLibFilterer: MsgLibFilterer{contract: contract}}, nil
}

// MsgLib is an auto generated Go binding around an Ethereum contract.
type MsgLib struct {
	MsgLibCaller     // Read-only binding to the contract
	MsgLibTransactor // Write-only binding to the contract
	MsgLibFilterer   // Log filterer for contract events
}

// MsgLibCaller is an auto generated read-only Go binding around an Ethereum contract.
type MsgLibCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MsgLibTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MsgLibTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MsgLibFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MsgLibFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MsgLibSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MsgLibSession struct {
	Contract     *MsgLib           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MsgLibCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MsgLibCallerSession struct {
	Contract *MsgLibCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MsgLibTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MsgLibTransactorSession struct {
	Contract     *MsgLibTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MsgLibRaw is an auto generated low-level Go binding around an Ethereum contract.
type MsgLibRaw struct {
	Contract *MsgLib // Generic contract binding to access the raw methods on
}

// MsgLibCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MsgLibCallerRaw struct {
	Contract *MsgLibCaller // Generic read-only contract binding to access the raw methods on
}

// MsgLibTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MsgLibTransactorRaw struct {
	Contract *MsgLibTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMsgLib creates a new instance of MsgLib, bound to a specific deployed contract.
func NewMsgLib(address common.Address, backend bind.ContractBackend) (*MsgLib, error) {
	contract, err := bindMsgLib(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MsgLib{MsgLibCaller: MsgLibCaller{contract: contract}, MsgLibTransactor: MsgLibTransactor{contract: contract}, MsgLibFilterer: MsgLibFilterer{contract: contract}}, nil
}

// NewMsgLibCaller creates a new read-only instance of MsgLib, bound to a specific deployed contract.
func NewMsgLibCaller(address common.Address, caller bind.ContractCaller) (*MsgLibCaller, error) {
	contract, err := bindMsgLib(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MsgLibCaller{contract: contract}, nil
}

// NewMsgLibTransactor creates a new write-only instance of MsgLib, bound to a specific deployed contract.
func NewMsgLibTransactor(address common.Address, transactor bind.ContractTransactor) (*MsgLibTransactor, error) {
	contract, err := bindMsgLib(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MsgLibTransactor{contract: contract}, nil
}

// NewMsgLibFilterer creates a new log filterer instance of MsgLib, bound to a specific deployed contract.
func NewMsgLibFilterer(address common.Address, filterer bind.ContractFilterer) (*MsgLibFilterer, error) {
	contract, err := bindMsgLib(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MsgLibFilterer{contract: contract}, nil
}

// bindMsgLib binds a generic wrapper to an already deployed contract.
func bindMsgLib(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MsgLibMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MsgLib *MsgLibRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MsgLib.Contract.MsgLibCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MsgLib *MsgLibRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MsgLib.Contract.MsgLibTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MsgLib *MsgLibRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MsgLib.Contract.MsgLibTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MsgLib *MsgLibCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MsgLib.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MsgLib *MsgLibTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MsgLib.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MsgLib *MsgLibTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MsgLib.Contract.contract.Transact(opts, method, params...)
}

// MsgReceiverMetaData contains all meta data concerning the MsgReceiver contract.
var MsgReceiverMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractISlotValueVerifier\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_senderChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_senderContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"msg\",\"type\":\"bytes\"}],\"name\":\"MsgReceived\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_msg\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_proofData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_blkVerifyInfo\",\"type\":\"bytes\"}],\"name\":\"recvMsg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderChainId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"senderContractHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slotValueVerifier\",\"outputs\":[{\"internalType\":\"contractISlotValueVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6080346100f5576001600160401b0390601f61063f38819003918201601f1916830191848311848410176100e1578084926060946040528339810103126100f55780516001600160a01b039190828116908190036100f5576020820151918483168093036100f5576040015192831683036100f557600280546001600160a01b0319169190911790555f80546001600160401b0319169190911790556040805160609290921b6001600160601b0319166020830190815260148352908201929091908311818410176100e1578260405251902060015561054590816100fa8239f35b634e487b7160e01b5f52604160045260245ffd5b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c90816351a973e91461047c5750806363c6ccb21461045657806373008938146104395763faf6e9ec14610048575f80fd5b3461040e5760a036600319011261040e5760043567ffffffffffffffff8116810361040e576001600160a01b03602435166024350361040e5760443567ffffffffffffffff811161040e576100a190369060040161049f565b9160643567ffffffffffffffff811161040e576100c290369060040161049f565b60843567ffffffffffffffff811161040e576100e290369060040161049f565b9190926040519067ffffffffffffffff86166020830152600160408301526040825281606081011067ffffffffffffffff6060840111176104125760608201604052815160208301206080830152602060608301526060820160a083011067ffffffffffffffff60a084011117610412576101fd9488938860a0858160c097016040526101b1603482606081015160808201209a808b8301976bffffffffffffffffffffffff1960243560601b16895260d484013781015f60d4820152036014810185850152018383016104cd565b015190209561020f6001600160a01b03600254169367ffffffffffffffff5f5416926040519a8b9788968796630b885e5360e01b885260048801526060602488015260648701916104ef565b848103600319016044860152916104ef565b03915afa92831561042e575f93610370575b5060608301510361032b576080820151036102e65760200151600154036102a15761029c67ffffffffffffffff927f0881b56db4adae1d4876705d8794dcbeb3c199027a9995685ea2a4e29b071394946040519485941684526001600160a01b036024351660208501526060604085015260608401916104ef565b0390a1005b60405162461bcd60e51b815260206004820152601960248201527f73656e64657220636f6e7472616374206e6f74206d61746368000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601460248201527f736c6f742076616c7565206e6f74206d617463680000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601260248201527f736c6f74206b6579206e6f74206d6174636800000000000000000000000000006044820152606490fd5b90925060c0813d60c011610426575b8161038c60c093836104cd565b8101031261040e576040519060c0820182811067ffffffffffffffff8211176104125760405280519067ffffffffffffffff8216820361040e5760a091835260208101516020840152604081015160408401526060810151606084015260808101516080840152015163ffffffff8116810361040e5760a0820152915f610221565b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b3d915061037f565b6040513d5f823e3d90fd5b3461040e575f36600319011261040e576020600154604051908152f35b3461040e575f36600319011261040e5760206001600160a01b0360025416604051908152f35b3461040e575f36600319011261040e5760209067ffffffffffffffff5f54168152f35b9181601f8401121561040e5782359167ffffffffffffffff831161040e576020838186019501011161040e57565b90601f8019910116810190811067ffffffffffffffff82111761041257604052565b908060209392818452848401375f828201840152601f01601f191601019056fea2646970667358221220f39d218cc6d8834bed41701c1fd3dd2b7f1a3c0f54c05d2b0e27632451a28ac564736f6c63430008150033",
}

// MsgReceiverABI is the input ABI used to generate the binding from.
// Deprecated: Use MsgReceiverMetaData.ABI instead.
var MsgReceiverABI = MsgReceiverMetaData.ABI

// MsgReceiverBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MsgReceiverMetaData.Bin instead.
var MsgReceiverBin = MsgReceiverMetaData.Bin

// DeployMsgReceiver deploys a new Ethereum contract, binding an instance of MsgReceiver to it.
func DeployMsgReceiver(auth *bind.TransactOpts, backend bind.ContractBackend, _verifier common.Address, _senderChainId uint64, _senderContract common.Address) (common.Address, *types.Transaction, *MsgReceiver, error) {
	parsed, err := MsgReceiverMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MsgReceiverBin), backend, _verifier, _senderChainId, _senderContract)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MsgReceiver{MsgReceiverCaller: MsgReceiverCaller{contract: contract}, MsgReceiverTransactor: MsgReceiverTransactor{contract: contract}, MsgReceiverFilterer: MsgReceiverFilterer{contract: contract}}, nil
}

// MsgReceiver is an auto generated Go binding around an Ethereum contract.
type MsgReceiver struct {
	MsgReceiverCaller     // Read-only binding to the contract
	MsgReceiverTransactor // Write-only binding to the contract
	MsgReceiverFilterer   // Log filterer for contract events
}

// MsgReceiverCaller is an auto generated read-only Go binding around an Ethereum contract.
type MsgReceiverCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MsgReceiverTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MsgReceiverTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MsgReceiverFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MsgReceiverFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MsgReceiverSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MsgReceiverSession struct {
	Contract     *MsgReceiver      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MsgReceiverCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MsgReceiverCallerSession struct {
	Contract *MsgReceiverCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// MsgReceiverTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MsgReceiverTransactorSession struct {
	Contract     *MsgReceiverTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// MsgReceiverRaw is an auto generated low-level Go binding around an Ethereum contract.
type MsgReceiverRaw struct {
	Contract *MsgReceiver // Generic contract binding to access the raw methods on
}

// MsgReceiverCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MsgReceiverCallerRaw struct {
	Contract *MsgReceiverCaller // Generic read-only contract binding to access the raw methods on
}

// MsgReceiverTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MsgReceiverTransactorRaw struct {
	Contract *MsgReceiverTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMsgReceiver creates a new instance of MsgReceiver, bound to a specific deployed contract.
func NewMsgReceiver(address common.Address, backend bind.ContractBackend) (*MsgReceiver, error) {
	contract, err := bindMsgReceiver(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MsgReceiver{MsgReceiverCaller: MsgReceiverCaller{contract: contract}, MsgReceiverTransactor: MsgReceiverTransactor{contract: contract}, MsgReceiverFilterer: MsgReceiverFilterer{contract: contract}}, nil
}

// NewMsgReceiverCaller creates a new read-only instance of MsgReceiver, bound to a specific deployed contract.
func NewMsgReceiverCaller(address common.Address, caller bind.ContractCaller) (*MsgReceiverCaller, error) {
	contract, err := bindMsgReceiver(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MsgReceiverCaller{contract: contract}, nil
}

// NewMsgReceiverTransactor creates a new write-only instance of MsgReceiver, bound to a specific deployed contract.
func NewMsgReceiverTransactor(address common.Address, transactor bind.ContractTransactor) (*MsgReceiverTransactor, error) {
	contract, err := bindMsgReceiver(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MsgReceiverTransactor{contract: contract}, nil
}

// NewMsgReceiverFilterer creates a new log filterer instance of MsgReceiver, bound to a specific deployed contract.
func NewMsgReceiverFilterer(address common.Address, filterer bind.ContractFilterer) (*MsgReceiverFilterer, error) {
	contract, err := bindMsgReceiver(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MsgReceiverFilterer{contract: contract}, nil
}

// bindMsgReceiver binds a generic wrapper to an already deployed contract.
func bindMsgReceiver(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MsgReceiverMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MsgReceiver *MsgReceiverRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MsgReceiver.Contract.MsgReceiverCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MsgReceiver *MsgReceiverRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MsgReceiver.Contract.MsgReceiverTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MsgReceiver *MsgReceiverRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MsgReceiver.Contract.MsgReceiverTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MsgReceiver *MsgReceiverCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MsgReceiver.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MsgReceiver *MsgReceiverTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MsgReceiver.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MsgReceiver *MsgReceiverTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MsgReceiver.Contract.contract.Transact(opts, method, params...)
}

// SenderChainId is a free data retrieval call binding the contract method 0x51a973e9.
//
// Solidity: function senderChainId() view returns(uint64)
func (_MsgReceiver *MsgReceiverCaller) SenderChainId(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _MsgReceiver.contract.Call(opts, &out, "senderChainId")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// SenderChainId is a free data retrieval call binding the contract method 0x51a973e9.
//
// Solidity: function senderChainId() view returns(uint64)
func (_MsgReceiver *MsgReceiverSession) SenderChainId() (uint64, error) {
	return _MsgReceiver.Contract.SenderChainId(&_MsgReceiver.CallOpts)
}

// SenderChainId is a free data retrieval call binding the contract method 0x51a973e9.
//
// Solidity: function senderChainId() view returns(uint64)
func (_MsgReceiver *MsgReceiverCallerSession) SenderChainId() (uint64, error) {
	return _MsgReceiver.Contract.SenderChainId(&_MsgReceiver.CallOpts)
}

// SenderContractHash is a free data retrieval call binding the contract method 0x73008938.
//
// Solidity: function senderContractHash() view returns(bytes32)
func (_MsgReceiver *MsgReceiverCaller) SenderContractHash(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _MsgReceiver.contract.Call(opts, &out, "senderContractHash")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SenderContractHash is a free data retrieval call binding the contract method 0x73008938.
//
// Solidity: function senderContractHash() view returns(bytes32)
func (_MsgReceiver *MsgReceiverSession) SenderContractHash() ([32]byte, error) {
	return _MsgReceiver.Contract.SenderContractHash(&_MsgReceiver.CallOpts)
}

// SenderContractHash is a free data retrieval call binding the contract method 0x73008938.
//
// Solidity: function senderContractHash() view returns(bytes32)
func (_MsgReceiver *MsgReceiverCallerSession) SenderContractHash() ([32]byte, error) {
	return _MsgReceiver.Contract.SenderContractHash(&_MsgReceiver.CallOpts)
}

// SlotValueVerifier is a free data retrieval call binding the contract method 0x63c6ccb2.
//
// Solidity: function slotValueVerifier() view returns(address)
func (_MsgReceiver *MsgReceiverCaller) SlotValueVerifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _MsgReceiver.contract.Call(opts, &out, "slotValueVerifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SlotValueVerifier is a free data retrieval call binding the contract method 0x63c6ccb2.
//
// Solidity: function slotValueVerifier() view returns(address)
func (_MsgReceiver *MsgReceiverSession) SlotValueVerifier() (common.Address, error) {
	return _MsgReceiver.Contract.SlotValueVerifier(&_MsgReceiver.CallOpts)
}

// SlotValueVerifier is a free data retrieval call binding the contract method 0x63c6ccb2.
//
// Solidity: function slotValueVerifier() view returns(address)
func (_MsgReceiver *MsgReceiverCallerSession) SlotValueVerifier() (common.Address, error) {
	return _MsgReceiver.Contract.SlotValueVerifier(&_MsgReceiver.CallOpts)
}

// RecvMsg is a paid mutator transaction binding the contract method 0xfaf6e9ec.
//
// Solidity: function recvMsg(uint64 _nonce, address _sender, bytes _msg, bytes _proofData, bytes _blkVerifyInfo) returns()
func (_MsgReceiver *MsgReceiverTransactor) RecvMsg(opts *bind.TransactOpts, _nonce uint64, _sender common.Address, _msg []byte, _proofData []byte, _blkVerifyInfo []byte) (*types.Transaction, error) {
	return _MsgReceiver.contract.Transact(opts, "recvMsg", _nonce, _sender, _msg, _proofData, _blkVerifyInfo)
}

// RecvMsg is a paid mutator transaction binding the contract method 0xfaf6e9ec.
//
// Solidity: function recvMsg(uint64 _nonce, address _sender, bytes _msg, bytes _proofData, bytes _blkVerifyInfo) returns()
func (_MsgReceiver *MsgReceiverSession) RecvMsg(_nonce uint64, _sender common.Address, _msg []byte, _proofData []byte, _blkVerifyInfo []byte) (*types.Transaction, error) {
	return _MsgReceiver.Contract.RecvMsg(&_MsgReceiver.TransactOpts, _nonce, _sender, _msg, _proofData, _blkVerifyInfo)
}

// RecvMsg is a paid mutator transaction binding the contract method 0xfaf6e9ec.
//
// Solidity: function recvMsg(uint64 _nonce, address _sender, bytes _msg, bytes _proofData, bytes _blkVerifyInfo) returns()
func (_MsgReceiver *MsgReceiverTransactorSession) RecvMsg(_nonce uint64, _sender common.Address, _msg []byte, _proofData []byte, _blkVerifyInfo []byte) (*types.Transaction, error) {
	return _MsgReceiver.Contract.RecvMsg(&_MsgReceiver.TransactOpts, _nonce, _sender, _msg, _proofData, _blkVerifyInfo)
}

// MsgReceiverMsgReceivedIterator is returned from FilterMsgReceived and is used to iterate over the raw logs and unpacked data for MsgReceived events raised by the MsgReceiver contract.
type MsgReceiverMsgReceivedIterator struct {
	Event *MsgReceiverMsgReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MsgReceiverMsgReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MsgReceiverMsgReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MsgReceiverMsgReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MsgReceiverMsgReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MsgReceiverMsgReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MsgReceiverMsgReceived represents a MsgReceived event raised by the MsgReceiver contract.
type MsgReceiverMsgReceived struct {
	Nonce  uint64
	Sender common.Address
	Msg    []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMsgReceived is a free log retrieval operation binding the contract event 0x0881b56db4adae1d4876705d8794dcbeb3c199027a9995685ea2a4e29b071394.
//
// Solidity: event MsgReceived(uint64 nonce, address sender, bytes msg)
func (_MsgReceiver *MsgReceiverFilterer) FilterMsgReceived(opts *bind.FilterOpts) (*MsgReceiverMsgReceivedIterator, error) {

	logs, sub, err := _MsgReceiver.contract.FilterLogs(opts, "MsgReceived")
	if err != nil {
		return nil, err
	}
	return &MsgReceiverMsgReceivedIterator{contract: _MsgReceiver.contract, event: "MsgReceived", logs: logs, sub: sub}, nil
}

// WatchMsgReceived is a free log subscription operation binding the contract event 0x0881b56db4adae1d4876705d8794dcbeb3c199027a9995685ea2a4e29b071394.
//
// Solidity: event MsgReceived(uint64 nonce, address sender, bytes msg)
func (_MsgReceiver *MsgReceiverFilterer) WatchMsgReceived(opts *bind.WatchOpts, sink chan<- *MsgReceiverMsgReceived) (event.Subscription, error) {

	logs, sub, err := _MsgReceiver.contract.WatchLogs(opts, "MsgReceived")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MsgReceiverMsgReceived)
				if err := _MsgReceiver.contract.UnpackLog(event, "MsgReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMsgReceived is a log parse operation binding the contract event 0x0881b56db4adae1d4876705d8794dcbeb3c199027a9995685ea2a4e29b071394.
//
// Solidity: event MsgReceived(uint64 nonce, address sender, bytes msg)
func (_MsgReceiver *MsgReceiverFilterer) ParseMsgReceived(log types.Log) (*MsgReceiverMsgReceived, error) {
	event := new(MsgReceiverMsgReceived)
	if err := _MsgReceiver.contract.UnpackLog(event, "MsgReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// MsgSenderMetaData contains all meta data concerning the MsgSender contract.
var MsgSenderMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"msg\",\"type\":\"bytes\"}],\"name\":\"MsgSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_msg\",\"type\":\"bytes\"}],\"name\":\"sendMsg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"sent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x608080604052346100165761022a908161001b8239f35b5f80fdfe6080604081815260049182361015610015575f80fd5b5f92833560e01c918263737a3ca4146100aa57508163958c3b8d1461006c575063affed0e014610043575f80fd5b3461006857816003193601126100685767ffffffffffffffff60209254169051908152f35b5080fd5b9050346100a65760203660031901126100a6573567ffffffffffffffff81168091036100a657828291602094526001845220549051908152f35b8280fd5b849084346100a65760203660031901126100a657833567ffffffffffffffff918282116101f057366023830112156101f05781860135928084116101ec57602483019260248536920101116101ec57906053939291602086013360601b8152848460348901378685810189603482015203601481018852601f199687910116870196808810838911176101d9578784525190208188541688526001602052828820558654818116918083146101c657948796939460607ff6a47eba7434fcad087203d7461e306130fba93c290c0b4a04cc1343d14e3cda999685849560809a6001601f9901169067ffffffffffffffff1916178d558852336020890152870152816060870152868601378785828601015201168101030190a180f35b634e487b7160e01b895260118a52602489fd5b634e487b7160e01b895260418a52602489fd5b8580fd5b8480fdfea2646970667358221220dffce3ff9bfde2e3aed110bcb557a5b22baa5d825614c16c6a342c0716dee84064736f6c63430008150033",
}

// MsgSenderABI is the input ABI used to generate the binding from.
// Deprecated: Use MsgSenderMetaData.ABI instead.
var MsgSenderABI = MsgSenderMetaData.ABI

// MsgSenderBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MsgSenderMetaData.Bin instead.
var MsgSenderBin = MsgSenderMetaData.Bin

// DeployMsgSender deploys a new Ethereum contract, binding an instance of MsgSender to it.
func DeployMsgSender(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *MsgSender, error) {
	parsed, err := MsgSenderMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MsgSenderBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &MsgSender{MsgSenderCaller: MsgSenderCaller{contract: contract}, MsgSenderTransactor: MsgSenderTransactor{contract: contract}, MsgSenderFilterer: MsgSenderFilterer{contract: contract}}, nil
}

// MsgSender is an auto generated Go binding around an Ethereum contract.
type MsgSender struct {
	MsgSenderCaller     // Read-only binding to the contract
	MsgSenderTransactor // Write-only binding to the contract
	MsgSenderFilterer   // Log filterer for contract events
}

// MsgSenderCaller is an auto generated read-only Go binding around an Ethereum contract.
type MsgSenderCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MsgSenderTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MsgSenderTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MsgSenderFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MsgSenderFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MsgSenderSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MsgSenderSession struct {
	Contract     *MsgSender        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MsgSenderCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MsgSenderCallerSession struct {
	Contract *MsgSenderCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// MsgSenderTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MsgSenderTransactorSession struct {
	Contract     *MsgSenderTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// MsgSenderRaw is an auto generated low-level Go binding around an Ethereum contract.
type MsgSenderRaw struct {
	Contract *MsgSender // Generic contract binding to access the raw methods on
}

// MsgSenderCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MsgSenderCallerRaw struct {
	Contract *MsgSenderCaller // Generic read-only contract binding to access the raw methods on
}

// MsgSenderTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MsgSenderTransactorRaw struct {
	Contract *MsgSenderTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMsgSender creates a new instance of MsgSender, bound to a specific deployed contract.
func NewMsgSender(address common.Address, backend bind.ContractBackend) (*MsgSender, error) {
	contract, err := bindMsgSender(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &MsgSender{MsgSenderCaller: MsgSenderCaller{contract: contract}, MsgSenderTransactor: MsgSenderTransactor{contract: contract}, MsgSenderFilterer: MsgSenderFilterer{contract: contract}}, nil
}

// NewMsgSenderCaller creates a new read-only instance of MsgSender, bound to a specific deployed contract.
func NewMsgSenderCaller(address common.Address, caller bind.ContractCaller) (*MsgSenderCaller, error) {
	contract, err := bindMsgSender(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MsgSenderCaller{contract: contract}, nil
}

// NewMsgSenderTransactor creates a new write-only instance of MsgSender, bound to a specific deployed contract.
func NewMsgSenderTransactor(address common.Address, transactor bind.ContractTransactor) (*MsgSenderTransactor, error) {
	contract, err := bindMsgSender(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MsgSenderTransactor{contract: contract}, nil
}

// NewMsgSenderFilterer creates a new log filterer instance of MsgSender, bound to a specific deployed contract.
func NewMsgSenderFilterer(address common.Address, filterer bind.ContractFilterer) (*MsgSenderFilterer, error) {
	contract, err := bindMsgSender(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MsgSenderFilterer{contract: contract}, nil
}

// bindMsgSender binds a generic wrapper to an already deployed contract.
func bindMsgSender(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MsgSenderMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MsgSender *MsgSenderRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MsgSender.Contract.MsgSenderCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MsgSender *MsgSenderRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MsgSender.Contract.MsgSenderTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MsgSender *MsgSenderRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MsgSender.Contract.MsgSenderTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_MsgSender *MsgSenderCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _MsgSender.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_MsgSender *MsgSenderTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _MsgSender.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_MsgSender *MsgSenderTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _MsgSender.Contract.contract.Transact(opts, method, params...)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint64)
func (_MsgSender *MsgSenderCaller) Nonce(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _MsgSender.contract.Call(opts, &out, "nonce")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint64)
func (_MsgSender *MsgSenderSession) Nonce() (uint64, error) {
	return _MsgSender.Contract.Nonce(&_MsgSender.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint64)
func (_MsgSender *MsgSenderCallerSession) Nonce() (uint64, error) {
	return _MsgSender.Contract.Nonce(&_MsgSender.CallOpts)
}

// Sent is a free data retrieval call binding the contract method 0x958c3b8d.
//
// Solidity: function sent(uint64 ) view returns(bytes32)
func (_MsgSender *MsgSenderCaller) Sent(opts *bind.CallOpts, arg0 uint64) ([32]byte, error) {
	var out []interface{}
	err := _MsgSender.contract.Call(opts, &out, "sent", arg0)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Sent is a free data retrieval call binding the contract method 0x958c3b8d.
//
// Solidity: function sent(uint64 ) view returns(bytes32)
func (_MsgSender *MsgSenderSession) Sent(arg0 uint64) ([32]byte, error) {
	return _MsgSender.Contract.Sent(&_MsgSender.CallOpts, arg0)
}

// Sent is a free data retrieval call binding the contract method 0x958c3b8d.
//
// Solidity: function sent(uint64 ) view returns(bytes32)
func (_MsgSender *MsgSenderCallerSession) Sent(arg0 uint64) ([32]byte, error) {
	return _MsgSender.Contract.Sent(&_MsgSender.CallOpts, arg0)
}

// SendMsg is a paid mutator transaction binding the contract method 0x737a3ca4.
//
// Solidity: function sendMsg(bytes _msg) returns()
func (_MsgSender *MsgSenderTransactor) SendMsg(opts *bind.TransactOpts, _msg []byte) (*types.Transaction, error) {
	return _MsgSender.contract.Transact(opts, "sendMsg", _msg)
}

// SendMsg is a paid mutator transaction binding the contract method 0x737a3ca4.
//
// Solidity: function sendMsg(bytes _msg) returns()
func (_MsgSender *MsgSenderSession) SendMsg(_msg []byte) (*types.Transaction, error) {
	return _MsgSender.Contract.SendMsg(&_MsgSender.TransactOpts, _msg)
}

// SendMsg is a paid mutator transaction binding the contract method 0x737a3ca4.
//
// Solidity: function sendMsg(bytes _msg) returns()
func (_MsgSender *MsgSenderTransactorSession) SendMsg(_msg []byte) (*types.Transaction, error) {
	return _MsgSender.Contract.SendMsg(&_MsgSender.TransactOpts, _msg)
}

// MsgSenderMsgSentIterator is returned from FilterMsgSent and is used to iterate over the raw logs and unpacked data for MsgSent events raised by the MsgSender contract.
type MsgSenderMsgSentIterator struct {
	Event *MsgSenderMsgSent // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *MsgSenderMsgSentIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(MsgSenderMsgSent)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(MsgSenderMsgSent)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *MsgSenderMsgSentIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *MsgSenderMsgSentIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// MsgSenderMsgSent represents a MsgSent event raised by the MsgSender contract.
type MsgSenderMsgSent struct {
	Nonce  uint64
	Sender common.Address
	Msg    []byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMsgSent is a free log retrieval operation binding the contract event 0xf6a47eba7434fcad087203d7461e306130fba93c290c0b4a04cc1343d14e3cda.
//
// Solidity: event MsgSent(uint64 nonce, address sender, bytes msg)
func (_MsgSender *MsgSenderFilterer) FilterMsgSent(opts *bind.FilterOpts) (*MsgSenderMsgSentIterator, error) {

	logs, sub, err := _MsgSender.contract.FilterLogs(opts, "MsgSent")
	if err != nil {
		return nil, err
	}
	return &MsgSenderMsgSentIterator{contract: _MsgSender.contract, event: "MsgSent", logs: logs, sub: sub}, nil
}

// WatchMsgSent is a free log subscription operation binding the contract event 0xf6a47eba7434fcad087203d7461e306130fba93c290c0b4a04cc1343d14e3cda.
//
// Solidity: event MsgSent(uint64 nonce, address sender, bytes msg)
func (_MsgSender *MsgSenderFilterer) WatchMsgSent(opts *bind.WatchOpts, sink chan<- *MsgSenderMsgSent) (event.Subscription, error) {

	logs, sub, err := _MsgSender.contract.WatchLogs(opts, "MsgSent")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(MsgSenderMsgSent)
				if err := _MsgSender.contract.UnpackLog(event, "MsgSent", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMsgSent is a log parse operation binding the contract event 0xf6a47eba7434fcad087203d7461e306130fba93c290c0b4a04cc1343d14e3cda.
//
// Solidity: event MsgSent(uint64 nonce, address sender, bytes msg)
func (_MsgSender *MsgSenderFilterer) ParseMsgSent(log types.Log) (*MsgSenderMsgSent, error) {
	event := new(MsgSenderMsgSent)
	if err := _MsgSender.contract.UnpackLog(event, "MsgSent", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// OwnableMetaData contains all meta data concerning the Ownable contract.
var OwnableMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
}

// OwnableABI is the input ABI used to generate the binding from.
// Deprecated: Use OwnableMetaData.ABI instead.
var OwnableABI = OwnableMetaData.ABI

// Ownable is an auto generated Go binding around an Ethereum contract.
type Ownable struct {
	OwnableCaller     // Read-only binding to the contract
	OwnableTransactor // Write-only binding to the contract
	OwnableFilterer   // Log filterer for contract events
}

// OwnableCaller is an auto generated read-only Go binding around an Ethereum contract.
type OwnableCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableTransactor is an auto generated write-only Go binding around an Ethereum contract.
type OwnableTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type OwnableFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// OwnableSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type OwnableSession struct {
	Contract     *Ownable          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// OwnableCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type OwnableCallerSession struct {
	Contract *OwnableCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// OwnableTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type OwnableTransactorSession struct {
	Contract     *OwnableTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// OwnableRaw is an auto generated low-level Go binding around an Ethereum contract.
type OwnableRaw struct {
	Contract *Ownable // Generic contract binding to access the raw methods on
}

// OwnableCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type OwnableCallerRaw struct {
	Contract *OwnableCaller // Generic read-only contract binding to access the raw methods on
}

// OwnableTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type OwnableTransactorRaw struct {
	Contract *OwnableTransactor // Generic write-only contract binding to access the raw methods on
}

// NewOwnable creates a new instance of Ownable, bound to a specific deployed contract.
func NewOwnable(address common.Address, backend bind.ContractBackend) (*Ownable, error) {
	contract, err := bindOwnable(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Ownable{OwnableCaller: OwnableCaller{contract: contract}, OwnableTransactor: OwnableTransactor{contract: contract}, OwnableFilterer: OwnableFilterer{contract: contract}}, nil
}

// NewOwnableCaller creates a new read-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableCaller(address common.Address, caller bind.ContractCaller) (*OwnableCaller, error) {
	contract, err := bindOwnable(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableCaller{contract: contract}, nil
}

// NewOwnableTransactor creates a new write-only instance of Ownable, bound to a specific deployed contract.
func NewOwnableTransactor(address common.Address, transactor bind.ContractTransactor) (*OwnableTransactor, error) {
	contract, err := bindOwnable(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &OwnableTransactor{contract: contract}, nil
}

// NewOwnableFilterer creates a new log filterer instance of Ownable, bound to a specific deployed contract.
func NewOwnableFilterer(address common.Address, filterer bind.ContractFilterer) (*OwnableFilterer, error) {
	contract, err := bindOwnable(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &OwnableFilterer{contract: contract}, nil
}

// bindOwnable binds a generic wrapper to an already deployed contract.
func bindOwnable(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := OwnableMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ownable *OwnableRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Ownable.Contract.OwnableCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ownable *OwnableRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.Contract.OwnableTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ownable *OwnableRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ownable.Contract.OwnableTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Ownable *OwnableCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Ownable.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Ownable *OwnableTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Ownable *OwnableTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Ownable.Contract.contract.Transact(opts, method, params...)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Ownable.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableSession) Owner() (common.Address, error) {
	return _Ownable.Contract.Owner(&_Ownable.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Ownable *OwnableCallerSession) Owner() (common.Address, error) {
	return _Ownable.Contract.Owner(&_Ownable.CallOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ownable *OwnableTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ownable *OwnableSession) RenounceOwnership() (*types.Transaction, error) {
	return _Ownable.Contract.RenounceOwnership(&_Ownable.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Ownable *OwnableTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Ownable.Contract.RenounceOwnership(&_Ownable.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferOwnership(&_Ownable.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Ownable *OwnableTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Ownable.Contract.TransferOwnership(&_Ownable.TransactOpts, newOwner)
}

// OwnableOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Ownable contract.
type OwnableOwnershipTransferredIterator struct {
	Event *OwnableOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *OwnableOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(OwnableOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(OwnableOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *OwnableOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *OwnableOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// OwnableOwnershipTransferred represents a OwnershipTransferred event raised by the Ownable contract.
type OwnableOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Ownable *OwnableFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*OwnableOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Ownable.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &OwnableOwnershipTransferredIterator{contract: _Ownable.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Ownable *OwnableFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *OwnableOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Ownable.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(OwnableOwnershipTransferred)
				if err := _Ownable.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Ownable *OwnableFilterer) ParseOwnershipTransferred(log types.Log) (*OwnableOwnershipTransferred, error) {
	event := new(OwnableOwnershipTransferred)
	if err := _Ownable.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PairingMetaData contains all meta data concerning the Pairing contract.
var PairingMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220e463e256375063dc24295796d99d942be33aeac860b10408070f6446a831d1c464736f6c63430008150033",
}

// PairingABI is the input ABI used to generate the binding from.
// Deprecated: Use PairingMetaData.ABI instead.
var PairingABI = PairingMetaData.ABI

// PairingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PairingMetaData.Bin instead.
var PairingBin = PairingMetaData.Bin

// DeployPairing deploys a new Ethereum contract, binding an instance of Pairing to it.
func DeployPairing(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Pairing, error) {
	parsed, err := PairingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PairingBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Pairing{PairingCaller: PairingCaller{contract: contract}, PairingTransactor: PairingTransactor{contract: contract}, PairingFilterer: PairingFilterer{contract: contract}}, nil
}

// Pairing is an auto generated Go binding around an Ethereum contract.
type Pairing struct {
	PairingCaller     // Read-only binding to the contract
	PairingTransactor // Write-only binding to the contract
	PairingFilterer   // Log filterer for contract events
}

// PairingCaller is an auto generated read-only Go binding around an Ethereum contract.
type PairingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PairingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PairingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PairingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PairingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PairingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PairingSession struct {
	Contract     *Pairing          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PairingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PairingCallerSession struct {
	Contract *PairingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// PairingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PairingTransactorSession struct {
	Contract     *PairingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// PairingRaw is an auto generated low-level Go binding around an Ethereum contract.
type PairingRaw struct {
	Contract *Pairing // Generic contract binding to access the raw methods on
}

// PairingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PairingCallerRaw struct {
	Contract *PairingCaller // Generic read-only contract binding to access the raw methods on
}

// PairingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PairingTransactorRaw struct {
	Contract *PairingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPairing creates a new instance of Pairing, bound to a specific deployed contract.
func NewPairing(address common.Address, backend bind.ContractBackend) (*Pairing, error) {
	contract, err := bindPairing(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Pairing{PairingCaller: PairingCaller{contract: contract}, PairingTransactor: PairingTransactor{contract: contract}, PairingFilterer: PairingFilterer{contract: contract}}, nil
}

// NewPairingCaller creates a new read-only instance of Pairing, bound to a specific deployed contract.
func NewPairingCaller(address common.Address, caller bind.ContractCaller) (*PairingCaller, error) {
	contract, err := bindPairing(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PairingCaller{contract: contract}, nil
}

// NewPairingTransactor creates a new write-only instance of Pairing, bound to a specific deployed contract.
func NewPairingTransactor(address common.Address, transactor bind.ContractTransactor) (*PairingTransactor, error) {
	contract, err := bindPairing(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PairingTransactor{contract: contract}, nil
}

// NewPairingFilterer creates a new log filterer instance of Pairing, bound to a specific deployed contract.
func NewPairingFilterer(address common.Address, filterer bind.ContractFilterer) (*PairingFilterer, error) {
	contract, err := bindPairing(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PairingFilterer{contract: contract}, nil
}

// bindPairing binds a generic wrapper to an already deployed contract.
func bindPairing(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PairingMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Pairing *PairingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Pairing.Contract.PairingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Pairing *PairingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pairing.Contract.PairingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Pairing *PairingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Pairing.Contract.PairingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Pairing *PairingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Pairing.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Pairing *PairingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pairing.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Pairing *PairingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Pairing.Contract.contract.Transact(opts, method, params...)
}

// PathMetaData contains all meta data concerning the Path contract.
var PathMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220c839072fb36d91ecdfaf73e442bcdd0bd3c1adb1649f5321dd20d9dbb12e738664736f6c63430008150033",
}

// PathABI is the input ABI used to generate the binding from.
// Deprecated: Use PathMetaData.ABI instead.
var PathABI = PathMetaData.ABI

// PathBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PathMetaData.Bin instead.
var PathBin = PathMetaData.Bin

// DeployPath deploys a new Ethereum contract, binding an instance of Path to it.
func DeployPath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Path, error) {
	parsed, err := PathMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Path{PathCaller: PathCaller{contract: contract}, PathTransactor: PathTransactor{contract: contract}, PathFilterer: PathFilterer{contract: contract}}, nil
}

// Path is an auto generated Go binding around an Ethereum contract.
type Path struct {
	PathCaller     // Read-only binding to the contract
	PathTransactor // Write-only binding to the contract
	PathFilterer   // Log filterer for contract events
}

// PathCaller is an auto generated read-only Go binding around an Ethereum contract.
type PathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PathSession struct {
	Contract     *Path             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PathCallerSession struct {
	Contract *PathCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// PathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PathTransactorSession struct {
	Contract     *PathTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PathRaw is an auto generated low-level Go binding around an Ethereum contract.
type PathRaw struct {
	Contract *Path // Generic contract binding to access the raw methods on
}

// PathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PathCallerRaw struct {
	Contract *PathCaller // Generic read-only contract binding to access the raw methods on
}

// PathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PathTransactorRaw struct {
	Contract *PathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPath creates a new instance of Path, bound to a specific deployed contract.
func NewPath(address common.Address, backend bind.ContractBackend) (*Path, error) {
	contract, err := bindPath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Path{PathCaller: PathCaller{contract: contract}, PathTransactor: PathTransactor{contract: contract}, PathFilterer: PathFilterer{contract: contract}}, nil
}

// NewPathCaller creates a new read-only instance of Path, bound to a specific deployed contract.
func NewPathCaller(address common.Address, caller bind.ContractCaller) (*PathCaller, error) {
	contract, err := bindPath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PathCaller{contract: contract}, nil
}

// NewPathTransactor creates a new write-only instance of Path, bound to a specific deployed contract.
func NewPathTransactor(address common.Address, transactor bind.ContractTransactor) (*PathTransactor, error) {
	contract, err := bindPath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PathTransactor{contract: contract}, nil
}

// NewPathFilterer creates a new log filterer instance of Path, bound to a specific deployed contract.
func NewPathFilterer(address common.Address, filterer bind.ContractFilterer) (*PathFilterer, error) {
	contract, err := bindPath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PathFilterer{contract: contract}, nil
}

// bindPath binds a generic wrapper to an already deployed contract.
func bindPath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PathMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Path *PathRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Path.Contract.PathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Path *PathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Path.Contract.PathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Path *PathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Path.Contract.PathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Path *PathCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Path.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Path *PathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Path.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Path *PathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Path.Contract.contract.Transact(opts, method, params...)
}

// PegBridgeMetaData contains all meta data concerning the PegBridge contract.
var PegBridgeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIMessageBridge\",\"name\":\"_messageBridge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pegToken\",\"type\":\"address\"}],\"name\":\"BridgeTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vaultToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pegToken\",\"type\":\"address\"}],\"name\":\"BridgeTokenDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"burnId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burnAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MinBurnUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"mintId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"refId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_toChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_withdrawAccount\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pegTokens\",\"type\":\"address[]\"}],\"name\":\"deletePegTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vaultTokens\",\"type\":\"address[]\"}],\"name\":\"deleteVaultTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"executeMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBridge\",\"outputs\":[{\"internalType\":\"contractIMessageBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pegToVaultTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"records\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vaultTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_pegTokens\",\"type\":\"address[]\"}],\"name\":\"setBridgeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setMinBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_vaultChain\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_vaultAddress\",\"type\":\"address\"}],\"name\":\"setTokenVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supplies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultChain\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultToPegTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6080346100a657601f61133438819003918201601f19168301916001600160401b038311848410176100aa578084926020946040528339810103126100a657516001600160a01b0390818116908190036100a65760018060a01b031990815f5416175f55600154903390821617600155604051913391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a361127590816100bf8239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f90813560e01c90816301e6472514610fa55750806304a2cbd014610f2b5780630745fcce14610e3a578063274cee3114610e0257806332eb41f614610dda57806333a42db114610db457806340b6cc3414610ccf578063430bf08a14610ca5578063715018a614610c465780637f85601314610c0e5780638da5cb5b14610be757806390fc2e2514610bac578063a00293011461075e578063a93ce09914610644578063aec95a14146102d5578063bf4816f0146101ff578063f2fde38b146101215763fdbcd5db146100e4575f80fd5b3461011e57602036600319011261011e5760209060406001600160a01b03918261010c611002565b16815260048452205416604051908152f35b80fd5b503461011e57602036600319011261011e5761013b611002565b600154906001600160a01b038083169161015633841461113a565b16918215610194576001600160a01b03191682176001557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b503461011e5761020e3661105f565b90916001600160a01b03936102288560015416331461113a565b610233838314611185565b855b828110610240578680f35b8061024f6102d09286886111f3565b358761026461025f8488886111f3565b611217565b168952600660205260408920557f3796cd0b17a8734f8da819920625598e9a18be490f686725282e5383f1d066836102a061025f8387876111f3565b6102ab83888a6111f3565b604080516001600160a01b03909316835290356020830152819081015b0390a16111d1565b610235565b503461011e57608036600319011261011e576102ef610fd1565b906102f8610fec565b9160449283359067ffffffffffffffff80831161064057366023840112156106405782600401359181831161063c5760249284019136848401116106385761033e611018565b506001600160a01b03958688541633036105f557600754918083169116036105b25760401c85169085160361056f578260a091031261056b5761038281830161122b565b9480830135906103946064850161122b565b9660a46103a36084870161122b565b9501359386808a169216885260209860048a526040892054908882169485156105295750604051908b8201926bffffffffffffffffffffffff199182809260601b16855288603485015260601b1660548301528860601b16606882015286607c8201523060601b609c8201526090815261041c816110d2565b5190209788815260028a5261043860ff604083205416156110ee565b88815260028a5260408120805460ff19166001179055833b1561011e576040516340c10f1960e01b81526001600160a01b038416600482015260248101869052818160448183895af1801561051e5761050f575b509083825260038a5260408220908154928684018094116104fe578b7f317276091e0f98226fe28cd525f29e0b1c7b3edd91bf9f85e5f0aba596074ac960c08d8d8d8d8d8d8d8d8d55604051968752898701526040860152606085015260808401521660a0820152a160405160018152f35b634e487b7160e01b81526011600452fd5b610518906110aa565b5f61048c565b6040513d84823e3d90fd5b8b7f6e6f2070656720746f6b656e0000000000000000000000000000000000000000606492600c876040519462461bcd60e51b86526004860152840152820152fd5b8380fd5b60405162461bcd60e51b8152602060048201526019818401527f73656e646572206973206e6f7420746f6b656e207661756c740000000000000081880152606490fd5b60405162461bcd60e51b8152602060048201526014818601527f6e6f742066726f6d207661756c7420636861696e000000000000000000000000818a0152606490fd5b60405162461bcd60e51b815260206004820152601c818701527f63616c6c6572206973206e6f74206d6573736167652062726964676500000000818b0152606490fd5b8680fd5b8580fd5b8480fd5b503461011e576106533661105f565b91926001600160a01b039361066d8560015416331461113a565b610678848214611185565b855b818110610685578680f35b8061069761025f6107599388886111f3565b876106a661025f8487896111f3565b1689526020906004825260408a20896001600160a01b031992168282541617905560056106d761025f85888a6111f3565b928a6106e761025f878d8d6111f3565b168c52528860408b209216908254161790557feabeda8c7848101043c4c7d8a980cbc9078963ea815cd1cdfcab1dfdc80eb91161072861025f8386886111f3565b61073661025f848a8a6111f3565b604080516001600160a01b039384168152929091166020830152819081016102c8565b61067a565b503461011e5760a036600319011261011e57610778611002565b9067ffffffffffffffff604435166044350361011e57610796611018565b67ffffffffffffffff6084351660843503610ba8576001600160a01b0383168252600660205260408220546024351115610b63576001600160a01b038316825260056020526001600160a01b03604083205416928315610b1e576001600160a01b0381168352600360205260408320805480602435810311610b0a57602435900390556040513360601b60208201526bffffffffffffffffffffffff198260601b16603482015260243560488201526001600160c01b031960443560c01b1660688201526bffffffffffffffffffffffff198360601b1660708201526001600160c01b031960843560c01b1660848201526001600160c01b03194660c01b16608c8201523060601b6094820152608881526108b0816110d2565b602081519101209182845260026020526108d160ff604086205416156110ee565b828452600260205260408420600160ff1982541617905560405194602086015260243560408601526001600160a01b03811660608601523360808601528260a086015260a08552610921856110d2565b6001600160a01b0360075460401c166001600160a01b0385541660405191635c85c1a960e11b835267ffffffffffffffff6044351660048401526024830152606060448301528651806064840152865b818110610af457508280928189608482868383602099601f9c0101528919998a91011681010301925af1918215610ae9578692610a8b575b50507f1b4b8f452b18b4a267e27ea158479a8124cef2cd93a0d59309667a8e933ab2859160e0916001600160a01b03604051928784523360208501528187166040850152602435606085015216608083015267ffffffffffffffff6084351660a083015260c0820152a16001600160a01b0381163b15610a875760405163079cc67960e41b815233600482015260248035908201529083908290604490829084906001600160a01b03165af18015610a7c5760209350610a6d575b50604051908152f35b610a76906110aa565b82610a64565b6040513d85823e3d90fd5b8280fd5b9091506020903d602011610ae1575b601f820116820182811067ffffffffffffffff821117610acd5760209183916040528101031261064057518160e06109a9565b634e487b7160e01b87526041600452602487fd5b3d9150610a9a565b6040513d88823e3d90fd5b80602080928b0101516084828701015201610971565b634e487b7160e01b85526011600452602485fd5b60405162461bcd60e51b815260206004820152600e60248201527f6e6f207661756c7420746f6b656e0000000000000000000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201527f616d6f756e7420746f6f20736d616c6c000000000000000000000000000000006044820152606490fd5b5080fd5b503461011e57602036600319011261011e5760209060406001600160a01b039182610bd5611002565b16815260058452205416604051908152f35b503461011e578060031936011261011e5760206001600160a01b0360015416604051908152f35b503461011e57602036600319011261011e5760406020916001600160a01b03610c35611002565b168152600683522054604051908152f35b503461011e578060031936011261011e57806001546001600160a01b03196001600160a01b03821691610c7a33841461113a565b166001557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461011e578060031936011261011e5760206001600160a01b0360075460401c16604051908152f35b503461011e57602080600319360112610ba85760043567ffffffffffffffff8111610a8757610d0290369060040161102e565b6001600160a01b0392919290610d1d8260015416331461113a565b845b818110610d2a578580f35b807f2ff7cbe4f1f12bb7d93999c06304c58410c46ebb8ddbcba627d52d93a6aaffb1610d5d61025f610daf94868a6111f3565b8086168952600487526040808a2080546001600160a01b03198082169092558816808c5260058a52828c20805490921690915581516001600160a01b03938416815292166020830152819081016102c8565b610d1f565b503461011e578060031936011261011e576001600160a01b036020915416604051908152f35b503461011e578060031936011261011e57602067ffffffffffffffff60075416604051908152f35b503461011e57602036600319011261011e5760406020916001600160a01b03610e29611002565b168152600383522054604051908152f35b503461011e57602080600319360112610ba85760043567ffffffffffffffff8111610a8757610e6d90369060040161102e565b6001600160a01b0392919290610e888260015416331461113a565b845b818110610e95578580f35b807f2ff7cbe4f1f12bb7d93999c06304c58410c46ebb8ddbcba627d52d93a6aaffb1610ec861025f610f2694868a6111f3565b808616808a5260058089526040808c20548916808d5260048b52818d2080546001600160a01b0319908116909155938d52918a52808c20805490931690925581516001600160a01b03918216815292166020830152819081016102c8565b610e8a565b503461011e57604036600319011261011e57610f45610fd1565b610f4d610fec565b610f636001600160a01b0360015416331461113a565b67ffffffffffffffff7bffffffffffffffffffffffffffffffffffffffff00000000000000006007549260401b1692169063ffffffff60e01b16171760075580f35b905034610ba8576020366003190112610ba85760ff604060209360043581526002855220541615158152f35b6004359067ffffffffffffffff82168203610fe857565b5f80fd5b602435906001600160a01b0382168203610fe857565b600435906001600160a01b0382168203610fe857565b606435906001600160a01b0382168203610fe857565b9181601f84011215610fe85782359167ffffffffffffffff8311610fe8576020808501948460051b010111610fe857565b6040600319820112610fe85767ffffffffffffffff91600435838111610fe8578261108c9160040161102e565b93909392602435918211610fe8576110a69160040161102e565b9091565b67ffffffffffffffff81116110be57604052565b634e487b7160e01b5f52604160045260245ffd5b60c0810190811067ffffffffffffffff8211176110be57604052565b156110f557565b60405162461bcd60e51b815260206004820152600d60248201527f7265636f726420657869737473000000000000000000000000000000000000006044820152606490fd5b1561114157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b1561118c57565b60405162461bcd60e51b815260206004820152600f60248201527f6c656e677468206d69736d6174636800000000000000000000000000000000006044820152606490fd5b5f1981146111df5760010190565b634e487b7160e01b5f52601160045260245ffd5b91908110156112035760051b0190565b634e487b7160e01b5f52603260045260245ffd5b356001600160a01b0381168103610fe85790565b35906001600160a01b0382168203610fe85756fea264697066735822122058919094241402ac4252de944a53e1244dbe4632c2969bf098972197dc037ddc64736f6c63430008150033",
}

// PegBridgeABI is the input ABI used to generate the binding from.
// Deprecated: Use PegBridgeMetaData.ABI instead.
var PegBridgeABI = PegBridgeMetaData.ABI

// PegBridgeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PegBridgeMetaData.Bin instead.
var PegBridgeBin = PegBridgeMetaData.Bin

// DeployPegBridge deploys a new Ethereum contract, binding an instance of PegBridge to it.
func DeployPegBridge(auth *bind.TransactOpts, backend bind.ContractBackend, _messageBridge common.Address) (common.Address, *types.Transaction, *PegBridge, error) {
	parsed, err := PegBridgeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PegBridgeBin), backend, _messageBridge)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PegBridge{PegBridgeCaller: PegBridgeCaller{contract: contract}, PegBridgeTransactor: PegBridgeTransactor{contract: contract}, PegBridgeFilterer: PegBridgeFilterer{contract: contract}}, nil
}

// PegBridge is an auto generated Go binding around an Ethereum contract.
type PegBridge struct {
	PegBridgeCaller     // Read-only binding to the contract
	PegBridgeTransactor // Write-only binding to the contract
	PegBridgeFilterer   // Log filterer for contract events
}

// PegBridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type PegBridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PegBridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PegBridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PegBridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PegBridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PegBridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PegBridgeSession struct {
	Contract     *PegBridge        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PegBridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PegBridgeCallerSession struct {
	Contract *PegBridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// PegBridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PegBridgeTransactorSession struct {
	Contract     *PegBridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// PegBridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type PegBridgeRaw struct {
	Contract *PegBridge // Generic contract binding to access the raw methods on
}

// PegBridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PegBridgeCallerRaw struct {
	Contract *PegBridgeCaller // Generic read-only contract binding to access the raw methods on
}

// PegBridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PegBridgeTransactorRaw struct {
	Contract *PegBridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPegBridge creates a new instance of PegBridge, bound to a specific deployed contract.
func NewPegBridge(address common.Address, backend bind.ContractBackend) (*PegBridge, error) {
	contract, err := bindPegBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PegBridge{PegBridgeCaller: PegBridgeCaller{contract: contract}, PegBridgeTransactor: PegBridgeTransactor{contract: contract}, PegBridgeFilterer: PegBridgeFilterer{contract: contract}}, nil
}

// NewPegBridgeCaller creates a new read-only instance of PegBridge, bound to a specific deployed contract.
func NewPegBridgeCaller(address common.Address, caller bind.ContractCaller) (*PegBridgeCaller, error) {
	contract, err := bindPegBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PegBridgeCaller{contract: contract}, nil
}

// NewPegBridgeTransactor creates a new write-only instance of PegBridge, bound to a specific deployed contract.
func NewPegBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*PegBridgeTransactor, error) {
	contract, err := bindPegBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PegBridgeTransactor{contract: contract}, nil
}

// NewPegBridgeFilterer creates a new log filterer instance of PegBridge, bound to a specific deployed contract.
func NewPegBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*PegBridgeFilterer, error) {
	contract, err := bindPegBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PegBridgeFilterer{contract: contract}, nil
}

// bindPegBridge binds a generic wrapper to an already deployed contract.
func bindPegBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PegBridgeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PegBridge *PegBridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PegBridge.Contract.PegBridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PegBridge *PegBridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PegBridge.Contract.PegBridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PegBridge *PegBridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PegBridge.Contract.PegBridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PegBridge *PegBridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PegBridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PegBridge *PegBridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PegBridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PegBridge *PegBridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PegBridge.Contract.contract.Transact(opts, method, params...)
}

// MessageBridge is a free data retrieval call binding the contract method 0x33a42db1.
//
// Solidity: function messageBridge() view returns(address)
func (_PegBridge *PegBridgeCaller) MessageBridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PegBridge.contract.Call(opts, &out, "messageBridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MessageBridge is a free data retrieval call binding the contract method 0x33a42db1.
//
// Solidity: function messageBridge() view returns(address)
func (_PegBridge *PegBridgeSession) MessageBridge() (common.Address, error) {
	return _PegBridge.Contract.MessageBridge(&_PegBridge.CallOpts)
}

// MessageBridge is a free data retrieval call binding the contract method 0x33a42db1.
//
// Solidity: function messageBridge() view returns(address)
func (_PegBridge *PegBridgeCallerSession) MessageBridge() (common.Address, error) {
	return _PegBridge.Contract.MessageBridge(&_PegBridge.CallOpts)
}

// MinBurn is a free data retrieval call binding the contract method 0x7f856013.
//
// Solidity: function minBurn(address ) view returns(uint256)
func (_PegBridge *PegBridgeCaller) MinBurn(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _PegBridge.contract.Call(opts, &out, "minBurn", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinBurn is a free data retrieval call binding the contract method 0x7f856013.
//
// Solidity: function minBurn(address ) view returns(uint256)
func (_PegBridge *PegBridgeSession) MinBurn(arg0 common.Address) (*big.Int, error) {
	return _PegBridge.Contract.MinBurn(&_PegBridge.CallOpts, arg0)
}

// MinBurn is a free data retrieval call binding the contract method 0x7f856013.
//
// Solidity: function minBurn(address ) view returns(uint256)
func (_PegBridge *PegBridgeCallerSession) MinBurn(arg0 common.Address) (*big.Int, error) {
	return _PegBridge.Contract.MinBurn(&_PegBridge.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PegBridge *PegBridgeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PegBridge.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PegBridge *PegBridgeSession) Owner() (common.Address, error) {
	return _PegBridge.Contract.Owner(&_PegBridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PegBridge *PegBridgeCallerSession) Owner() (common.Address, error) {
	return _PegBridge.Contract.Owner(&_PegBridge.CallOpts)
}

// PegToVaultTokens is a free data retrieval call binding the contract method 0x90fc2e25.
//
// Solidity: function pegToVaultTokens(address ) view returns(address)
func (_PegBridge *PegBridgeCaller) PegToVaultTokens(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _PegBridge.contract.Call(opts, &out, "pegToVaultTokens", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PegToVaultTokens is a free data retrieval call binding the contract method 0x90fc2e25.
//
// Solidity: function pegToVaultTokens(address ) view returns(address)
func (_PegBridge *PegBridgeSession) PegToVaultTokens(arg0 common.Address) (common.Address, error) {
	return _PegBridge.Contract.PegToVaultTokens(&_PegBridge.CallOpts, arg0)
}

// PegToVaultTokens is a free data retrieval call binding the contract method 0x90fc2e25.
//
// Solidity: function pegToVaultTokens(address ) view returns(address)
func (_PegBridge *PegBridgeCallerSession) PegToVaultTokens(arg0 common.Address) (common.Address, error) {
	return _PegBridge.Contract.PegToVaultTokens(&_PegBridge.CallOpts, arg0)
}

// Records is a free data retrieval call binding the contract method 0x01e64725.
//
// Solidity: function records(bytes32 ) view returns(bool)
func (_PegBridge *PegBridgeCaller) Records(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _PegBridge.contract.Call(opts, &out, "records", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Records is a free data retrieval call binding the contract method 0x01e64725.
//
// Solidity: function records(bytes32 ) view returns(bool)
func (_PegBridge *PegBridgeSession) Records(arg0 [32]byte) (bool, error) {
	return _PegBridge.Contract.Records(&_PegBridge.CallOpts, arg0)
}

// Records is a free data retrieval call binding the contract method 0x01e64725.
//
// Solidity: function records(bytes32 ) view returns(bool)
func (_PegBridge *PegBridgeCallerSession) Records(arg0 [32]byte) (bool, error) {
	return _PegBridge.Contract.Records(&_PegBridge.CallOpts, arg0)
}

// Supplies is a free data retrieval call binding the contract method 0x274cee31.
//
// Solidity: function supplies(address ) view returns(uint256)
func (_PegBridge *PegBridgeCaller) Supplies(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _PegBridge.contract.Call(opts, &out, "supplies", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Supplies is a free data retrieval call binding the contract method 0x274cee31.
//
// Solidity: function supplies(address ) view returns(uint256)
func (_PegBridge *PegBridgeSession) Supplies(arg0 common.Address) (*big.Int, error) {
	return _PegBridge.Contract.Supplies(&_PegBridge.CallOpts, arg0)
}

// Supplies is a free data retrieval call binding the contract method 0x274cee31.
//
// Solidity: function supplies(address ) view returns(uint256)
func (_PegBridge *PegBridgeCallerSession) Supplies(arg0 common.Address) (*big.Int, error) {
	return _PegBridge.Contract.Supplies(&_PegBridge.CallOpts, arg0)
}

// VaultAddress is a free data retrieval call binding the contract method 0x430bf08a.
//
// Solidity: function vaultAddress() view returns(address)
func (_PegBridge *PegBridgeCaller) VaultAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PegBridge.contract.Call(opts, &out, "vaultAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VaultAddress is a free data retrieval call binding the contract method 0x430bf08a.
//
// Solidity: function vaultAddress() view returns(address)
func (_PegBridge *PegBridgeSession) VaultAddress() (common.Address, error) {
	return _PegBridge.Contract.VaultAddress(&_PegBridge.CallOpts)
}

// VaultAddress is a free data retrieval call binding the contract method 0x430bf08a.
//
// Solidity: function vaultAddress() view returns(address)
func (_PegBridge *PegBridgeCallerSession) VaultAddress() (common.Address, error) {
	return _PegBridge.Contract.VaultAddress(&_PegBridge.CallOpts)
}

// VaultChain is a free data retrieval call binding the contract method 0x32eb41f6.
//
// Solidity: function vaultChain() view returns(uint64)
func (_PegBridge *PegBridgeCaller) VaultChain(opts *bind.CallOpts) (uint64, error) {
	var out []interface{}
	err := _PegBridge.contract.Call(opts, &out, "vaultChain")

	if err != nil {
		return *new(uint64), err
	}

	out0 := *abi.ConvertType(out[0], new(uint64)).(*uint64)

	return out0, err

}

// VaultChain is a free data retrieval call binding the contract method 0x32eb41f6.
//
// Solidity: function vaultChain() view returns(uint64)
func (_PegBridge *PegBridgeSession) VaultChain() (uint64, error) {
	return _PegBridge.Contract.VaultChain(&_PegBridge.CallOpts)
}

// VaultChain is a free data retrieval call binding the contract method 0x32eb41f6.
//
// Solidity: function vaultChain() view returns(uint64)
func (_PegBridge *PegBridgeCallerSession) VaultChain() (uint64, error) {
	return _PegBridge.Contract.VaultChain(&_PegBridge.CallOpts)
}

// VaultToPegTokens is a free data retrieval call binding the contract method 0xfdbcd5db.
//
// Solidity: function vaultToPegTokens(address ) view returns(address)
func (_PegBridge *PegBridgeCaller) VaultToPegTokens(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _PegBridge.contract.Call(opts, &out, "vaultToPegTokens", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VaultToPegTokens is a free data retrieval call binding the contract method 0xfdbcd5db.
//
// Solidity: function vaultToPegTokens(address ) view returns(address)
func (_PegBridge *PegBridgeSession) VaultToPegTokens(arg0 common.Address) (common.Address, error) {
	return _PegBridge.Contract.VaultToPegTokens(&_PegBridge.CallOpts, arg0)
}

// VaultToPegTokens is a free data retrieval call binding the contract method 0xfdbcd5db.
//
// Solidity: function vaultToPegTokens(address ) view returns(address)
func (_PegBridge *PegBridgeCallerSession) VaultToPegTokens(arg0 common.Address) (common.Address, error) {
	return _PegBridge.Contract.VaultToPegTokens(&_PegBridge.CallOpts, arg0)
}

// Burn is a paid mutator transaction binding the contract method 0xa0029301.
//
// Solidity: function burn(address _token, uint256 _amount, uint64 _toChainId, address _withdrawAccount, uint64 _nonce) returns(bytes32)
func (_PegBridge *PegBridgeTransactor) Burn(opts *bind.TransactOpts, _token common.Address, _amount *big.Int, _toChainId uint64, _withdrawAccount common.Address, _nonce uint64) (*types.Transaction, error) {
	return _PegBridge.contract.Transact(opts, "burn", _token, _amount, _toChainId, _withdrawAccount, _nonce)
}

// Burn is a paid mutator transaction binding the contract method 0xa0029301.
//
// Solidity: function burn(address _token, uint256 _amount, uint64 _toChainId, address _withdrawAccount, uint64 _nonce) returns(bytes32)
func (_PegBridge *PegBridgeSession) Burn(_token common.Address, _amount *big.Int, _toChainId uint64, _withdrawAccount common.Address, _nonce uint64) (*types.Transaction, error) {
	return _PegBridge.Contract.Burn(&_PegBridge.TransactOpts, _token, _amount, _toChainId, _withdrawAccount, _nonce)
}

// Burn is a paid mutator transaction binding the contract method 0xa0029301.
//
// Solidity: function burn(address _token, uint256 _amount, uint64 _toChainId, address _withdrawAccount, uint64 _nonce) returns(bytes32)
func (_PegBridge *PegBridgeTransactorSession) Burn(_token common.Address, _amount *big.Int, _toChainId uint64, _withdrawAccount common.Address, _nonce uint64) (*types.Transaction, error) {
	return _PegBridge.Contract.Burn(&_PegBridge.TransactOpts, _token, _amount, _toChainId, _withdrawAccount, _nonce)
}

// DeletePegTokens is a paid mutator transaction binding the contract method 0x0745fcce.
//
// Solidity: function deletePegTokens(address[] _pegTokens) returns()
func (_PegBridge *PegBridgeTransactor) DeletePegTokens(opts *bind.TransactOpts, _pegTokens []common.Address) (*types.Transaction, error) {
	return _PegBridge.contract.Transact(opts, "deletePegTokens", _pegTokens)
}

// DeletePegTokens is a paid mutator transaction binding the contract method 0x0745fcce.
//
// Solidity: function deletePegTokens(address[] _pegTokens) returns()
func (_PegBridge *PegBridgeSession) DeletePegTokens(_pegTokens []common.Address) (*types.Transaction, error) {
	return _PegBridge.Contract.DeletePegTokens(&_PegBridge.TransactOpts, _pegTokens)
}

// DeletePegTokens is a paid mutator transaction binding the contract method 0x0745fcce.
//
// Solidity: function deletePegTokens(address[] _pegTokens) returns()
func (_PegBridge *PegBridgeTransactorSession) DeletePegTokens(_pegTokens []common.Address) (*types.Transaction, error) {
	return _PegBridge.Contract.DeletePegTokens(&_PegBridge.TransactOpts, _pegTokens)
}

// DeleteVaultTokens is a paid mutator transaction binding the contract method 0x40b6cc34.
//
// Solidity: function deleteVaultTokens(address[] _vaultTokens) returns()
func (_PegBridge *PegBridgeTransactor) DeleteVaultTokens(opts *bind.TransactOpts, _vaultTokens []common.Address) (*types.Transaction, error) {
	return _PegBridge.contract.Transact(opts, "deleteVaultTokens", _vaultTokens)
}

// DeleteVaultTokens is a paid mutator transaction binding the contract method 0x40b6cc34.
//
// Solidity: function deleteVaultTokens(address[] _vaultTokens) returns()
func (_PegBridge *PegBridgeSession) DeleteVaultTokens(_vaultTokens []common.Address) (*types.Transaction, error) {
	return _PegBridge.Contract.DeleteVaultTokens(&_PegBridge.TransactOpts, _vaultTokens)
}

// DeleteVaultTokens is a paid mutator transaction binding the contract method 0x40b6cc34.
//
// Solidity: function deleteVaultTokens(address[] _vaultTokens) returns()
func (_PegBridge *PegBridgeTransactorSession) DeleteVaultTokens(_vaultTokens []common.Address) (*types.Transaction, error) {
	return _PegBridge.Contract.DeleteVaultTokens(&_PegBridge.TransactOpts, _vaultTokens)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0xaec95a14.
//
// Solidity: function executeMessage(uint64 srcChainId, address sender, bytes message, address executor) returns(bool)
func (_PegBridge *PegBridgeTransactor) ExecuteMessage(opts *bind.TransactOpts, srcChainId uint64, sender common.Address, message []byte, executor common.Address) (*types.Transaction, error) {
	return _PegBridge.contract.Transact(opts, "executeMessage", srcChainId, sender, message, executor)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0xaec95a14.
//
// Solidity: function executeMessage(uint64 srcChainId, address sender, bytes message, address executor) returns(bool)
func (_PegBridge *PegBridgeSession) ExecuteMessage(srcChainId uint64, sender common.Address, message []byte, executor common.Address) (*types.Transaction, error) {
	return _PegBridge.Contract.ExecuteMessage(&_PegBridge.TransactOpts, srcChainId, sender, message, executor)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0xaec95a14.
//
// Solidity: function executeMessage(uint64 srcChainId, address sender, bytes message, address executor) returns(bool)
func (_PegBridge *PegBridgeTransactorSession) ExecuteMessage(srcChainId uint64, sender common.Address, message []byte, executor common.Address) (*types.Transaction, error) {
	return _PegBridge.Contract.ExecuteMessage(&_PegBridge.TransactOpts, srcChainId, sender, message, executor)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PegBridge *PegBridgeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PegBridge.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PegBridge *PegBridgeSession) RenounceOwnership() (*types.Transaction, error) {
	return _PegBridge.Contract.RenounceOwnership(&_PegBridge.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PegBridge *PegBridgeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _PegBridge.Contract.RenounceOwnership(&_PegBridge.TransactOpts)
}

// SetBridgeTokens is a paid mutator transaction binding the contract method 0xa93ce099.
//
// Solidity: function setBridgeTokens(address[] _vaultTokens, address[] _pegTokens) returns()
func (_PegBridge *PegBridgeTransactor) SetBridgeTokens(opts *bind.TransactOpts, _vaultTokens []common.Address, _pegTokens []common.Address) (*types.Transaction, error) {
	return _PegBridge.contract.Transact(opts, "setBridgeTokens", _vaultTokens, _pegTokens)
}

// SetBridgeTokens is a paid mutator transaction binding the contract method 0xa93ce099.
//
// Solidity: function setBridgeTokens(address[] _vaultTokens, address[] _pegTokens) returns()
func (_PegBridge *PegBridgeSession) SetBridgeTokens(_vaultTokens []common.Address, _pegTokens []common.Address) (*types.Transaction, error) {
	return _PegBridge.Contract.SetBridgeTokens(&_PegBridge.TransactOpts, _vaultTokens, _pegTokens)
}

// SetBridgeTokens is a paid mutator transaction binding the contract method 0xa93ce099.
//
// Solidity: function setBridgeTokens(address[] _vaultTokens, address[] _pegTokens) returns()
func (_PegBridge *PegBridgeTransactorSession) SetBridgeTokens(_vaultTokens []common.Address, _pegTokens []common.Address) (*types.Transaction, error) {
	return _PegBridge.Contract.SetBridgeTokens(&_PegBridge.TransactOpts, _vaultTokens, _pegTokens)
}

// SetMinBurn is a paid mutator transaction binding the contract method 0xbf4816f0.
//
// Solidity: function setMinBurn(address[] _tokens, uint256[] _amounts) returns()
func (_PegBridge *PegBridgeTransactor) SetMinBurn(opts *bind.TransactOpts, _tokens []common.Address, _amounts []*big.Int) (*types.Transaction, error) {
	return _PegBridge.contract.Transact(opts, "setMinBurn", _tokens, _amounts)
}

// SetMinBurn is a paid mutator transaction binding the contract method 0xbf4816f0.
//
// Solidity: function setMinBurn(address[] _tokens, uint256[] _amounts) returns()
func (_PegBridge *PegBridgeSession) SetMinBurn(_tokens []common.Address, _amounts []*big.Int) (*types.Transaction, error) {
	return _PegBridge.Contract.SetMinBurn(&_PegBridge.TransactOpts, _tokens, _amounts)
}

// SetMinBurn is a paid mutator transaction binding the contract method 0xbf4816f0.
//
// Solidity: function setMinBurn(address[] _tokens, uint256[] _amounts) returns()
func (_PegBridge *PegBridgeTransactorSession) SetMinBurn(_tokens []common.Address, _amounts []*big.Int) (*types.Transaction, error) {
	return _PegBridge.Contract.SetMinBurn(&_PegBridge.TransactOpts, _tokens, _amounts)
}

// SetTokenVault is a paid mutator transaction binding the contract method 0x04a2cbd0.
//
// Solidity: function setTokenVault(uint64 _vaultChain, address _vaultAddress) returns()
func (_PegBridge *PegBridgeTransactor) SetTokenVault(opts *bind.TransactOpts, _vaultChain uint64, _vaultAddress common.Address) (*types.Transaction, error) {
	return _PegBridge.contract.Transact(opts, "setTokenVault", _vaultChain, _vaultAddress)
}

// SetTokenVault is a paid mutator transaction binding the contract method 0x04a2cbd0.
//
// Solidity: function setTokenVault(uint64 _vaultChain, address _vaultAddress) returns()
func (_PegBridge *PegBridgeSession) SetTokenVault(_vaultChain uint64, _vaultAddress common.Address) (*types.Transaction, error) {
	return _PegBridge.Contract.SetTokenVault(&_PegBridge.TransactOpts, _vaultChain, _vaultAddress)
}

// SetTokenVault is a paid mutator transaction binding the contract method 0x04a2cbd0.
//
// Solidity: function setTokenVault(uint64 _vaultChain, address _vaultAddress) returns()
func (_PegBridge *PegBridgeTransactorSession) SetTokenVault(_vaultChain uint64, _vaultAddress common.Address) (*types.Transaction, error) {
	return _PegBridge.Contract.SetTokenVault(&_PegBridge.TransactOpts, _vaultChain, _vaultAddress)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PegBridge *PegBridgeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _PegBridge.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PegBridge *PegBridgeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PegBridge.Contract.TransferOwnership(&_PegBridge.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PegBridge *PegBridgeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PegBridge.Contract.TransferOwnership(&_PegBridge.TransactOpts, newOwner)
}

// PegBridgeBridgeTokenAddedIterator is returned from FilterBridgeTokenAdded and is used to iterate over the raw logs and unpacked data for BridgeTokenAdded events raised by the PegBridge contract.
type PegBridgeBridgeTokenAddedIterator struct {
	Event *PegBridgeBridgeTokenAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PegBridgeBridgeTokenAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PegBridgeBridgeTokenAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PegBridgeBridgeTokenAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PegBridgeBridgeTokenAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PegBridgeBridgeTokenAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PegBridgeBridgeTokenAdded represents a BridgeTokenAdded event raised by the PegBridge contract.
type PegBridgeBridgeTokenAdded struct {
	VaultToken common.Address
	PegToken   common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterBridgeTokenAdded is a free log retrieval operation binding the contract event 0xeabeda8c7848101043c4c7d8a980cbc9078963ea815cd1cdfcab1dfdc80eb911.
//
// Solidity: event BridgeTokenAdded(address vaultToken, address pegToken)
func (_PegBridge *PegBridgeFilterer) FilterBridgeTokenAdded(opts *bind.FilterOpts) (*PegBridgeBridgeTokenAddedIterator, error) {

	logs, sub, err := _PegBridge.contract.FilterLogs(opts, "BridgeTokenAdded")
	if err != nil {
		return nil, err
	}
	return &PegBridgeBridgeTokenAddedIterator{contract: _PegBridge.contract, event: "BridgeTokenAdded", logs: logs, sub: sub}, nil
}

// WatchBridgeTokenAdded is a free log subscription operation binding the contract event 0xeabeda8c7848101043c4c7d8a980cbc9078963ea815cd1cdfcab1dfdc80eb911.
//
// Solidity: event BridgeTokenAdded(address vaultToken, address pegToken)
func (_PegBridge *PegBridgeFilterer) WatchBridgeTokenAdded(opts *bind.WatchOpts, sink chan<- *PegBridgeBridgeTokenAdded) (event.Subscription, error) {

	logs, sub, err := _PegBridge.contract.WatchLogs(opts, "BridgeTokenAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PegBridgeBridgeTokenAdded)
				if err := _PegBridge.contract.UnpackLog(event, "BridgeTokenAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeTokenAdded is a log parse operation binding the contract event 0xeabeda8c7848101043c4c7d8a980cbc9078963ea815cd1cdfcab1dfdc80eb911.
//
// Solidity: event BridgeTokenAdded(address vaultToken, address pegToken)
func (_PegBridge *PegBridgeFilterer) ParseBridgeTokenAdded(log types.Log) (*PegBridgeBridgeTokenAdded, error) {
	event := new(PegBridgeBridgeTokenAdded)
	if err := _PegBridge.contract.UnpackLog(event, "BridgeTokenAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PegBridgeBridgeTokenDeletedIterator is returned from FilterBridgeTokenDeleted and is used to iterate over the raw logs and unpacked data for BridgeTokenDeleted events raised by the PegBridge contract.
type PegBridgeBridgeTokenDeletedIterator struct {
	Event *PegBridgeBridgeTokenDeleted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PegBridgeBridgeTokenDeletedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PegBridgeBridgeTokenDeleted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PegBridgeBridgeTokenDeleted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PegBridgeBridgeTokenDeletedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PegBridgeBridgeTokenDeletedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PegBridgeBridgeTokenDeleted represents a BridgeTokenDeleted event raised by the PegBridge contract.
type PegBridgeBridgeTokenDeleted struct {
	VaultToken common.Address
	PegToken   common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterBridgeTokenDeleted is a free log retrieval operation binding the contract event 0x2ff7cbe4f1f12bb7d93999c06304c58410c46ebb8ddbcba627d52d93a6aaffb1.
//
// Solidity: event BridgeTokenDeleted(address vaultToken, address pegToken)
func (_PegBridge *PegBridgeFilterer) FilterBridgeTokenDeleted(opts *bind.FilterOpts) (*PegBridgeBridgeTokenDeletedIterator, error) {

	logs, sub, err := _PegBridge.contract.FilterLogs(opts, "BridgeTokenDeleted")
	if err != nil {
		return nil, err
	}
	return &PegBridgeBridgeTokenDeletedIterator{contract: _PegBridge.contract, event: "BridgeTokenDeleted", logs: logs, sub: sub}, nil
}

// WatchBridgeTokenDeleted is a free log subscription operation binding the contract event 0x2ff7cbe4f1f12bb7d93999c06304c58410c46ebb8ddbcba627d52d93a6aaffb1.
//
// Solidity: event BridgeTokenDeleted(address vaultToken, address pegToken)
func (_PegBridge *PegBridgeFilterer) WatchBridgeTokenDeleted(opts *bind.WatchOpts, sink chan<- *PegBridgeBridgeTokenDeleted) (event.Subscription, error) {

	logs, sub, err := _PegBridge.contract.WatchLogs(opts, "BridgeTokenDeleted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PegBridgeBridgeTokenDeleted)
				if err := _PegBridge.contract.UnpackLog(event, "BridgeTokenDeleted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBridgeTokenDeleted is a log parse operation binding the contract event 0x2ff7cbe4f1f12bb7d93999c06304c58410c46ebb8ddbcba627d52d93a6aaffb1.
//
// Solidity: event BridgeTokenDeleted(address vaultToken, address pegToken)
func (_PegBridge *PegBridgeFilterer) ParseBridgeTokenDeleted(log types.Log) (*PegBridgeBridgeTokenDeleted, error) {
	event := new(PegBridgeBridgeTokenDeleted)
	if err := _PegBridge.contract.UnpackLog(event, "BridgeTokenDeleted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PegBridgeBurnIterator is returned from FilterBurn and is used to iterate over the raw logs and unpacked data for Burn events raised by the PegBridge contract.
type PegBridgeBurnIterator struct {
	Event *PegBridgeBurn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PegBridgeBurnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PegBridgeBurn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PegBridgeBurn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PegBridgeBurnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PegBridgeBurnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PegBridgeBurn represents a Burn event raised by the PegBridge contract.
type PegBridgeBurn struct {
	BurnId          [32]byte
	BurnAccount     common.Address
	Token           common.Address
	Amount          *big.Int
	WithdrawAccount common.Address
	Nonce           uint64
	MessageId       [32]byte
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterBurn is a free log retrieval operation binding the contract event 0x1b4b8f452b18b4a267e27ea158479a8124cef2cd93a0d59309667a8e933ab285.
//
// Solidity: event Burn(bytes32 burnId, address burnAccount, address token, uint256 amount, address withdrawAccount, uint64 nonce, bytes32 messageId)
func (_PegBridge *PegBridgeFilterer) FilterBurn(opts *bind.FilterOpts) (*PegBridgeBurnIterator, error) {

	logs, sub, err := _PegBridge.contract.FilterLogs(opts, "Burn")
	if err != nil {
		return nil, err
	}
	return &PegBridgeBurnIterator{contract: _PegBridge.contract, event: "Burn", logs: logs, sub: sub}, nil
}

// WatchBurn is a free log subscription operation binding the contract event 0x1b4b8f452b18b4a267e27ea158479a8124cef2cd93a0d59309667a8e933ab285.
//
// Solidity: event Burn(bytes32 burnId, address burnAccount, address token, uint256 amount, address withdrawAccount, uint64 nonce, bytes32 messageId)
func (_PegBridge *PegBridgeFilterer) WatchBurn(opts *bind.WatchOpts, sink chan<- *PegBridgeBurn) (event.Subscription, error) {

	logs, sub, err := _PegBridge.contract.WatchLogs(opts, "Burn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PegBridgeBurn)
				if err := _PegBridge.contract.UnpackLog(event, "Burn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBurn is a log parse operation binding the contract event 0x1b4b8f452b18b4a267e27ea158479a8124cef2cd93a0d59309667a8e933ab285.
//
// Solidity: event Burn(bytes32 burnId, address burnAccount, address token, uint256 amount, address withdrawAccount, uint64 nonce, bytes32 messageId)
func (_PegBridge *PegBridgeFilterer) ParseBurn(log types.Log) (*PegBridgeBurn, error) {
	event := new(PegBridgeBurn)
	if err := _PegBridge.contract.UnpackLog(event, "Burn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PegBridgeMinBurnUpdatedIterator is returned from FilterMinBurnUpdated and is used to iterate over the raw logs and unpacked data for MinBurnUpdated events raised by the PegBridge contract.
type PegBridgeMinBurnUpdatedIterator struct {
	Event *PegBridgeMinBurnUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PegBridgeMinBurnUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PegBridgeMinBurnUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PegBridgeMinBurnUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PegBridgeMinBurnUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PegBridgeMinBurnUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PegBridgeMinBurnUpdated represents a MinBurnUpdated event raised by the PegBridge contract.
type PegBridgeMinBurnUpdated struct {
	Token  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMinBurnUpdated is a free log retrieval operation binding the contract event 0x3796cd0b17a8734f8da819920625598e9a18be490f686725282e5383f1d06683.
//
// Solidity: event MinBurnUpdated(address token, uint256 amount)
func (_PegBridge *PegBridgeFilterer) FilterMinBurnUpdated(opts *bind.FilterOpts) (*PegBridgeMinBurnUpdatedIterator, error) {

	logs, sub, err := _PegBridge.contract.FilterLogs(opts, "MinBurnUpdated")
	if err != nil {
		return nil, err
	}
	return &PegBridgeMinBurnUpdatedIterator{contract: _PegBridge.contract, event: "MinBurnUpdated", logs: logs, sub: sub}, nil
}

// WatchMinBurnUpdated is a free log subscription operation binding the contract event 0x3796cd0b17a8734f8da819920625598e9a18be490f686725282e5383f1d06683.
//
// Solidity: event MinBurnUpdated(address token, uint256 amount)
func (_PegBridge *PegBridgeFilterer) WatchMinBurnUpdated(opts *bind.WatchOpts, sink chan<- *PegBridgeMinBurnUpdated) (event.Subscription, error) {

	logs, sub, err := _PegBridge.contract.WatchLogs(opts, "MinBurnUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PegBridgeMinBurnUpdated)
				if err := _PegBridge.contract.UnpackLog(event, "MinBurnUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinBurnUpdated is a log parse operation binding the contract event 0x3796cd0b17a8734f8da819920625598e9a18be490f686725282e5383f1d06683.
//
// Solidity: event MinBurnUpdated(address token, uint256 amount)
func (_PegBridge *PegBridgeFilterer) ParseMinBurnUpdated(log types.Log) (*PegBridgeMinBurnUpdated, error) {
	event := new(PegBridgeMinBurnUpdated)
	if err := _PegBridge.contract.UnpackLog(event, "MinBurnUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PegBridgeMintIterator is returned from FilterMint and is used to iterate over the raw logs and unpacked data for Mint events raised by the PegBridge contract.
type PegBridgeMintIterator struct {
	Event *PegBridgeMint // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PegBridgeMintIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PegBridgeMint)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PegBridgeMint)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PegBridgeMintIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PegBridgeMintIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PegBridgeMint represents a Mint event raised by the PegBridge contract.
type PegBridgeMint struct {
	MintId    [32]byte
	Account   common.Address
	Token     common.Address
	Amount    *big.Int
	RefId     [32]byte
	Depositor common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMint is a free log retrieval operation binding the contract event 0x317276091e0f98226fe28cd525f29e0b1c7b3edd91bf9f85e5f0aba596074ac9.
//
// Solidity: event Mint(bytes32 mintId, address account, address token, uint256 amount, bytes32 refId, address depositor)
func (_PegBridge *PegBridgeFilterer) FilterMint(opts *bind.FilterOpts) (*PegBridgeMintIterator, error) {

	logs, sub, err := _PegBridge.contract.FilterLogs(opts, "Mint")
	if err != nil {
		return nil, err
	}
	return &PegBridgeMintIterator{contract: _PegBridge.contract, event: "Mint", logs: logs, sub: sub}, nil
}

// WatchMint is a free log subscription operation binding the contract event 0x317276091e0f98226fe28cd525f29e0b1c7b3edd91bf9f85e5f0aba596074ac9.
//
// Solidity: event Mint(bytes32 mintId, address account, address token, uint256 amount, bytes32 refId, address depositor)
func (_PegBridge *PegBridgeFilterer) WatchMint(opts *bind.WatchOpts, sink chan<- *PegBridgeMint) (event.Subscription, error) {

	logs, sub, err := _PegBridge.contract.WatchLogs(opts, "Mint")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PegBridgeMint)
				if err := _PegBridge.contract.UnpackLog(event, "Mint", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMint is a log parse operation binding the contract event 0x317276091e0f98226fe28cd525f29e0b1c7b3edd91bf9f85e5f0aba596074ac9.
//
// Solidity: event Mint(bytes32 mintId, address account, address token, uint256 amount, bytes32 refId, address depositor)
func (_PegBridge *PegBridgeFilterer) ParseMint(log types.Log) (*PegBridgeMint, error) {
	event := new(PegBridgeMint)
	if err := _PegBridge.contract.UnpackLog(event, "Mint", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PegBridgeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the PegBridge contract.
type PegBridgeOwnershipTransferredIterator struct {
	Event *PegBridgeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PegBridgeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PegBridgeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PegBridgeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PegBridgeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PegBridgeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PegBridgeOwnershipTransferred represents a OwnershipTransferred event raised by the PegBridge contract.
type PegBridgeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PegBridge *PegBridgeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PegBridgeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PegBridge.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PegBridgeOwnershipTransferredIterator{contract: _PegBridge.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PegBridge *PegBridgeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PegBridgeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PegBridge.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PegBridgeOwnershipTransferred)
				if err := _PegBridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PegBridge *PegBridgeFilterer) ParseOwnershipTransferred(log types.Log) (*PegBridgeOwnershipTransferred, error) {
	event := new(PegBridgeOwnershipTransferred)
	if err := _PegBridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PoolMetaData contains all meta data concerning the Pool contract.
var PoolMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"NoLiquidityToReceiveFees\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolNotInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceCurrentX96\",\"type\":\"uint160\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"PriceLimitAlreadyExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"PriceLimitOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapAmountCannotBeZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"TickLiquidityOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"}],\"name\":\"TickLowerOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"}],\"name\":\"TickNotInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"TickUpperOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"}],\"name\":\"TicksMisordered\",\"type\":\"error\"}]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212200c869612feea02ce665ec17afdfd1f48b5fe71b53169a53e5f3ad874b496452964736f6c63430008150033",
}

// PoolABI is the input ABI used to generate the binding from.
// Deprecated: Use PoolMetaData.ABI instead.
var PoolABI = PoolMetaData.ABI

// PoolBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PoolMetaData.Bin instead.
var PoolBin = PoolMetaData.Bin

// DeployPool deploys a new Ethereum contract, binding an instance of Pool to it.
func DeployPool(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Pool, error) {
	parsed, err := PoolMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PoolBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Pool{PoolCaller: PoolCaller{contract: contract}, PoolTransactor: PoolTransactor{contract: contract}, PoolFilterer: PoolFilterer{contract: contract}}, nil
}

// Pool is an auto generated Go binding around an Ethereum contract.
type Pool struct {
	PoolCaller     // Read-only binding to the contract
	PoolTransactor // Write-only binding to the contract
	PoolFilterer   // Log filterer for contract events
}

// PoolCaller is an auto generated read-only Go binding around an Ethereum contract.
type PoolCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PoolTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PoolTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PoolFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PoolFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PoolSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PoolSession struct {
	Contract     *Pool             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PoolCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PoolCallerSession struct {
	Contract *PoolCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// PoolTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PoolTransactorSession struct {
	Contract     *PoolTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PoolRaw is an auto generated low-level Go binding around an Ethereum contract.
type PoolRaw struct {
	Contract *Pool // Generic contract binding to access the raw methods on
}

// PoolCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PoolCallerRaw struct {
	Contract *PoolCaller // Generic read-only contract binding to access the raw methods on
}

// PoolTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PoolTransactorRaw struct {
	Contract *PoolTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPool creates a new instance of Pool, bound to a specific deployed contract.
func NewPool(address common.Address, backend bind.ContractBackend) (*Pool, error) {
	contract, err := bindPool(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Pool{PoolCaller: PoolCaller{contract: contract}, PoolTransactor: PoolTransactor{contract: contract}, PoolFilterer: PoolFilterer{contract: contract}}, nil
}

// NewPoolCaller creates a new read-only instance of Pool, bound to a specific deployed contract.
func NewPoolCaller(address common.Address, caller bind.ContractCaller) (*PoolCaller, error) {
	contract, err := bindPool(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PoolCaller{contract: contract}, nil
}

// NewPoolTransactor creates a new write-only instance of Pool, bound to a specific deployed contract.
func NewPoolTransactor(address common.Address, transactor bind.ContractTransactor) (*PoolTransactor, error) {
	contract, err := bindPool(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PoolTransactor{contract: contract}, nil
}

// NewPoolFilterer creates a new log filterer instance of Pool, bound to a specific deployed contract.
func NewPoolFilterer(address common.Address, filterer bind.ContractFilterer) (*PoolFilterer, error) {
	contract, err := bindPool(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PoolFilterer{contract: contract}, nil
}

// bindPool binds a generic wrapper to an already deployed contract.
func bindPool(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PoolMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Pool *PoolRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Pool.Contract.PoolCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Pool *PoolRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pool.Contract.PoolTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Pool *PoolRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Pool.Contract.PoolTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Pool *PoolCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Pool.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Pool *PoolTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pool.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Pool *PoolTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Pool.Contract.contract.Transact(opts, method, params...)
}

// PoolIdLibraryMetaData contains all meta data concerning the PoolIdLibrary contract.
var PoolIdLibraryMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220493b069951f078c0eee7251b33fa150d82c97f4bb49c2d5c6bf37969098d8d2e64736f6c63430008150033",
}

// PoolIdLibraryABI is the input ABI used to generate the binding from.
// Deprecated: Use PoolIdLibraryMetaData.ABI instead.
var PoolIdLibraryABI = PoolIdLibraryMetaData.ABI

// PoolIdLibraryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PoolIdLibraryMetaData.Bin instead.
var PoolIdLibraryBin = PoolIdLibraryMetaData.Bin

// DeployPoolIdLibrary deploys a new Ethereum contract, binding an instance of PoolIdLibrary to it.
func DeployPoolIdLibrary(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PoolIdLibrary, error) {
	parsed, err := PoolIdLibraryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PoolIdLibraryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PoolIdLibrary{PoolIdLibraryCaller: PoolIdLibraryCaller{contract: contract}, PoolIdLibraryTransactor: PoolIdLibraryTransactor{contract: contract}, PoolIdLibraryFilterer: PoolIdLibraryFilterer{contract: contract}}, nil
}

// PoolIdLibrary is an auto generated Go binding around an Ethereum contract.
type PoolIdLibrary struct {
	PoolIdLibraryCaller     // Read-only binding to the contract
	PoolIdLibraryTransactor // Write-only binding to the contract
	PoolIdLibraryFilterer   // Log filterer for contract events
}

// PoolIdLibraryCaller is an auto generated read-only Go binding around an Ethereum contract.
type PoolIdLibraryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PoolIdLibraryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PoolIdLibraryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PoolIdLibraryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PoolIdLibraryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PoolIdLibrarySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PoolIdLibrarySession struct {
	Contract     *PoolIdLibrary    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PoolIdLibraryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PoolIdLibraryCallerSession struct {
	Contract *PoolIdLibraryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// PoolIdLibraryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PoolIdLibraryTransactorSession struct {
	Contract     *PoolIdLibraryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// PoolIdLibraryRaw is an auto generated low-level Go binding around an Ethereum contract.
type PoolIdLibraryRaw struct {
	Contract *PoolIdLibrary // Generic contract binding to access the raw methods on
}

// PoolIdLibraryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PoolIdLibraryCallerRaw struct {
	Contract *PoolIdLibraryCaller // Generic read-only contract binding to access the raw methods on
}

// PoolIdLibraryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PoolIdLibraryTransactorRaw struct {
	Contract *PoolIdLibraryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPoolIdLibrary creates a new instance of PoolIdLibrary, bound to a specific deployed contract.
func NewPoolIdLibrary(address common.Address, backend bind.ContractBackend) (*PoolIdLibrary, error) {
	contract, err := bindPoolIdLibrary(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PoolIdLibrary{PoolIdLibraryCaller: PoolIdLibraryCaller{contract: contract}, PoolIdLibraryTransactor: PoolIdLibraryTransactor{contract: contract}, PoolIdLibraryFilterer: PoolIdLibraryFilterer{contract: contract}}, nil
}

// NewPoolIdLibraryCaller creates a new read-only instance of PoolIdLibrary, bound to a specific deployed contract.
func NewPoolIdLibraryCaller(address common.Address, caller bind.ContractCaller) (*PoolIdLibraryCaller, error) {
	contract, err := bindPoolIdLibrary(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PoolIdLibraryCaller{contract: contract}, nil
}

// NewPoolIdLibraryTransactor creates a new write-only instance of PoolIdLibrary, bound to a specific deployed contract.
func NewPoolIdLibraryTransactor(address common.Address, transactor bind.ContractTransactor) (*PoolIdLibraryTransactor, error) {
	contract, err := bindPoolIdLibrary(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PoolIdLibraryTransactor{contract: contract}, nil
}

// NewPoolIdLibraryFilterer creates a new log filterer instance of PoolIdLibrary, bound to a specific deployed contract.
func NewPoolIdLibraryFilterer(address common.Address, filterer bind.ContractFilterer) (*PoolIdLibraryFilterer, error) {
	contract, err := bindPoolIdLibrary(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PoolIdLibraryFilterer{contract: contract}, nil
}

// bindPoolIdLibrary binds a generic wrapper to an already deployed contract.
func bindPoolIdLibrary(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PoolIdLibraryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PoolIdLibrary *PoolIdLibraryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PoolIdLibrary.Contract.PoolIdLibraryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PoolIdLibrary *PoolIdLibraryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PoolIdLibrary.Contract.PoolIdLibraryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PoolIdLibrary *PoolIdLibraryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PoolIdLibrary.Contract.PoolIdLibraryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PoolIdLibrary *PoolIdLibraryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PoolIdLibrary.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PoolIdLibrary *PoolIdLibraryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PoolIdLibrary.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PoolIdLibrary *PoolIdLibraryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PoolIdLibrary.Contract.contract.Transact(opts, method, params...)
}

// PositionMetaData contains all meta data concerning the Position contract.
var PositionMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"CannotUpdateEmptyPosition\",\"type\":\"error\"}]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212205d269b9702e645c77f0b5edec313545bb62d8fa5050e3f11d0da94e7a9b0e68b64736f6c63430008150033",
}

// PositionABI is the input ABI used to generate the binding from.
// Deprecated: Use PositionMetaData.ABI instead.
var PositionABI = PositionMetaData.ABI

// PositionBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PositionMetaData.Bin instead.
var PositionBin = PositionMetaData.Bin

// DeployPosition deploys a new Ethereum contract, binding an instance of Position to it.
func DeployPosition(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Position, error) {
	parsed, err := PositionMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PositionBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Position{PositionCaller: PositionCaller{contract: contract}, PositionTransactor: PositionTransactor{contract: contract}, PositionFilterer: PositionFilterer{contract: contract}}, nil
}

// Position is an auto generated Go binding around an Ethereum contract.
type Position struct {
	PositionCaller     // Read-only binding to the contract
	PositionTransactor // Write-only binding to the contract
	PositionFilterer   // Log filterer for contract events
}

// PositionCaller is an auto generated read-only Go binding around an Ethereum contract.
type PositionCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PositionTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PositionTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PositionFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PositionFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PositionSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PositionSession struct {
	Contract     *Position         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PositionCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PositionCallerSession struct {
	Contract *PositionCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// PositionTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PositionTransactorSession struct {
	Contract     *PositionTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// PositionRaw is an auto generated low-level Go binding around an Ethereum contract.
type PositionRaw struct {
	Contract *Position // Generic contract binding to access the raw methods on
}

// PositionCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PositionCallerRaw struct {
	Contract *PositionCaller // Generic read-only contract binding to access the raw methods on
}

// PositionTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PositionTransactorRaw struct {
	Contract *PositionTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPosition creates a new instance of Position, bound to a specific deployed contract.
func NewPosition(address common.Address, backend bind.ContractBackend) (*Position, error) {
	contract, err := bindPosition(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Position{PositionCaller: PositionCaller{contract: contract}, PositionTransactor: PositionTransactor{contract: contract}, PositionFilterer: PositionFilterer{contract: contract}}, nil
}

// NewPositionCaller creates a new read-only instance of Position, bound to a specific deployed contract.
func NewPositionCaller(address common.Address, caller bind.ContractCaller) (*PositionCaller, error) {
	contract, err := bindPosition(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PositionCaller{contract: contract}, nil
}

// NewPositionTransactor creates a new write-only instance of Position, bound to a specific deployed contract.
func NewPositionTransactor(address common.Address, transactor bind.ContractTransactor) (*PositionTransactor, error) {
	contract, err := bindPosition(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PositionTransactor{contract: contract}, nil
}

// NewPositionFilterer creates a new log filterer instance of Position, bound to a specific deployed contract.
func NewPositionFilterer(address common.Address, filterer bind.ContractFilterer) (*PositionFilterer, error) {
	contract, err := bindPosition(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PositionFilterer{contract: contract}, nil
}

// bindPosition binds a generic wrapper to an already deployed contract.
func bindPosition(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PositionMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Position *PositionRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Position.Contract.PositionCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Position *PositionRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Position.Contract.PositionTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Position *PositionRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Position.Contract.PositionTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Position *PositionCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Position.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Position *PositionTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Position.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Position *PositionTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Position.Contract.contract.Transact(opts, method, params...)
}

// RLPReaderMetaData contains all meta data concerning the RLPReader contract.
var RLPReaderMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea264697066735822122076ddb02f59ef06e291ab3d1311045c0f3a410b238d404dd62ad9eef1f84b4b9e64736f6c63430008150033",
}

// RLPReaderABI is the input ABI used to generate the binding from.
// Deprecated: Use RLPReaderMetaData.ABI instead.
var RLPReaderABI = RLPReaderMetaData.ABI

// RLPReaderBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use RLPReaderMetaData.Bin instead.
var RLPReaderBin = RLPReaderMetaData.Bin

// DeployRLPReader deploys a new Ethereum contract, binding an instance of RLPReader to it.
func DeployRLPReader(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *RLPReader, error) {
	parsed, err := RLPReaderMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(RLPReaderBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RLPReader{RLPReaderCaller: RLPReaderCaller{contract: contract}, RLPReaderTransactor: RLPReaderTransactor{contract: contract}, RLPReaderFilterer: RLPReaderFilterer{contract: contract}}, nil
}

// RLPReader is an auto generated Go binding around an Ethereum contract.
type RLPReader struct {
	RLPReaderCaller     // Read-only binding to the contract
	RLPReaderTransactor // Write-only binding to the contract
	RLPReaderFilterer   // Log filterer for contract events
}

// RLPReaderCaller is an auto generated read-only Go binding around an Ethereum contract.
type RLPReaderCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RLPReaderTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RLPReaderTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RLPReaderFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RLPReaderFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RLPReaderSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RLPReaderSession struct {
	Contract     *RLPReader        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RLPReaderCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RLPReaderCallerSession struct {
	Contract *RLPReaderCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// RLPReaderTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RLPReaderTransactorSession struct {
	Contract     *RLPReaderTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// RLPReaderRaw is an auto generated low-level Go binding around an Ethereum contract.
type RLPReaderRaw struct {
	Contract *RLPReader // Generic contract binding to access the raw methods on
}

// RLPReaderCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RLPReaderCallerRaw struct {
	Contract *RLPReaderCaller // Generic read-only contract binding to access the raw methods on
}

// RLPReaderTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RLPReaderTransactorRaw struct {
	Contract *RLPReaderTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRLPReader creates a new instance of RLPReader, bound to a specific deployed contract.
func NewRLPReader(address common.Address, backend bind.ContractBackend) (*RLPReader, error) {
	contract, err := bindRLPReader(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RLPReader{RLPReaderCaller: RLPReaderCaller{contract: contract}, RLPReaderTransactor: RLPReaderTransactor{contract: contract}, RLPReaderFilterer: RLPReaderFilterer{contract: contract}}, nil
}

// NewRLPReaderCaller creates a new read-only instance of RLPReader, bound to a specific deployed contract.
func NewRLPReaderCaller(address common.Address, caller bind.ContractCaller) (*RLPReaderCaller, error) {
	contract, err := bindRLPReader(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RLPReaderCaller{contract: contract}, nil
}

// NewRLPReaderTransactor creates a new write-only instance of RLPReader, bound to a specific deployed contract.
func NewRLPReaderTransactor(address common.Address, transactor bind.ContractTransactor) (*RLPReaderTransactor, error) {
	contract, err := bindRLPReader(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RLPReaderTransactor{contract: contract}, nil
}

// NewRLPReaderFilterer creates a new log filterer instance of RLPReader, bound to a specific deployed contract.
func NewRLPReaderFilterer(address common.Address, filterer bind.ContractFilterer) (*RLPReaderFilterer, error) {
	contract, err := bindRLPReader(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RLPReaderFilterer{contract: contract}, nil
}

// bindRLPReader binds a generic wrapper to an already deployed contract.
func bindRLPReader(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := RLPReaderMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RLPReader *RLPReaderRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RLPReader.Contract.RLPReaderCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RLPReader *RLPReaderRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RLPReader.Contract.RLPReaderTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RLPReader *RLPReaderRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RLPReader.Contract.RLPReaderTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RLPReader *RLPReaderCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RLPReader.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RLPReader *RLPReaderTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RLPReader.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RLPReader *RLPReaderTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RLPReader.Contract.contract.Transact(opts, method, params...)
}

// ReceiptVerifierMetaData contains all meta data concerning the ReceiptVerifier contract.
var ReceiptVerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blockChunks\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdateBlockChunks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdateVerifierAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"}],\"name\":\"VerifiedReceipt\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"blockChunks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"receiptRaw\",\"type\":\"bytes\"}],\"name\":\"decodeReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"blkHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"blkNum\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"blkTime\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"topics\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structIReceiptVerifier.LogInfo[]\",\"name\":\"logs\",\"type\":\"tuple[]\"}],\"internalType\":\"structIReceiptVerifier.ReceiptInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blockChunks\",\"type\":\"address\"}],\"name\":\"updateBlockChunks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_verifierAddress\",\"type\":\"address\"}],\"name\":\"updateVerifierAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"verifierAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"receiptRaw\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"auxiBlkVerifyInfo\",\"type\":\"bytes\"}],\"name\":\"verifyReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"blkHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"blkNum\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"blkTime\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"topics\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structIReceiptVerifier.LogInfo[]\",\"name\":\"logs\",\"type\":\"tuple[]\"}],\"internalType\":\"structIReceiptVerifier.ReceiptInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"receiptRaw\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"auxiBlkVerifyInfo\",\"type\":\"bytes\"}],\"name\":\"verifyReceiptAndLog\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"blkHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"blkNum\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"blkTime\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"topics\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"structIReceiptVerifier.LogInfo[]\",\"name\":\"logs\",\"type\":\"tuple[]\"}],\"internalType\":\"structIReceiptVerifier.ReceiptInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080346100a457601f611a4b38819003918201601f19168301916001600160401b038311848410176100a8578084926020946040528339810103126100a457516001600160a01b0390818116908190036100a4575f5460018060a01b03199033828216175f55604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3600254161760025561198e90816100bd8239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040526004361015610011575f80fd5b5f803560e01c9081631eeb86da146100b7575080633996da7a146100b257806368ac2f78146100ad578063715018a6146100a8578063724796ed146100a35780638da5cb5b1461009e578063c109ae5d14610099578063ec4ffc5214610094578063f2fde38b1461008f5763f5cec6af1461008a575f80fd5b61062a565b61057e565b6104e9565b610495565b610470565b61044a565b6103ed565b6103c1565b610333565b34610127576020366003190112610127577f0addee9cb6aa9328bbfbe8282179a6737af344619320736b6918af70b6a94a9860206100f361012a565b6001600160a01b039061010a82865416331461066c565b16806001600160a01b03196002541617600255604051908152a180f35b80fd5b600435906001600160a01b038216820361014057565b5f80fd5b9181601f840112156101405782359167ffffffffffffffff8311610140576020838186019501011161014057565b9060606003198301126101405767ffffffffffffffff600435818111610140578361019f91600401610144565b9390939260243583811161014057826101ba91600401610144565b93909392604435918211610140576101d491600401610144565b9091565b5f5b8381106101e95750505f910152565b81810151838201526020016101da565b602080825260e082019083511515818401528084015192604067ffffffffffffffff8095168183015260a0818701519660609788850152878101519663ffffffff608098168886015287820151168285015201519560c08084015286518095526101009184838501938760051b8601019801965f9081955b888710610285575050505050505050505090565b9091929394959697989960ff19828203018752888b51878301926001600160a01b0382511681528783830151928a8584015283518096528488840194019589905b808210610316575050600195509184939184930151908a8184039101526102f8815180928185528580860191016101d8565b601f01601f191601019c019a99989190910196019493929190610271565b87518652968601968f9695909501948b93506001909101906102c6565b34610140576103bd61039f7fa5db3bb7a25cc2804c7835ab71b15513b8c68585e3593c3fdee39a8837547366604061038761036d36610172565b9261037f99959996949692919261073d565b50868a610988565b9467ffffffffffffffff60208701511692369161079a565b6020815191012082519182526020820152a1604051918291826101f9565b0390f35b34610140576103bd6103e16103d536610172565b94939093929192610988565b604051918291826101f9565b34610140575f80600319360112610127578080546001600160a01b03196001600160a01b0382169161042033841461066c565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b34610140575f3660031901126101405760206001600160a01b0360025416604051908152f35b34610140575f3660031901126101405760206001600160a01b035f5416604051908152f35b346101405760203660031901126101405760043567ffffffffffffffff8111610140576103e16104cc6103bd923690600401610144565b90611039565b6004359067ffffffffffffffff8216820361014057565b34610140576040366003190112610140576105026104d2565b602435906001600160a01b03918281168091036101405767ffffffffffffffff6040926105547ffd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f955f5416331461066c565b1690815f526001602052825f20816001600160a01b031982541617905582519182526020820152a1005b346101405760203660031901126101405761059761012a565b6001600160a01b036105ad815f5416331461066c565b8116156105bf576105bd906114c2565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b346101405760203660031901126101405767ffffffffffffffff61064c6104d2565b165f52600160205260206001600160a01b0360405f205416604051908152f35b1561067357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b634e487b7160e01b5f52604160045260245ffd5b6040810190811067ffffffffffffffff8211176106e757604052565b6106b7565b90601f8019910116810190811067ffffffffffffffff8211176106e757604052565b6040519060c0820182811067ffffffffffffffff8211176106e757604052565b6040519061073b826106cb565b565b6040519060c0820182811067ffffffffffffffff8211176106e757604052606060a0835f81525f60208201525f60408201525f838201525f60808201520152565b67ffffffffffffffff81116106e757601f01601f191660200190565b9291926107a68261077e565b916107b460405193846106ec565b829481845281830111610140578281602093845f960137010152565b156107d757565b60405162461bcd60e51b815260206004820152600f60248201527f70726f6f66206e6f742076616c696400000000000000000000000000000000006044820152606490fd5b6020908361073b93959495604051968361083f89955180928880890191016101d8565b84019185830137015f838201520380855201836106ec565b1561085e57565b60405162461bcd60e51b815260206004820152601260248201527f6c65616648617368206e6f74206d6174636800000000000000000000000000006044820152606490fd5b90816020910312610140575180151581036101405790565b91909161018081019267ffffffffffffffff815116825260a0806020928381015163ffffffff8091168587015260408201516040870152606082015160608701526080820151166080860152015192015f905b6007821061091c5750505050565b8280600192865181520194019101909261090e565b6040513d5f823e3d90fd5b1561094357565b60405162461bcd60e51b815260206004820152600f60248201527f696e76616c696420626c6b4861736800000000000000000000000000000000006044820152606490fd5b9594610aae9493929161099961073d565b506109cc6109c76109aa86866113b6565b9560808701956109c2875167ffffffffffffffff1690565b61124c565b6107d0565b6109fa6109de828a60a088015161081c565b928351966109f56020988980970120885114610857565b610dac565b85519294919267ffffffffffffffff1690610a6a6040890194610a21865163ffffffff1690565b97858b0198610a538a5191610a47610a3761070e565b67ffffffffffffffff9099168952565b63ffffffff1687890152565b6040860152606085015263ffffffff166080840152565b60a0820152610a93610a87610a876002546001600160a01b031690565b6001600160a01b031690565b60405180809b8194631513dce960e21b8352600483016108bb565b03915afa918215610b7a57610b076060610b3d97610b2f96610af1610b189560409f610aec61073b9f9a8f9b610b229c5f92610b4d575b505061093c565b611039565b9d8e9151910152015167ffffffffffffffff1690565b67ffffffffffffffff1660808b0152565b5163ffffffff1690565b63ffffffff166060880152565b5167ffffffffffffffff1690565b67ffffffffffffffff1690840152565b610b6c9250803d10610b73575b610b6481836106ec565b8101906108a3565b8f80610ae5565b503d610b5a565b610931565b15610b8657565b60405162461bcd60e51b815260206004820152601b60248201527f696e636f72726563742061757869426c6b566572696679496e666f00000000006044820152606490fd5b906020116101405790602090565b906024116101405760200190600490565b90610104116101405760e40190602090565b909291928360011161014057831161014057600101915f190190565b9061018011610140576101700190601090565b906101a011610140576101800190602090565b906101c011610140576101b00190601090565b906101e011610140576101dc0190600490565b9061020011610140576101f80190600890565b9061020811610140576102000190600890565b92919261020891848311610140578411610140570191610207190190565b90939293848311610140578411610140578101920390565b359060208110610cce575090565b5f199060200360031b1b1690565b7fffffffff000000000000000000000000000000000000000000000000000000009035818116939260048110610d1157505050565b60040360031b82901b16169150565b634e487b7160e01b5f52601160045260245ffd5b60ff1660ff8114610d455760010190565b610d20565b60051b90611fe060e0831692168203610d4557565b60ff166024019060ff8211610d4557565b60ff60019116019060ff8211610d4557565b634e487b7160e01b5f52603260045260245ffd5b906007811015610da75760051b0190565b610d82565b916040519060e0820182811067ffffffffffffffff8211176106e75760405260e036833781610dde6101048514610b7f565b610df1610deb8587610bcb565b90610cc0565b93610e0e610e08610e028389610bd9565b90610cdc565b60e01c90565b945f5b60ff808216906006821015610e735790610e68610e61610deb85948d89610e42610e3d610e6e9a610d4a565b610d5f565b9280610e58610e3d610e538c610d70565b610d4a565b16931691610ca8565b9189610d96565b52610d34565b610e11565b50505095610deb60c092610e8992969496610bea565b910152565b9015610da75790565b15610e9e57565b60405162461bcd60e51b815260206004820152601660248201527f6e6f7420612044796e616d6963466565547854797065000000000000000000006044820152606490fd5b805115610da75760200190565b805160031015610da75760800190565b805160011015610da75760400190565b805160021015610da75760600190565b8051821015610da75760209160051b010190565b906020825192015160ff60f81b908181169360018110610f5357505050565b60010360031b82901b16169150565b67ffffffffffffffff81116106e75760051b60200190565b90610f8482610f62565b604090610f93825191826106ec565b8381528093610fa4601f1991610f62565b01905f92835b838110610fb8575050505050565b8151906060918281019281841067ffffffffffffffff8511176106e75760209385528782528390808284015285830152828601015201610faa565b90610ffd82610f62565b61100a60405191826106ec565b828152809261101b601f1991610f62565b0190602036910137565b602081519101519060208110610cce575090565b61110d6111076110b76110b26110ad6110a661105361073d565b978060ff986110a160028b61109a61109461106e8787610e8e565b357fff000000000000000000000000000000000000000000000000000000000000001690565b60f81c90565b1614610e97565b610bfc565b369161079a565b61151f565b61156e565b600160f81b7fff000000000000000000000000000000000000000000000000000000000000006110f76110f26110ec85610ee3565b5161173b565b610f34565b161461121c575b94939294610ef0565b5161156e565b926111188451610f7a565b915f80945b8651918487169283101561120e57611138611107848a610f20565b9761116761114e6111488b610ee3565b51611663565b611158868a610f20565b51906001600160a01b03169052565b6111736111078a610f00565b9261117e8451610ff3565b956020968761118d888c610f20565b510152835b8551898216908110156111d657908a610e68838b6111c98c6111c36111be6110ec8f9a6111d19b610f20565b611025565b95610f20565b510151610f20565b611192565b5050989295509861120593506111fd6111f66110ec604093979497610f10565b9289610f20565b510152610d34565b9491909561111d565b5094505093505060a0830152565b600185526110fe565b90918060409360208452816020850152848401375f828201840152601f01601f1916010190565b909167ffffffffffffffff82165f5260016020526001600160a01b0360405f205416156112f8576112c8926112ab610a87610a8761129e60209667ffffffffffffffff165f52600160205260405f2090565b546001600160a01b031690565b906040518095819482936322bb937360e11b845260048401611225565b03915afa908115610b7a575f916112dd575090565b6112f5915060203d8111610b7357610b6481836106ec565b90565b60405162461bcd60e51b815260206004820152601660248201527f636861696e207665726966696572206e6f7420736574000000000000000000006044820152606490fd5b6fffffffffffffffffffffffffffffffff19903581811693926010811061136357505050565b60100360031b82901b16169150565b7fffffffffffffffff00000000000000000000000000000000000000000000000090358181169392600881106113a757505050565b60080360031b82901b16169150565b91906113c061073d565b928161016011610140578180826114076113f26113ec6113e66114bb986110a698610c18565b9061133d565b60801c90565b6fffffffffffffffffffffffffffffffff1690565b61014082013560801b178752611429611423610deb8484610c2b565b60801b90565b61143c6113f26113ec6113e68686610c3e565b176020880152611462611455610e08610e028585610c51565b63ffffffff166040890152565b61149261148161147b6114758585610c64565b90611372565b60c01c90565b67ffffffffffffffff166060890152565b6114b66114a561147b6114758585610c77565b67ffffffffffffffff166080890152565b610c8a565b60a0830152565b5f54906001600160a01b0380911691826001600160a01b03198216175f55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b60405190611514826106cb565b5f6020838281520152565b611527611507565b5060208151916040519261153a846106cb565b835201602082015290565b9060018201809211610d4557565b91908201809211610d4557565b5f198114610d455760010190565b6115778161163f565b156101405761158581611788565b61158e81610f62565b9161159c60405193846106ec565b818352601f196115ab83610f62565b015f5b8181106116285750506115cf6020809201516115c98161186e565b90611553565b5f905b8382106115e0575050505090565b61161c816115f0611622936117e9565b906115f961072e565b828152818782015261160b868a610f20565b526116168589610f20565b50611553565b91611560565b906115d2565b602090611633611507565b828288010152016115ae565b80511561165e57602060c0910151515f1a1061165a57600190565b5f90565b505f90565b8051601581036101405780151590816116ab575b50156101405761168e6001600160a01b039161170f565b9051906020811061169e57501690565b6020036101000a90041690565b6021915011155f611677565b60bf19810191908211610d4557565b607f19810191908211610d4557565b6020039060208211610d4557565b5f19810191908211610d4557565b60f619810191908211610d4557565b60b619810191908211610d4557565b90602082019161171f835161186e565b925190838201809211610d455751928303928311610d45579190565b8051156101405761174e6112f59161170f565b61175a8193929361077e565b9261176860405194856106ec565b818452601f196117778361077e565b0136602086013783602001906118db565b80511561165e575f90602081019081516117a18161186e565b8101809111610d4557915190518101809111610d455791905b8281106117c75750905090565b6117d0816117e9565b8101809111610d45576117e39091611560565b906117ba565b80515f1a9060808210156117fe575050600190565b60b882101561181957506118146112f5916116c6565b611545565b9060c081101561183d5760b51991600160b783602003016101000a91015104010190565b9060f882101561185457506118146112f5916116b7565b60010151602082900360f7016101000a90040160f5190190565b515f1a608081101561187f57505f90565b60b8811080156118b6575b156118955750600190565b60c08110156118aa576118146112f591611700565b6118146112f5916116f1565b5060c0811015801561188a575060f8811061188a565b601f8111610d45576101000a90565b9290919283156119525792915b60209384841061191d5780518252848101809111610d4557938101809111610d455791601f198101908111610d4557916118e8565b919350918061192b57505050565b61193f61193a611944926116d5565b6118cc565b6116e3565b905182518216911916179052565b5091505056fea264697066735822122027b9aadb56495bdd5734e7501cbf301238a21871428e6eb0e4d11778688e514c64736f6c63430008150033",
}

// ReceiptVerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use ReceiptVerifierMetaData.ABI instead.
var ReceiptVerifierABI = ReceiptVerifierMetaData.ABI

// ReceiptVerifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ReceiptVerifierMetaData.Bin instead.
var ReceiptVerifierBin = ReceiptVerifierMetaData.Bin

// DeployReceiptVerifier deploys a new Ethereum contract, binding an instance of ReceiptVerifier to it.
func DeployReceiptVerifier(auth *bind.TransactOpts, backend bind.ContractBackend, _blockChunks common.Address) (common.Address, *types.Transaction, *ReceiptVerifier, error) {
	parsed, err := ReceiptVerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ReceiptVerifierBin), backend, _blockChunks)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ReceiptVerifier{ReceiptVerifierCaller: ReceiptVerifierCaller{contract: contract}, ReceiptVerifierTransactor: ReceiptVerifierTransactor{contract: contract}, ReceiptVerifierFilterer: ReceiptVerifierFilterer{contract: contract}}, nil
}

// ReceiptVerifier is an auto generated Go binding around an Ethereum contract.
type ReceiptVerifier struct {
	ReceiptVerifierCaller     // Read-only binding to the contract
	ReceiptVerifierTransactor // Write-only binding to the contract
	ReceiptVerifierFilterer   // Log filterer for contract events
}

// ReceiptVerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type ReceiptVerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReceiptVerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ReceiptVerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReceiptVerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ReceiptVerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReceiptVerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ReceiptVerifierSession struct {
	Contract     *ReceiptVerifier  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ReceiptVerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ReceiptVerifierCallerSession struct {
	Contract *ReceiptVerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ReceiptVerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ReceiptVerifierTransactorSession struct {
	Contract     *ReceiptVerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ReceiptVerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type ReceiptVerifierRaw struct {
	Contract *ReceiptVerifier // Generic contract binding to access the raw methods on
}

// ReceiptVerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ReceiptVerifierCallerRaw struct {
	Contract *ReceiptVerifierCaller // Generic read-only contract binding to access the raw methods on
}

// ReceiptVerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ReceiptVerifierTransactorRaw struct {
	Contract *ReceiptVerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewReceiptVerifier creates a new instance of ReceiptVerifier, bound to a specific deployed contract.
func NewReceiptVerifier(address common.Address, backend bind.ContractBackend) (*ReceiptVerifier, error) {
	contract, err := bindReceiptVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ReceiptVerifier{ReceiptVerifierCaller: ReceiptVerifierCaller{contract: contract}, ReceiptVerifierTransactor: ReceiptVerifierTransactor{contract: contract}, ReceiptVerifierFilterer: ReceiptVerifierFilterer{contract: contract}}, nil
}

// NewReceiptVerifierCaller creates a new read-only instance of ReceiptVerifier, bound to a specific deployed contract.
func NewReceiptVerifierCaller(address common.Address, caller bind.ContractCaller) (*ReceiptVerifierCaller, error) {
	contract, err := bindReceiptVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ReceiptVerifierCaller{contract: contract}, nil
}

// NewReceiptVerifierTransactor creates a new write-only instance of ReceiptVerifier, bound to a specific deployed contract.
func NewReceiptVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*ReceiptVerifierTransactor, error) {
	contract, err := bindReceiptVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ReceiptVerifierTransactor{contract: contract}, nil
}

// NewReceiptVerifierFilterer creates a new log filterer instance of ReceiptVerifier, bound to a specific deployed contract.
func NewReceiptVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*ReceiptVerifierFilterer, error) {
	contract, err := bindReceiptVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ReceiptVerifierFilterer{contract: contract}, nil
}

// bindReceiptVerifier binds a generic wrapper to an already deployed contract.
func bindReceiptVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ReceiptVerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ReceiptVerifier *ReceiptVerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ReceiptVerifier.Contract.ReceiptVerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ReceiptVerifier *ReceiptVerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReceiptVerifier.Contract.ReceiptVerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ReceiptVerifier *ReceiptVerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ReceiptVerifier.Contract.ReceiptVerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ReceiptVerifier *ReceiptVerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ReceiptVerifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ReceiptVerifier *ReceiptVerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReceiptVerifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ReceiptVerifier *ReceiptVerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ReceiptVerifier.Contract.contract.Transact(opts, method, params...)
}

// BlockChunks is a free data retrieval call binding the contract method 0x724796ed.
//
// Solidity: function blockChunks() view returns(address)
func (_ReceiptVerifier *ReceiptVerifierCaller) BlockChunks(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ReceiptVerifier.contract.Call(opts, &out, "blockChunks")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BlockChunks is a free data retrieval call binding the contract method 0x724796ed.
//
// Solidity: function blockChunks() view returns(address)
func (_ReceiptVerifier *ReceiptVerifierSession) BlockChunks() (common.Address, error) {
	return _ReceiptVerifier.Contract.BlockChunks(&_ReceiptVerifier.CallOpts)
}

// BlockChunks is a free data retrieval call binding the contract method 0x724796ed.
//
// Solidity: function blockChunks() view returns(address)
func (_ReceiptVerifier *ReceiptVerifierCallerSession) BlockChunks() (common.Address, error) {
	return _ReceiptVerifier.Contract.BlockChunks(&_ReceiptVerifier.CallOpts)
}

// DecodeReceipt is a free data retrieval call binding the contract method 0xc109ae5d.
//
// Solidity: function decodeReceipt(bytes receiptRaw) pure returns((bool,uint64,bytes32,uint32,uint64,(address,bytes32[],bytes)[]) info)
func (_ReceiptVerifier *ReceiptVerifierCaller) DecodeReceipt(opts *bind.CallOpts, receiptRaw []byte) (IReceiptVerifierReceiptInfo, error) {
	var out []interface{}
	err := _ReceiptVerifier.contract.Call(opts, &out, "decodeReceipt", receiptRaw)

	if err != nil {
		return *new(IReceiptVerifierReceiptInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(IReceiptVerifierReceiptInfo)).(*IReceiptVerifierReceiptInfo)

	return out0, err

}

// DecodeReceipt is a free data retrieval call binding the contract method 0xc109ae5d.
//
// Solidity: function decodeReceipt(bytes receiptRaw) pure returns((bool,uint64,bytes32,uint32,uint64,(address,bytes32[],bytes)[]) info)
func (_ReceiptVerifier *ReceiptVerifierSession) DecodeReceipt(receiptRaw []byte) (IReceiptVerifierReceiptInfo, error) {
	return _ReceiptVerifier.Contract.DecodeReceipt(&_ReceiptVerifier.CallOpts, receiptRaw)
}

// DecodeReceipt is a free data retrieval call binding the contract method 0xc109ae5d.
//
// Solidity: function decodeReceipt(bytes receiptRaw) pure returns((bool,uint64,bytes32,uint32,uint64,(address,bytes32[],bytes)[]) info)
func (_ReceiptVerifier *ReceiptVerifierCallerSession) DecodeReceipt(receiptRaw []byte) (IReceiptVerifierReceiptInfo, error) {
	return _ReceiptVerifier.Contract.DecodeReceipt(&_ReceiptVerifier.CallOpts, receiptRaw)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ReceiptVerifier *ReceiptVerifierCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ReceiptVerifier.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ReceiptVerifier *ReceiptVerifierSession) Owner() (common.Address, error) {
	return _ReceiptVerifier.Contract.Owner(&_ReceiptVerifier.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ReceiptVerifier *ReceiptVerifierCallerSession) Owner() (common.Address, error) {
	return _ReceiptVerifier.Contract.Owner(&_ReceiptVerifier.CallOpts)
}

// VerifierAddresses is a free data retrieval call binding the contract method 0xf5cec6af.
//
// Solidity: function verifierAddresses(uint64 ) view returns(address)
func (_ReceiptVerifier *ReceiptVerifierCaller) VerifierAddresses(opts *bind.CallOpts, arg0 uint64) (common.Address, error) {
	var out []interface{}
	err := _ReceiptVerifier.contract.Call(opts, &out, "verifierAddresses", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VerifierAddresses is a free data retrieval call binding the contract method 0xf5cec6af.
//
// Solidity: function verifierAddresses(uint64 ) view returns(address)
func (_ReceiptVerifier *ReceiptVerifierSession) VerifierAddresses(arg0 uint64) (common.Address, error) {
	return _ReceiptVerifier.Contract.VerifierAddresses(&_ReceiptVerifier.CallOpts, arg0)
}

// VerifierAddresses is a free data retrieval call binding the contract method 0xf5cec6af.
//
// Solidity: function verifierAddresses(uint64 ) view returns(address)
func (_ReceiptVerifier *ReceiptVerifierCallerSession) VerifierAddresses(arg0 uint64) (common.Address, error) {
	return _ReceiptVerifier.Contract.VerifierAddresses(&_ReceiptVerifier.CallOpts, arg0)
}

// VerifyReceipt is a free data retrieval call binding the contract method 0x68ac2f78.
//
// Solidity: function verifyReceipt(bytes receiptRaw, bytes proofData, bytes auxiBlkVerifyInfo) view returns((bool,uint64,bytes32,uint32,uint64,(address,bytes32[],bytes)[]) info)
func (_ReceiptVerifier *ReceiptVerifierCaller) VerifyReceipt(opts *bind.CallOpts, receiptRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (IReceiptVerifierReceiptInfo, error) {
	var out []interface{}
	err := _ReceiptVerifier.contract.Call(opts, &out, "verifyReceipt", receiptRaw, proofData, auxiBlkVerifyInfo)

	if err != nil {
		return *new(IReceiptVerifierReceiptInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(IReceiptVerifierReceiptInfo)).(*IReceiptVerifierReceiptInfo)

	return out0, err

}

// VerifyReceipt is a free data retrieval call binding the contract method 0x68ac2f78.
//
// Solidity: function verifyReceipt(bytes receiptRaw, bytes proofData, bytes auxiBlkVerifyInfo) view returns((bool,uint64,bytes32,uint32,uint64,(address,bytes32[],bytes)[]) info)
func (_ReceiptVerifier *ReceiptVerifierSession) VerifyReceipt(receiptRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (IReceiptVerifierReceiptInfo, error) {
	return _ReceiptVerifier.Contract.VerifyReceipt(&_ReceiptVerifier.CallOpts, receiptRaw, proofData, auxiBlkVerifyInfo)
}

// VerifyReceipt is a free data retrieval call binding the contract method 0x68ac2f78.
//
// Solidity: function verifyReceipt(bytes receiptRaw, bytes proofData, bytes auxiBlkVerifyInfo) view returns((bool,uint64,bytes32,uint32,uint64,(address,bytes32[],bytes)[]) info)
func (_ReceiptVerifier *ReceiptVerifierCallerSession) VerifyReceipt(receiptRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (IReceiptVerifierReceiptInfo, error) {
	return _ReceiptVerifier.Contract.VerifyReceipt(&_ReceiptVerifier.CallOpts, receiptRaw, proofData, auxiBlkVerifyInfo)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ReceiptVerifier *ReceiptVerifierTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReceiptVerifier.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ReceiptVerifier *ReceiptVerifierSession) RenounceOwnership() (*types.Transaction, error) {
	return _ReceiptVerifier.Contract.RenounceOwnership(&_ReceiptVerifier.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ReceiptVerifier *ReceiptVerifierTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ReceiptVerifier.Contract.RenounceOwnership(&_ReceiptVerifier.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ReceiptVerifier *ReceiptVerifierTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ReceiptVerifier.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ReceiptVerifier *ReceiptVerifierSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ReceiptVerifier.Contract.TransferOwnership(&_ReceiptVerifier.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ReceiptVerifier *ReceiptVerifierTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ReceiptVerifier.Contract.TransferOwnership(&_ReceiptVerifier.TransactOpts, newOwner)
}

// UpdateBlockChunks is a paid mutator transaction binding the contract method 0x1eeb86da.
//
// Solidity: function updateBlockChunks(address _blockChunks) returns()
func (_ReceiptVerifier *ReceiptVerifierTransactor) UpdateBlockChunks(opts *bind.TransactOpts, _blockChunks common.Address) (*types.Transaction, error) {
	return _ReceiptVerifier.contract.Transact(opts, "updateBlockChunks", _blockChunks)
}

// UpdateBlockChunks is a paid mutator transaction binding the contract method 0x1eeb86da.
//
// Solidity: function updateBlockChunks(address _blockChunks) returns()
func (_ReceiptVerifier *ReceiptVerifierSession) UpdateBlockChunks(_blockChunks common.Address) (*types.Transaction, error) {
	return _ReceiptVerifier.Contract.UpdateBlockChunks(&_ReceiptVerifier.TransactOpts, _blockChunks)
}

// UpdateBlockChunks is a paid mutator transaction binding the contract method 0x1eeb86da.
//
// Solidity: function updateBlockChunks(address _blockChunks) returns()
func (_ReceiptVerifier *ReceiptVerifierTransactorSession) UpdateBlockChunks(_blockChunks common.Address) (*types.Transaction, error) {
	return _ReceiptVerifier.Contract.UpdateBlockChunks(&_ReceiptVerifier.TransactOpts, _blockChunks)
}

// UpdateVerifierAddress is a paid mutator transaction binding the contract method 0xec4ffc52.
//
// Solidity: function updateVerifierAddress(uint64 _chainId, address _verifierAddress) returns()
func (_ReceiptVerifier *ReceiptVerifierTransactor) UpdateVerifierAddress(opts *bind.TransactOpts, _chainId uint64, _verifierAddress common.Address) (*types.Transaction, error) {
	return _ReceiptVerifier.contract.Transact(opts, "updateVerifierAddress", _chainId, _verifierAddress)
}

// UpdateVerifierAddress is a paid mutator transaction binding the contract method 0xec4ffc52.
//
// Solidity: function updateVerifierAddress(uint64 _chainId, address _verifierAddress) returns()
func (_ReceiptVerifier *ReceiptVerifierSession) UpdateVerifierAddress(_chainId uint64, _verifierAddress common.Address) (*types.Transaction, error) {
	return _ReceiptVerifier.Contract.UpdateVerifierAddress(&_ReceiptVerifier.TransactOpts, _chainId, _verifierAddress)
}

// UpdateVerifierAddress is a paid mutator transaction binding the contract method 0xec4ffc52.
//
// Solidity: function updateVerifierAddress(uint64 _chainId, address _verifierAddress) returns()
func (_ReceiptVerifier *ReceiptVerifierTransactorSession) UpdateVerifierAddress(_chainId uint64, _verifierAddress common.Address) (*types.Transaction, error) {
	return _ReceiptVerifier.Contract.UpdateVerifierAddress(&_ReceiptVerifier.TransactOpts, _chainId, _verifierAddress)
}

// VerifyReceiptAndLog is a paid mutator transaction binding the contract method 0x3996da7a.
//
// Solidity: function verifyReceiptAndLog(bytes receiptRaw, bytes proofData, bytes auxiBlkVerifyInfo) returns((bool,uint64,bytes32,uint32,uint64,(address,bytes32[],bytes)[]) info)
func (_ReceiptVerifier *ReceiptVerifierTransactor) VerifyReceiptAndLog(opts *bind.TransactOpts, receiptRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (*types.Transaction, error) {
	return _ReceiptVerifier.contract.Transact(opts, "verifyReceiptAndLog", receiptRaw, proofData, auxiBlkVerifyInfo)
}

// VerifyReceiptAndLog is a paid mutator transaction binding the contract method 0x3996da7a.
//
// Solidity: function verifyReceiptAndLog(bytes receiptRaw, bytes proofData, bytes auxiBlkVerifyInfo) returns((bool,uint64,bytes32,uint32,uint64,(address,bytes32[],bytes)[]) info)
func (_ReceiptVerifier *ReceiptVerifierSession) VerifyReceiptAndLog(receiptRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (*types.Transaction, error) {
	return _ReceiptVerifier.Contract.VerifyReceiptAndLog(&_ReceiptVerifier.TransactOpts, receiptRaw, proofData, auxiBlkVerifyInfo)
}

// VerifyReceiptAndLog is a paid mutator transaction binding the contract method 0x3996da7a.
//
// Solidity: function verifyReceiptAndLog(bytes receiptRaw, bytes proofData, bytes auxiBlkVerifyInfo) returns((bool,uint64,bytes32,uint32,uint64,(address,bytes32[],bytes)[]) info)
func (_ReceiptVerifier *ReceiptVerifierTransactorSession) VerifyReceiptAndLog(receiptRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (*types.Transaction, error) {
	return _ReceiptVerifier.Contract.VerifyReceiptAndLog(&_ReceiptVerifier.TransactOpts, receiptRaw, proofData, auxiBlkVerifyInfo)
}

// ReceiptVerifierOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ReceiptVerifier contract.
type ReceiptVerifierOwnershipTransferredIterator struct {
	Event *ReceiptVerifierOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReceiptVerifierOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReceiptVerifierOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReceiptVerifierOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReceiptVerifierOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReceiptVerifierOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReceiptVerifierOwnershipTransferred represents a OwnershipTransferred event raised by the ReceiptVerifier contract.
type ReceiptVerifierOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ReceiptVerifier *ReceiptVerifierFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ReceiptVerifierOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ReceiptVerifier.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ReceiptVerifierOwnershipTransferredIterator{contract: _ReceiptVerifier.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ReceiptVerifier *ReceiptVerifierFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ReceiptVerifierOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ReceiptVerifier.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReceiptVerifierOwnershipTransferred)
				if err := _ReceiptVerifier.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ReceiptVerifier *ReceiptVerifierFilterer) ParseOwnershipTransferred(log types.Log) (*ReceiptVerifierOwnershipTransferred, error) {
	event := new(ReceiptVerifierOwnershipTransferred)
	if err := _ReceiptVerifier.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ReceiptVerifierUpdateBlockChunksIterator is returned from FilterUpdateBlockChunks and is used to iterate over the raw logs and unpacked data for UpdateBlockChunks events raised by the ReceiptVerifier contract.
type ReceiptVerifierUpdateBlockChunksIterator struct {
	Event *ReceiptVerifierUpdateBlockChunks // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReceiptVerifierUpdateBlockChunksIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReceiptVerifierUpdateBlockChunks)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReceiptVerifierUpdateBlockChunks)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReceiptVerifierUpdateBlockChunksIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReceiptVerifierUpdateBlockChunksIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReceiptVerifierUpdateBlockChunks represents a UpdateBlockChunks event raised by the ReceiptVerifier contract.
type ReceiptVerifierUpdateBlockChunks struct {
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateBlockChunks is a free log retrieval operation binding the contract event 0x0addee9cb6aa9328bbfbe8282179a6737af344619320736b6918af70b6a94a98.
//
// Solidity: event UpdateBlockChunks(address newAddress)
func (_ReceiptVerifier *ReceiptVerifierFilterer) FilterUpdateBlockChunks(opts *bind.FilterOpts) (*ReceiptVerifierUpdateBlockChunksIterator, error) {

	logs, sub, err := _ReceiptVerifier.contract.FilterLogs(opts, "UpdateBlockChunks")
	if err != nil {
		return nil, err
	}
	return &ReceiptVerifierUpdateBlockChunksIterator{contract: _ReceiptVerifier.contract, event: "UpdateBlockChunks", logs: logs, sub: sub}, nil
}

// WatchUpdateBlockChunks is a free log subscription operation binding the contract event 0x0addee9cb6aa9328bbfbe8282179a6737af344619320736b6918af70b6a94a98.
//
// Solidity: event UpdateBlockChunks(address newAddress)
func (_ReceiptVerifier *ReceiptVerifierFilterer) WatchUpdateBlockChunks(opts *bind.WatchOpts, sink chan<- *ReceiptVerifierUpdateBlockChunks) (event.Subscription, error) {

	logs, sub, err := _ReceiptVerifier.contract.WatchLogs(opts, "UpdateBlockChunks")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReceiptVerifierUpdateBlockChunks)
				if err := _ReceiptVerifier.contract.UnpackLog(event, "UpdateBlockChunks", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateBlockChunks is a log parse operation binding the contract event 0x0addee9cb6aa9328bbfbe8282179a6737af344619320736b6918af70b6a94a98.
//
// Solidity: event UpdateBlockChunks(address newAddress)
func (_ReceiptVerifier *ReceiptVerifierFilterer) ParseUpdateBlockChunks(log types.Log) (*ReceiptVerifierUpdateBlockChunks, error) {
	event := new(ReceiptVerifierUpdateBlockChunks)
	if err := _ReceiptVerifier.contract.UnpackLog(event, "UpdateBlockChunks", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ReceiptVerifierUpdateVerifierAddressIterator is returned from FilterUpdateVerifierAddress and is used to iterate over the raw logs and unpacked data for UpdateVerifierAddress events raised by the ReceiptVerifier contract.
type ReceiptVerifierUpdateVerifierAddressIterator struct {
	Event *ReceiptVerifierUpdateVerifierAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReceiptVerifierUpdateVerifierAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReceiptVerifierUpdateVerifierAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReceiptVerifierUpdateVerifierAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReceiptVerifierUpdateVerifierAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReceiptVerifierUpdateVerifierAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReceiptVerifierUpdateVerifierAddress represents a UpdateVerifierAddress event raised by the ReceiptVerifier contract.
type ReceiptVerifierUpdateVerifierAddress struct {
	ChainId    uint64
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateVerifierAddress is a free log retrieval operation binding the contract event 0xfd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f.
//
// Solidity: event UpdateVerifierAddress(uint64 chainId, address newAddress)
func (_ReceiptVerifier *ReceiptVerifierFilterer) FilterUpdateVerifierAddress(opts *bind.FilterOpts) (*ReceiptVerifierUpdateVerifierAddressIterator, error) {

	logs, sub, err := _ReceiptVerifier.contract.FilterLogs(opts, "UpdateVerifierAddress")
	if err != nil {
		return nil, err
	}
	return &ReceiptVerifierUpdateVerifierAddressIterator{contract: _ReceiptVerifier.contract, event: "UpdateVerifierAddress", logs: logs, sub: sub}, nil
}

// WatchUpdateVerifierAddress is a free log subscription operation binding the contract event 0xfd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f.
//
// Solidity: event UpdateVerifierAddress(uint64 chainId, address newAddress)
func (_ReceiptVerifier *ReceiptVerifierFilterer) WatchUpdateVerifierAddress(opts *bind.WatchOpts, sink chan<- *ReceiptVerifierUpdateVerifierAddress) (event.Subscription, error) {

	logs, sub, err := _ReceiptVerifier.contract.WatchLogs(opts, "UpdateVerifierAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReceiptVerifierUpdateVerifierAddress)
				if err := _ReceiptVerifier.contract.UnpackLog(event, "UpdateVerifierAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateVerifierAddress is a log parse operation binding the contract event 0xfd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f.
//
// Solidity: event UpdateVerifierAddress(uint64 chainId, address newAddress)
func (_ReceiptVerifier *ReceiptVerifierFilterer) ParseUpdateVerifierAddress(log types.Log) (*ReceiptVerifierUpdateVerifierAddress, error) {
	event := new(ReceiptVerifierUpdateVerifierAddress)
	if err := _ReceiptVerifier.contract.UnpackLog(event, "UpdateVerifierAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ReceiptVerifierVerifiedReceiptIterator is returned from FilterVerifiedReceipt and is used to iterate over the raw logs and unpacked data for VerifiedReceipt events raised by the ReceiptVerifier contract.
type ReceiptVerifierVerifiedReceiptIterator struct {
	Event *ReceiptVerifierVerifiedReceipt // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ReceiptVerifierVerifiedReceiptIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ReceiptVerifierVerifiedReceipt)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ReceiptVerifierVerifiedReceipt)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ReceiptVerifierVerifiedReceiptIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ReceiptVerifierVerifiedReceiptIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ReceiptVerifierVerifiedReceipt represents a VerifiedReceipt event raised by the ReceiptVerifier contract.
type ReceiptVerifierVerifiedReceipt struct {
	ChainId     uint64
	ReceiptHash [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterVerifiedReceipt is a free log retrieval operation binding the contract event 0xa5db3bb7a25cc2804c7835ab71b15513b8c68585e3593c3fdee39a8837547366.
//
// Solidity: event VerifiedReceipt(uint64 chainId, bytes32 receiptHash)
func (_ReceiptVerifier *ReceiptVerifierFilterer) FilterVerifiedReceipt(opts *bind.FilterOpts) (*ReceiptVerifierVerifiedReceiptIterator, error) {

	logs, sub, err := _ReceiptVerifier.contract.FilterLogs(opts, "VerifiedReceipt")
	if err != nil {
		return nil, err
	}
	return &ReceiptVerifierVerifiedReceiptIterator{contract: _ReceiptVerifier.contract, event: "VerifiedReceipt", logs: logs, sub: sub}, nil
}

// WatchVerifiedReceipt is a free log subscription operation binding the contract event 0xa5db3bb7a25cc2804c7835ab71b15513b8c68585e3593c3fdee39a8837547366.
//
// Solidity: event VerifiedReceipt(uint64 chainId, bytes32 receiptHash)
func (_ReceiptVerifier *ReceiptVerifierFilterer) WatchVerifiedReceipt(opts *bind.WatchOpts, sink chan<- *ReceiptVerifierVerifiedReceipt) (event.Subscription, error) {

	logs, sub, err := _ReceiptVerifier.contract.WatchLogs(opts, "VerifiedReceipt")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ReceiptVerifierVerifiedReceipt)
				if err := _ReceiptVerifier.contract.UnpackLog(event, "VerifiedReceipt", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifiedReceipt is a log parse operation binding the contract event 0xa5db3bb7a25cc2804c7835ab71b15513b8c68585e3593c3fdee39a8837547366.
//
// Solidity: event VerifiedReceipt(uint64 chainId, bytes32 receiptHash)
func (_ReceiptVerifier *ReceiptVerifierFilterer) ParseVerifiedReceipt(log types.Log) (*ReceiptVerifierVerifiedReceipt, error) {
	event := new(ReceiptVerifierVerifiedReceipt)
	if err := _ReceiptVerifier.contract.UnpackLog(event, "VerifiedReceipt", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ReentrancyGuardMetaData contains all meta data concerning the ReentrancyGuard contract.
var ReentrancyGuardMetaData = &bind.MetaData{
	ABI: "[]",
}

// ReentrancyGuardABI is the input ABI used to generate the binding from.
// Deprecated: Use ReentrancyGuardMetaData.ABI instead.
var ReentrancyGuardABI = ReentrancyGuardMetaData.ABI

// ReentrancyGuard is an auto generated Go binding around an Ethereum contract.
type ReentrancyGuard struct {
	ReentrancyGuardCaller     // Read-only binding to the contract
	ReentrancyGuardTransactor // Write-only binding to the contract
	ReentrancyGuardFilterer   // Log filterer for contract events
}

// ReentrancyGuardCaller is an auto generated read-only Go binding around an Ethereum contract.
type ReentrancyGuardCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReentrancyGuardTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ReentrancyGuardTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReentrancyGuardFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ReentrancyGuardFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ReentrancyGuardSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ReentrancyGuardSession struct {
	Contract     *ReentrancyGuard  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ReentrancyGuardCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ReentrancyGuardCallerSession struct {
	Contract *ReentrancyGuardCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ReentrancyGuardTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ReentrancyGuardTransactorSession struct {
	Contract     *ReentrancyGuardTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ReentrancyGuardRaw is an auto generated low-level Go binding around an Ethereum contract.
type ReentrancyGuardRaw struct {
	Contract *ReentrancyGuard // Generic contract binding to access the raw methods on
}

// ReentrancyGuardCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ReentrancyGuardCallerRaw struct {
	Contract *ReentrancyGuardCaller // Generic read-only contract binding to access the raw methods on
}

// ReentrancyGuardTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ReentrancyGuardTransactorRaw struct {
	Contract *ReentrancyGuardTransactor // Generic write-only contract binding to access the raw methods on
}

// NewReentrancyGuard creates a new instance of ReentrancyGuard, bound to a specific deployed contract.
func NewReentrancyGuard(address common.Address, backend bind.ContractBackend) (*ReentrancyGuard, error) {
	contract, err := bindReentrancyGuard(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ReentrancyGuard{ReentrancyGuardCaller: ReentrancyGuardCaller{contract: contract}, ReentrancyGuardTransactor: ReentrancyGuardTransactor{contract: contract}, ReentrancyGuardFilterer: ReentrancyGuardFilterer{contract: contract}}, nil
}

// NewReentrancyGuardCaller creates a new read-only instance of ReentrancyGuard, bound to a specific deployed contract.
func NewReentrancyGuardCaller(address common.Address, caller bind.ContractCaller) (*ReentrancyGuardCaller, error) {
	contract, err := bindReentrancyGuard(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ReentrancyGuardCaller{contract: contract}, nil
}

// NewReentrancyGuardTransactor creates a new write-only instance of ReentrancyGuard, bound to a specific deployed contract.
func NewReentrancyGuardTransactor(address common.Address, transactor bind.ContractTransactor) (*ReentrancyGuardTransactor, error) {
	contract, err := bindReentrancyGuard(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ReentrancyGuardTransactor{contract: contract}, nil
}

// NewReentrancyGuardFilterer creates a new log filterer instance of ReentrancyGuard, bound to a specific deployed contract.
func NewReentrancyGuardFilterer(address common.Address, filterer bind.ContractFilterer) (*ReentrancyGuardFilterer, error) {
	contract, err := bindReentrancyGuard(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ReentrancyGuardFilterer{contract: contract}, nil
}

// bindReentrancyGuard binds a generic wrapper to an already deployed contract.
func bindReentrancyGuard(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ReentrancyGuardMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ReentrancyGuard *ReentrancyGuardRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ReentrancyGuard.Contract.ReentrancyGuardCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ReentrancyGuard *ReentrancyGuardRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReentrancyGuard.Contract.ReentrancyGuardTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ReentrancyGuard *ReentrancyGuardRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ReentrancyGuard.Contract.ReentrancyGuardTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ReentrancyGuard *ReentrancyGuardCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ReentrancyGuard.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ReentrancyGuard *ReentrancyGuardTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ReentrancyGuard.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ReentrancyGuard *ReentrancyGuardTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ReentrancyGuard.Contract.contract.Transact(opts, method, params...)
}

// SMTMetaData contains all meta data concerning the SMT contract.
var SMTMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"_chainIds\",\"type\":\"uint64[]\"},{\"internalType\":\"address[]\",\"name\":\"_anchorProviders\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_verifiers\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_initRoots\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"anchorProvider\",\"type\":\"address\"}],\"name\":\"AnchorProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"endBlockNum\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"bufferIndex\",\"type\":\"uint8\"}],\"name\":\"SmtRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"VerifierUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUFFER_SIZE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"anchorProviders\",\"outputs\":[{\"internalType\":\"contractIAnchorBlocks\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"curBufferIndices\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"getLatestRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"bufferIndex\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"bufferIndex\",\"type\":\"uint8\"}],\"name\":\"getRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"smtRoot\",\"type\":\"bytes32\"}],\"name\":\"isSmtRootValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"anchorProvider\",\"type\":\"address\"}],\"name\":\"setAnchorProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"}],\"name\":\"setVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"smtRoots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"newSmtRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"endBlockNum\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"endBlockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"nextChunkMerkleRoot\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commitment\",\"type\":\"uint256[2]\"}],\"internalType\":\"structIVerifier.Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"commitPub\",\"type\":\"bytes32\"}],\"internalType\":\"structISMT.SmtUpdate\",\"name\":\"u\",\"type\":\"tuple\"}],\"name\":\"updateRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"verifiers\",\"outputs\":[{\"internalType\":\"contractIVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// SMTABI is the input ABI used to generate the binding from.
// Deprecated: Use SMTMetaData.ABI instead.
var SMTABI = SMTMetaData.ABI

// SMTBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SMTMetaData.Bin instead.
var SMTBin = SMTMetaData.Bin

// DeploySMT deploys a new Ethereum contract, binding an instance of SMT to it.
func DeploySMT(auth *bind.TransactOpts, backend bind.ContractBackend, _chainIds []uint64, _anchorProviders []common.Address, _verifiers []common.Address, _initRoots [][32]byte) (common.Address, *types.Transaction, *SMT, error) {
	parsed, err := SMTMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SMTBin), backend, _chainIds, _anchorProviders, _verifiers, _initRoots)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SMT{SMTCaller: SMTCaller{contract: contract}, SMTTransactor: SMTTransactor{contract: contract}, SMTFilterer: SMTFilterer{contract: contract}}, nil
}

// SMT is an auto generated Go binding around an Ethereum contract.
type SMT struct {
	SMTCaller     // Read-only binding to the contract
	SMTTransactor // Write-only binding to the contract
	SMTFilterer   // Log filterer for contract events
}

// SMTCaller is an auto generated read-only Go binding around an Ethereum contract.
type SMTCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SMTTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SMTTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SMTFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SMTFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SMTSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SMTSession struct {
	Contract     *SMT              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SMTCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SMTCallerSession struct {
	Contract *SMTCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SMTTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SMTTransactorSession struct {
	Contract     *SMTTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SMTRaw is an auto generated low-level Go binding around an Ethereum contract.
type SMTRaw struct {
	Contract *SMT // Generic contract binding to access the raw methods on
}

// SMTCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SMTCallerRaw struct {
	Contract *SMTCaller // Generic read-only contract binding to access the raw methods on
}

// SMTTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SMTTransactorRaw struct {
	Contract *SMTTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSMT creates a new instance of SMT, bound to a specific deployed contract.
func NewSMT(address common.Address, backend bind.ContractBackend) (*SMT, error) {
	contract, err := bindSMT(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SMT{SMTCaller: SMTCaller{contract: contract}, SMTTransactor: SMTTransactor{contract: contract}, SMTFilterer: SMTFilterer{contract: contract}}, nil
}

// NewSMTCaller creates a new read-only instance of SMT, bound to a specific deployed contract.
func NewSMTCaller(address common.Address, caller bind.ContractCaller) (*SMTCaller, error) {
	contract, err := bindSMT(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SMTCaller{contract: contract}, nil
}

// NewSMTTransactor creates a new write-only instance of SMT, bound to a specific deployed contract.
func NewSMTTransactor(address common.Address, transactor bind.ContractTransactor) (*SMTTransactor, error) {
	contract, err := bindSMT(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SMTTransactor{contract: contract}, nil
}

// NewSMTFilterer creates a new log filterer instance of SMT, bound to a specific deployed contract.
func NewSMTFilterer(address common.Address, filterer bind.ContractFilterer) (*SMTFilterer, error) {
	contract, err := bindSMT(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SMTFilterer{contract: contract}, nil
}

// bindSMT binds a generic wrapper to an already deployed contract.
func bindSMT(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SMTMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SMT *SMTRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SMT.Contract.SMTCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SMT *SMTRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SMT.Contract.SMTTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SMT *SMTRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SMT.Contract.SMTTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SMT *SMTCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SMT.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SMT *SMTTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SMT.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SMT *SMTTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SMT.Contract.contract.Transact(opts, method, params...)
}

// BUFFERSIZE is a free data retrieval call binding the contract method 0x004e394e.
//
// Solidity: function BUFFER_SIZE() view returns(uint8)
func (_SMT *SMTCaller) BUFFERSIZE(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _SMT.contract.Call(opts, &out, "BUFFER_SIZE")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// BUFFERSIZE is a free data retrieval call binding the contract method 0x004e394e.
//
// Solidity: function BUFFER_SIZE() view returns(uint8)
func (_SMT *SMTSession) BUFFERSIZE() (uint8, error) {
	return _SMT.Contract.BUFFERSIZE(&_SMT.CallOpts)
}

// BUFFERSIZE is a free data retrieval call binding the contract method 0x004e394e.
//
// Solidity: function BUFFER_SIZE() view returns(uint8)
func (_SMT *SMTCallerSession) BUFFERSIZE() (uint8, error) {
	return _SMT.Contract.BUFFERSIZE(&_SMT.CallOpts)
}

// AnchorProviders is a free data retrieval call binding the contract method 0xafe8154b.
//
// Solidity: function anchorProviders(uint64 ) view returns(address)
func (_SMT *SMTCaller) AnchorProviders(opts *bind.CallOpts, arg0 uint64) (common.Address, error) {
	var out []interface{}
	err := _SMT.contract.Call(opts, &out, "anchorProviders", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AnchorProviders is a free data retrieval call binding the contract method 0xafe8154b.
//
// Solidity: function anchorProviders(uint64 ) view returns(address)
func (_SMT *SMTSession) AnchorProviders(arg0 uint64) (common.Address, error) {
	return _SMT.Contract.AnchorProviders(&_SMT.CallOpts, arg0)
}

// AnchorProviders is a free data retrieval call binding the contract method 0xafe8154b.
//
// Solidity: function anchorProviders(uint64 ) view returns(address)
func (_SMT *SMTCallerSession) AnchorProviders(arg0 uint64) (common.Address, error) {
	return _SMT.Contract.AnchorProviders(&_SMT.CallOpts, arg0)
}

// CurBufferIndices is a free data retrieval call binding the contract method 0x679594fd.
//
// Solidity: function curBufferIndices(uint64 ) view returns(uint8)
func (_SMT *SMTCaller) CurBufferIndices(opts *bind.CallOpts, arg0 uint64) (uint8, error) {
	var out []interface{}
	err := _SMT.contract.Call(opts, &out, "curBufferIndices", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// CurBufferIndices is a free data retrieval call binding the contract method 0x679594fd.
//
// Solidity: function curBufferIndices(uint64 ) view returns(uint8)
func (_SMT *SMTSession) CurBufferIndices(arg0 uint64) (uint8, error) {
	return _SMT.Contract.CurBufferIndices(&_SMT.CallOpts, arg0)
}

// CurBufferIndices is a free data retrieval call binding the contract method 0x679594fd.
//
// Solidity: function curBufferIndices(uint64 ) view returns(uint8)
func (_SMT *SMTCallerSession) CurBufferIndices(arg0 uint64) (uint8, error) {
	return _SMT.Contract.CurBufferIndices(&_SMT.CallOpts, arg0)
}

// GetLatestRoot is a free data retrieval call binding the contract method 0x479aa6da.
//
// Solidity: function getLatestRoot(uint64 chainId) view returns(bytes32 root, uint8 bufferIndex)
func (_SMT *SMTCaller) GetLatestRoot(opts *bind.CallOpts, chainId uint64) (struct {
	Root        [32]byte
	BufferIndex uint8
}, error) {
	var out []interface{}
	err := _SMT.contract.Call(opts, &out, "getLatestRoot", chainId)

	outstruct := new(struct {
		Root        [32]byte
		BufferIndex uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Root = *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)
	outstruct.BufferIndex = *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return *outstruct, err

}

// GetLatestRoot is a free data retrieval call binding the contract method 0x479aa6da.
//
// Solidity: function getLatestRoot(uint64 chainId) view returns(bytes32 root, uint8 bufferIndex)
func (_SMT *SMTSession) GetLatestRoot(chainId uint64) (struct {
	Root        [32]byte
	BufferIndex uint8
}, error) {
	return _SMT.Contract.GetLatestRoot(&_SMT.CallOpts, chainId)
}

// GetLatestRoot is a free data retrieval call binding the contract method 0x479aa6da.
//
// Solidity: function getLatestRoot(uint64 chainId) view returns(bytes32 root, uint8 bufferIndex)
func (_SMT *SMTCallerSession) GetLatestRoot(chainId uint64) (struct {
	Root        [32]byte
	BufferIndex uint8
}, error) {
	return _SMT.Contract.GetLatestRoot(&_SMT.CallOpts, chainId)
}

// GetRoot is a free data retrieval call binding the contract method 0x7930508b.
//
// Solidity: function getRoot(uint64 chainId, uint8 bufferIndex) view returns(bytes32 root)
func (_SMT *SMTCaller) GetRoot(opts *bind.CallOpts, chainId uint64, bufferIndex uint8) ([32]byte, error) {
	var out []interface{}
	err := _SMT.contract.Call(opts, &out, "getRoot", chainId, bufferIndex)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoot is a free data retrieval call binding the contract method 0x7930508b.
//
// Solidity: function getRoot(uint64 chainId, uint8 bufferIndex) view returns(bytes32 root)
func (_SMT *SMTSession) GetRoot(chainId uint64, bufferIndex uint8) ([32]byte, error) {
	return _SMT.Contract.GetRoot(&_SMT.CallOpts, chainId, bufferIndex)
}

// GetRoot is a free data retrieval call binding the contract method 0x7930508b.
//
// Solidity: function getRoot(uint64 chainId, uint8 bufferIndex) view returns(bytes32 root)
func (_SMT *SMTCallerSession) GetRoot(chainId uint64, bufferIndex uint8) ([32]byte, error) {
	return _SMT.Contract.GetRoot(&_SMT.CallOpts, chainId, bufferIndex)
}

// IsSmtRootValid is a free data retrieval call binding the contract method 0x1019b616.
//
// Solidity: function isSmtRootValid(uint64 chainId, bytes32 smtRoot) view returns(bool)
func (_SMT *SMTCaller) IsSmtRootValid(opts *bind.CallOpts, chainId uint64, smtRoot [32]byte) (bool, error) {
	var out []interface{}
	err := _SMT.contract.Call(opts, &out, "isSmtRootValid", chainId, smtRoot)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsSmtRootValid is a free data retrieval call binding the contract method 0x1019b616.
//
// Solidity: function isSmtRootValid(uint64 chainId, bytes32 smtRoot) view returns(bool)
func (_SMT *SMTSession) IsSmtRootValid(chainId uint64, smtRoot [32]byte) (bool, error) {
	return _SMT.Contract.IsSmtRootValid(&_SMT.CallOpts, chainId, smtRoot)
}

// IsSmtRootValid is a free data retrieval call binding the contract method 0x1019b616.
//
// Solidity: function isSmtRootValid(uint64 chainId, bytes32 smtRoot) view returns(bool)
func (_SMT *SMTCallerSession) IsSmtRootValid(chainId uint64, smtRoot [32]byte) (bool, error) {
	return _SMT.Contract.IsSmtRootValid(&_SMT.CallOpts, chainId, smtRoot)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SMT *SMTCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SMT.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SMT *SMTSession) Owner() (common.Address, error) {
	return _SMT.Contract.Owner(&_SMT.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SMT *SMTCallerSession) Owner() (common.Address, error) {
	return _SMT.Contract.Owner(&_SMT.CallOpts)
}

// SmtRoots is a free data retrieval call binding the contract method 0xf9a885f3.
//
// Solidity: function smtRoots(uint64 , uint256 ) view returns(bytes32)
func (_SMT *SMTCaller) SmtRoots(opts *bind.CallOpts, arg0 uint64, arg1 *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _SMT.contract.Call(opts, &out, "smtRoots", arg0, arg1)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// SmtRoots is a free data retrieval call binding the contract method 0xf9a885f3.
//
// Solidity: function smtRoots(uint64 , uint256 ) view returns(bytes32)
func (_SMT *SMTSession) SmtRoots(arg0 uint64, arg1 *big.Int) ([32]byte, error) {
	return _SMT.Contract.SmtRoots(&_SMT.CallOpts, arg0, arg1)
}

// SmtRoots is a free data retrieval call binding the contract method 0xf9a885f3.
//
// Solidity: function smtRoots(uint64 , uint256 ) view returns(bytes32)
func (_SMT *SMTCallerSession) SmtRoots(arg0 uint64, arg1 *big.Int) ([32]byte, error) {
	return _SMT.Contract.SmtRoots(&_SMT.CallOpts, arg0, arg1)
}

// Verifiers is a free data retrieval call binding the contract method 0x8195408d.
//
// Solidity: function verifiers(uint64 ) view returns(address)
func (_SMT *SMTCaller) Verifiers(opts *bind.CallOpts, arg0 uint64) (common.Address, error) {
	var out []interface{}
	err := _SMT.contract.Call(opts, &out, "verifiers", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Verifiers is a free data retrieval call binding the contract method 0x8195408d.
//
// Solidity: function verifiers(uint64 ) view returns(address)
func (_SMT *SMTSession) Verifiers(arg0 uint64) (common.Address, error) {
	return _SMT.Contract.Verifiers(&_SMT.CallOpts, arg0)
}

// Verifiers is a free data retrieval call binding the contract method 0x8195408d.
//
// Solidity: function verifiers(uint64 ) view returns(address)
func (_SMT *SMTCallerSession) Verifiers(arg0 uint64) (common.Address, error) {
	return _SMT.Contract.Verifiers(&_SMT.CallOpts, arg0)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SMT *SMTTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SMT.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SMT *SMTSession) RenounceOwnership() (*types.Transaction, error) {
	return _SMT.Contract.RenounceOwnership(&_SMT.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SMT *SMTTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _SMT.Contract.RenounceOwnership(&_SMT.TransactOpts)
}

// SetAnchorProvider is a paid mutator transaction binding the contract method 0x5ca32bd8.
//
// Solidity: function setAnchorProvider(uint64 chainId, address anchorProvider) returns()
func (_SMT *SMTTransactor) SetAnchorProvider(opts *bind.TransactOpts, chainId uint64, anchorProvider common.Address) (*types.Transaction, error) {
	return _SMT.contract.Transact(opts, "setAnchorProvider", chainId, anchorProvider)
}

// SetAnchorProvider is a paid mutator transaction binding the contract method 0x5ca32bd8.
//
// Solidity: function setAnchorProvider(uint64 chainId, address anchorProvider) returns()
func (_SMT *SMTSession) SetAnchorProvider(chainId uint64, anchorProvider common.Address) (*types.Transaction, error) {
	return _SMT.Contract.SetAnchorProvider(&_SMT.TransactOpts, chainId, anchorProvider)
}

// SetAnchorProvider is a paid mutator transaction binding the contract method 0x5ca32bd8.
//
// Solidity: function setAnchorProvider(uint64 chainId, address anchorProvider) returns()
func (_SMT *SMTTransactorSession) SetAnchorProvider(chainId uint64, anchorProvider common.Address) (*types.Transaction, error) {
	return _SMT.Contract.SetAnchorProvider(&_SMT.TransactOpts, chainId, anchorProvider)
}

// SetVerifier is a paid mutator transaction binding the contract method 0x9c8413c5.
//
// Solidity: function setVerifier(uint64 chainId, address verifier) returns()
func (_SMT *SMTTransactor) SetVerifier(opts *bind.TransactOpts, chainId uint64, verifier common.Address) (*types.Transaction, error) {
	return _SMT.contract.Transact(opts, "setVerifier", chainId, verifier)
}

// SetVerifier is a paid mutator transaction binding the contract method 0x9c8413c5.
//
// Solidity: function setVerifier(uint64 chainId, address verifier) returns()
func (_SMT *SMTSession) SetVerifier(chainId uint64, verifier common.Address) (*types.Transaction, error) {
	return _SMT.Contract.SetVerifier(&_SMT.TransactOpts, chainId, verifier)
}

// SetVerifier is a paid mutator transaction binding the contract method 0x9c8413c5.
//
// Solidity: function setVerifier(uint64 chainId, address verifier) returns()
func (_SMT *SMTTransactorSession) SetVerifier(chainId uint64, verifier common.Address) (*types.Transaction, error) {
	return _SMT.Contract.SetVerifier(&_SMT.TransactOpts, chainId, verifier)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SMT *SMTTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _SMT.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SMT *SMTSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SMT.Contract.TransferOwnership(&_SMT.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SMT *SMTTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SMT.Contract.TransferOwnership(&_SMT.TransactOpts, newOwner)
}

// UpdateRoot is a paid mutator transaction binding the contract method 0x318a492d.
//
// Solidity: function updateRoot(uint64 chainId, (bytes32,uint64,bytes32,bytes32,(uint256[2],uint256[2][2],uint256[2],uint256[2]),bytes32) u) returns()
func (_SMT *SMTTransactor) UpdateRoot(opts *bind.TransactOpts, chainId uint64, u ISMTSmtUpdate) (*types.Transaction, error) {
	return _SMT.contract.Transact(opts, "updateRoot", chainId, u)
}

// UpdateRoot is a paid mutator transaction binding the contract method 0x318a492d.
//
// Solidity: function updateRoot(uint64 chainId, (bytes32,uint64,bytes32,bytes32,(uint256[2],uint256[2][2],uint256[2],uint256[2]),bytes32) u) returns()
func (_SMT *SMTSession) UpdateRoot(chainId uint64, u ISMTSmtUpdate) (*types.Transaction, error) {
	return _SMT.Contract.UpdateRoot(&_SMT.TransactOpts, chainId, u)
}

// UpdateRoot is a paid mutator transaction binding the contract method 0x318a492d.
//
// Solidity: function updateRoot(uint64 chainId, (bytes32,uint64,bytes32,bytes32,(uint256[2],uint256[2][2],uint256[2],uint256[2]),bytes32) u) returns()
func (_SMT *SMTTransactorSession) UpdateRoot(chainId uint64, u ISMTSmtUpdate) (*types.Transaction, error) {
	return _SMT.Contract.UpdateRoot(&_SMT.TransactOpts, chainId, u)
}

// SMTAnchorProviderUpdatedIterator is returned from FilterAnchorProviderUpdated and is used to iterate over the raw logs and unpacked data for AnchorProviderUpdated events raised by the SMT contract.
type SMTAnchorProviderUpdatedIterator struct {
	Event *SMTAnchorProviderUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SMTAnchorProviderUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SMTAnchorProviderUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SMTAnchorProviderUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SMTAnchorProviderUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SMTAnchorProviderUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SMTAnchorProviderUpdated represents a AnchorProviderUpdated event raised by the SMT contract.
type SMTAnchorProviderUpdated struct {
	ChainId        uint64
	AnchorProvider common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterAnchorProviderUpdated is a free log retrieval operation binding the contract event 0xd621c244f07f12e1f37bb9c40d61e278041fc4f2859a6736794b26f4297c8090.
//
// Solidity: event AnchorProviderUpdated(uint64 chainId, address anchorProvider)
func (_SMT *SMTFilterer) FilterAnchorProviderUpdated(opts *bind.FilterOpts) (*SMTAnchorProviderUpdatedIterator, error) {

	logs, sub, err := _SMT.contract.FilterLogs(opts, "AnchorProviderUpdated")
	if err != nil {
		return nil, err
	}
	return &SMTAnchorProviderUpdatedIterator{contract: _SMT.contract, event: "AnchorProviderUpdated", logs: logs, sub: sub}, nil
}

// WatchAnchorProviderUpdated is a free log subscription operation binding the contract event 0xd621c244f07f12e1f37bb9c40d61e278041fc4f2859a6736794b26f4297c8090.
//
// Solidity: event AnchorProviderUpdated(uint64 chainId, address anchorProvider)
func (_SMT *SMTFilterer) WatchAnchorProviderUpdated(opts *bind.WatchOpts, sink chan<- *SMTAnchorProviderUpdated) (event.Subscription, error) {

	logs, sub, err := _SMT.contract.WatchLogs(opts, "AnchorProviderUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SMTAnchorProviderUpdated)
				if err := _SMT.contract.UnpackLog(event, "AnchorProviderUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAnchorProviderUpdated is a log parse operation binding the contract event 0xd621c244f07f12e1f37bb9c40d61e278041fc4f2859a6736794b26f4297c8090.
//
// Solidity: event AnchorProviderUpdated(uint64 chainId, address anchorProvider)
func (_SMT *SMTFilterer) ParseAnchorProviderUpdated(log types.Log) (*SMTAnchorProviderUpdated, error) {
	event := new(SMTAnchorProviderUpdated)
	if err := _SMT.contract.UnpackLog(event, "AnchorProviderUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SMTOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the SMT contract.
type SMTOwnershipTransferredIterator struct {
	Event *SMTOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SMTOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SMTOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SMTOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SMTOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SMTOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SMTOwnershipTransferred represents a OwnershipTransferred event raised by the SMT contract.
type SMTOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SMT *SMTFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*SMTOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SMT.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &SMTOwnershipTransferredIterator{contract: _SMT.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SMT *SMTFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SMTOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SMT.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SMTOwnershipTransferred)
				if err := _SMT.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SMT *SMTFilterer) ParseOwnershipTransferred(log types.Log) (*SMTOwnershipTransferred, error) {
	event := new(SMTOwnershipTransferred)
	if err := _SMT.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SMTSmtRootUpdatedIterator is returned from FilterSmtRootUpdated and is used to iterate over the raw logs and unpacked data for SmtRootUpdated events raised by the SMT contract.
type SMTSmtRootUpdatedIterator struct {
	Event *SMTSmtRootUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SMTSmtRootUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SMTSmtRootUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SMTSmtRootUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SMTSmtRootUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SMTSmtRootUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SMTSmtRootUpdated represents a SmtRootUpdated event raised by the SMT contract.
type SMTSmtRootUpdated struct {
	SmtRoot     [32]byte
	EndBlockNum uint64
	BufferIndex uint8
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSmtRootUpdated is a free log retrieval operation binding the contract event 0x6a70343b232c18280821471baf247ce69fbf740893ec9fb80a47bda7f4ea4a2f.
//
// Solidity: event SmtRootUpdated(bytes32 smtRoot, uint64 endBlockNum, uint8 bufferIndex)
func (_SMT *SMTFilterer) FilterSmtRootUpdated(opts *bind.FilterOpts) (*SMTSmtRootUpdatedIterator, error) {

	logs, sub, err := _SMT.contract.FilterLogs(opts, "SmtRootUpdated")
	if err != nil {
		return nil, err
	}
	return &SMTSmtRootUpdatedIterator{contract: _SMT.contract, event: "SmtRootUpdated", logs: logs, sub: sub}, nil
}

// WatchSmtRootUpdated is a free log subscription operation binding the contract event 0x6a70343b232c18280821471baf247ce69fbf740893ec9fb80a47bda7f4ea4a2f.
//
// Solidity: event SmtRootUpdated(bytes32 smtRoot, uint64 endBlockNum, uint8 bufferIndex)
func (_SMT *SMTFilterer) WatchSmtRootUpdated(opts *bind.WatchOpts, sink chan<- *SMTSmtRootUpdated) (event.Subscription, error) {

	logs, sub, err := _SMT.contract.WatchLogs(opts, "SmtRootUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SMTSmtRootUpdated)
				if err := _SMT.contract.UnpackLog(event, "SmtRootUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSmtRootUpdated is a log parse operation binding the contract event 0x6a70343b232c18280821471baf247ce69fbf740893ec9fb80a47bda7f4ea4a2f.
//
// Solidity: event SmtRootUpdated(bytes32 smtRoot, uint64 endBlockNum, uint8 bufferIndex)
func (_SMT *SMTFilterer) ParseSmtRootUpdated(log types.Log) (*SMTSmtRootUpdated, error) {
	event := new(SMTSmtRootUpdated)
	if err := _SMT.contract.UnpackLog(event, "SmtRootUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SMTVerifierUpdatedIterator is returned from FilterVerifierUpdated and is used to iterate over the raw logs and unpacked data for VerifierUpdated events raised by the SMT contract.
type SMTVerifierUpdatedIterator struct {
	Event *SMTVerifierUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SMTVerifierUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SMTVerifierUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SMTVerifierUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SMTVerifierUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SMTVerifierUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SMTVerifierUpdated represents a VerifierUpdated event raised by the SMT contract.
type SMTVerifierUpdated struct {
	ChainId  uint64
	Verifier common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterVerifierUpdated is a free log retrieval operation binding the contract event 0xb78ea0eaf11776732556ef6189312ceb60eab6b3177526b3a12d966e37be8162.
//
// Solidity: event VerifierUpdated(uint64 chainId, address verifier)
func (_SMT *SMTFilterer) FilterVerifierUpdated(opts *bind.FilterOpts) (*SMTVerifierUpdatedIterator, error) {

	logs, sub, err := _SMT.contract.FilterLogs(opts, "VerifierUpdated")
	if err != nil {
		return nil, err
	}
	return &SMTVerifierUpdatedIterator{contract: _SMT.contract, event: "VerifierUpdated", logs: logs, sub: sub}, nil
}

// WatchVerifierUpdated is a free log subscription operation binding the contract event 0xb78ea0eaf11776732556ef6189312ceb60eab6b3177526b3a12d966e37be8162.
//
// Solidity: event VerifierUpdated(uint64 chainId, address verifier)
func (_SMT *SMTFilterer) WatchVerifierUpdated(opts *bind.WatchOpts, sink chan<- *SMTVerifierUpdated) (event.Subscription, error) {

	logs, sub, err := _SMT.contract.WatchLogs(opts, "VerifierUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SMTVerifierUpdated)
				if err := _SMT.contract.UnpackLog(event, "VerifierUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifierUpdated is a log parse operation binding the contract event 0xb78ea0eaf11776732556ef6189312ceb60eab6b3177526b3a12d966e37be8162.
//
// Solidity: event VerifierUpdated(uint64 chainId, address verifier)
func (_SMT *SMTFilterer) ParseVerifierUpdated(log types.Log) (*SMTVerifierUpdated, error) {
	event := new(SMTVerifierUpdated)
	if err := _SMT.contract.UnpackLog(event, "VerifierUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SafeCastMetaData contains all meta data concerning the SafeCast contract.
var SafeCastMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea264697066735822122010926ff0a7570ca37b89e795c22fa1d58df548d7b7f7a708edbf56505801a72c64736f6c63430008150033",
}

// SafeCastABI is the input ABI used to generate the binding from.
// Deprecated: Use SafeCastMetaData.ABI instead.
var SafeCastABI = SafeCastMetaData.ABI

// SafeCastBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SafeCastMetaData.Bin instead.
var SafeCastBin = SafeCastMetaData.Bin

// DeploySafeCast deploys a new Ethereum contract, binding an instance of SafeCast to it.
func DeploySafeCast(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SafeCast, error) {
	parsed, err := SafeCastMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SafeCastBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SafeCast{SafeCastCaller: SafeCastCaller{contract: contract}, SafeCastTransactor: SafeCastTransactor{contract: contract}, SafeCastFilterer: SafeCastFilterer{contract: contract}}, nil
}

// SafeCast is an auto generated Go binding around an Ethereum contract.
type SafeCast struct {
	SafeCastCaller     // Read-only binding to the contract
	SafeCastTransactor // Write-only binding to the contract
	SafeCastFilterer   // Log filterer for contract events
}

// SafeCastCaller is an auto generated read-only Go binding around an Ethereum contract.
type SafeCastCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeCastTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SafeCastTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeCastFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SafeCastFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeCastSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SafeCastSession struct {
	Contract     *SafeCast         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SafeCastCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SafeCastCallerSession struct {
	Contract *SafeCastCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// SafeCastTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SafeCastTransactorSession struct {
	Contract     *SafeCastTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SafeCastRaw is an auto generated low-level Go binding around an Ethereum contract.
type SafeCastRaw struct {
	Contract *SafeCast // Generic contract binding to access the raw methods on
}

// SafeCastCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SafeCastCallerRaw struct {
	Contract *SafeCastCaller // Generic read-only contract binding to access the raw methods on
}

// SafeCastTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SafeCastTransactorRaw struct {
	Contract *SafeCastTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSafeCast creates a new instance of SafeCast, bound to a specific deployed contract.
func NewSafeCast(address common.Address, backend bind.ContractBackend) (*SafeCast, error) {
	contract, err := bindSafeCast(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SafeCast{SafeCastCaller: SafeCastCaller{contract: contract}, SafeCastTransactor: SafeCastTransactor{contract: contract}, SafeCastFilterer: SafeCastFilterer{contract: contract}}, nil
}

// NewSafeCastCaller creates a new read-only instance of SafeCast, bound to a specific deployed contract.
func NewSafeCastCaller(address common.Address, caller bind.ContractCaller) (*SafeCastCaller, error) {
	contract, err := bindSafeCast(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SafeCastCaller{contract: contract}, nil
}

// NewSafeCastTransactor creates a new write-only instance of SafeCast, bound to a specific deployed contract.
func NewSafeCastTransactor(address common.Address, transactor bind.ContractTransactor) (*SafeCastTransactor, error) {
	contract, err := bindSafeCast(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SafeCastTransactor{contract: contract}, nil
}

// NewSafeCastFilterer creates a new log filterer instance of SafeCast, bound to a specific deployed contract.
func NewSafeCastFilterer(address common.Address, filterer bind.ContractFilterer) (*SafeCastFilterer, error) {
	contract, err := bindSafeCast(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SafeCastFilterer{contract: contract}, nil
}

// bindSafeCast binds a generic wrapper to an already deployed contract.
func bindSafeCast(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SafeCastMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeCast *SafeCastRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SafeCast.Contract.SafeCastCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeCast *SafeCastRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeCast.Contract.SafeCastTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeCast *SafeCastRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeCast.Contract.SafeCastTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeCast *SafeCastCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SafeCast.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeCast *SafeCastTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeCast.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeCast *SafeCastTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeCast.Contract.contract.Transact(opts, method, params...)
}

// SafeERC20MetaData contains all meta data concerning the SafeERC20 contract.
var SafeERC20MetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220b771c2067df1f337284140ce424a292fc70a42619b2a8eb7e2ef79853d761d3a64736f6c63430008150033",
}

// SafeERC20ABI is the input ABI used to generate the binding from.
// Deprecated: Use SafeERC20MetaData.ABI instead.
var SafeERC20ABI = SafeERC20MetaData.ABI

// SafeERC20Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SafeERC20MetaData.Bin instead.
var SafeERC20Bin = SafeERC20MetaData.Bin

// DeploySafeERC20 deploys a new Ethereum contract, binding an instance of SafeERC20 to it.
func DeploySafeERC20(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SafeERC20, error) {
	parsed, err := SafeERC20MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SafeERC20Bin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SafeERC20{SafeERC20Caller: SafeERC20Caller{contract: contract}, SafeERC20Transactor: SafeERC20Transactor{contract: contract}, SafeERC20Filterer: SafeERC20Filterer{contract: contract}}, nil
}

// SafeERC20 is an auto generated Go binding around an Ethereum contract.
type SafeERC20 struct {
	SafeERC20Caller     // Read-only binding to the contract
	SafeERC20Transactor // Write-only binding to the contract
	SafeERC20Filterer   // Log filterer for contract events
}

// SafeERC20Caller is an auto generated read-only Go binding around an Ethereum contract.
type SafeERC20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeERC20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type SafeERC20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeERC20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SafeERC20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeERC20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SafeERC20Session struct {
	Contract     *SafeERC20        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SafeERC20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SafeERC20CallerSession struct {
	Contract *SafeERC20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// SafeERC20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SafeERC20TransactorSession struct {
	Contract     *SafeERC20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// SafeERC20Raw is an auto generated low-level Go binding around an Ethereum contract.
type SafeERC20Raw struct {
	Contract *SafeERC20 // Generic contract binding to access the raw methods on
}

// SafeERC20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SafeERC20CallerRaw struct {
	Contract *SafeERC20Caller // Generic read-only contract binding to access the raw methods on
}

// SafeERC20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SafeERC20TransactorRaw struct {
	Contract *SafeERC20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewSafeERC20 creates a new instance of SafeERC20, bound to a specific deployed contract.
func NewSafeERC20(address common.Address, backend bind.ContractBackend) (*SafeERC20, error) {
	contract, err := bindSafeERC20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SafeERC20{SafeERC20Caller: SafeERC20Caller{contract: contract}, SafeERC20Transactor: SafeERC20Transactor{contract: contract}, SafeERC20Filterer: SafeERC20Filterer{contract: contract}}, nil
}

// NewSafeERC20Caller creates a new read-only instance of SafeERC20, bound to a specific deployed contract.
func NewSafeERC20Caller(address common.Address, caller bind.ContractCaller) (*SafeERC20Caller, error) {
	contract, err := bindSafeERC20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SafeERC20Caller{contract: contract}, nil
}

// NewSafeERC20Transactor creates a new write-only instance of SafeERC20, bound to a specific deployed contract.
func NewSafeERC20Transactor(address common.Address, transactor bind.ContractTransactor) (*SafeERC20Transactor, error) {
	contract, err := bindSafeERC20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SafeERC20Transactor{contract: contract}, nil
}

// NewSafeERC20Filterer creates a new log filterer instance of SafeERC20, bound to a specific deployed contract.
func NewSafeERC20Filterer(address common.Address, filterer bind.ContractFilterer) (*SafeERC20Filterer, error) {
	contract, err := bindSafeERC20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SafeERC20Filterer{contract: contract}, nil
}

// bindSafeERC20 binds a generic wrapper to an already deployed contract.
func bindSafeERC20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SafeERC20MetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeERC20 *SafeERC20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SafeERC20.Contract.SafeERC20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeERC20 *SafeERC20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeERC20.Contract.SafeERC20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeERC20 *SafeERC20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeERC20.Contract.SafeERC20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeERC20 *SafeERC20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SafeERC20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeERC20 *SafeERC20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeERC20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeERC20 *SafeERC20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeERC20.Contract.contract.Transact(opts, method, params...)
}

// SameChainAnchorBlocksMetaData contains all meta data concerning the SameChainAnchorBlocks contract.
var SameChainAnchorBlocksMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"}],\"name\":\"blocks\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080806040523461005a575f8054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a361028e908161005f8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f803560e01c8063715018a6146101965780638da5cb5b14610163578063f25b3f99146101445763f2fde38b14610046575f80fd5b346101415760203660031901126101415760043573ffffffffffffffffffffffffffffffffffffffff80821680920361013d5782549081169061008a33831461020d565b82156100d25773ffffffffffffffffffffffffffffffffffffffff1916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b8280fd5b80fd5b5034610141576020366003190112610141576020604051600435408152f35b503461014157806003193601126101415773ffffffffffffffffffffffffffffffffffffffff6020915416604051908152f35b503461014157806003193601126101415780805473ffffffffffffffffffffffffffffffffffffffff1973ffffffffffffffffffffffffffffffffffffffff8216916101e333841461020d565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b1561021457565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfea2646970667358221220b1bc2c46eca3126260791de32c7f5064501d8f55bbbfbccda72d0d7b8e276a9b64736f6c63430008150033",
}

// SameChainAnchorBlocksABI is the input ABI used to generate the binding from.
// Deprecated: Use SameChainAnchorBlocksMetaData.ABI instead.
var SameChainAnchorBlocksABI = SameChainAnchorBlocksMetaData.ABI

// SameChainAnchorBlocksBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SameChainAnchorBlocksMetaData.Bin instead.
var SameChainAnchorBlocksBin = SameChainAnchorBlocksMetaData.Bin

// DeploySameChainAnchorBlocks deploys a new Ethereum contract, binding an instance of SameChainAnchorBlocks to it.
func DeploySameChainAnchorBlocks(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SameChainAnchorBlocks, error) {
	parsed, err := SameChainAnchorBlocksMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SameChainAnchorBlocksBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SameChainAnchorBlocks{SameChainAnchorBlocksCaller: SameChainAnchorBlocksCaller{contract: contract}, SameChainAnchorBlocksTransactor: SameChainAnchorBlocksTransactor{contract: contract}, SameChainAnchorBlocksFilterer: SameChainAnchorBlocksFilterer{contract: contract}}, nil
}

// SameChainAnchorBlocks is an auto generated Go binding around an Ethereum contract.
type SameChainAnchorBlocks struct {
	SameChainAnchorBlocksCaller     // Read-only binding to the contract
	SameChainAnchorBlocksTransactor // Write-only binding to the contract
	SameChainAnchorBlocksFilterer   // Log filterer for contract events
}

// SameChainAnchorBlocksCaller is an auto generated read-only Go binding around an Ethereum contract.
type SameChainAnchorBlocksCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SameChainAnchorBlocksTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SameChainAnchorBlocksTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SameChainAnchorBlocksFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SameChainAnchorBlocksFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SameChainAnchorBlocksSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SameChainAnchorBlocksSession struct {
	Contract     *SameChainAnchorBlocks // Generic contract binding to set the session for
	CallOpts     bind.CallOpts          // Call options to use throughout this session
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// SameChainAnchorBlocksCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SameChainAnchorBlocksCallerSession struct {
	Contract *SameChainAnchorBlocksCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                // Call options to use throughout this session
}

// SameChainAnchorBlocksTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SameChainAnchorBlocksTransactorSession struct {
	Contract     *SameChainAnchorBlocksTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// SameChainAnchorBlocksRaw is an auto generated low-level Go binding around an Ethereum contract.
type SameChainAnchorBlocksRaw struct {
	Contract *SameChainAnchorBlocks // Generic contract binding to access the raw methods on
}

// SameChainAnchorBlocksCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SameChainAnchorBlocksCallerRaw struct {
	Contract *SameChainAnchorBlocksCaller // Generic read-only contract binding to access the raw methods on
}

// SameChainAnchorBlocksTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SameChainAnchorBlocksTransactorRaw struct {
	Contract *SameChainAnchorBlocksTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSameChainAnchorBlocks creates a new instance of SameChainAnchorBlocks, bound to a specific deployed contract.
func NewSameChainAnchorBlocks(address common.Address, backend bind.ContractBackend) (*SameChainAnchorBlocks, error) {
	contract, err := bindSameChainAnchorBlocks(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SameChainAnchorBlocks{SameChainAnchorBlocksCaller: SameChainAnchorBlocksCaller{contract: contract}, SameChainAnchorBlocksTransactor: SameChainAnchorBlocksTransactor{contract: contract}, SameChainAnchorBlocksFilterer: SameChainAnchorBlocksFilterer{contract: contract}}, nil
}

// NewSameChainAnchorBlocksCaller creates a new read-only instance of SameChainAnchorBlocks, bound to a specific deployed contract.
func NewSameChainAnchorBlocksCaller(address common.Address, caller bind.ContractCaller) (*SameChainAnchorBlocksCaller, error) {
	contract, err := bindSameChainAnchorBlocks(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SameChainAnchorBlocksCaller{contract: contract}, nil
}

// NewSameChainAnchorBlocksTransactor creates a new write-only instance of SameChainAnchorBlocks, bound to a specific deployed contract.
func NewSameChainAnchorBlocksTransactor(address common.Address, transactor bind.ContractTransactor) (*SameChainAnchorBlocksTransactor, error) {
	contract, err := bindSameChainAnchorBlocks(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SameChainAnchorBlocksTransactor{contract: contract}, nil
}

// NewSameChainAnchorBlocksFilterer creates a new log filterer instance of SameChainAnchorBlocks, bound to a specific deployed contract.
func NewSameChainAnchorBlocksFilterer(address common.Address, filterer bind.ContractFilterer) (*SameChainAnchorBlocksFilterer, error) {
	contract, err := bindSameChainAnchorBlocks(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SameChainAnchorBlocksFilterer{contract: contract}, nil
}

// bindSameChainAnchorBlocks binds a generic wrapper to an already deployed contract.
func bindSameChainAnchorBlocks(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SameChainAnchorBlocksMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SameChainAnchorBlocks *SameChainAnchorBlocksRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SameChainAnchorBlocks.Contract.SameChainAnchorBlocksCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SameChainAnchorBlocks *SameChainAnchorBlocksRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SameChainAnchorBlocks.Contract.SameChainAnchorBlocksTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SameChainAnchorBlocks *SameChainAnchorBlocksRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SameChainAnchorBlocks.Contract.SameChainAnchorBlocksTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SameChainAnchorBlocks *SameChainAnchorBlocksCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SameChainAnchorBlocks.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SameChainAnchorBlocks *SameChainAnchorBlocksTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SameChainAnchorBlocks.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SameChainAnchorBlocks *SameChainAnchorBlocksTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SameChainAnchorBlocks.Contract.contract.Transact(opts, method, params...)
}

// Blocks is a free data retrieval call binding the contract method 0xf25b3f99.
//
// Solidity: function blocks(uint256 blockNum) view returns(bytes32)
func (_SameChainAnchorBlocks *SameChainAnchorBlocksCaller) Blocks(opts *bind.CallOpts, blockNum *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _SameChainAnchorBlocks.contract.Call(opts, &out, "blocks", blockNum)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// Blocks is a free data retrieval call binding the contract method 0xf25b3f99.
//
// Solidity: function blocks(uint256 blockNum) view returns(bytes32)
func (_SameChainAnchorBlocks *SameChainAnchorBlocksSession) Blocks(blockNum *big.Int) ([32]byte, error) {
	return _SameChainAnchorBlocks.Contract.Blocks(&_SameChainAnchorBlocks.CallOpts, blockNum)
}

// Blocks is a free data retrieval call binding the contract method 0xf25b3f99.
//
// Solidity: function blocks(uint256 blockNum) view returns(bytes32)
func (_SameChainAnchorBlocks *SameChainAnchorBlocksCallerSession) Blocks(blockNum *big.Int) ([32]byte, error) {
	return _SameChainAnchorBlocks.Contract.Blocks(&_SameChainAnchorBlocks.CallOpts, blockNum)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SameChainAnchorBlocks *SameChainAnchorBlocksCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SameChainAnchorBlocks.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SameChainAnchorBlocks *SameChainAnchorBlocksSession) Owner() (common.Address, error) {
	return _SameChainAnchorBlocks.Contract.Owner(&_SameChainAnchorBlocks.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SameChainAnchorBlocks *SameChainAnchorBlocksCallerSession) Owner() (common.Address, error) {
	return _SameChainAnchorBlocks.Contract.Owner(&_SameChainAnchorBlocks.CallOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SameChainAnchorBlocks *SameChainAnchorBlocksTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SameChainAnchorBlocks.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SameChainAnchorBlocks *SameChainAnchorBlocksSession) RenounceOwnership() (*types.Transaction, error) {
	return _SameChainAnchorBlocks.Contract.RenounceOwnership(&_SameChainAnchorBlocks.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SameChainAnchorBlocks *SameChainAnchorBlocksTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _SameChainAnchorBlocks.Contract.RenounceOwnership(&_SameChainAnchorBlocks.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SameChainAnchorBlocks *SameChainAnchorBlocksTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _SameChainAnchorBlocks.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SameChainAnchorBlocks *SameChainAnchorBlocksSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SameChainAnchorBlocks.Contract.TransferOwnership(&_SameChainAnchorBlocks.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SameChainAnchorBlocks *SameChainAnchorBlocksTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SameChainAnchorBlocks.Contract.TransferOwnership(&_SameChainAnchorBlocks.TransactOpts, newOwner)
}

// SameChainAnchorBlocksOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the SameChainAnchorBlocks contract.
type SameChainAnchorBlocksOwnershipTransferredIterator struct {
	Event *SameChainAnchorBlocksOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SameChainAnchorBlocksOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SameChainAnchorBlocksOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SameChainAnchorBlocksOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SameChainAnchorBlocksOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SameChainAnchorBlocksOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SameChainAnchorBlocksOwnershipTransferred represents a OwnershipTransferred event raised by the SameChainAnchorBlocks contract.
type SameChainAnchorBlocksOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SameChainAnchorBlocks *SameChainAnchorBlocksFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*SameChainAnchorBlocksOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SameChainAnchorBlocks.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &SameChainAnchorBlocksOwnershipTransferredIterator{contract: _SameChainAnchorBlocks.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SameChainAnchorBlocks *SameChainAnchorBlocksFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SameChainAnchorBlocksOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SameChainAnchorBlocks.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SameChainAnchorBlocksOwnershipTransferred)
				if err := _SameChainAnchorBlocks.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SameChainAnchorBlocks *SameChainAnchorBlocksFilterer) ParseOwnershipTransferred(log types.Log) (*SameChainAnchorBlocksOwnershipTransferred, error) {
	event := new(SameChainAnchorBlocksOwnershipTransferred)
	if err := _SameChainAnchorBlocks.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlotValueMetaData contains all meta data concerning the SlotValue contract.
var SlotValueMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractISlotValueVerifier\",\"name\":\"_verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"addrHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"slotKeyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"slotValue\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"blkNum\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"blkHash\",\"type\":\"bytes32\"}],\"name\":\"VerifiedSlotValueProof\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"slotValueVerifier\",\"outputs\":[{\"internalType\":\"contractISlotValueVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"blkVerifyInfo\",\"type\":\"bytes\"}],\"name\":\"submitSlotValuePoof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60803461007357601f6103ad38819003918201601f19168301916001600160401b038311848410176100775780849260209460405283398101031261007357516001600160a01b03811690819003610073575f80546001600160a01b031916919091179055604051610321908161008c8239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080604081815260049081361015610015575f80fd5b5f92833560e01c90816363c6ccb214610265575063de833bb214610037575f80fd5b3461026157600319906060368301811361025d57833567ffffffffffffffff8082168092036102195760243581811161021d576100779036908801610299565b604493919335838111610259576100919036908a01610299565b979092896100ee73ffffffffffffffffffffffffffffffffffffffff8d5416936100da8b51998a9788968796630b885e5360e01b88528701528c602487015260648601916102cb565b9083820301604484015260c09b8c976102cb565b03915afa91821561024f578792610166575b507fef78dd50ef8d260919879b24e31d3f411c6014c0b43f575b9539fef1ad185897955081511692602082015192808301516080840151928063ffffffff60a0870151169501519581519788526020880152860152840152608083015260a0820152a180f35b90915084953d8611610247575b601f8701601f191682019683881183891017610234578287918101031261021d57858701908782108483111761022157508452805190828216820361021d5760a091875260208101516020880152848101518588015283810151848801526080810151608088015201519463ffffffff86168603610219577fef78dd50ef8d260919879b24e31d3f411c6014c0b43f575b9539fef1ad1858979560a0820152905f610100565b8680fd5b8780fd5b634e487b7160e01b895260419052602488fd5b634e487b7160e01b895260418252602489fd5b3d9650610173565b84513d89823e3d90fd5b8980fd5b8480fd5b8280fd5b84903461029557816003193601126102955773ffffffffffffffffffffffffffffffffffffffff60209254168152f35b5080fd5b9181601f840112156102c75782359167ffffffffffffffff83116102c757602083818601950101116102c757565b5f80fd5b908060209392818452848401375f828201840152601f01601f191601019056fea2646970667358221220e4d59bc8f9d519795a36fb14c321570279486755a188d961158b2f98c4c1ae2b64736f6c63430008150033",
}

// SlotValueABI is the input ABI used to generate the binding from.
// Deprecated: Use SlotValueMetaData.ABI instead.
var SlotValueABI = SlotValueMetaData.ABI

// SlotValueBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SlotValueMetaData.Bin instead.
var SlotValueBin = SlotValueMetaData.Bin

// DeploySlotValue deploys a new Ethereum contract, binding an instance of SlotValue to it.
func DeploySlotValue(auth *bind.TransactOpts, backend bind.ContractBackend, _verifier common.Address) (common.Address, *types.Transaction, *SlotValue, error) {
	parsed, err := SlotValueMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SlotValueBin), backend, _verifier)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SlotValue{SlotValueCaller: SlotValueCaller{contract: contract}, SlotValueTransactor: SlotValueTransactor{contract: contract}, SlotValueFilterer: SlotValueFilterer{contract: contract}}, nil
}

// SlotValue is an auto generated Go binding around an Ethereum contract.
type SlotValue struct {
	SlotValueCaller     // Read-only binding to the contract
	SlotValueTransactor // Write-only binding to the contract
	SlotValueFilterer   // Log filterer for contract events
}

// SlotValueCaller is an auto generated read-only Go binding around an Ethereum contract.
type SlotValueCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SlotValueTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SlotValueTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SlotValueFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SlotValueFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SlotValueSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SlotValueSession struct {
	Contract     *SlotValue        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SlotValueCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SlotValueCallerSession struct {
	Contract *SlotValueCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// SlotValueTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SlotValueTransactorSession struct {
	Contract     *SlotValueTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// SlotValueRaw is an auto generated low-level Go binding around an Ethereum contract.
type SlotValueRaw struct {
	Contract *SlotValue // Generic contract binding to access the raw methods on
}

// SlotValueCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SlotValueCallerRaw struct {
	Contract *SlotValueCaller // Generic read-only contract binding to access the raw methods on
}

// SlotValueTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SlotValueTransactorRaw struct {
	Contract *SlotValueTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSlotValue creates a new instance of SlotValue, bound to a specific deployed contract.
func NewSlotValue(address common.Address, backend bind.ContractBackend) (*SlotValue, error) {
	contract, err := bindSlotValue(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SlotValue{SlotValueCaller: SlotValueCaller{contract: contract}, SlotValueTransactor: SlotValueTransactor{contract: contract}, SlotValueFilterer: SlotValueFilterer{contract: contract}}, nil
}

// NewSlotValueCaller creates a new read-only instance of SlotValue, bound to a specific deployed contract.
func NewSlotValueCaller(address common.Address, caller bind.ContractCaller) (*SlotValueCaller, error) {
	contract, err := bindSlotValue(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SlotValueCaller{contract: contract}, nil
}

// NewSlotValueTransactor creates a new write-only instance of SlotValue, bound to a specific deployed contract.
func NewSlotValueTransactor(address common.Address, transactor bind.ContractTransactor) (*SlotValueTransactor, error) {
	contract, err := bindSlotValue(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SlotValueTransactor{contract: contract}, nil
}

// NewSlotValueFilterer creates a new log filterer instance of SlotValue, bound to a specific deployed contract.
func NewSlotValueFilterer(address common.Address, filterer bind.ContractFilterer) (*SlotValueFilterer, error) {
	contract, err := bindSlotValue(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SlotValueFilterer{contract: contract}, nil
}

// bindSlotValue binds a generic wrapper to an already deployed contract.
func bindSlotValue(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SlotValueMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SlotValue *SlotValueRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SlotValue.Contract.SlotValueCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SlotValue *SlotValueRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SlotValue.Contract.SlotValueTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SlotValue *SlotValueRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SlotValue.Contract.SlotValueTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SlotValue *SlotValueCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SlotValue.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SlotValue *SlotValueTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SlotValue.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SlotValue *SlotValueTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SlotValue.Contract.contract.Transact(opts, method, params...)
}

// SlotValueVerifier is a free data retrieval call binding the contract method 0x63c6ccb2.
//
// Solidity: function slotValueVerifier() view returns(address)
func (_SlotValue *SlotValueCaller) SlotValueVerifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SlotValue.contract.Call(opts, &out, "slotValueVerifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SlotValueVerifier is a free data retrieval call binding the contract method 0x63c6ccb2.
//
// Solidity: function slotValueVerifier() view returns(address)
func (_SlotValue *SlotValueSession) SlotValueVerifier() (common.Address, error) {
	return _SlotValue.Contract.SlotValueVerifier(&_SlotValue.CallOpts)
}

// SlotValueVerifier is a free data retrieval call binding the contract method 0x63c6ccb2.
//
// Solidity: function slotValueVerifier() view returns(address)
func (_SlotValue *SlotValueCallerSession) SlotValueVerifier() (common.Address, error) {
	return _SlotValue.Contract.SlotValueVerifier(&_SlotValue.CallOpts)
}

// SubmitSlotValuePoof is a paid mutator transaction binding the contract method 0xde833bb2.
//
// Solidity: function submitSlotValuePoof(uint64 chainId, bytes proofData, bytes blkVerifyInfo) returns()
func (_SlotValue *SlotValueTransactor) SubmitSlotValuePoof(opts *bind.TransactOpts, chainId uint64, proofData []byte, blkVerifyInfo []byte) (*types.Transaction, error) {
	return _SlotValue.contract.Transact(opts, "submitSlotValuePoof", chainId, proofData, blkVerifyInfo)
}

// SubmitSlotValuePoof is a paid mutator transaction binding the contract method 0xde833bb2.
//
// Solidity: function submitSlotValuePoof(uint64 chainId, bytes proofData, bytes blkVerifyInfo) returns()
func (_SlotValue *SlotValueSession) SubmitSlotValuePoof(chainId uint64, proofData []byte, blkVerifyInfo []byte) (*types.Transaction, error) {
	return _SlotValue.Contract.SubmitSlotValuePoof(&_SlotValue.TransactOpts, chainId, proofData, blkVerifyInfo)
}

// SubmitSlotValuePoof is a paid mutator transaction binding the contract method 0xde833bb2.
//
// Solidity: function submitSlotValuePoof(uint64 chainId, bytes proofData, bytes blkVerifyInfo) returns()
func (_SlotValue *SlotValueTransactorSession) SubmitSlotValuePoof(chainId uint64, proofData []byte, blkVerifyInfo []byte) (*types.Transaction, error) {
	return _SlotValue.Contract.SubmitSlotValuePoof(&_SlotValue.TransactOpts, chainId, proofData, blkVerifyInfo)
}

// SlotValueVerifiedSlotValueProofIterator is returned from FilterVerifiedSlotValueProof and is used to iterate over the raw logs and unpacked data for VerifiedSlotValueProof events raised by the SlotValue contract.
type SlotValueVerifiedSlotValueProofIterator struct {
	Event *SlotValueVerifiedSlotValueProof // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlotValueVerifiedSlotValueProofIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlotValueVerifiedSlotValueProof)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlotValueVerifiedSlotValueProof)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlotValueVerifiedSlotValueProofIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlotValueVerifiedSlotValueProofIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlotValueVerifiedSlotValueProof represents a VerifiedSlotValueProof event raised by the SlotValue contract.
type SlotValueVerifiedSlotValueProof struct {
	ChainId     uint64
	AddrHash    [32]byte
	SlotKeyHash [32]byte
	SlotValue   [32]byte
	BlkNum      uint32
	BlkHash     [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterVerifiedSlotValueProof is a free log retrieval operation binding the contract event 0xef78dd50ef8d260919879b24e31d3f411c6014c0b43f575b9539fef1ad185897.
//
// Solidity: event VerifiedSlotValueProof(uint64 chainId, bytes32 addrHash, bytes32 slotKeyHash, bytes32 slotValue, uint32 blkNum, bytes32 blkHash)
func (_SlotValue *SlotValueFilterer) FilterVerifiedSlotValueProof(opts *bind.FilterOpts) (*SlotValueVerifiedSlotValueProofIterator, error) {

	logs, sub, err := _SlotValue.contract.FilterLogs(opts, "VerifiedSlotValueProof")
	if err != nil {
		return nil, err
	}
	return &SlotValueVerifiedSlotValueProofIterator{contract: _SlotValue.contract, event: "VerifiedSlotValueProof", logs: logs, sub: sub}, nil
}

// WatchVerifiedSlotValueProof is a free log subscription operation binding the contract event 0xef78dd50ef8d260919879b24e31d3f411c6014c0b43f575b9539fef1ad185897.
//
// Solidity: event VerifiedSlotValueProof(uint64 chainId, bytes32 addrHash, bytes32 slotKeyHash, bytes32 slotValue, uint32 blkNum, bytes32 blkHash)
func (_SlotValue *SlotValueFilterer) WatchVerifiedSlotValueProof(opts *bind.WatchOpts, sink chan<- *SlotValueVerifiedSlotValueProof) (event.Subscription, error) {

	logs, sub, err := _SlotValue.contract.WatchLogs(opts, "VerifiedSlotValueProof")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlotValueVerifiedSlotValueProof)
				if err := _SlotValue.contract.UnpackLog(event, "VerifiedSlotValueProof", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifiedSlotValueProof is a log parse operation binding the contract event 0xef78dd50ef8d260919879b24e31d3f411c6014c0b43f575b9539fef1ad185897.
//
// Solidity: event VerifiedSlotValueProof(uint64 chainId, bytes32 addrHash, bytes32 slotKeyHash, bytes32 slotValue, uint32 blkNum, bytes32 blkHash)
func (_SlotValue *SlotValueFilterer) ParseVerifiedSlotValueProof(log types.Log) (*SlotValueVerifiedSlotValueProof, error) {
	event := new(SlotValueVerifiedSlotValueProof)
	if err := _SlotValue.contract.UnpackLog(event, "VerifiedSlotValueProof", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlotValueVerifierMetaData contains all meta data concerning the SlotValueVerifier contract.
var SlotValueVerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blocChunks\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdateBlockChunks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdateVerifierAddress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BlockChunks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BlockChunks\",\"type\":\"address\"}],\"name\":\"updateBlockChunks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_verifierAddress\",\"type\":\"address\"}],\"name\":\"updateVerifierAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"verifierAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"blkVerifyInfo\",\"type\":\"bytes\"}],\"name\":\"verifySlotValue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"addrHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"slotKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"slotValue\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"blkNum\",\"type\":\"uint32\"}],\"internalType\":\"structISlotValueVerifier.SlotInfo\",\"name\":\"slotInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6080346100a457601f610b3838819003918201601f19168301916001600160401b038311848410176100a8578084926020946040528339810103126100a457516001600160a01b0390818116908190036100a4575f5460018060a01b03199033828216175f55604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a36002541617600255610a7b90816100bd8239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f3560e01c9081630215d01314610900575080630b885e53146103195780631eeb86da146102aa578063715018a61461024f5780638da5cb5b1461022a578063ec4ffc5214610195578063f2fde38b146100ba5763f5cec6af14610074575f80fd5b346100b65760203660031901126100b65767ffffffffffffffff610096610923565b165f52600160205260206001600160a01b0360405f205416604051908152f35b5f80fd5b346100b65760203660031901126100b6576100d3610968565b5f54906001600160a01b03808316916100ed33841461097e565b1691821561012a576001600160a01b0319839116175f557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b346100b65760403660031901126100b6576101ae610923565b602435906001600160a01b03918281168091036100b65767ffffffffffffffff6040926102007ffd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f955f5416331461097e565b1690815f526001602052825f20816001600160a01b031982541617905582519182526020820152a1005b346100b6575f3660031901126100b65760206001600160a01b035f5416604051908152f35b346100b6575f3660031901126100b6575f80546001600160a01b03196001600160a01b0382169161028133841461097e565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346100b65760203660031901126100b6577f0addee9cb6aa9328bbfbe8282179a6737af344619320736b6918af70b6a94a9860206102e6610968565b6001600160a01b03906102fd825f5416331461097e565b16806001600160a01b03196002541617600255604051908152a1005b346100b65760603660031901126100b657610332610923565b60243567ffffffffffffffff81116100b65761035290369060040161093a565b9160443567ffffffffffffffff81116100b65761037390369060040161093a565b929060405194610382866109c9565b5f86525f60208701525f60408701525f60608701525f60808701525f60a087015267ffffffffffffffff84165f5260016020526001600160a01b0360405f205416156108bb5767ffffffffffffffff84165f5260016020526001600160a01b0360405f205416602060405180926322bb937360e11b8252826004830152846024830152848760448401375f6044868401015281604481601f19601f89011681010301915afa90811561081e575f9161089c575b50156100b6576040519360e0850185811067ffffffffffffffff8211176108435760405260e0368637610104860361085757856020116100b657856024116100b6575f5b60ff600681831610156105435761049761049283610a1f565b610a34565b90600181841601818111610504576104926104b191610a1f565b818116828416116100b65789828216116100b65791811686810135928216036020811061052c575b506007908316101561051857611fe08260051b1687015260ff80911690811461050457600101610479565b634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f1960209190910360031b1b9091169060076104d9565b50508684868589610104116100b65760e481013560c0830152604051958660a081011067ffffffffffffffff60a0890111176108435760a0870160405280610160116100b65780610180116100b65761017084013560801c61014085013560801b178752806101a0116100b657806101c0116100b6576101b084013560801c61018085013560801b176020880152806101e0116100b65780610200116100b6576101f084013560801c6101c085013560801b17604088015280610220116100b65780610240116100b65761023084013560801c61020085013560801b176060880152610260116100b657906020839261025c60a095013560e01c938460808a015260405194610651866109c9565b67ffffffffffffffff891686528386015261014061017082013560801c91013560801b17604085015280356060850152013560e01c6080830152828201526001600160a01b036002541690604051928391631513dce960e21b835267ffffffffffffffff815116600484015263ffffffff6020820151166024840152604081015160448401526060810151606484015263ffffffff6080820151166084840152015160a482015f905b6007821061082957505050610184816020935afa90811561081e575f916107ef575b50156107aa5760a063ffffffff91606060c09567ffffffffffffffff86168352805160408401526020810151602084015284608082015116848401526040810151828401520151608082015267ffffffffffffffff604051941684526020810151602085015260408101516040850152606081015160608501526080810151608085015201511660a0820152f35b60405162461bcd60e51b815260206004820152600f60248201527f696e76616c696420626c6b4861736800000000000000000000000000000000006044820152606490fd5b610811915060203d602011610817575b61080981836109e5565b810190610a07565b8461071c565b503d6107ff565b6040513d5f823e3d90fd5b8293506020809160019394518152019301910184926106fa565b634e487b7160e01b5f52604160045260245ffd5b60405162461bcd60e51b815260206004820152601760248201527f696e636f727265637420626c6b566572696679496e666f0000000000000000006044820152606490fd5b6108b5915060203d6020116108175761080981836109e5565b87610435565b60405162461bcd60e51b815260206004820152601660248201527f636861696e207665726966696572206e6f7420736574000000000000000000006044820152606490fd5b346100b6575f3660031901126100b6576020906001600160a01b03600254168152f35b6004359067ffffffffffffffff821682036100b657565b9181601f840112156100b65782359167ffffffffffffffff83116100b657602083818601950101116100b657565b600435906001600160a01b03821682036100b657565b1561098557565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60c0810190811067ffffffffffffffff82111761084357604052565b90601f8019910116810190811067ffffffffffffffff82111761084357604052565b908160209103126100b6575180151581036100b65790565b60051b90611fe060e083169216820361050457565b60ff166024019060ff82116105045756fea26469706673582212203708d3b791173145a2e2026e5a87c6db8e7970d776486221eed4c38f79478c6a64736f6c63430008150033",
}

// SlotValueVerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use SlotValueVerifierMetaData.ABI instead.
var SlotValueVerifierABI = SlotValueVerifierMetaData.ABI

// SlotValueVerifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SlotValueVerifierMetaData.Bin instead.
var SlotValueVerifierBin = SlotValueVerifierMetaData.Bin

// DeploySlotValueVerifier deploys a new Ethereum contract, binding an instance of SlotValueVerifier to it.
func DeploySlotValueVerifier(auth *bind.TransactOpts, backend bind.ContractBackend, _blocChunks common.Address) (common.Address, *types.Transaction, *SlotValueVerifier, error) {
	parsed, err := SlotValueVerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SlotValueVerifierBin), backend, _blocChunks)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SlotValueVerifier{SlotValueVerifierCaller: SlotValueVerifierCaller{contract: contract}, SlotValueVerifierTransactor: SlotValueVerifierTransactor{contract: contract}, SlotValueVerifierFilterer: SlotValueVerifierFilterer{contract: contract}}, nil
}

// SlotValueVerifier is an auto generated Go binding around an Ethereum contract.
type SlotValueVerifier struct {
	SlotValueVerifierCaller     // Read-only binding to the contract
	SlotValueVerifierTransactor // Write-only binding to the contract
	SlotValueVerifierFilterer   // Log filterer for contract events
}

// SlotValueVerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type SlotValueVerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SlotValueVerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SlotValueVerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SlotValueVerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SlotValueVerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SlotValueVerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SlotValueVerifierSession struct {
	Contract     *SlotValueVerifier // Generic contract binding to set the session for
	CallOpts     bind.CallOpts      // Call options to use throughout this session
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// SlotValueVerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SlotValueVerifierCallerSession struct {
	Contract *SlotValueVerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts            // Call options to use throughout this session
}

// SlotValueVerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SlotValueVerifierTransactorSession struct {
	Contract     *SlotValueVerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts            // Transaction auth options to use throughout this session
}

// SlotValueVerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type SlotValueVerifierRaw struct {
	Contract *SlotValueVerifier // Generic contract binding to access the raw methods on
}

// SlotValueVerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SlotValueVerifierCallerRaw struct {
	Contract *SlotValueVerifierCaller // Generic read-only contract binding to access the raw methods on
}

// SlotValueVerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SlotValueVerifierTransactorRaw struct {
	Contract *SlotValueVerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSlotValueVerifier creates a new instance of SlotValueVerifier, bound to a specific deployed contract.
func NewSlotValueVerifier(address common.Address, backend bind.ContractBackend) (*SlotValueVerifier, error) {
	contract, err := bindSlotValueVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SlotValueVerifier{SlotValueVerifierCaller: SlotValueVerifierCaller{contract: contract}, SlotValueVerifierTransactor: SlotValueVerifierTransactor{contract: contract}, SlotValueVerifierFilterer: SlotValueVerifierFilterer{contract: contract}}, nil
}

// NewSlotValueVerifierCaller creates a new read-only instance of SlotValueVerifier, bound to a specific deployed contract.
func NewSlotValueVerifierCaller(address common.Address, caller bind.ContractCaller) (*SlotValueVerifierCaller, error) {
	contract, err := bindSlotValueVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SlotValueVerifierCaller{contract: contract}, nil
}

// NewSlotValueVerifierTransactor creates a new write-only instance of SlotValueVerifier, bound to a specific deployed contract.
func NewSlotValueVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*SlotValueVerifierTransactor, error) {
	contract, err := bindSlotValueVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SlotValueVerifierTransactor{contract: contract}, nil
}

// NewSlotValueVerifierFilterer creates a new log filterer instance of SlotValueVerifier, bound to a specific deployed contract.
func NewSlotValueVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*SlotValueVerifierFilterer, error) {
	contract, err := bindSlotValueVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SlotValueVerifierFilterer{contract: contract}, nil
}

// bindSlotValueVerifier binds a generic wrapper to an already deployed contract.
func bindSlotValueVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SlotValueVerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SlotValueVerifier *SlotValueVerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SlotValueVerifier.Contract.SlotValueVerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SlotValueVerifier *SlotValueVerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SlotValueVerifier.Contract.SlotValueVerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SlotValueVerifier *SlotValueVerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SlotValueVerifier.Contract.SlotValueVerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SlotValueVerifier *SlotValueVerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SlotValueVerifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SlotValueVerifier *SlotValueVerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SlotValueVerifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SlotValueVerifier *SlotValueVerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SlotValueVerifier.Contract.contract.Transact(opts, method, params...)
}

// BlockChunks is a free data retrieval call binding the contract method 0x0215d013.
//
// Solidity: function BlockChunks() view returns(address)
func (_SlotValueVerifier *SlotValueVerifierCaller) BlockChunks(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SlotValueVerifier.contract.Call(opts, &out, "BlockChunks")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BlockChunks is a free data retrieval call binding the contract method 0x0215d013.
//
// Solidity: function BlockChunks() view returns(address)
func (_SlotValueVerifier *SlotValueVerifierSession) BlockChunks() (common.Address, error) {
	return _SlotValueVerifier.Contract.BlockChunks(&_SlotValueVerifier.CallOpts)
}

// BlockChunks is a free data retrieval call binding the contract method 0x0215d013.
//
// Solidity: function BlockChunks() view returns(address)
func (_SlotValueVerifier *SlotValueVerifierCallerSession) BlockChunks() (common.Address, error) {
	return _SlotValueVerifier.Contract.BlockChunks(&_SlotValueVerifier.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SlotValueVerifier *SlotValueVerifierCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _SlotValueVerifier.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SlotValueVerifier *SlotValueVerifierSession) Owner() (common.Address, error) {
	return _SlotValueVerifier.Contract.Owner(&_SlotValueVerifier.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_SlotValueVerifier *SlotValueVerifierCallerSession) Owner() (common.Address, error) {
	return _SlotValueVerifier.Contract.Owner(&_SlotValueVerifier.CallOpts)
}

// VerifierAddresses is a free data retrieval call binding the contract method 0xf5cec6af.
//
// Solidity: function verifierAddresses(uint64 ) view returns(address)
func (_SlotValueVerifier *SlotValueVerifierCaller) VerifierAddresses(opts *bind.CallOpts, arg0 uint64) (common.Address, error) {
	var out []interface{}
	err := _SlotValueVerifier.contract.Call(opts, &out, "verifierAddresses", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VerifierAddresses is a free data retrieval call binding the contract method 0xf5cec6af.
//
// Solidity: function verifierAddresses(uint64 ) view returns(address)
func (_SlotValueVerifier *SlotValueVerifierSession) VerifierAddresses(arg0 uint64) (common.Address, error) {
	return _SlotValueVerifier.Contract.VerifierAddresses(&_SlotValueVerifier.CallOpts, arg0)
}

// VerifierAddresses is a free data retrieval call binding the contract method 0xf5cec6af.
//
// Solidity: function verifierAddresses(uint64 ) view returns(address)
func (_SlotValueVerifier *SlotValueVerifierCallerSession) VerifierAddresses(arg0 uint64) (common.Address, error) {
	return _SlotValueVerifier.Contract.VerifierAddresses(&_SlotValueVerifier.CallOpts, arg0)
}

// VerifySlotValue is a free data retrieval call binding the contract method 0x0b885e53.
//
// Solidity: function verifySlotValue(uint64 chainId, bytes proofData, bytes blkVerifyInfo) view returns((uint64,bytes32,bytes32,bytes32,bytes32,uint32) slotInfo)
func (_SlotValueVerifier *SlotValueVerifierCaller) VerifySlotValue(opts *bind.CallOpts, chainId uint64, proofData []byte, blkVerifyInfo []byte) (ISlotValueVerifierSlotInfo, error) {
	var out []interface{}
	err := _SlotValueVerifier.contract.Call(opts, &out, "verifySlotValue", chainId, proofData, blkVerifyInfo)

	if err != nil {
		return *new(ISlotValueVerifierSlotInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(ISlotValueVerifierSlotInfo)).(*ISlotValueVerifierSlotInfo)

	return out0, err

}

// VerifySlotValue is a free data retrieval call binding the contract method 0x0b885e53.
//
// Solidity: function verifySlotValue(uint64 chainId, bytes proofData, bytes blkVerifyInfo) view returns((uint64,bytes32,bytes32,bytes32,bytes32,uint32) slotInfo)
func (_SlotValueVerifier *SlotValueVerifierSession) VerifySlotValue(chainId uint64, proofData []byte, blkVerifyInfo []byte) (ISlotValueVerifierSlotInfo, error) {
	return _SlotValueVerifier.Contract.VerifySlotValue(&_SlotValueVerifier.CallOpts, chainId, proofData, blkVerifyInfo)
}

// VerifySlotValue is a free data retrieval call binding the contract method 0x0b885e53.
//
// Solidity: function verifySlotValue(uint64 chainId, bytes proofData, bytes blkVerifyInfo) view returns((uint64,bytes32,bytes32,bytes32,bytes32,uint32) slotInfo)
func (_SlotValueVerifier *SlotValueVerifierCallerSession) VerifySlotValue(chainId uint64, proofData []byte, blkVerifyInfo []byte) (ISlotValueVerifierSlotInfo, error) {
	return _SlotValueVerifier.Contract.VerifySlotValue(&_SlotValueVerifier.CallOpts, chainId, proofData, blkVerifyInfo)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SlotValueVerifier *SlotValueVerifierTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SlotValueVerifier.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SlotValueVerifier *SlotValueVerifierSession) RenounceOwnership() (*types.Transaction, error) {
	return _SlotValueVerifier.Contract.RenounceOwnership(&_SlotValueVerifier.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_SlotValueVerifier *SlotValueVerifierTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _SlotValueVerifier.Contract.RenounceOwnership(&_SlotValueVerifier.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SlotValueVerifier *SlotValueVerifierTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _SlotValueVerifier.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SlotValueVerifier *SlotValueVerifierSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SlotValueVerifier.Contract.TransferOwnership(&_SlotValueVerifier.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_SlotValueVerifier *SlotValueVerifierTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _SlotValueVerifier.Contract.TransferOwnership(&_SlotValueVerifier.TransactOpts, newOwner)
}

// UpdateBlockChunks is a paid mutator transaction binding the contract method 0x1eeb86da.
//
// Solidity: function updateBlockChunks(address _BlockChunks) returns()
func (_SlotValueVerifier *SlotValueVerifierTransactor) UpdateBlockChunks(opts *bind.TransactOpts, _BlockChunks common.Address) (*types.Transaction, error) {
	return _SlotValueVerifier.contract.Transact(opts, "updateBlockChunks", _BlockChunks)
}

// UpdateBlockChunks is a paid mutator transaction binding the contract method 0x1eeb86da.
//
// Solidity: function updateBlockChunks(address _BlockChunks) returns()
func (_SlotValueVerifier *SlotValueVerifierSession) UpdateBlockChunks(_BlockChunks common.Address) (*types.Transaction, error) {
	return _SlotValueVerifier.Contract.UpdateBlockChunks(&_SlotValueVerifier.TransactOpts, _BlockChunks)
}

// UpdateBlockChunks is a paid mutator transaction binding the contract method 0x1eeb86da.
//
// Solidity: function updateBlockChunks(address _BlockChunks) returns()
func (_SlotValueVerifier *SlotValueVerifierTransactorSession) UpdateBlockChunks(_BlockChunks common.Address) (*types.Transaction, error) {
	return _SlotValueVerifier.Contract.UpdateBlockChunks(&_SlotValueVerifier.TransactOpts, _BlockChunks)
}

// UpdateVerifierAddress is a paid mutator transaction binding the contract method 0xec4ffc52.
//
// Solidity: function updateVerifierAddress(uint64 _chainId, address _verifierAddress) returns()
func (_SlotValueVerifier *SlotValueVerifierTransactor) UpdateVerifierAddress(opts *bind.TransactOpts, _chainId uint64, _verifierAddress common.Address) (*types.Transaction, error) {
	return _SlotValueVerifier.contract.Transact(opts, "updateVerifierAddress", _chainId, _verifierAddress)
}

// UpdateVerifierAddress is a paid mutator transaction binding the contract method 0xec4ffc52.
//
// Solidity: function updateVerifierAddress(uint64 _chainId, address _verifierAddress) returns()
func (_SlotValueVerifier *SlotValueVerifierSession) UpdateVerifierAddress(_chainId uint64, _verifierAddress common.Address) (*types.Transaction, error) {
	return _SlotValueVerifier.Contract.UpdateVerifierAddress(&_SlotValueVerifier.TransactOpts, _chainId, _verifierAddress)
}

// UpdateVerifierAddress is a paid mutator transaction binding the contract method 0xec4ffc52.
//
// Solidity: function updateVerifierAddress(uint64 _chainId, address _verifierAddress) returns()
func (_SlotValueVerifier *SlotValueVerifierTransactorSession) UpdateVerifierAddress(_chainId uint64, _verifierAddress common.Address) (*types.Transaction, error) {
	return _SlotValueVerifier.Contract.UpdateVerifierAddress(&_SlotValueVerifier.TransactOpts, _chainId, _verifierAddress)
}

// SlotValueVerifierOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the SlotValueVerifier contract.
type SlotValueVerifierOwnershipTransferredIterator struct {
	Event *SlotValueVerifierOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlotValueVerifierOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlotValueVerifierOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlotValueVerifierOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlotValueVerifierOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlotValueVerifierOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlotValueVerifierOwnershipTransferred represents a OwnershipTransferred event raised by the SlotValueVerifier contract.
type SlotValueVerifierOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SlotValueVerifier *SlotValueVerifierFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*SlotValueVerifierOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SlotValueVerifier.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &SlotValueVerifierOwnershipTransferredIterator{contract: _SlotValueVerifier.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SlotValueVerifier *SlotValueVerifierFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *SlotValueVerifierOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _SlotValueVerifier.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlotValueVerifierOwnershipTransferred)
				if err := _SlotValueVerifier.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_SlotValueVerifier *SlotValueVerifierFilterer) ParseOwnershipTransferred(log types.Log) (*SlotValueVerifierOwnershipTransferred, error) {
	event := new(SlotValueVerifierOwnershipTransferred)
	if err := _SlotValueVerifier.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlotValueVerifierUpdateBlockChunksIterator is returned from FilterUpdateBlockChunks and is used to iterate over the raw logs and unpacked data for UpdateBlockChunks events raised by the SlotValueVerifier contract.
type SlotValueVerifierUpdateBlockChunksIterator struct {
	Event *SlotValueVerifierUpdateBlockChunks // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlotValueVerifierUpdateBlockChunksIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlotValueVerifierUpdateBlockChunks)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlotValueVerifierUpdateBlockChunks)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlotValueVerifierUpdateBlockChunksIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlotValueVerifierUpdateBlockChunksIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlotValueVerifierUpdateBlockChunks represents a UpdateBlockChunks event raised by the SlotValueVerifier contract.
type SlotValueVerifierUpdateBlockChunks struct {
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateBlockChunks is a free log retrieval operation binding the contract event 0x0addee9cb6aa9328bbfbe8282179a6737af344619320736b6918af70b6a94a98.
//
// Solidity: event UpdateBlockChunks(address newAddress)
func (_SlotValueVerifier *SlotValueVerifierFilterer) FilterUpdateBlockChunks(opts *bind.FilterOpts) (*SlotValueVerifierUpdateBlockChunksIterator, error) {

	logs, sub, err := _SlotValueVerifier.contract.FilterLogs(opts, "UpdateBlockChunks")
	if err != nil {
		return nil, err
	}
	return &SlotValueVerifierUpdateBlockChunksIterator{contract: _SlotValueVerifier.contract, event: "UpdateBlockChunks", logs: logs, sub: sub}, nil
}

// WatchUpdateBlockChunks is a free log subscription operation binding the contract event 0x0addee9cb6aa9328bbfbe8282179a6737af344619320736b6918af70b6a94a98.
//
// Solidity: event UpdateBlockChunks(address newAddress)
func (_SlotValueVerifier *SlotValueVerifierFilterer) WatchUpdateBlockChunks(opts *bind.WatchOpts, sink chan<- *SlotValueVerifierUpdateBlockChunks) (event.Subscription, error) {

	logs, sub, err := _SlotValueVerifier.contract.WatchLogs(opts, "UpdateBlockChunks")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlotValueVerifierUpdateBlockChunks)
				if err := _SlotValueVerifier.contract.UnpackLog(event, "UpdateBlockChunks", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateBlockChunks is a log parse operation binding the contract event 0x0addee9cb6aa9328bbfbe8282179a6737af344619320736b6918af70b6a94a98.
//
// Solidity: event UpdateBlockChunks(address newAddress)
func (_SlotValueVerifier *SlotValueVerifierFilterer) ParseUpdateBlockChunks(log types.Log) (*SlotValueVerifierUpdateBlockChunks, error) {
	event := new(SlotValueVerifierUpdateBlockChunks)
	if err := _SlotValueVerifier.contract.UnpackLog(event, "UpdateBlockChunks", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SlotValueVerifierUpdateVerifierAddressIterator is returned from FilterUpdateVerifierAddress and is used to iterate over the raw logs and unpacked data for UpdateVerifierAddress events raised by the SlotValueVerifier contract.
type SlotValueVerifierUpdateVerifierAddressIterator struct {
	Event *SlotValueVerifierUpdateVerifierAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SlotValueVerifierUpdateVerifierAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SlotValueVerifierUpdateVerifierAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SlotValueVerifierUpdateVerifierAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SlotValueVerifierUpdateVerifierAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SlotValueVerifierUpdateVerifierAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SlotValueVerifierUpdateVerifierAddress represents a UpdateVerifierAddress event raised by the SlotValueVerifier contract.
type SlotValueVerifierUpdateVerifierAddress struct {
	ChainId    uint64
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateVerifierAddress is a free log retrieval operation binding the contract event 0xfd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f.
//
// Solidity: event UpdateVerifierAddress(uint64 chainId, address newAddress)
func (_SlotValueVerifier *SlotValueVerifierFilterer) FilterUpdateVerifierAddress(opts *bind.FilterOpts) (*SlotValueVerifierUpdateVerifierAddressIterator, error) {

	logs, sub, err := _SlotValueVerifier.contract.FilterLogs(opts, "UpdateVerifierAddress")
	if err != nil {
		return nil, err
	}
	return &SlotValueVerifierUpdateVerifierAddressIterator{contract: _SlotValueVerifier.contract, event: "UpdateVerifierAddress", logs: logs, sub: sub}, nil
}

// WatchUpdateVerifierAddress is a free log subscription operation binding the contract event 0xfd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f.
//
// Solidity: event UpdateVerifierAddress(uint64 chainId, address newAddress)
func (_SlotValueVerifier *SlotValueVerifierFilterer) WatchUpdateVerifierAddress(opts *bind.WatchOpts, sink chan<- *SlotValueVerifierUpdateVerifierAddress) (event.Subscription, error) {

	logs, sub, err := _SlotValueVerifier.contract.WatchLogs(opts, "UpdateVerifierAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SlotValueVerifierUpdateVerifierAddress)
				if err := _SlotValueVerifier.contract.UnpackLog(event, "UpdateVerifierAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateVerifierAddress is a log parse operation binding the contract event 0xfd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f.
//
// Solidity: event UpdateVerifierAddress(uint64 chainId, address newAddress)
func (_SlotValueVerifier *SlotValueVerifierFilterer) ParseUpdateVerifierAddress(log types.Log) (*SlotValueVerifierUpdateVerifierAddress, error) {
	event := new(SlotValueVerifierUpdateVerifierAddress)
	if err := _SlotValueVerifier.contract.UnpackLog(event, "UpdateVerifierAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// SqrtPriceMathMetaData contains all meta data concerning the SqrtPriceMath contract.
var SqrtPriceMathMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220ab3ddd0a1bab793e1e0bd1f6e2b0964e49b7752281c7d8b04a9900c461bd599b64736f6c63430008150033",
}

// SqrtPriceMathABI is the input ABI used to generate the binding from.
// Deprecated: Use SqrtPriceMathMetaData.ABI instead.
var SqrtPriceMathABI = SqrtPriceMathMetaData.ABI

// SqrtPriceMathBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SqrtPriceMathMetaData.Bin instead.
var SqrtPriceMathBin = SqrtPriceMathMetaData.Bin

// DeploySqrtPriceMath deploys a new Ethereum contract, binding an instance of SqrtPriceMath to it.
func DeploySqrtPriceMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SqrtPriceMath, error) {
	parsed, err := SqrtPriceMathMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SqrtPriceMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SqrtPriceMath{SqrtPriceMathCaller: SqrtPriceMathCaller{contract: contract}, SqrtPriceMathTransactor: SqrtPriceMathTransactor{contract: contract}, SqrtPriceMathFilterer: SqrtPriceMathFilterer{contract: contract}}, nil
}

// SqrtPriceMath is an auto generated Go binding around an Ethereum contract.
type SqrtPriceMath struct {
	SqrtPriceMathCaller     // Read-only binding to the contract
	SqrtPriceMathTransactor // Write-only binding to the contract
	SqrtPriceMathFilterer   // Log filterer for contract events
}

// SqrtPriceMathCaller is an auto generated read-only Go binding around an Ethereum contract.
type SqrtPriceMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SqrtPriceMathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SqrtPriceMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SqrtPriceMathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SqrtPriceMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SqrtPriceMathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SqrtPriceMathSession struct {
	Contract     *SqrtPriceMath    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SqrtPriceMathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SqrtPriceMathCallerSession struct {
	Contract *SqrtPriceMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// SqrtPriceMathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SqrtPriceMathTransactorSession struct {
	Contract     *SqrtPriceMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// SqrtPriceMathRaw is an auto generated low-level Go binding around an Ethereum contract.
type SqrtPriceMathRaw struct {
	Contract *SqrtPriceMath // Generic contract binding to access the raw methods on
}

// SqrtPriceMathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SqrtPriceMathCallerRaw struct {
	Contract *SqrtPriceMathCaller // Generic read-only contract binding to access the raw methods on
}

// SqrtPriceMathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SqrtPriceMathTransactorRaw struct {
	Contract *SqrtPriceMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSqrtPriceMath creates a new instance of SqrtPriceMath, bound to a specific deployed contract.
func NewSqrtPriceMath(address common.Address, backend bind.ContractBackend) (*SqrtPriceMath, error) {
	contract, err := bindSqrtPriceMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SqrtPriceMath{SqrtPriceMathCaller: SqrtPriceMathCaller{contract: contract}, SqrtPriceMathTransactor: SqrtPriceMathTransactor{contract: contract}, SqrtPriceMathFilterer: SqrtPriceMathFilterer{contract: contract}}, nil
}

// NewSqrtPriceMathCaller creates a new read-only instance of SqrtPriceMath, bound to a specific deployed contract.
func NewSqrtPriceMathCaller(address common.Address, caller bind.ContractCaller) (*SqrtPriceMathCaller, error) {
	contract, err := bindSqrtPriceMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SqrtPriceMathCaller{contract: contract}, nil
}

// NewSqrtPriceMathTransactor creates a new write-only instance of SqrtPriceMath, bound to a specific deployed contract.
func NewSqrtPriceMathTransactor(address common.Address, transactor bind.ContractTransactor) (*SqrtPriceMathTransactor, error) {
	contract, err := bindSqrtPriceMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SqrtPriceMathTransactor{contract: contract}, nil
}

// NewSqrtPriceMathFilterer creates a new log filterer instance of SqrtPriceMath, bound to a specific deployed contract.
func NewSqrtPriceMathFilterer(address common.Address, filterer bind.ContractFilterer) (*SqrtPriceMathFilterer, error) {
	contract, err := bindSqrtPriceMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SqrtPriceMathFilterer{contract: contract}, nil
}

// bindSqrtPriceMath binds a generic wrapper to an already deployed contract.
func bindSqrtPriceMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SqrtPriceMathMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SqrtPriceMath *SqrtPriceMathRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SqrtPriceMath.Contract.SqrtPriceMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SqrtPriceMath *SqrtPriceMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SqrtPriceMath.Contract.SqrtPriceMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SqrtPriceMath *SqrtPriceMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SqrtPriceMath.Contract.SqrtPriceMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SqrtPriceMath *SqrtPriceMathCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SqrtPriceMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SqrtPriceMath *SqrtPriceMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SqrtPriceMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SqrtPriceMath *SqrtPriceMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SqrtPriceMath.Contract.contract.Transact(opts, method, params...)
}

// StringsMetaData contains all meta data concerning the Strings contract.
var StringsMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212203bedb5d5d1fb789ab1082288c4f4b949bd2ba3787320329f836c978e205a300f64736f6c63430008150033",
}

// StringsABI is the input ABI used to generate the binding from.
// Deprecated: Use StringsMetaData.ABI instead.
var StringsABI = StringsMetaData.ABI

// StringsBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StringsMetaData.Bin instead.
var StringsBin = StringsMetaData.Bin

// DeployStrings deploys a new Ethereum contract, binding an instance of Strings to it.
func DeployStrings(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Strings, error) {
	parsed, err := StringsMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StringsBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Strings{StringsCaller: StringsCaller{contract: contract}, StringsTransactor: StringsTransactor{contract: contract}, StringsFilterer: StringsFilterer{contract: contract}}, nil
}

// Strings is an auto generated Go binding around an Ethereum contract.
type Strings struct {
	StringsCaller     // Read-only binding to the contract
	StringsTransactor // Write-only binding to the contract
	StringsFilterer   // Log filterer for contract events
}

// StringsCaller is an auto generated read-only Go binding around an Ethereum contract.
type StringsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StringsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StringsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StringsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StringsSession struct {
	Contract     *Strings          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StringsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StringsCallerSession struct {
	Contract *StringsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// StringsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StringsTransactorSession struct {
	Contract     *StringsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// StringsRaw is an auto generated low-level Go binding around an Ethereum contract.
type StringsRaw struct {
	Contract *Strings // Generic contract binding to access the raw methods on
}

// StringsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StringsCallerRaw struct {
	Contract *StringsCaller // Generic read-only contract binding to access the raw methods on
}

// StringsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StringsTransactorRaw struct {
	Contract *StringsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStrings creates a new instance of Strings, bound to a specific deployed contract.
func NewStrings(address common.Address, backend bind.ContractBackend) (*Strings, error) {
	contract, err := bindStrings(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Strings{StringsCaller: StringsCaller{contract: contract}, StringsTransactor: StringsTransactor{contract: contract}, StringsFilterer: StringsFilterer{contract: contract}}, nil
}

// NewStringsCaller creates a new read-only instance of Strings, bound to a specific deployed contract.
func NewStringsCaller(address common.Address, caller bind.ContractCaller) (*StringsCaller, error) {
	contract, err := bindStrings(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StringsCaller{contract: contract}, nil
}

// NewStringsTransactor creates a new write-only instance of Strings, bound to a specific deployed contract.
func NewStringsTransactor(address common.Address, transactor bind.ContractTransactor) (*StringsTransactor, error) {
	contract, err := bindStrings(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StringsTransactor{contract: contract}, nil
}

// NewStringsFilterer creates a new log filterer instance of Strings, bound to a specific deployed contract.
func NewStringsFilterer(address common.Address, filterer bind.ContractFilterer) (*StringsFilterer, error) {
	contract, err := bindStrings(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StringsFilterer{contract: contract}, nil
}

// bindStrings binds a generic wrapper to an already deployed contract.
func bindStrings(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := StringsMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Strings *StringsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Strings.Contract.StringsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Strings *StringsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Strings.Contract.StringsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Strings *StringsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Strings.Contract.StringsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Strings *StringsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Strings.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Strings *StringsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Strings.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Strings *StringsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Strings.Contract.contract.Transact(opts, method, params...)
}

// SwapMathMetaData contains all meta data concerning the SwapMath contract.
var SwapMathMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea264697066735822122078e7a238b49b86430b174ad5e6b99edbdf63634f5744591a6538d33b6ec979d964736f6c63430008150033",
}

// SwapMathABI is the input ABI used to generate the binding from.
// Deprecated: Use SwapMathMetaData.ABI instead.
var SwapMathABI = SwapMathMetaData.ABI

// SwapMathBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use SwapMathMetaData.Bin instead.
var SwapMathBin = SwapMathMetaData.Bin

// DeploySwapMath deploys a new Ethereum contract, binding an instance of SwapMath to it.
func DeploySwapMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SwapMath, error) {
	parsed, err := SwapMathMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(SwapMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SwapMath{SwapMathCaller: SwapMathCaller{contract: contract}, SwapMathTransactor: SwapMathTransactor{contract: contract}, SwapMathFilterer: SwapMathFilterer{contract: contract}}, nil
}

// SwapMath is an auto generated Go binding around an Ethereum contract.
type SwapMath struct {
	SwapMathCaller     // Read-only binding to the contract
	SwapMathTransactor // Write-only binding to the contract
	SwapMathFilterer   // Log filterer for contract events
}

// SwapMathCaller is an auto generated read-only Go binding around an Ethereum contract.
type SwapMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwapMathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SwapMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwapMathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SwapMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SwapMathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SwapMathSession struct {
	Contract     *SwapMath         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SwapMathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SwapMathCallerSession struct {
	Contract *SwapMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// SwapMathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SwapMathTransactorSession struct {
	Contract     *SwapMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SwapMathRaw is an auto generated low-level Go binding around an Ethereum contract.
type SwapMathRaw struct {
	Contract *SwapMath // Generic contract binding to access the raw methods on
}

// SwapMathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SwapMathCallerRaw struct {
	Contract *SwapMathCaller // Generic read-only contract binding to access the raw methods on
}

// SwapMathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SwapMathTransactorRaw struct {
	Contract *SwapMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSwapMath creates a new instance of SwapMath, bound to a specific deployed contract.
func NewSwapMath(address common.Address, backend bind.ContractBackend) (*SwapMath, error) {
	contract, err := bindSwapMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SwapMath{SwapMathCaller: SwapMathCaller{contract: contract}, SwapMathTransactor: SwapMathTransactor{contract: contract}, SwapMathFilterer: SwapMathFilterer{contract: contract}}, nil
}

// NewSwapMathCaller creates a new read-only instance of SwapMath, bound to a specific deployed contract.
func NewSwapMathCaller(address common.Address, caller bind.ContractCaller) (*SwapMathCaller, error) {
	contract, err := bindSwapMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SwapMathCaller{contract: contract}, nil
}

// NewSwapMathTransactor creates a new write-only instance of SwapMath, bound to a specific deployed contract.
func NewSwapMathTransactor(address common.Address, transactor bind.ContractTransactor) (*SwapMathTransactor, error) {
	contract, err := bindSwapMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SwapMathTransactor{contract: contract}, nil
}

// NewSwapMathFilterer creates a new log filterer instance of SwapMath, bound to a specific deployed contract.
func NewSwapMathFilterer(address common.Address, filterer bind.ContractFilterer) (*SwapMathFilterer, error) {
	contract, err := bindSwapMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SwapMathFilterer{contract: contract}, nil
}

// bindSwapMath binds a generic wrapper to an already deployed contract.
func bindSwapMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := SwapMathMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SwapMath *SwapMathRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SwapMath.Contract.SwapMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SwapMath *SwapMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SwapMath.Contract.SwapMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SwapMath *SwapMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SwapMath.Contract.SwapMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SwapMath *SwapMathCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _SwapMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SwapMath *SwapMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SwapMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SwapMath *SwapMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SwapMath.Contract.contract.Transact(opts, method, params...)
}

// TickBitmapMetaData contains all meta data concerning the TickBitmap contract.
var TickBitmapMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"}],\"name\":\"TickMisaligned\",\"type\":\"error\"}]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220834c43e915347ac624849269573558f1a01b430b3ba78604269aecb9624eaeef64736f6c63430008150033",
}

// TickBitmapABI is the input ABI used to generate the binding from.
// Deprecated: Use TickBitmapMetaData.ABI instead.
var TickBitmapABI = TickBitmapMetaData.ABI

// TickBitmapBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TickBitmapMetaData.Bin instead.
var TickBitmapBin = TickBitmapMetaData.Bin

// DeployTickBitmap deploys a new Ethereum contract, binding an instance of TickBitmap to it.
func DeployTickBitmap(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TickBitmap, error) {
	parsed, err := TickBitmapMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TickBitmapBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TickBitmap{TickBitmapCaller: TickBitmapCaller{contract: contract}, TickBitmapTransactor: TickBitmapTransactor{contract: contract}, TickBitmapFilterer: TickBitmapFilterer{contract: contract}}, nil
}

// TickBitmap is an auto generated Go binding around an Ethereum contract.
type TickBitmap struct {
	TickBitmapCaller     // Read-only binding to the contract
	TickBitmapTransactor // Write-only binding to the contract
	TickBitmapFilterer   // Log filterer for contract events
}

// TickBitmapCaller is an auto generated read-only Go binding around an Ethereum contract.
type TickBitmapCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TickBitmapTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TickBitmapTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TickBitmapFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TickBitmapFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TickBitmapSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TickBitmapSession struct {
	Contract     *TickBitmap       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TickBitmapCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TickBitmapCallerSession struct {
	Contract *TickBitmapCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// TickBitmapTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TickBitmapTransactorSession struct {
	Contract     *TickBitmapTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// TickBitmapRaw is an auto generated low-level Go binding around an Ethereum contract.
type TickBitmapRaw struct {
	Contract *TickBitmap // Generic contract binding to access the raw methods on
}

// TickBitmapCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TickBitmapCallerRaw struct {
	Contract *TickBitmapCaller // Generic read-only contract binding to access the raw methods on
}

// TickBitmapTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TickBitmapTransactorRaw struct {
	Contract *TickBitmapTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTickBitmap creates a new instance of TickBitmap, bound to a specific deployed contract.
func NewTickBitmap(address common.Address, backend bind.ContractBackend) (*TickBitmap, error) {
	contract, err := bindTickBitmap(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TickBitmap{TickBitmapCaller: TickBitmapCaller{contract: contract}, TickBitmapTransactor: TickBitmapTransactor{contract: contract}, TickBitmapFilterer: TickBitmapFilterer{contract: contract}}, nil
}

// NewTickBitmapCaller creates a new read-only instance of TickBitmap, bound to a specific deployed contract.
func NewTickBitmapCaller(address common.Address, caller bind.ContractCaller) (*TickBitmapCaller, error) {
	contract, err := bindTickBitmap(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TickBitmapCaller{contract: contract}, nil
}

// NewTickBitmapTransactor creates a new write-only instance of TickBitmap, bound to a specific deployed contract.
func NewTickBitmapTransactor(address common.Address, transactor bind.ContractTransactor) (*TickBitmapTransactor, error) {
	contract, err := bindTickBitmap(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TickBitmapTransactor{contract: contract}, nil
}

// NewTickBitmapFilterer creates a new log filterer instance of TickBitmap, bound to a specific deployed contract.
func NewTickBitmapFilterer(address common.Address, filterer bind.ContractFilterer) (*TickBitmapFilterer, error) {
	contract, err := bindTickBitmap(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TickBitmapFilterer{contract: contract}, nil
}

// bindTickBitmap binds a generic wrapper to an already deployed contract.
func bindTickBitmap(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TickBitmapMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TickBitmap *TickBitmapRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TickBitmap.Contract.TickBitmapCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TickBitmap *TickBitmapRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TickBitmap.Contract.TickBitmapTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TickBitmap *TickBitmapRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TickBitmap.Contract.TickBitmapTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TickBitmap *TickBitmapCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TickBitmap.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TickBitmap *TickBitmapTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TickBitmap.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TickBitmap *TickBitmapTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TickBitmap.Contract.contract.Transact(opts, method, params...)
}

// TickMathMetaData contains all meta data concerning the TickMath contract.
var TickMathMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"InvalidSqrtRatio\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTick\",\"type\":\"error\"}]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212203966619ba7f3ce479f19965c4cb35c7fd1fc2898871961b4d9353b02afff0eea64736f6c63430008150033",
}

// TickMathABI is the input ABI used to generate the binding from.
// Deprecated: Use TickMathMetaData.ABI instead.
var TickMathABI = TickMathMetaData.ABI

// TickMathBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TickMathMetaData.Bin instead.
var TickMathBin = TickMathMetaData.Bin

// DeployTickMath deploys a new Ethereum contract, binding an instance of TickMath to it.
func DeployTickMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TickMath, error) {
	parsed, err := TickMathMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TickMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TickMath{TickMathCaller: TickMathCaller{contract: contract}, TickMathTransactor: TickMathTransactor{contract: contract}, TickMathFilterer: TickMathFilterer{contract: contract}}, nil
}

// TickMath is an auto generated Go binding around an Ethereum contract.
type TickMath struct {
	TickMathCaller     // Read-only binding to the contract
	TickMathTransactor // Write-only binding to the contract
	TickMathFilterer   // Log filterer for contract events
}

// TickMathCaller is an auto generated read-only Go binding around an Ethereum contract.
type TickMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TickMathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TickMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TickMathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TickMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TickMathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TickMathSession struct {
	Contract     *TickMath         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TickMathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TickMathCallerSession struct {
	Contract *TickMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// TickMathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TickMathTransactorSession struct {
	Contract     *TickMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// TickMathRaw is an auto generated low-level Go binding around an Ethereum contract.
type TickMathRaw struct {
	Contract *TickMath // Generic contract binding to access the raw methods on
}

// TickMathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TickMathCallerRaw struct {
	Contract *TickMathCaller // Generic read-only contract binding to access the raw methods on
}

// TickMathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TickMathTransactorRaw struct {
	Contract *TickMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTickMath creates a new instance of TickMath, bound to a specific deployed contract.
func NewTickMath(address common.Address, backend bind.ContractBackend) (*TickMath, error) {
	contract, err := bindTickMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TickMath{TickMathCaller: TickMathCaller{contract: contract}, TickMathTransactor: TickMathTransactor{contract: contract}, TickMathFilterer: TickMathFilterer{contract: contract}}, nil
}

// NewTickMathCaller creates a new read-only instance of TickMath, bound to a specific deployed contract.
func NewTickMathCaller(address common.Address, caller bind.ContractCaller) (*TickMathCaller, error) {
	contract, err := bindTickMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TickMathCaller{contract: contract}, nil
}

// NewTickMathTransactor creates a new write-only instance of TickMath, bound to a specific deployed contract.
func NewTickMathTransactor(address common.Address, transactor bind.ContractTransactor) (*TickMathTransactor, error) {
	contract, err := bindTickMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TickMathTransactor{contract: contract}, nil
}

// NewTickMathFilterer creates a new log filterer instance of TickMath, bound to a specific deployed contract.
func NewTickMathFilterer(address common.Address, filterer bind.ContractFilterer) (*TickMathFilterer, error) {
	contract, err := bindTickMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TickMathFilterer{contract: contract}, nil
}

// bindTickMath binds a generic wrapper to an already deployed contract.
func bindTickMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TickMathMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TickMath *TickMathRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TickMath.Contract.TickMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TickMath *TickMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TickMath.Contract.TickMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TickMath *TickMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TickMath.Contract.TickMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TickMath *TickMathCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TickMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TickMath *TickMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TickMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TickMath *TickMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TickMath.Contract.contract.Transact(opts, method, params...)
}

// TierFactoryMetaData contains all meta data concerning the TierFactory contract.
var TierFactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TargetPrefix\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_FLAG_MASK\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startSalt\",\"type\":\"uint256\"}],\"name\":\"mineDeploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"}],\"name\":\"mineDeploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIPoolManager\",\"name\":\"poolManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startSalt\",\"type\":\"uint256\"}],\"name\":\"mineSalt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractTierHook\",\"name\":\"_tierHook\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sumVolumeAddress\",\"type\":\"address\"}],\"name\":\"updateHookSumVolumeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a08060405234610079576021609a1b6080525f8054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3611630908161007e823960805181818161026b0152818161042b01526105720152f35b5f80fdfe6040608081526004361015610012575f80fd5b5f90813560e01c806321cde3ec146103bf5780632e026a671461038857806332c02a1414610350578063635d401714610321578063715018a6146102b45780638da5cb5b1461028f578063a707b18a1461024c578063c6f614631461022e57828163d8f4720114610179575063f2fde38b1461008c575f80fd5b34610175576020366003190112610175576100a56103f2565b6001600160a01b0380916100bd828654163314610763565b1691821561010c57505f548273ffffffffffffffffffffffffffffffffffffffff198216175f55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a380f35b5162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b5080fd5b80833461022b578060031936011261022b576004356001600160a01b03908181168091036102225760243591808316809303610227576101bd908554163314610763565b803b15610222576024849284519586938492630221016d60e31b845260048401525af18015610218576101ee578280f35b67ffffffffffffffff8211610204575281808280f35b634e487b7160e01b83526041600452602483fd5b81513d85823e3d90fd5b505050fd5b8480fd5b50fd5b50346101755781600319360112610175576020905160ff60981b8152f35b5034610175578160031936011261017557602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b50346101755781600319360112610175576001600160a01b0360209254169051908152f35b823461031e578060031936011261031e5780805473ffffffffffffffffffffffffffffffffffffffff196001600160a01b038216916102f4338414610763565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b50346101755780600319360112610175576020906103496103406103f2565b60243590610546565b9051908152f35b50346101755780600319360112610175576020906001600160a01b036103806103776103f2565b602435906106eb565b915191168152f35b5034610175576020366003190112610175576020906001600160a01b036103806103b06103f2565b6103b98161040c565b906106eb565b50346101755780600319360112610175576020906001600160a01b036103806103e66103f2565b6103b960243582610546565b600435906001600160a01b038216820361040857565b5f80fd5b5f610e4c906020928383016107af903060601b926001600160a01b03807f000000000000000000000000000000000000000000000000000000000000000016955b6103e8811061049b5760405162461bcd60e51b8152600481018a9052601560248201527f4661696c656420746f2066696e6420612073616c7400000000000000000000006044820152606490fd5b8660ff60981b8a8a6104e76104fb6040938451936104b98c866106c9565b8085528c828601396104ed85518a8c16838201528281526104d98161067d565b86519485938401809761073a565b9061073a565b03601f1981018352826106c9565b51902090518c81019160ff60f81b83528a6021830152856035830152605590818301528152610529816106ad565b519020161461053a5760010161044d565b97505050505050505090565b906103e881019081811161066957610e4c6020938482016107af913060601b936001600160a01b0390817f000000000000000000000000000000000000000000000000000000000000000016965b8881106105e05760405162461bcd60e51b8152600481018b9052601560248201527f4661696c656420746f2066696e6420612073616c7400000000000000000000006044820152606490fd5b8760ff60981b60408c6104e761061d8351926105fc8c856106c9565b888452888d828601396104ed85518b8d16838201528281526104d98161067d565b51902090518d81019160ff60f81b83528b602183015285603583015260559081830152815261064b816106ad565b519020161461065c57600101610594565b9850505050505050505090565b634e487b7160e01b5f52601160045260245ffd5b6040810190811067ffffffffffffffff82111761069957604052565b634e487b7160e01b5f52604160045260245ffd5b6080810190811067ffffffffffffffff82111761069957604052565b90601f8019910116810190811067ffffffffffffffff82111761069957604052565b90604051610e4c8082019082821067ffffffffffffffff8311176106995760209183916107af83396001600160a01b0380961681520301905ff5801561072f571690565b6040513d5f823e3d90fd5b908151915f5b838110610750575050015f815290565b8060208092840101518185015201610740565b1561076a57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfe60a034620001f657601f62000e4c38819003918201601f19168301916001600160401b03831184841017620001fa57808492602094604052833981010312620001f657516001600160a01b03908181168103620001f6575f8054336001600160a01b03198216811783559193167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08480a36080528060e0620000a06200020e565b8281528260208201528260408201528260608201528260808201528260a08201528260c0820152015260e0620000d56200020e565b60018152826020820152826040820152826060820152826080820152600160a08201528260c082015201526001609f1b30161515600114801590620001e6575b8015620001d6575b8015620001c6575b8015620001b6575b8015620001a2575b801562000192575b801562000182575b6200016a57604051610c1c908162000230823960805181818161023101526103fd0152f35b604051630732d7b560e51b8152306004820152602490fd5b5030600160981b16151562000145565b5030600160991b1615156200013d565b50306001609a1b1615156001141562000135565b50306001609b1b1615156200012d565b50306001609c1b16151562000125565b50306001609d1b1615156200011d565b50306001609e1b16151562000115565b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b6040519061010082016001600160401b03811183821017620001fa5760405256fe60406080815260049081361015610014575f80fd5b5f803560e01c806311080b68146107c8578063229c7d8b146107a05780632ab7a3e21461077b57806330b7cdef146107585780633440d820146106ce57806339dfff16146106b2578063575e24b4146106a25780635ae4ce5814610684578063612c39b7146105b4578063715018a61461054a5780638da5cb5b1461052457806390f57fc1146104f2578063a910f80f14610484578063ab6291fe146103c0578063b47b2fb114610259578063b6a8b0fa1461020c578063dc4c90d314610211578063e1b4af691461020c578063f2fde38b1461011d5763fe9a6f45146100f9575f80fd5b3461011a5750610108366108a3565b505050505051630a85dc2960e01b8152fd5b80fd5b50913461020857602036600319011261020857610138610847565b908354906001600160a01b0380831693610153338614610ad3565b1693841561019f57505073ffffffffffffffffffffffffffffffffffffffff1916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b610981565b509034610255578160031936011261025557602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b503461011a5761026836610907565b505092505060a08136031261020857835167ffffffffffffffff9360a08201858111838210176103ad57865261029d83610861565b918281526102ad60208501610861565b9360208201948552878101359062ffffff80831683036103a9578984019283526060820135918260020b83036103a557608090606086019384520135926001600160a01b039485851685036103a157608001938452848b51988160208b019916895251168b890152511660608701525160020b6080860152511660a084015260a0835260c08301948386109086111761038e57506020955060e09084865282519020928060801d8552600f0b9101527f6e78eb77321ff667248e786162a80dcc8c37e03953a73757e24aeba9ba881bee833293a35163b47b2fb160e01b8152f35b634e487b7160e01b815260418752602490fd5b8680fd5b8580fd5b8480fd5b634e487b7160e01b825260418852602482fd5b503461011a576020928360031936011261025557803567ffffffffffffffff8111610208576103f29036908301610875565b916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163303610476575061043084928692610a39565b82519382859384528251928382860152825b84811061046057505050828201840152601f01601f19168101030190f35b8181018301518882018801528795508201610442565b845163570c108560e11b8152fd5b503461011a5761012036600319011261011a5761049f610847565b5060a036602319011261011a576104b461096b565b5060e4358060020b0361011a57610104359067ffffffffffffffff821161011a57506104e39036908401610875565b505051630a85dc2960e01b8152fd5b5090346102555760203660031901126102555760209062ffffff61051c610517610847565b610b1e565b915191168152f35b5090346102555781600319360112610255576001600160a01b0360209254169051908152f35b503461011a578060031936011261011a5780805473ffffffffffffffffffffffffffffffffffffffff196001600160a01b0382169161058a338414610ad3565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b509034610255578160031936011261025557816101009260e083516105d8816109e6565b82815282602082015282858201528260608201528260808201528260a08201528260c08201520152815161060b816109e6565b6001815260208101928284528082019083825260608301848152608084019185835260a08501936001855260e060c087019688885201968752815197600189525115156020890152511515908701525115156060860152511515608085015251151560a084015251151560c083015251151560e0820152f35b5090346102555760a036600319011261025557602090516155338152f35b503461011a5750610108366108a3565b5090346102555760a03660031901126102555751908152602090f35b503461011a5761010036600319011261011a576106e9610847565b5060a036602319011261011a576106fe61096b565b5060e43567ffffffffffffffff81116102555761071e9036908501610875565b50506064359062ffffff8216820361011a575062800000161561074b57516301a206c160e51b8152602090f35b516315b3d69f60e31b8152fd5b503461011a575061076836610907565b50505050505051630a85dc2960e01b8152fd5b5090346102555760209061078e366108a3565b505050505062ffffff61051c32610b1e565b5090346102555781600319360112610255576020906001600160a01b03600154169051908152f35b5090346102555760203660031901126102555760207fa7f1d21617374882d6d2a29f886042bc73207e68d82e84a98231e74fcf6c111a91610807610847565b6001600160a01b039061081e828754163314610ad3565b16908173ffffffffffffffffffffffffffffffffffffffff19600154161760015551908152a180f35b600435906001600160a01b038216820361085d57565b5f80fd5b35906001600160a01b038216820361085d57565b9181601f8401121561085d5782359167ffffffffffffffff831161085d576020838186019501011161085d57565b9061014060031983011261085d576004356001600160a01b038116810361085d579160a060231982011261085d57602491606060c31983011261085d5760c491610124359067ffffffffffffffff821161085d5761090391600401610875565b9091565b61016060031982011261085d576004356001600160a01b038116810361085d579160a060231983011261085d57602491606060c31982011261085d5760c4916101243591610144359067ffffffffffffffff821161085d5761090391600401610875565b60c435906001600160a01b038216820361085d57565b3461085d5761012036600319011261085d576004356001600160a01b0381160361085d5760a036602319011261085d576101043567ffffffffffffffff811161085d576109d2903690600401610875565b5050604051630a85dc2960e01b8152600490fd5b610100810190811067ffffffffffffffff821117610a0357604052565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff821117610a0357604052565b604051929183918190833781015f9384928284809452039082305af13d15610aca573d67ffffffffffffffff8111610ab65760405190610a83601f8201601f191660200183610a17565b8152809360203d92013e5b610ab45750805115610aa257602081519101fd5b6040516314815f4760e31b8152600490fd5b565b634e487b7160e01b84526041600452602484fd5b60609250610a8e565b15610ada57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b610b2790610b50565b6127109060028103610b3f575060011c627fffff1690565b600114610b495790565b50611f4090565b60206001600160a01b036024816001541693604051948593849263950650c160e01b84521660048301525afa908115610bdb575f91610baa575b50633b9aca00811115610b9d5750600290565b610ba5575f90565b600190565b906020823d8211610bd3575b81610bc360209383610a17565b8101031261011a5750515f610b8a565b3d9150610bb6565b6040513d5f823e3d90fdfea264697066735822122069bbdfcdc3ad9326a6b6cb60ef25185382e2195908c1a64904d7a597dd798db664736f6c63430008150033a2646970667358221220e3ebb3f53050a93cd169633bd2ed8d0d502096181df8c160d13dadb88e9db90464736f6c63430008150033",
}

// TierFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use TierFactoryMetaData.ABI instead.
var TierFactoryABI = TierFactoryMetaData.ABI

// TierFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TierFactoryMetaData.Bin instead.
var TierFactoryBin = TierFactoryMetaData.Bin

// DeployTierFactory deploys a new Ethereum contract, binding an instance of TierFactory to it.
func DeployTierFactory(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TierFactory, error) {
	parsed, err := TierFactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TierFactoryBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TierFactory{TierFactoryCaller: TierFactoryCaller{contract: contract}, TierFactoryTransactor: TierFactoryTransactor{contract: contract}, TierFactoryFilterer: TierFactoryFilterer{contract: contract}}, nil
}

// TierFactory is an auto generated Go binding around an Ethereum contract.
type TierFactory struct {
	TierFactoryCaller     // Read-only binding to the contract
	TierFactoryTransactor // Write-only binding to the contract
	TierFactoryFilterer   // Log filterer for contract events
}

// TierFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type TierFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TierFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TierFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TierFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TierFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TierFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TierFactorySession struct {
	Contract     *TierFactory      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TierFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TierFactoryCallerSession struct {
	Contract *TierFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// TierFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TierFactoryTransactorSession struct {
	Contract     *TierFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// TierFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type TierFactoryRaw struct {
	Contract *TierFactory // Generic contract binding to access the raw methods on
}

// TierFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TierFactoryCallerRaw struct {
	Contract *TierFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// TierFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TierFactoryTransactorRaw struct {
	Contract *TierFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTierFactory creates a new instance of TierFactory, bound to a specific deployed contract.
func NewTierFactory(address common.Address, backend bind.ContractBackend) (*TierFactory, error) {
	contract, err := bindTierFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TierFactory{TierFactoryCaller: TierFactoryCaller{contract: contract}, TierFactoryTransactor: TierFactoryTransactor{contract: contract}, TierFactoryFilterer: TierFactoryFilterer{contract: contract}}, nil
}

// NewTierFactoryCaller creates a new read-only instance of TierFactory, bound to a specific deployed contract.
func NewTierFactoryCaller(address common.Address, caller bind.ContractCaller) (*TierFactoryCaller, error) {
	contract, err := bindTierFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TierFactoryCaller{contract: contract}, nil
}

// NewTierFactoryTransactor creates a new write-only instance of TierFactory, bound to a specific deployed contract.
func NewTierFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*TierFactoryTransactor, error) {
	contract, err := bindTierFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TierFactoryTransactor{contract: contract}, nil
}

// NewTierFactoryFilterer creates a new log filterer instance of TierFactory, bound to a specific deployed contract.
func NewTierFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*TierFactoryFilterer, error) {
	contract, err := bindTierFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TierFactoryFilterer{contract: contract}, nil
}

// bindTierFactory binds a generic wrapper to an already deployed contract.
func bindTierFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TierFactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TierFactory *TierFactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TierFactory.Contract.TierFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TierFactory *TierFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TierFactory.Contract.TierFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TierFactory *TierFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TierFactory.Contract.TierFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TierFactory *TierFactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TierFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TierFactory *TierFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TierFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TierFactory *TierFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TierFactory.Contract.contract.Transact(opts, method, params...)
}

// TargetPrefix is a free data retrieval call binding the contract method 0xa707b18a.
//
// Solidity: function TargetPrefix() view returns(address)
func (_TierFactory *TierFactoryCaller) TargetPrefix(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TierFactory.contract.Call(opts, &out, "TargetPrefix")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TargetPrefix is a free data retrieval call binding the contract method 0xa707b18a.
//
// Solidity: function TargetPrefix() view returns(address)
func (_TierFactory *TierFactorySession) TargetPrefix() (common.Address, error) {
	return _TierFactory.Contract.TargetPrefix(&_TierFactory.CallOpts)
}

// TargetPrefix is a free data retrieval call binding the contract method 0xa707b18a.
//
// Solidity: function TargetPrefix() view returns(address)
func (_TierFactory *TierFactoryCallerSession) TargetPrefix() (common.Address, error) {
	return _TierFactory.Contract.TargetPrefix(&_TierFactory.CallOpts)
}

// UNISWAPFLAGMASK is a free data retrieval call binding the contract method 0xc6f61463.
//
// Solidity: function UNISWAP_FLAG_MASK() view returns(uint160)
func (_TierFactory *TierFactoryCaller) UNISWAPFLAGMASK(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TierFactory.contract.Call(opts, &out, "UNISWAP_FLAG_MASK")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// UNISWAPFLAGMASK is a free data retrieval call binding the contract method 0xc6f61463.
//
// Solidity: function UNISWAP_FLAG_MASK() view returns(uint160)
func (_TierFactory *TierFactorySession) UNISWAPFLAGMASK() (*big.Int, error) {
	return _TierFactory.Contract.UNISWAPFLAGMASK(&_TierFactory.CallOpts)
}

// UNISWAPFLAGMASK is a free data retrieval call binding the contract method 0xc6f61463.
//
// Solidity: function UNISWAP_FLAG_MASK() view returns(uint160)
func (_TierFactory *TierFactoryCallerSession) UNISWAPFLAGMASK() (*big.Int, error) {
	return _TierFactory.Contract.UNISWAPFLAGMASK(&_TierFactory.CallOpts)
}

// MineSalt is a free data retrieval call binding the contract method 0x635d4017.
//
// Solidity: function mineSalt(address poolManager, uint256 startSalt) view returns(bytes32 salt)
func (_TierFactory *TierFactoryCaller) MineSalt(opts *bind.CallOpts, poolManager common.Address, startSalt *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _TierFactory.contract.Call(opts, &out, "mineSalt", poolManager, startSalt)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MineSalt is a free data retrieval call binding the contract method 0x635d4017.
//
// Solidity: function mineSalt(address poolManager, uint256 startSalt) view returns(bytes32 salt)
func (_TierFactory *TierFactorySession) MineSalt(poolManager common.Address, startSalt *big.Int) ([32]byte, error) {
	return _TierFactory.Contract.MineSalt(&_TierFactory.CallOpts, poolManager, startSalt)
}

// MineSalt is a free data retrieval call binding the contract method 0x635d4017.
//
// Solidity: function mineSalt(address poolManager, uint256 startSalt) view returns(bytes32 salt)
func (_TierFactory *TierFactoryCallerSession) MineSalt(poolManager common.Address, startSalt *big.Int) ([32]byte, error) {
	return _TierFactory.Contract.MineSalt(&_TierFactory.CallOpts, poolManager, startSalt)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TierFactory *TierFactoryCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TierFactory.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TierFactory *TierFactorySession) Owner() (common.Address, error) {
	return _TierFactory.Contract.Owner(&_TierFactory.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TierFactory *TierFactoryCallerSession) Owner() (common.Address, error) {
	return _TierFactory.Contract.Owner(&_TierFactory.CallOpts)
}

// Deploy is a paid mutator transaction binding the contract method 0x32c02a14.
//
// Solidity: function deploy(address poolManager, bytes32 salt) returns(address)
func (_TierFactory *TierFactoryTransactor) Deploy(opts *bind.TransactOpts, poolManager common.Address, salt [32]byte) (*types.Transaction, error) {
	return _TierFactory.contract.Transact(opts, "deploy", poolManager, salt)
}

// Deploy is a paid mutator transaction binding the contract method 0x32c02a14.
//
// Solidity: function deploy(address poolManager, bytes32 salt) returns(address)
func (_TierFactory *TierFactorySession) Deploy(poolManager common.Address, salt [32]byte) (*types.Transaction, error) {
	return _TierFactory.Contract.Deploy(&_TierFactory.TransactOpts, poolManager, salt)
}

// Deploy is a paid mutator transaction binding the contract method 0x32c02a14.
//
// Solidity: function deploy(address poolManager, bytes32 salt) returns(address)
func (_TierFactory *TierFactoryTransactorSession) Deploy(poolManager common.Address, salt [32]byte) (*types.Transaction, error) {
	return _TierFactory.Contract.Deploy(&_TierFactory.TransactOpts, poolManager, salt)
}

// MineDeploy is a paid mutator transaction binding the contract method 0x21cde3ec.
//
// Solidity: function mineDeploy(address poolManager, uint256 startSalt) returns(address)
func (_TierFactory *TierFactoryTransactor) MineDeploy(opts *bind.TransactOpts, poolManager common.Address, startSalt *big.Int) (*types.Transaction, error) {
	return _TierFactory.contract.Transact(opts, "mineDeploy", poolManager, startSalt)
}

// MineDeploy is a paid mutator transaction binding the contract method 0x21cde3ec.
//
// Solidity: function mineDeploy(address poolManager, uint256 startSalt) returns(address)
func (_TierFactory *TierFactorySession) MineDeploy(poolManager common.Address, startSalt *big.Int) (*types.Transaction, error) {
	return _TierFactory.Contract.MineDeploy(&_TierFactory.TransactOpts, poolManager, startSalt)
}

// MineDeploy is a paid mutator transaction binding the contract method 0x21cde3ec.
//
// Solidity: function mineDeploy(address poolManager, uint256 startSalt) returns(address)
func (_TierFactory *TierFactoryTransactorSession) MineDeploy(poolManager common.Address, startSalt *big.Int) (*types.Transaction, error) {
	return _TierFactory.Contract.MineDeploy(&_TierFactory.TransactOpts, poolManager, startSalt)
}

// MineDeploy0 is a paid mutator transaction binding the contract method 0x2e026a67.
//
// Solidity: function mineDeploy(address poolManager) returns(address)
func (_TierFactory *TierFactoryTransactor) MineDeploy0(opts *bind.TransactOpts, poolManager common.Address) (*types.Transaction, error) {
	return _TierFactory.contract.Transact(opts, "mineDeploy0", poolManager)
}

// MineDeploy0 is a paid mutator transaction binding the contract method 0x2e026a67.
//
// Solidity: function mineDeploy(address poolManager) returns(address)
func (_TierFactory *TierFactorySession) MineDeploy0(poolManager common.Address) (*types.Transaction, error) {
	return _TierFactory.Contract.MineDeploy0(&_TierFactory.TransactOpts, poolManager)
}

// MineDeploy0 is a paid mutator transaction binding the contract method 0x2e026a67.
//
// Solidity: function mineDeploy(address poolManager) returns(address)
func (_TierFactory *TierFactoryTransactorSession) MineDeploy0(poolManager common.Address) (*types.Transaction, error) {
	return _TierFactory.Contract.MineDeploy0(&_TierFactory.TransactOpts, poolManager)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TierFactory *TierFactoryTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TierFactory.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TierFactory *TierFactorySession) RenounceOwnership() (*types.Transaction, error) {
	return _TierFactory.Contract.RenounceOwnership(&_TierFactory.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TierFactory *TierFactoryTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TierFactory.Contract.RenounceOwnership(&_TierFactory.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TierFactory *TierFactoryTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TierFactory.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TierFactory *TierFactorySession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TierFactory.Contract.TransferOwnership(&_TierFactory.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TierFactory *TierFactoryTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TierFactory.Contract.TransferOwnership(&_TierFactory.TransactOpts, newOwner)
}

// UpdateHookSumVolumeAddress is a paid mutator transaction binding the contract method 0xd8f47201.
//
// Solidity: function updateHookSumVolumeAddress(address _tierHook, address _sumVolumeAddress) returns()
func (_TierFactory *TierFactoryTransactor) UpdateHookSumVolumeAddress(opts *bind.TransactOpts, _tierHook common.Address, _sumVolumeAddress common.Address) (*types.Transaction, error) {
	return _TierFactory.contract.Transact(opts, "updateHookSumVolumeAddress", _tierHook, _sumVolumeAddress)
}

// UpdateHookSumVolumeAddress is a paid mutator transaction binding the contract method 0xd8f47201.
//
// Solidity: function updateHookSumVolumeAddress(address _tierHook, address _sumVolumeAddress) returns()
func (_TierFactory *TierFactorySession) UpdateHookSumVolumeAddress(_tierHook common.Address, _sumVolumeAddress common.Address) (*types.Transaction, error) {
	return _TierFactory.Contract.UpdateHookSumVolumeAddress(&_TierFactory.TransactOpts, _tierHook, _sumVolumeAddress)
}

// UpdateHookSumVolumeAddress is a paid mutator transaction binding the contract method 0xd8f47201.
//
// Solidity: function updateHookSumVolumeAddress(address _tierHook, address _sumVolumeAddress) returns()
func (_TierFactory *TierFactoryTransactorSession) UpdateHookSumVolumeAddress(_tierHook common.Address, _sumVolumeAddress common.Address) (*types.Transaction, error) {
	return _TierFactory.Contract.UpdateHookSumVolumeAddress(&_TierFactory.TransactOpts, _tierHook, _sumVolumeAddress)
}

// TierFactoryOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TierFactory contract.
type TierFactoryOwnershipTransferredIterator struct {
	Event *TierFactoryOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TierFactoryOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TierFactoryOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TierFactoryOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TierFactoryOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TierFactoryOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TierFactoryOwnershipTransferred represents a OwnershipTransferred event raised by the TierFactory contract.
type TierFactoryOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TierFactory *TierFactoryFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TierFactoryOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TierFactory.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TierFactoryOwnershipTransferredIterator{contract: _TierFactory.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TierFactory *TierFactoryFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TierFactoryOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TierFactory.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TierFactoryOwnershipTransferred)
				if err := _TierFactory.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TierFactory *TierFactoryFilterer) ParseOwnershipTransferred(log types.Log) (*TierFactoryOwnershipTransferred, error) {
	event := new(TierFactoryOwnershipTransferred)
	if err := _TierFactory.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TierHookMetaData contains all meta data concerning the TierHook contract.
var TierHookMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIPoolManager\",\"name\":\"_poolManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hooks\",\"type\":\"address\"}],\"name\":\"HookAddressNotValid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HookNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockFailure\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustUseDynamicFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPoolManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSelf\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"PoolId\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"amount0\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"amount1\",\"type\":\"int128\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdateSumVolumeAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"afterDonate\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"afterInitialize\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"int256\",\"name\":\"liquidityDelta\",\"type\":\"int256\"}],\"internalType\":\"structIPoolManager.ModifyPositionParams\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"BalanceDelta\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"afterModifyPosition\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"structIPoolManager.SwapParams\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"BalanceDelta\",\"name\":\"delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"afterSwap\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"beforeDonate\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"key\",\"type\":\"tuple\"},{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"beforeInitialize\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"int256\",\"name\":\"liquidityDelta\",\"type\":\"int256\"}],\"internalType\":\"structIPoolManager.ModifyPositionParams\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"beforeModifyPosition\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"structIPoolManager.SwapParams\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"beforeSwap\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"amountSpecified\",\"type\":\"int256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"internalType\":\"structIPoolManager.SwapParams\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"}],\"name\":\"getFeeBySwapper\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"getHookFees\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Currency\",\"name\":\"currency0\",\"type\":\"address\"},{\"internalType\":\"Currency\",\"name\":\"currency1\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"contractIHooks\",\"name\":\"hooks\",\"type\":\"address\"}],\"internalType\":\"structPoolKey\",\"name\":\"key\",\"type\":\"tuple\"}],\"name\":\"getHookWithdrawFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHooksCalls\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"beforeInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"afterInitialize\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"beforeModifyPosition\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"afterModifyPosition\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"beforeSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"afterSwap\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"beforeDonate\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"afterDonate\",\"type\":\"bool\"}],\"internalType\":\"structHooks.Calls\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"lockAcquired\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"contractIPoolManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sumVolumeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sumVolumeAddress\",\"type\":\"address\"}],\"name\":\"updateSumVolumeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a034620001f657601f62000e4c38819003918201601f19168301916001600160401b03831184841017620001fa57808492602094604052833981010312620001f657516001600160a01b03908181168103620001f6575f8054336001600160a01b03198216811783559193167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08480a36080528060e0620000a06200020e565b8281528260208201528260408201528260608201528260808201528260a08201528260c0820152015260e0620000d56200020e565b60018152826020820152826040820152826060820152826080820152600160a08201528260c082015201526001609f1b30161515600114801590620001e6575b8015620001d6575b8015620001c6575b8015620001b6575b8015620001a2575b801562000192575b801562000182575b6200016a57604051610c1c908162000230823960805181818161023101526103fd0152f35b604051630732d7b560e51b8152306004820152602490fd5b5030600160981b16151562000145565b5030600160991b1615156200013d565b50306001609a1b1615156001141562000135565b50306001609b1b1615156200012d565b50306001609c1b16151562000125565b50306001609d1b1615156200011d565b50306001609e1b16151562000115565b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b6040519061010082016001600160401b03811183821017620001fa5760405256fe60406080815260049081361015610014575f80fd5b5f803560e01c806311080b68146107c8578063229c7d8b146107a05780632ab7a3e21461077b57806330b7cdef146107585780633440d820146106ce57806339dfff16146106b2578063575e24b4146106a25780635ae4ce5814610684578063612c39b7146105b4578063715018a61461054a5780638da5cb5b1461052457806390f57fc1146104f2578063a910f80f14610484578063ab6291fe146103c0578063b47b2fb114610259578063b6a8b0fa1461020c578063dc4c90d314610211578063e1b4af691461020c578063f2fde38b1461011d5763fe9a6f45146100f9575f80fd5b3461011a5750610108366108a3565b505050505051630a85dc2960e01b8152fd5b80fd5b50913461020857602036600319011261020857610138610847565b908354906001600160a01b0380831693610153338614610ad3565b1693841561019f57505073ffffffffffffffffffffffffffffffffffffffff1916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b610981565b509034610255578160031936011261025557602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b503461011a5761026836610907565b505092505060a08136031261020857835167ffffffffffffffff9360a08201858111838210176103ad57865261029d83610861565b918281526102ad60208501610861565b9360208201948552878101359062ffffff80831683036103a9578984019283526060820135918260020b83036103a557608090606086019384520135926001600160a01b039485851685036103a157608001938452848b51988160208b019916895251168b890152511660608701525160020b6080860152511660a084015260a0835260c08301948386109086111761038e57506020955060e09084865282519020928060801d8552600f0b9101527f6e78eb77321ff667248e786162a80dcc8c37e03953a73757e24aeba9ba881bee833293a35163b47b2fb160e01b8152f35b634e487b7160e01b815260418752602490fd5b8680fd5b8580fd5b8480fd5b634e487b7160e01b825260418852602482fd5b503461011a576020928360031936011261025557803567ffffffffffffffff8111610208576103f29036908301610875565b916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163303610476575061043084928692610a39565b82519382859384528251928382860152825b84811061046057505050828201840152601f01601f19168101030190f35b8181018301518882018801528795508201610442565b845163570c108560e11b8152fd5b503461011a5761012036600319011261011a5761049f610847565b5060a036602319011261011a576104b461096b565b5060e4358060020b0361011a57610104359067ffffffffffffffff821161011a57506104e39036908401610875565b505051630a85dc2960e01b8152fd5b5090346102555760203660031901126102555760209062ffffff61051c610517610847565b610b1e565b915191168152f35b5090346102555781600319360112610255576001600160a01b0360209254169051908152f35b503461011a578060031936011261011a5780805473ffffffffffffffffffffffffffffffffffffffff196001600160a01b0382169161058a338414610ad3565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b509034610255578160031936011261025557816101009260e083516105d8816109e6565b82815282602082015282858201528260608201528260808201528260a08201528260c08201520152815161060b816109e6565b6001815260208101928284528082019083825260608301848152608084019185835260a08501936001855260e060c087019688885201968752815197600189525115156020890152511515908701525115156060860152511515608085015251151560a084015251151560c083015251151560e0820152f35b5090346102555760a036600319011261025557602090516155338152f35b503461011a5750610108366108a3565b5090346102555760a03660031901126102555751908152602090f35b503461011a5761010036600319011261011a576106e9610847565b5060a036602319011261011a576106fe61096b565b5060e43567ffffffffffffffff81116102555761071e9036908501610875565b50506064359062ffffff8216820361011a575062800000161561074b57516301a206c160e51b8152602090f35b516315b3d69f60e31b8152fd5b503461011a575061076836610907565b50505050505051630a85dc2960e01b8152fd5b5090346102555760209061078e366108a3565b505050505062ffffff61051c32610b1e565b5090346102555781600319360112610255576020906001600160a01b03600154169051908152f35b5090346102555760203660031901126102555760207fa7f1d21617374882d6d2a29f886042bc73207e68d82e84a98231e74fcf6c111a91610807610847565b6001600160a01b039061081e828754163314610ad3565b16908173ffffffffffffffffffffffffffffffffffffffff19600154161760015551908152a180f35b600435906001600160a01b038216820361085d57565b5f80fd5b35906001600160a01b038216820361085d57565b9181601f8401121561085d5782359167ffffffffffffffff831161085d576020838186019501011161085d57565b9061014060031983011261085d576004356001600160a01b038116810361085d579160a060231982011261085d57602491606060c31983011261085d5760c491610124359067ffffffffffffffff821161085d5761090391600401610875565b9091565b61016060031982011261085d576004356001600160a01b038116810361085d579160a060231983011261085d57602491606060c31982011261085d5760c4916101243591610144359067ffffffffffffffff821161085d5761090391600401610875565b60c435906001600160a01b038216820361085d57565b3461085d5761012036600319011261085d576004356001600160a01b0381160361085d5760a036602319011261085d576101043567ffffffffffffffff811161085d576109d2903690600401610875565b5050604051630a85dc2960e01b8152600490fd5b610100810190811067ffffffffffffffff821117610a0357604052565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff821117610a0357604052565b604051929183918190833781015f9384928284809452039082305af13d15610aca573d67ffffffffffffffff8111610ab65760405190610a83601f8201601f191660200183610a17565b8152809360203d92013e5b610ab45750805115610aa257602081519101fd5b6040516314815f4760e31b8152600490fd5b565b634e487b7160e01b84526041600452602484fd5b60609250610a8e565b15610ada57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b610b2790610b50565b6127109060028103610b3f575060011c627fffff1690565b600114610b495790565b50611f4090565b60206001600160a01b036024816001541693604051948593849263950650c160e01b84521660048301525afa908115610bdb575f91610baa575b50633b9aca00811115610b9d5750600290565b610ba5575f90565b600190565b906020823d8211610bd3575b81610bc360209383610a17565b8101031261011a5750515f610b8a565b3d9150610bb6565b6040513d5f823e3d90fdfea264697066735822122069bbdfcdc3ad9326a6b6cb60ef25185382e2195908c1a64904d7a597dd798db664736f6c63430008150033",
}

// TierHookABI is the input ABI used to generate the binding from.
// Deprecated: Use TierHookMetaData.ABI instead.
var TierHookABI = TierHookMetaData.ABI

// TierHookBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TierHookMetaData.Bin instead.
var TierHookBin = TierHookMetaData.Bin

// DeployTierHook deploys a new Ethereum contract, binding an instance of TierHook to it.
func DeployTierHook(auth *bind.TransactOpts, backend bind.ContractBackend, _poolManager common.Address) (common.Address, *types.Transaction, *TierHook, error) {
	parsed, err := TierHookMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TierHookBin), backend, _poolManager)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TierHook{TierHookCaller: TierHookCaller{contract: contract}, TierHookTransactor: TierHookTransactor{contract: contract}, TierHookFilterer: TierHookFilterer{contract: contract}}, nil
}

// TierHook is an auto generated Go binding around an Ethereum contract.
type TierHook struct {
	TierHookCaller     // Read-only binding to the contract
	TierHookTransactor // Write-only binding to the contract
	TierHookFilterer   // Log filterer for contract events
}

// TierHookCaller is an auto generated read-only Go binding around an Ethereum contract.
type TierHookCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TierHookTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TierHookTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TierHookFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TierHookFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TierHookSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TierHookSession struct {
	Contract     *TierHook         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TierHookCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TierHookCallerSession struct {
	Contract *TierHookCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// TierHookTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TierHookTransactorSession struct {
	Contract     *TierHookTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// TierHookRaw is an auto generated low-level Go binding around an Ethereum contract.
type TierHookRaw struct {
	Contract *TierHook // Generic contract binding to access the raw methods on
}

// TierHookCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TierHookCallerRaw struct {
	Contract *TierHookCaller // Generic read-only contract binding to access the raw methods on
}

// TierHookTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TierHookTransactorRaw struct {
	Contract *TierHookTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTierHook creates a new instance of TierHook, bound to a specific deployed contract.
func NewTierHook(address common.Address, backend bind.ContractBackend) (*TierHook, error) {
	contract, err := bindTierHook(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TierHook{TierHookCaller: TierHookCaller{contract: contract}, TierHookTransactor: TierHookTransactor{contract: contract}, TierHookFilterer: TierHookFilterer{contract: contract}}, nil
}

// NewTierHookCaller creates a new read-only instance of TierHook, bound to a specific deployed contract.
func NewTierHookCaller(address common.Address, caller bind.ContractCaller) (*TierHookCaller, error) {
	contract, err := bindTierHook(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TierHookCaller{contract: contract}, nil
}

// NewTierHookTransactor creates a new write-only instance of TierHook, bound to a specific deployed contract.
func NewTierHookTransactor(address common.Address, transactor bind.ContractTransactor) (*TierHookTransactor, error) {
	contract, err := bindTierHook(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TierHookTransactor{contract: contract}, nil
}

// NewTierHookFilterer creates a new log filterer instance of TierHook, bound to a specific deployed contract.
func NewTierHookFilterer(address common.Address, filterer bind.ContractFilterer) (*TierHookFilterer, error) {
	contract, err := bindTierHook(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TierHookFilterer{contract: contract}, nil
}

// bindTierHook binds a generic wrapper to an already deployed contract.
func bindTierHook(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TierHookMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TierHook *TierHookRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TierHook.Contract.TierHookCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TierHook *TierHookRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TierHook.Contract.TierHookTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TierHook *TierHookRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TierHook.Contract.TierHookTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TierHook *TierHookCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TierHook.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TierHook *TierHookTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TierHook.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TierHook *TierHookTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TierHook.Contract.contract.Transact(opts, method, params...)
}

// BeforeInitialize is a free data retrieval call binding the contract method 0x3440d820.
//
// Solidity: function beforeInitialize(address , (address,address,uint24,int24,address) key, uint160 , bytes ) pure returns(bytes4)
func (_TierHook *TierHookCaller) BeforeInitialize(opts *bind.CallOpts, arg0 common.Address, key PoolKey, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	var out []interface{}
	err := _TierHook.contract.Call(opts, &out, "beforeInitialize", arg0, key, arg2, arg3)

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// BeforeInitialize is a free data retrieval call binding the contract method 0x3440d820.
//
// Solidity: function beforeInitialize(address , (address,address,uint24,int24,address) key, uint160 , bytes ) pure returns(bytes4)
func (_TierHook *TierHookSession) BeforeInitialize(arg0 common.Address, key PoolKey, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	return _TierHook.Contract.BeforeInitialize(&_TierHook.CallOpts, arg0, key, arg2, arg3)
}

// BeforeInitialize is a free data retrieval call binding the contract method 0x3440d820.
//
// Solidity: function beforeInitialize(address , (address,address,uint24,int24,address) key, uint160 , bytes ) pure returns(bytes4)
func (_TierHook *TierHookCallerSession) BeforeInitialize(arg0 common.Address, key PoolKey, arg2 *big.Int, arg3 []byte) ([4]byte, error) {
	return _TierHook.Contract.BeforeInitialize(&_TierHook.CallOpts, arg0, key, arg2, arg3)
}

// GetFee is a free data retrieval call binding the contract method 0x2ab7a3e2.
//
// Solidity: function getFee(address , (address,address,uint24,int24,address) , (bool,int256,uint160) , bytes ) view returns(uint24)
func (_TierHook *TierHookCaller) GetFee(opts *bind.CallOpts, arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerSwapParams, arg3 []byte) (*big.Int, error) {
	var out []interface{}
	err := _TierHook.contract.Call(opts, &out, "getFee", arg0, arg1, arg2, arg3)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetFee is a free data retrieval call binding the contract method 0x2ab7a3e2.
//
// Solidity: function getFee(address , (address,address,uint24,int24,address) , (bool,int256,uint160) , bytes ) view returns(uint24)
func (_TierHook *TierHookSession) GetFee(arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerSwapParams, arg3 []byte) (*big.Int, error) {
	return _TierHook.Contract.GetFee(&_TierHook.CallOpts, arg0, arg1, arg2, arg3)
}

// GetFee is a free data retrieval call binding the contract method 0x2ab7a3e2.
//
// Solidity: function getFee(address , (address,address,uint24,int24,address) , (bool,int256,uint160) , bytes ) view returns(uint24)
func (_TierHook *TierHookCallerSession) GetFee(arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerSwapParams, arg3 []byte) (*big.Int, error) {
	return _TierHook.Contract.GetFee(&_TierHook.CallOpts, arg0, arg1, arg2, arg3)
}

// GetFeeBySwapper is a free data retrieval call binding the contract method 0x90f57fc1.
//
// Solidity: function getFeeBySwapper(address swapper) view returns(uint24)
func (_TierHook *TierHookCaller) GetFeeBySwapper(opts *bind.CallOpts, swapper common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TierHook.contract.Call(opts, &out, "getFeeBySwapper", swapper)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetFeeBySwapper is a free data retrieval call binding the contract method 0x90f57fc1.
//
// Solidity: function getFeeBySwapper(address swapper) view returns(uint24)
func (_TierHook *TierHookSession) GetFeeBySwapper(swapper common.Address) (*big.Int, error) {
	return _TierHook.Contract.GetFeeBySwapper(&_TierHook.CallOpts, swapper)
}

// GetFeeBySwapper is a free data retrieval call binding the contract method 0x90f57fc1.
//
// Solidity: function getFeeBySwapper(address swapper) view returns(uint24)
func (_TierHook *TierHookCallerSession) GetFeeBySwapper(swapper common.Address) (*big.Int, error) {
	return _TierHook.Contract.GetFeeBySwapper(&_TierHook.CallOpts, swapper)
}

// GetHookFees is a free data retrieval call binding the contract method 0x5ae4ce58.
//
// Solidity: function getHookFees((address,address,uint24,int24,address) ) pure returns(uint24 fee)
func (_TierHook *TierHookCaller) GetHookFees(opts *bind.CallOpts, arg0 PoolKey) (*big.Int, error) {
	var out []interface{}
	err := _TierHook.contract.Call(opts, &out, "getHookFees", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetHookFees is a free data retrieval call binding the contract method 0x5ae4ce58.
//
// Solidity: function getHookFees((address,address,uint24,int24,address) ) pure returns(uint24 fee)
func (_TierHook *TierHookSession) GetHookFees(arg0 PoolKey) (*big.Int, error) {
	return _TierHook.Contract.GetHookFees(&_TierHook.CallOpts, arg0)
}

// GetHookFees is a free data retrieval call binding the contract method 0x5ae4ce58.
//
// Solidity: function getHookFees((address,address,uint24,int24,address) ) pure returns(uint24 fee)
func (_TierHook *TierHookCallerSession) GetHookFees(arg0 PoolKey) (*big.Int, error) {
	return _TierHook.Contract.GetHookFees(&_TierHook.CallOpts, arg0)
}

// GetHookWithdrawFee is a free data retrieval call binding the contract method 0x39dfff16.
//
// Solidity: function getHookWithdrawFee((address,address,uint24,int24,address) key) view returns(uint8 fee)
func (_TierHook *TierHookCaller) GetHookWithdrawFee(opts *bind.CallOpts, key PoolKey) (uint8, error) {
	var out []interface{}
	err := _TierHook.contract.Call(opts, &out, "getHookWithdrawFee", key)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// GetHookWithdrawFee is a free data retrieval call binding the contract method 0x39dfff16.
//
// Solidity: function getHookWithdrawFee((address,address,uint24,int24,address) key) view returns(uint8 fee)
func (_TierHook *TierHookSession) GetHookWithdrawFee(key PoolKey) (uint8, error) {
	return _TierHook.Contract.GetHookWithdrawFee(&_TierHook.CallOpts, key)
}

// GetHookWithdrawFee is a free data retrieval call binding the contract method 0x39dfff16.
//
// Solidity: function getHookWithdrawFee((address,address,uint24,int24,address) key) view returns(uint8 fee)
func (_TierHook *TierHookCallerSession) GetHookWithdrawFee(key PoolKey) (uint8, error) {
	return _TierHook.Contract.GetHookWithdrawFee(&_TierHook.CallOpts, key)
}

// GetHooksCalls is a free data retrieval call binding the contract method 0x612c39b7.
//
// Solidity: function getHooksCalls() pure returns((bool,bool,bool,bool,bool,bool,bool,bool))
func (_TierHook *TierHookCaller) GetHooksCalls(opts *bind.CallOpts) (HooksCalls, error) {
	var out []interface{}
	err := _TierHook.contract.Call(opts, &out, "getHooksCalls")

	if err != nil {
		return *new(HooksCalls), err
	}

	out0 := *abi.ConvertType(out[0], new(HooksCalls)).(*HooksCalls)

	return out0, err

}

// GetHooksCalls is a free data retrieval call binding the contract method 0x612c39b7.
//
// Solidity: function getHooksCalls() pure returns((bool,bool,bool,bool,bool,bool,bool,bool))
func (_TierHook *TierHookSession) GetHooksCalls() (HooksCalls, error) {
	return _TierHook.Contract.GetHooksCalls(&_TierHook.CallOpts)
}

// GetHooksCalls is a free data retrieval call binding the contract method 0x612c39b7.
//
// Solidity: function getHooksCalls() pure returns((bool,bool,bool,bool,bool,bool,bool,bool))
func (_TierHook *TierHookCallerSession) GetHooksCalls() (HooksCalls, error) {
	return _TierHook.Contract.GetHooksCalls(&_TierHook.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TierHook *TierHookCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TierHook.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TierHook *TierHookSession) Owner() (common.Address, error) {
	return _TierHook.Contract.Owner(&_TierHook.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TierHook *TierHookCallerSession) Owner() (common.Address, error) {
	return _TierHook.Contract.Owner(&_TierHook.CallOpts)
}

// PoolManager is a free data retrieval call binding the contract method 0xdc4c90d3.
//
// Solidity: function poolManager() view returns(address)
func (_TierHook *TierHookCaller) PoolManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TierHook.contract.Call(opts, &out, "poolManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PoolManager is a free data retrieval call binding the contract method 0xdc4c90d3.
//
// Solidity: function poolManager() view returns(address)
func (_TierHook *TierHookSession) PoolManager() (common.Address, error) {
	return _TierHook.Contract.PoolManager(&_TierHook.CallOpts)
}

// PoolManager is a free data retrieval call binding the contract method 0xdc4c90d3.
//
// Solidity: function poolManager() view returns(address)
func (_TierHook *TierHookCallerSession) PoolManager() (common.Address, error) {
	return _TierHook.Contract.PoolManager(&_TierHook.CallOpts)
}

// SumVolumeAddress is a free data retrieval call binding the contract method 0x229c7d8b.
//
// Solidity: function sumVolumeAddress() view returns(address)
func (_TierHook *TierHookCaller) SumVolumeAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TierHook.contract.Call(opts, &out, "sumVolumeAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SumVolumeAddress is a free data retrieval call binding the contract method 0x229c7d8b.
//
// Solidity: function sumVolumeAddress() view returns(address)
func (_TierHook *TierHookSession) SumVolumeAddress() (common.Address, error) {
	return _TierHook.Contract.SumVolumeAddress(&_TierHook.CallOpts)
}

// SumVolumeAddress is a free data retrieval call binding the contract method 0x229c7d8b.
//
// Solidity: function sumVolumeAddress() view returns(address)
func (_TierHook *TierHookCallerSession) SumVolumeAddress() (common.Address, error) {
	return _TierHook.Contract.SumVolumeAddress(&_TierHook.CallOpts)
}

// AfterDonate is a paid mutator transaction binding the contract method 0xe1b4af69.
//
// Solidity: function afterDonate(address , (address,address,uint24,int24,address) , uint256 , uint256 , bytes ) returns(bytes4)
func (_TierHook *TierHookTransactor) AfterDonate(opts *bind.TransactOpts, arg0 common.Address, arg1 PoolKey, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TierHook.contract.Transact(opts, "afterDonate", arg0, arg1, arg2, arg3, arg4)
}

// AfterDonate is a paid mutator transaction binding the contract method 0xe1b4af69.
//
// Solidity: function afterDonate(address , (address,address,uint24,int24,address) , uint256 , uint256 , bytes ) returns(bytes4)
func (_TierHook *TierHookSession) AfterDonate(arg0 common.Address, arg1 PoolKey, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TierHook.Contract.AfterDonate(&_TierHook.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// AfterDonate is a paid mutator transaction binding the contract method 0xe1b4af69.
//
// Solidity: function afterDonate(address , (address,address,uint24,int24,address) , uint256 , uint256 , bytes ) returns(bytes4)
func (_TierHook *TierHookTransactorSession) AfterDonate(arg0 common.Address, arg1 PoolKey, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TierHook.Contract.AfterDonate(&_TierHook.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// AfterInitialize is a paid mutator transaction binding the contract method 0xa910f80f.
//
// Solidity: function afterInitialize(address , (address,address,uint24,int24,address) , uint160 , int24 , bytes ) returns(bytes4)
func (_TierHook *TierHookTransactor) AfterInitialize(opts *bind.TransactOpts, arg0 common.Address, arg1 PoolKey, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TierHook.contract.Transact(opts, "afterInitialize", arg0, arg1, arg2, arg3, arg4)
}

// AfterInitialize is a paid mutator transaction binding the contract method 0xa910f80f.
//
// Solidity: function afterInitialize(address , (address,address,uint24,int24,address) , uint160 , int24 , bytes ) returns(bytes4)
func (_TierHook *TierHookSession) AfterInitialize(arg0 common.Address, arg1 PoolKey, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TierHook.Contract.AfterInitialize(&_TierHook.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// AfterInitialize is a paid mutator transaction binding the contract method 0xa910f80f.
//
// Solidity: function afterInitialize(address , (address,address,uint24,int24,address) , uint160 , int24 , bytes ) returns(bytes4)
func (_TierHook *TierHookTransactorSession) AfterInitialize(arg0 common.Address, arg1 PoolKey, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TierHook.Contract.AfterInitialize(&_TierHook.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// AfterModifyPosition is a paid mutator transaction binding the contract method 0x30b7cdef.
//
// Solidity: function afterModifyPosition(address , (address,address,uint24,int24,address) , (int24,int24,int256) , int256 , bytes ) returns(bytes4)
func (_TierHook *TierHookTransactor) AfterModifyPosition(opts *bind.TransactOpts, arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerModifyPositionParams, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TierHook.contract.Transact(opts, "afterModifyPosition", arg0, arg1, arg2, arg3, arg4)
}

// AfterModifyPosition is a paid mutator transaction binding the contract method 0x30b7cdef.
//
// Solidity: function afterModifyPosition(address , (address,address,uint24,int24,address) , (int24,int24,int256) , int256 , bytes ) returns(bytes4)
func (_TierHook *TierHookSession) AfterModifyPosition(arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerModifyPositionParams, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TierHook.Contract.AfterModifyPosition(&_TierHook.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// AfterModifyPosition is a paid mutator transaction binding the contract method 0x30b7cdef.
//
// Solidity: function afterModifyPosition(address , (address,address,uint24,int24,address) , (int24,int24,int256) , int256 , bytes ) returns(bytes4)
func (_TierHook *TierHookTransactorSession) AfterModifyPosition(arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerModifyPositionParams, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TierHook.Contract.AfterModifyPosition(&_TierHook.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// AfterSwap is a paid mutator transaction binding the contract method 0xb47b2fb1.
//
// Solidity: function afterSwap(address , (address,address,uint24,int24,address) key, (bool,int256,uint160) , int256 delta, bytes ) returns(bytes4 selector)
func (_TierHook *TierHookTransactor) AfterSwap(opts *bind.TransactOpts, arg0 common.Address, key PoolKey, arg2 IPoolManagerSwapParams, delta *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TierHook.contract.Transact(opts, "afterSwap", arg0, key, arg2, delta, arg4)
}

// AfterSwap is a paid mutator transaction binding the contract method 0xb47b2fb1.
//
// Solidity: function afterSwap(address , (address,address,uint24,int24,address) key, (bool,int256,uint160) , int256 delta, bytes ) returns(bytes4 selector)
func (_TierHook *TierHookSession) AfterSwap(arg0 common.Address, key PoolKey, arg2 IPoolManagerSwapParams, delta *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TierHook.Contract.AfterSwap(&_TierHook.TransactOpts, arg0, key, arg2, delta, arg4)
}

// AfterSwap is a paid mutator transaction binding the contract method 0xb47b2fb1.
//
// Solidity: function afterSwap(address , (address,address,uint24,int24,address) key, (bool,int256,uint160) , int256 delta, bytes ) returns(bytes4 selector)
func (_TierHook *TierHookTransactorSession) AfterSwap(arg0 common.Address, key PoolKey, arg2 IPoolManagerSwapParams, delta *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TierHook.Contract.AfterSwap(&_TierHook.TransactOpts, arg0, key, arg2, delta, arg4)
}

// BeforeDonate is a paid mutator transaction binding the contract method 0xb6a8b0fa.
//
// Solidity: function beforeDonate(address , (address,address,uint24,int24,address) , uint256 , uint256 , bytes ) returns(bytes4)
func (_TierHook *TierHookTransactor) BeforeDonate(opts *bind.TransactOpts, arg0 common.Address, arg1 PoolKey, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TierHook.contract.Transact(opts, "beforeDonate", arg0, arg1, arg2, arg3, arg4)
}

// BeforeDonate is a paid mutator transaction binding the contract method 0xb6a8b0fa.
//
// Solidity: function beforeDonate(address , (address,address,uint24,int24,address) , uint256 , uint256 , bytes ) returns(bytes4)
func (_TierHook *TierHookSession) BeforeDonate(arg0 common.Address, arg1 PoolKey, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TierHook.Contract.BeforeDonate(&_TierHook.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// BeforeDonate is a paid mutator transaction binding the contract method 0xb6a8b0fa.
//
// Solidity: function beforeDonate(address , (address,address,uint24,int24,address) , uint256 , uint256 , bytes ) returns(bytes4)
func (_TierHook *TierHookTransactorSession) BeforeDonate(arg0 common.Address, arg1 PoolKey, arg2 *big.Int, arg3 *big.Int, arg4 []byte) (*types.Transaction, error) {
	return _TierHook.Contract.BeforeDonate(&_TierHook.TransactOpts, arg0, arg1, arg2, arg3, arg4)
}

// BeforeModifyPosition is a paid mutator transaction binding the contract method 0xfe9a6f45.
//
// Solidity: function beforeModifyPosition(address , (address,address,uint24,int24,address) , (int24,int24,int256) , bytes ) returns(bytes4)
func (_TierHook *TierHookTransactor) BeforeModifyPosition(opts *bind.TransactOpts, arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerModifyPositionParams, arg3 []byte) (*types.Transaction, error) {
	return _TierHook.contract.Transact(opts, "beforeModifyPosition", arg0, arg1, arg2, arg3)
}

// BeforeModifyPosition is a paid mutator transaction binding the contract method 0xfe9a6f45.
//
// Solidity: function beforeModifyPosition(address , (address,address,uint24,int24,address) , (int24,int24,int256) , bytes ) returns(bytes4)
func (_TierHook *TierHookSession) BeforeModifyPosition(arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerModifyPositionParams, arg3 []byte) (*types.Transaction, error) {
	return _TierHook.Contract.BeforeModifyPosition(&_TierHook.TransactOpts, arg0, arg1, arg2, arg3)
}

// BeforeModifyPosition is a paid mutator transaction binding the contract method 0xfe9a6f45.
//
// Solidity: function beforeModifyPosition(address , (address,address,uint24,int24,address) , (int24,int24,int256) , bytes ) returns(bytes4)
func (_TierHook *TierHookTransactorSession) BeforeModifyPosition(arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerModifyPositionParams, arg3 []byte) (*types.Transaction, error) {
	return _TierHook.Contract.BeforeModifyPosition(&_TierHook.TransactOpts, arg0, arg1, arg2, arg3)
}

// BeforeSwap is a paid mutator transaction binding the contract method 0x575e24b4.
//
// Solidity: function beforeSwap(address , (address,address,uint24,int24,address) , (bool,int256,uint160) , bytes ) returns(bytes4)
func (_TierHook *TierHookTransactor) BeforeSwap(opts *bind.TransactOpts, arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerSwapParams, arg3 []byte) (*types.Transaction, error) {
	return _TierHook.contract.Transact(opts, "beforeSwap", arg0, arg1, arg2, arg3)
}

// BeforeSwap is a paid mutator transaction binding the contract method 0x575e24b4.
//
// Solidity: function beforeSwap(address , (address,address,uint24,int24,address) , (bool,int256,uint160) , bytes ) returns(bytes4)
func (_TierHook *TierHookSession) BeforeSwap(arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerSwapParams, arg3 []byte) (*types.Transaction, error) {
	return _TierHook.Contract.BeforeSwap(&_TierHook.TransactOpts, arg0, arg1, arg2, arg3)
}

// BeforeSwap is a paid mutator transaction binding the contract method 0x575e24b4.
//
// Solidity: function beforeSwap(address , (address,address,uint24,int24,address) , (bool,int256,uint160) , bytes ) returns(bytes4)
func (_TierHook *TierHookTransactorSession) BeforeSwap(arg0 common.Address, arg1 PoolKey, arg2 IPoolManagerSwapParams, arg3 []byte) (*types.Transaction, error) {
	return _TierHook.Contract.BeforeSwap(&_TierHook.TransactOpts, arg0, arg1, arg2, arg3)
}

// LockAcquired is a paid mutator transaction binding the contract method 0xab6291fe.
//
// Solidity: function lockAcquired(bytes data) returns(bytes)
func (_TierHook *TierHookTransactor) LockAcquired(opts *bind.TransactOpts, data []byte) (*types.Transaction, error) {
	return _TierHook.contract.Transact(opts, "lockAcquired", data)
}

// LockAcquired is a paid mutator transaction binding the contract method 0xab6291fe.
//
// Solidity: function lockAcquired(bytes data) returns(bytes)
func (_TierHook *TierHookSession) LockAcquired(data []byte) (*types.Transaction, error) {
	return _TierHook.Contract.LockAcquired(&_TierHook.TransactOpts, data)
}

// LockAcquired is a paid mutator transaction binding the contract method 0xab6291fe.
//
// Solidity: function lockAcquired(bytes data) returns(bytes)
func (_TierHook *TierHookTransactorSession) LockAcquired(data []byte) (*types.Transaction, error) {
	return _TierHook.Contract.LockAcquired(&_TierHook.TransactOpts, data)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TierHook *TierHookTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TierHook.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TierHook *TierHookSession) RenounceOwnership() (*types.Transaction, error) {
	return _TierHook.Contract.RenounceOwnership(&_TierHook.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TierHook *TierHookTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TierHook.Contract.RenounceOwnership(&_TierHook.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TierHook *TierHookTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TierHook.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TierHook *TierHookSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TierHook.Contract.TransferOwnership(&_TierHook.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TierHook *TierHookTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TierHook.Contract.TransferOwnership(&_TierHook.TransactOpts, newOwner)
}

// UpdateSumVolumeAddress is a paid mutator transaction binding the contract method 0x11080b68.
//
// Solidity: function updateSumVolumeAddress(address _sumVolumeAddress) returns()
func (_TierHook *TierHookTransactor) UpdateSumVolumeAddress(opts *bind.TransactOpts, _sumVolumeAddress common.Address) (*types.Transaction, error) {
	return _TierHook.contract.Transact(opts, "updateSumVolumeAddress", _sumVolumeAddress)
}

// UpdateSumVolumeAddress is a paid mutator transaction binding the contract method 0x11080b68.
//
// Solidity: function updateSumVolumeAddress(address _sumVolumeAddress) returns()
func (_TierHook *TierHookSession) UpdateSumVolumeAddress(_sumVolumeAddress common.Address) (*types.Transaction, error) {
	return _TierHook.Contract.UpdateSumVolumeAddress(&_TierHook.TransactOpts, _sumVolumeAddress)
}

// UpdateSumVolumeAddress is a paid mutator transaction binding the contract method 0x11080b68.
//
// Solidity: function updateSumVolumeAddress(address _sumVolumeAddress) returns()
func (_TierHook *TierHookTransactorSession) UpdateSumVolumeAddress(_sumVolumeAddress common.Address) (*types.Transaction, error) {
	return _TierHook.Contract.UpdateSumVolumeAddress(&_TierHook.TransactOpts, _sumVolumeAddress)
}

// TierHookOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TierHook contract.
type TierHookOwnershipTransferredIterator struct {
	Event *TierHookOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TierHookOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TierHookOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TierHookOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TierHookOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TierHookOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TierHookOwnershipTransferred represents a OwnershipTransferred event raised by the TierHook contract.
type TierHookOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TierHook *TierHookFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TierHookOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TierHook.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TierHookOwnershipTransferredIterator{contract: _TierHook.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TierHook *TierHookFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TierHookOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TierHook.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TierHookOwnershipTransferred)
				if err := _TierHook.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TierHook *TierHookFilterer) ParseOwnershipTransferred(log types.Log) (*TierHookOwnershipTransferred, error) {
	event := new(TierHookOwnershipTransferred)
	if err := _TierHook.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TierHookSwapIterator is returned from FilterSwap and is used to iterate over the raw logs and unpacked data for Swap events raised by the TierHook contract.
type TierHookSwapIterator struct {
	Event *TierHookSwap // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TierHookSwapIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TierHookSwap)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TierHookSwap)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TierHookSwapIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TierHookSwapIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TierHookSwap represents a Swap event raised by the TierHook contract.
type TierHookSwap struct {
	Id      [32]byte
	Sender  common.Address
	Amount0 *big.Int
	Amount1 *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSwap is a free log retrieval operation binding the contract event 0x6e78eb77321ff667248e786162a80dcc8c37e03953a73757e24aeba9ba881bee.
//
// Solidity: event Swap(bytes32 indexed id, address indexed sender, int128 amount0, int128 amount1)
func (_TierHook *TierHookFilterer) FilterSwap(opts *bind.FilterOpts, id [][32]byte, sender []common.Address) (*TierHookSwapIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _TierHook.contract.FilterLogs(opts, "Swap", idRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &TierHookSwapIterator{contract: _TierHook.contract, event: "Swap", logs: logs, sub: sub}, nil
}

// WatchSwap is a free log subscription operation binding the contract event 0x6e78eb77321ff667248e786162a80dcc8c37e03953a73757e24aeba9ba881bee.
//
// Solidity: event Swap(bytes32 indexed id, address indexed sender, int128 amount0, int128 amount1)
func (_TierHook *TierHookFilterer) WatchSwap(opts *bind.WatchOpts, sink chan<- *TierHookSwap, id [][32]byte, sender []common.Address) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _TierHook.contract.WatchLogs(opts, "Swap", idRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TierHookSwap)
				if err := _TierHook.contract.UnpackLog(event, "Swap", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSwap is a log parse operation binding the contract event 0x6e78eb77321ff667248e786162a80dcc8c37e03953a73757e24aeba9ba881bee.
//
// Solidity: event Swap(bytes32 indexed id, address indexed sender, int128 amount0, int128 amount1)
func (_TierHook *TierHookFilterer) ParseSwap(log types.Log) (*TierHookSwap, error) {
	event := new(TierHookSwap)
	if err := _TierHook.contract.UnpackLog(event, "Swap", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TierHookUpdateSumVolumeAddressIterator is returned from FilterUpdateSumVolumeAddress and is used to iterate over the raw logs and unpacked data for UpdateSumVolumeAddress events raised by the TierHook contract.
type TierHookUpdateSumVolumeAddressIterator struct {
	Event *TierHookUpdateSumVolumeAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TierHookUpdateSumVolumeAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TierHookUpdateSumVolumeAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TierHookUpdateSumVolumeAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TierHookUpdateSumVolumeAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TierHookUpdateSumVolumeAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TierHookUpdateSumVolumeAddress represents a UpdateSumVolumeAddress event raised by the TierHook contract.
type TierHookUpdateSumVolumeAddress struct {
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateSumVolumeAddress is a free log retrieval operation binding the contract event 0xa7f1d21617374882d6d2a29f886042bc73207e68d82e84a98231e74fcf6c111a.
//
// Solidity: event UpdateSumVolumeAddress(address newAddress)
func (_TierHook *TierHookFilterer) FilterUpdateSumVolumeAddress(opts *bind.FilterOpts) (*TierHookUpdateSumVolumeAddressIterator, error) {

	logs, sub, err := _TierHook.contract.FilterLogs(opts, "UpdateSumVolumeAddress")
	if err != nil {
		return nil, err
	}
	return &TierHookUpdateSumVolumeAddressIterator{contract: _TierHook.contract, event: "UpdateSumVolumeAddress", logs: logs, sub: sub}, nil
}

// WatchUpdateSumVolumeAddress is a free log subscription operation binding the contract event 0xa7f1d21617374882d6d2a29f886042bc73207e68d82e84a98231e74fcf6c111a.
//
// Solidity: event UpdateSumVolumeAddress(address newAddress)
func (_TierHook *TierHookFilterer) WatchUpdateSumVolumeAddress(opts *bind.WatchOpts, sink chan<- *TierHookUpdateSumVolumeAddress) (event.Subscription, error) {

	logs, sub, err := _TierHook.contract.WatchLogs(opts, "UpdateSumVolumeAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TierHookUpdateSumVolumeAddress)
				if err := _TierHook.contract.UnpackLog(event, "UpdateSumVolumeAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateSumVolumeAddress is a log parse operation binding the contract event 0xa7f1d21617374882d6d2a29f886042bc73207e68d82e84a98231e74fcf6c111a.
//
// Solidity: event UpdateSumVolumeAddress(address newAddress)
func (_TierHook *TierHookFilterer) ParseUpdateSumVolumeAddress(log types.Log) (*TierHookUpdateSumVolumeAddress, error) {
	event := new(TierHookUpdateSumVolumeAddress)
	if err := _TierHook.contract.UnpackLog(event, "UpdateSumVolumeAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenVaultMetaData contains all meta data concerning the TokenVault contract.
var TokenVaultMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIMessageBridge\",\"name\":\"_messageBridge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"depositId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mintAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MinDepositUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"refId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"burnAccount\",\"type\":\"address\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_mintChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_mintAccount\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"executeMessage\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBridge\",\"outputs\":[{\"internalType\":\"contractIMessageBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"records\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"remotePegBridges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"setMinDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_remoteChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_remotePegBridge\",\"type\":\"address\"}],\"name\":\"setRemotePegBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080346100a657601f6110fe38819003918201601f19168301916001600160401b038311848410176100aa578084926020946040528339810103126100a657516001600160a01b0390818116908190036100a65760018060a01b031990815f5416175f55600154903390821617600155604051913391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a361103f90816100bf8239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040526004361015610011575f80fd5b5f3560e01c806301e64725146100c457806323463624146100bf5780632f5c5fee146100ba57806333a42db1146100b55780633c29f839146100b05780635ec2fa26146100ab578063715018a6146100a65780638da5cb5b146100a1578063aec95a141461009c578063cd49e90b146100975763f2fde38b14610092575f80fd5b6107a6565b610764565b6106da565b6106b4565b610645565b6104ed565b610480565b61045b565b6103e6565b61015c565b346100f35760203660031901126100f3576004355f526002602052602060ff60405f2054166040519015158152f35b5f80fd5b6001600160a01b038116036100f357565b60643590610115826100f7565b565b6044359067ffffffffffffffff821682036100f357565b6084359067ffffffffffffffff821682036100f357565b6004359067ffffffffffffffff821682036100f357565b346100f35760a03660031901126100f3576103e261032b7f3151eb0c52871b9cf9243864e37490145ad0396a42ce45349fdfd20b16a2487f6004356101a0816100f7565b602435906103cf6101af610117565b6064356101bb816100f7565b6101c361012e565b906101ea6101e2866001600160a01b03165f52600460205260405f2090565b548711610857565b61037e866103506001600160a01b03956102328761022a61021d8467ffffffffffffffff165f52600360205260405f2090565b546001600160a01b031690565b1615156108a3565b6040516bffffffffffffffffffffffff1933606090811b8216602084019081528c821b831660348501526048840187905288821b831660688501527fffffffffffffffff00000000000000000000000000000000000000000000000060c08b811b8216607c87015246901b1660848501523090911b909116608c83015260808252601f1992916102c360a082610924565b5190209c8d926102ee6102e86102e1865f52600260205260405f2090565b5460ff1690565b15610946565b604080516001600160a01b038e81166020830152918101889052908916606082015233608082015260a081019490945260c0908101845283610924565b61034a61021d8267ffffffffffffffff165f52600360205260405f2090565b90610f64565b946103736103668c5f52600260205260405f2090565b805460ff19166001179055565b309033908916610a84565b604051958695338a88939460c09567ffffffffffffffff94929998979360e087019a87526001600160a01b039384809216602089015216604087015260608601521660808401521660a08201520152565b0390a16040519081529081906020820190565b0390f35b346100f35760403660031901126100f3576103ff610145565b6024359061040c826100f7565b67ffffffffffffffff6001600160a01b039161042d83600154163314610992565b165f52600360205260405f20911673ffffffffffffffffffffffffffffffffffffffff198254161790555f80f35b346100f3575f3660031901126100f35760206001600160a01b035f5416604051908152f35b346100f35760203660031901126100f3576001600160a01b036004356104a5816100f7565b165f526004602052602060405f2054604051908152f35b9181601f840112156100f35782359167ffffffffffffffff83116100f3576020808501948460051b0101116100f357565b346100f3576040806003193601126100f35767ffffffffffffffff906004358281116100f3576105219036906004016104bc565b90926024359081116100f35761053b9036906004016104bc565b92906105536001600160a01b03600154163314610992565b838303610601575f5b83811061056557005b806105746105fc9287856109ff565b356105a261058b61058684898c6109ff565b610a23565b6001600160a01b03165f52600460205260405f2090565b557f0f48d517989455cd80ed52427e80553e66f9b69fd5cee8e26bd1a1f9c364fba66105d261058683888b6109ff565b6105dd8389876109ff565b86516001600160a01b03929092168252356020820152604090a16109dd565b61055c565b815162461bcd60e51b815260206004820152600f60248201527f6c656e677468206d69736d6174636800000000000000000000000000000000006044820152606490fd5b346100f3575f806003193601126106b1578060015473ffffffffffffffffffffffffffffffffffffffff196001600160a01b03821691610686338414610992565b166001557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b346100f3575f3660031901126100f35760206001600160a01b0360015416604051908152f35b346100f35760803660031901126100f3576106f3610145565b60243590610700826100f7565b6044359067ffffffffffffffff908183116100f357366023840112156100f35782600401359182116100f35736602483850101116100f3576103e29360246107529461074a610108565b500191610cf7565b60405190151581529081906020820190565b346100f35760203660031901126100f35767ffffffffffffffff610786610145565b165f52600360205260206001600160a01b0360405f205416604051908152f35b346100f35760203660031901126100f3576004356107c3816100f7565b6001600160a01b036107da81600154163314610992565b8116156107ec576107ea90610a30565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b1561085e57565b60405162461bcd60e51b815260206004820152601060248201527f616d6f756e7420746f6f20736d616c6c000000000000000000000000000000006044820152606490fd5b156108aa57565b60405162461bcd60e51b815260206004820152601260248201527f696e76616c6964206d696e7420636861696e00000000000000000000000000006044820152606490fd5b634e487b7160e01b5f52604160045260245ffd5b6040810190811067ffffffffffffffff82111761091f57604052565b6108ef565b90601f8019910116810190811067ffffffffffffffff82111761091f57604052565b1561094d57565b60405162461bcd60e51b815260206004820152600d60248201527f7265636f726420657869737473000000000000000000000000000000000000006044820152606490fd5b1561099957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b5f1981146109eb5760010190565b634e487b7160e01b5f52601160045260245ffd5b9190811015610a0f5760051b0190565b634e487b7160e01b5f52603260045260245ffd5b35610a2d816100f7565b90565b600154906001600160a01b03809116918273ffffffffffffffffffffffffffffffffffffffff19821617600155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b9290604051926323b872dd60e01b60208501526001600160a01b03809216602485015216604483015260648201526064815260a081019181831067ffffffffffffffff84111761091f5761011592604052610b64565b908160209103126100f3575180151581036100f35790565b15610af957565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608490fd5b6001600160a01b03169060405190610b7b82610903565b6020928383527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656484840152803b15610bf1575f8281928287610bcc9796519301915af1610bc6610c36565b90610cb3565b80519081610bd957505050565b8261011593610bec938301019101610ada565b610af2565b60405162461bcd60e51b815260048101859052601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b3d15610c70573d9067ffffffffffffffff821161091f5760405191610c65601f8201601f191660200184610924565b82523d5f602084013e565b606090565b91908251928382525f5b848110610c9f575050825f602080949584010152601f8019910116010190565b602081830181015184830182015201610c7f565b90919015610cbf575090565b815115610ccf5750805190602001fd5b60405162461bcd60e51b815260206004820152908190610cf3906024830190610c75565b0390fd5b9291926001600160a01b0390815f54163303610d7f5767ffffffffffffffff165f5260036020528060405f205416911603610d3a57610d3591610dc4565b600190565b60405162461bcd60e51b815260206004820152601f60248201527f73656e646572206973206e6f742072656d6f74652070656720627269646765006044820152606490fd5b60405162461bcd60e51b815260206004820152601c60248201527f63616c6c6572206973206e6f74206d65737361676520627269646765000000006044820152606490fd5b908160a091810103126100f357807fc20f8288cc0b746ccfa1837a99fcdc5225b43ab191419bf6b43fe3802c4829569135610dfe816100f7565b610f1e6020830135604084013592610e15846100f7565b6080606086013595610e26876100f7565b0135906001600160a01b038080921695169516916040516020810190610ea881610e9a8a8789888d30948a949193609096936bffffffffffffffffffffffff19809681809560601b16895260601b166014880152602887015260601b166048850152605c84015260601b16607c8201520190565b03601f198101835282610924565b51902094610ec46102e86102e1885f52600260205260405f2090565b610ed9610366875f52600260205260405f2090565b610ee4828883610f23565b604080519687526001600160a01b039788166020880152908716908601526060850152608084015290921660a082015290819060c0820190565b0390a1565b60405163a9059cbb60e01b60208201526001600160a01b0392909216602483015260448083019390935291815261011591610f5f606483610924565b610b64565b91906020906001600160a01b039267ffffffffffffffff5f8096610fb7878354169460405198899788968795635c85c1a960e11b8752166004860152166024840152606060448401526064830190610c75565b03925af1918215610ffd578092610fcd57505090565b9091506020823d8211610ff5575b81610fe860209383610924565b810103126106b157505190565b3d9150610fdb565b604051903d90823e3d90fdfea2646970667358221220dd6b8cf018a4a75783f2cbd6814645c2d8987c68f7e596632ce6401704b9d75b64736f6c63430008150033",
}

// TokenVaultABI is the input ABI used to generate the binding from.
// Deprecated: Use TokenVaultMetaData.ABI instead.
var TokenVaultABI = TokenVaultMetaData.ABI

// TokenVaultBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TokenVaultMetaData.Bin instead.
var TokenVaultBin = TokenVaultMetaData.Bin

// DeployTokenVault deploys a new Ethereum contract, binding an instance of TokenVault to it.
func DeployTokenVault(auth *bind.TransactOpts, backend bind.ContractBackend, _messageBridge common.Address) (common.Address, *types.Transaction, *TokenVault, error) {
	parsed, err := TokenVaultMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TokenVaultBin), backend, _messageBridge)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TokenVault{TokenVaultCaller: TokenVaultCaller{contract: contract}, TokenVaultTransactor: TokenVaultTransactor{contract: contract}, TokenVaultFilterer: TokenVaultFilterer{contract: contract}}, nil
}

// TokenVault is an auto generated Go binding around an Ethereum contract.
type TokenVault struct {
	TokenVaultCaller     // Read-only binding to the contract
	TokenVaultTransactor // Write-only binding to the contract
	TokenVaultFilterer   // Log filterer for contract events
}

// TokenVaultCaller is an auto generated read-only Go binding around an Ethereum contract.
type TokenVaultCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenVaultTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TokenVaultTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenVaultFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TokenVaultFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TokenVaultSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TokenVaultSession struct {
	Contract     *TokenVault       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TokenVaultCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TokenVaultCallerSession struct {
	Contract *TokenVaultCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// TokenVaultTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TokenVaultTransactorSession struct {
	Contract     *TokenVaultTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// TokenVaultRaw is an auto generated low-level Go binding around an Ethereum contract.
type TokenVaultRaw struct {
	Contract *TokenVault // Generic contract binding to access the raw methods on
}

// TokenVaultCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TokenVaultCallerRaw struct {
	Contract *TokenVaultCaller // Generic read-only contract binding to access the raw methods on
}

// TokenVaultTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TokenVaultTransactorRaw struct {
	Contract *TokenVaultTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTokenVault creates a new instance of TokenVault, bound to a specific deployed contract.
func NewTokenVault(address common.Address, backend bind.ContractBackend) (*TokenVault, error) {
	contract, err := bindTokenVault(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TokenVault{TokenVaultCaller: TokenVaultCaller{contract: contract}, TokenVaultTransactor: TokenVaultTransactor{contract: contract}, TokenVaultFilterer: TokenVaultFilterer{contract: contract}}, nil
}

// NewTokenVaultCaller creates a new read-only instance of TokenVault, bound to a specific deployed contract.
func NewTokenVaultCaller(address common.Address, caller bind.ContractCaller) (*TokenVaultCaller, error) {
	contract, err := bindTokenVault(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TokenVaultCaller{contract: contract}, nil
}

// NewTokenVaultTransactor creates a new write-only instance of TokenVault, bound to a specific deployed contract.
func NewTokenVaultTransactor(address common.Address, transactor bind.ContractTransactor) (*TokenVaultTransactor, error) {
	contract, err := bindTokenVault(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TokenVaultTransactor{contract: contract}, nil
}

// NewTokenVaultFilterer creates a new log filterer instance of TokenVault, bound to a specific deployed contract.
func NewTokenVaultFilterer(address common.Address, filterer bind.ContractFilterer) (*TokenVaultFilterer, error) {
	contract, err := bindTokenVault(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TokenVaultFilterer{contract: contract}, nil
}

// bindTokenVault binds a generic wrapper to an already deployed contract.
func bindTokenVault(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TokenVaultMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenVault *TokenVaultRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenVault.Contract.TokenVaultCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenVault *TokenVaultRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenVault.Contract.TokenVaultTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenVault *TokenVaultRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenVault.Contract.TokenVaultTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TokenVault *TokenVaultCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TokenVault.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TokenVault *TokenVaultTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenVault.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TokenVault *TokenVaultTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TokenVault.Contract.contract.Transact(opts, method, params...)
}

// MessageBridge is a free data retrieval call binding the contract method 0x33a42db1.
//
// Solidity: function messageBridge() view returns(address)
func (_TokenVault *TokenVaultCaller) MessageBridge(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TokenVault.contract.Call(opts, &out, "messageBridge")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MessageBridge is a free data retrieval call binding the contract method 0x33a42db1.
//
// Solidity: function messageBridge() view returns(address)
func (_TokenVault *TokenVaultSession) MessageBridge() (common.Address, error) {
	return _TokenVault.Contract.MessageBridge(&_TokenVault.CallOpts)
}

// MessageBridge is a free data retrieval call binding the contract method 0x33a42db1.
//
// Solidity: function messageBridge() view returns(address)
func (_TokenVault *TokenVaultCallerSession) MessageBridge() (common.Address, error) {
	return _TokenVault.Contract.MessageBridge(&_TokenVault.CallOpts)
}

// MinDeposit is a free data retrieval call binding the contract method 0x3c29f839.
//
// Solidity: function minDeposit(address ) view returns(uint256)
func (_TokenVault *TokenVaultCaller) MinDeposit(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TokenVault.contract.Call(opts, &out, "minDeposit", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinDeposit is a free data retrieval call binding the contract method 0x3c29f839.
//
// Solidity: function minDeposit(address ) view returns(uint256)
func (_TokenVault *TokenVaultSession) MinDeposit(arg0 common.Address) (*big.Int, error) {
	return _TokenVault.Contract.MinDeposit(&_TokenVault.CallOpts, arg0)
}

// MinDeposit is a free data retrieval call binding the contract method 0x3c29f839.
//
// Solidity: function minDeposit(address ) view returns(uint256)
func (_TokenVault *TokenVaultCallerSession) MinDeposit(arg0 common.Address) (*big.Int, error) {
	return _TokenVault.Contract.MinDeposit(&_TokenVault.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TokenVault *TokenVaultCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TokenVault.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TokenVault *TokenVaultSession) Owner() (common.Address, error) {
	return _TokenVault.Contract.Owner(&_TokenVault.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TokenVault *TokenVaultCallerSession) Owner() (common.Address, error) {
	return _TokenVault.Contract.Owner(&_TokenVault.CallOpts)
}

// Records is a free data retrieval call binding the contract method 0x01e64725.
//
// Solidity: function records(bytes32 ) view returns(bool)
func (_TokenVault *TokenVaultCaller) Records(opts *bind.CallOpts, arg0 [32]byte) (bool, error) {
	var out []interface{}
	err := _TokenVault.contract.Call(opts, &out, "records", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Records is a free data retrieval call binding the contract method 0x01e64725.
//
// Solidity: function records(bytes32 ) view returns(bool)
func (_TokenVault *TokenVaultSession) Records(arg0 [32]byte) (bool, error) {
	return _TokenVault.Contract.Records(&_TokenVault.CallOpts, arg0)
}

// Records is a free data retrieval call binding the contract method 0x01e64725.
//
// Solidity: function records(bytes32 ) view returns(bool)
func (_TokenVault *TokenVaultCallerSession) Records(arg0 [32]byte) (bool, error) {
	return _TokenVault.Contract.Records(&_TokenVault.CallOpts, arg0)
}

// RemotePegBridges is a free data retrieval call binding the contract method 0xcd49e90b.
//
// Solidity: function remotePegBridges(uint64 ) view returns(address)
func (_TokenVault *TokenVaultCaller) RemotePegBridges(opts *bind.CallOpts, arg0 uint64) (common.Address, error) {
	var out []interface{}
	err := _TokenVault.contract.Call(opts, &out, "remotePegBridges", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RemotePegBridges is a free data retrieval call binding the contract method 0xcd49e90b.
//
// Solidity: function remotePegBridges(uint64 ) view returns(address)
func (_TokenVault *TokenVaultSession) RemotePegBridges(arg0 uint64) (common.Address, error) {
	return _TokenVault.Contract.RemotePegBridges(&_TokenVault.CallOpts, arg0)
}

// RemotePegBridges is a free data retrieval call binding the contract method 0xcd49e90b.
//
// Solidity: function remotePegBridges(uint64 ) view returns(address)
func (_TokenVault *TokenVaultCallerSession) RemotePegBridges(arg0 uint64) (common.Address, error) {
	return _TokenVault.Contract.RemotePegBridges(&_TokenVault.CallOpts, arg0)
}

// Deposit is a paid mutator transaction binding the contract method 0x23463624.
//
// Solidity: function deposit(address _token, uint256 _amount, uint64 _mintChainId, address _mintAccount, uint64 _nonce) returns(bytes32)
func (_TokenVault *TokenVaultTransactor) Deposit(opts *bind.TransactOpts, _token common.Address, _amount *big.Int, _mintChainId uint64, _mintAccount common.Address, _nonce uint64) (*types.Transaction, error) {
	return _TokenVault.contract.Transact(opts, "deposit", _token, _amount, _mintChainId, _mintAccount, _nonce)
}

// Deposit is a paid mutator transaction binding the contract method 0x23463624.
//
// Solidity: function deposit(address _token, uint256 _amount, uint64 _mintChainId, address _mintAccount, uint64 _nonce) returns(bytes32)
func (_TokenVault *TokenVaultSession) Deposit(_token common.Address, _amount *big.Int, _mintChainId uint64, _mintAccount common.Address, _nonce uint64) (*types.Transaction, error) {
	return _TokenVault.Contract.Deposit(&_TokenVault.TransactOpts, _token, _amount, _mintChainId, _mintAccount, _nonce)
}

// Deposit is a paid mutator transaction binding the contract method 0x23463624.
//
// Solidity: function deposit(address _token, uint256 _amount, uint64 _mintChainId, address _mintAccount, uint64 _nonce) returns(bytes32)
func (_TokenVault *TokenVaultTransactorSession) Deposit(_token common.Address, _amount *big.Int, _mintChainId uint64, _mintAccount common.Address, _nonce uint64) (*types.Transaction, error) {
	return _TokenVault.Contract.Deposit(&_TokenVault.TransactOpts, _token, _amount, _mintChainId, _mintAccount, _nonce)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0xaec95a14.
//
// Solidity: function executeMessage(uint64 srcChainId, address sender, bytes message, address executor) returns(bool)
func (_TokenVault *TokenVaultTransactor) ExecuteMessage(opts *bind.TransactOpts, srcChainId uint64, sender common.Address, message []byte, executor common.Address) (*types.Transaction, error) {
	return _TokenVault.contract.Transact(opts, "executeMessage", srcChainId, sender, message, executor)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0xaec95a14.
//
// Solidity: function executeMessage(uint64 srcChainId, address sender, bytes message, address executor) returns(bool)
func (_TokenVault *TokenVaultSession) ExecuteMessage(srcChainId uint64, sender common.Address, message []byte, executor common.Address) (*types.Transaction, error) {
	return _TokenVault.Contract.ExecuteMessage(&_TokenVault.TransactOpts, srcChainId, sender, message, executor)
}

// ExecuteMessage is a paid mutator transaction binding the contract method 0xaec95a14.
//
// Solidity: function executeMessage(uint64 srcChainId, address sender, bytes message, address executor) returns(bool)
func (_TokenVault *TokenVaultTransactorSession) ExecuteMessage(srcChainId uint64, sender common.Address, message []byte, executor common.Address) (*types.Transaction, error) {
	return _TokenVault.Contract.ExecuteMessage(&_TokenVault.TransactOpts, srcChainId, sender, message, executor)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TokenVault *TokenVaultTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TokenVault.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TokenVault *TokenVaultSession) RenounceOwnership() (*types.Transaction, error) {
	return _TokenVault.Contract.RenounceOwnership(&_TokenVault.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TokenVault *TokenVaultTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TokenVault.Contract.RenounceOwnership(&_TokenVault.TransactOpts)
}

// SetMinDeposit is a paid mutator transaction binding the contract method 0x5ec2fa26.
//
// Solidity: function setMinDeposit(address[] _tokens, uint256[] _amounts) returns()
func (_TokenVault *TokenVaultTransactor) SetMinDeposit(opts *bind.TransactOpts, _tokens []common.Address, _amounts []*big.Int) (*types.Transaction, error) {
	return _TokenVault.contract.Transact(opts, "setMinDeposit", _tokens, _amounts)
}

// SetMinDeposit is a paid mutator transaction binding the contract method 0x5ec2fa26.
//
// Solidity: function setMinDeposit(address[] _tokens, uint256[] _amounts) returns()
func (_TokenVault *TokenVaultSession) SetMinDeposit(_tokens []common.Address, _amounts []*big.Int) (*types.Transaction, error) {
	return _TokenVault.Contract.SetMinDeposit(&_TokenVault.TransactOpts, _tokens, _amounts)
}

// SetMinDeposit is a paid mutator transaction binding the contract method 0x5ec2fa26.
//
// Solidity: function setMinDeposit(address[] _tokens, uint256[] _amounts) returns()
func (_TokenVault *TokenVaultTransactorSession) SetMinDeposit(_tokens []common.Address, _amounts []*big.Int) (*types.Transaction, error) {
	return _TokenVault.Contract.SetMinDeposit(&_TokenVault.TransactOpts, _tokens, _amounts)
}

// SetRemotePegBridge is a paid mutator transaction binding the contract method 0x2f5c5fee.
//
// Solidity: function setRemotePegBridge(uint64 _remoteChainId, address _remotePegBridge) returns()
func (_TokenVault *TokenVaultTransactor) SetRemotePegBridge(opts *bind.TransactOpts, _remoteChainId uint64, _remotePegBridge common.Address) (*types.Transaction, error) {
	return _TokenVault.contract.Transact(opts, "setRemotePegBridge", _remoteChainId, _remotePegBridge)
}

// SetRemotePegBridge is a paid mutator transaction binding the contract method 0x2f5c5fee.
//
// Solidity: function setRemotePegBridge(uint64 _remoteChainId, address _remotePegBridge) returns()
func (_TokenVault *TokenVaultSession) SetRemotePegBridge(_remoteChainId uint64, _remotePegBridge common.Address) (*types.Transaction, error) {
	return _TokenVault.Contract.SetRemotePegBridge(&_TokenVault.TransactOpts, _remoteChainId, _remotePegBridge)
}

// SetRemotePegBridge is a paid mutator transaction binding the contract method 0x2f5c5fee.
//
// Solidity: function setRemotePegBridge(uint64 _remoteChainId, address _remotePegBridge) returns()
func (_TokenVault *TokenVaultTransactorSession) SetRemotePegBridge(_remoteChainId uint64, _remotePegBridge common.Address) (*types.Transaction, error) {
	return _TokenVault.Contract.SetRemotePegBridge(&_TokenVault.TransactOpts, _remoteChainId, _remotePegBridge)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TokenVault *TokenVaultTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TokenVault.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TokenVault *TokenVaultSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TokenVault.Contract.TransferOwnership(&_TokenVault.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TokenVault *TokenVaultTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TokenVault.Contract.TransferOwnership(&_TokenVault.TransactOpts, newOwner)
}

// TokenVaultDepositedIterator is returned from FilterDeposited and is used to iterate over the raw logs and unpacked data for Deposited events raised by the TokenVault contract.
type TokenVaultDepositedIterator struct {
	Event *TokenVaultDeposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenVaultDepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenVaultDeposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenVaultDeposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenVaultDepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenVaultDepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenVaultDeposited represents a Deposited event raised by the TokenVault contract.
type TokenVaultDeposited struct {
	DepositId   [32]byte
	Depositor   common.Address
	Token       common.Address
	Amount      *big.Int
	MintAccount common.Address
	Nonce       uint64
	MessageId   [32]byte
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterDeposited is a free log retrieval operation binding the contract event 0x3151eb0c52871b9cf9243864e37490145ad0396a42ce45349fdfd20b16a2487f.
//
// Solidity: event Deposited(bytes32 depositId, address depositor, address token, uint256 amount, address mintAccount, uint64 nonce, bytes32 messageId)
func (_TokenVault *TokenVaultFilterer) FilterDeposited(opts *bind.FilterOpts) (*TokenVaultDepositedIterator, error) {

	logs, sub, err := _TokenVault.contract.FilterLogs(opts, "Deposited")
	if err != nil {
		return nil, err
	}
	return &TokenVaultDepositedIterator{contract: _TokenVault.contract, event: "Deposited", logs: logs, sub: sub}, nil
}

// WatchDeposited is a free log subscription operation binding the contract event 0x3151eb0c52871b9cf9243864e37490145ad0396a42ce45349fdfd20b16a2487f.
//
// Solidity: event Deposited(bytes32 depositId, address depositor, address token, uint256 amount, address mintAccount, uint64 nonce, bytes32 messageId)
func (_TokenVault *TokenVaultFilterer) WatchDeposited(opts *bind.WatchOpts, sink chan<- *TokenVaultDeposited) (event.Subscription, error) {

	logs, sub, err := _TokenVault.contract.WatchLogs(opts, "Deposited")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenVaultDeposited)
				if err := _TokenVault.contract.UnpackLog(event, "Deposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeposited is a log parse operation binding the contract event 0x3151eb0c52871b9cf9243864e37490145ad0396a42ce45349fdfd20b16a2487f.
//
// Solidity: event Deposited(bytes32 depositId, address depositor, address token, uint256 amount, address mintAccount, uint64 nonce, bytes32 messageId)
func (_TokenVault *TokenVaultFilterer) ParseDeposited(log types.Log) (*TokenVaultDeposited, error) {
	event := new(TokenVaultDeposited)
	if err := _TokenVault.contract.UnpackLog(event, "Deposited", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenVaultMinDepositUpdatedIterator is returned from FilterMinDepositUpdated and is used to iterate over the raw logs and unpacked data for MinDepositUpdated events raised by the TokenVault contract.
type TokenVaultMinDepositUpdatedIterator struct {
	Event *TokenVaultMinDepositUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenVaultMinDepositUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenVaultMinDepositUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenVaultMinDepositUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenVaultMinDepositUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenVaultMinDepositUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenVaultMinDepositUpdated represents a MinDepositUpdated event raised by the TokenVault contract.
type TokenVaultMinDepositUpdated struct {
	Token  common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterMinDepositUpdated is a free log retrieval operation binding the contract event 0x0f48d517989455cd80ed52427e80553e66f9b69fd5cee8e26bd1a1f9c364fba6.
//
// Solidity: event MinDepositUpdated(address token, uint256 amount)
func (_TokenVault *TokenVaultFilterer) FilterMinDepositUpdated(opts *bind.FilterOpts) (*TokenVaultMinDepositUpdatedIterator, error) {

	logs, sub, err := _TokenVault.contract.FilterLogs(opts, "MinDepositUpdated")
	if err != nil {
		return nil, err
	}
	return &TokenVaultMinDepositUpdatedIterator{contract: _TokenVault.contract, event: "MinDepositUpdated", logs: logs, sub: sub}, nil
}

// WatchMinDepositUpdated is a free log subscription operation binding the contract event 0x0f48d517989455cd80ed52427e80553e66f9b69fd5cee8e26bd1a1f9c364fba6.
//
// Solidity: event MinDepositUpdated(address token, uint256 amount)
func (_TokenVault *TokenVaultFilterer) WatchMinDepositUpdated(opts *bind.WatchOpts, sink chan<- *TokenVaultMinDepositUpdated) (event.Subscription, error) {

	logs, sub, err := _TokenVault.contract.WatchLogs(opts, "MinDepositUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenVaultMinDepositUpdated)
				if err := _TokenVault.contract.UnpackLog(event, "MinDepositUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinDepositUpdated is a log parse operation binding the contract event 0x0f48d517989455cd80ed52427e80553e66f9b69fd5cee8e26bd1a1f9c364fba6.
//
// Solidity: event MinDepositUpdated(address token, uint256 amount)
func (_TokenVault *TokenVaultFilterer) ParseMinDepositUpdated(log types.Log) (*TokenVaultMinDepositUpdated, error) {
	event := new(TokenVaultMinDepositUpdated)
	if err := _TokenVault.contract.UnpackLog(event, "MinDepositUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenVaultOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TokenVault contract.
type TokenVaultOwnershipTransferredIterator struct {
	Event *TokenVaultOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenVaultOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenVaultOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenVaultOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenVaultOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenVaultOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenVaultOwnershipTransferred represents a OwnershipTransferred event raised by the TokenVault contract.
type TokenVaultOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TokenVault *TokenVaultFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TokenVaultOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TokenVault.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TokenVaultOwnershipTransferredIterator{contract: _TokenVault.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TokenVault *TokenVaultFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TokenVaultOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TokenVault.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenVaultOwnershipTransferred)
				if err := _TokenVault.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TokenVault *TokenVaultFilterer) ParseOwnershipTransferred(log types.Log) (*TokenVaultOwnershipTransferred, error) {
	event := new(TokenVaultOwnershipTransferred)
	if err := _TokenVault.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TokenVaultWithdrawnIterator is returned from FilterWithdrawn and is used to iterate over the raw logs and unpacked data for Withdrawn events raised by the TokenVault contract.
type TokenVaultWithdrawnIterator struct {
	Event *TokenVaultWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TokenVaultWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TokenVaultWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TokenVaultWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TokenVaultWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TokenVaultWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TokenVaultWithdrawn represents a Withdrawn event raised by the TokenVault contract.
type TokenVaultWithdrawn struct {
	WithdrawId  [32]byte
	Receiver    common.Address
	Token       common.Address
	Amount      *big.Int
	RefId       [32]byte
	BurnAccount common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterWithdrawn is a free log retrieval operation binding the contract event 0xc20f8288cc0b746ccfa1837a99fcdc5225b43ab191419bf6b43fe3802c482956.
//
// Solidity: event Withdrawn(bytes32 withdrawId, address receiver, address token, uint256 amount, bytes32 refId, address burnAccount)
func (_TokenVault *TokenVaultFilterer) FilterWithdrawn(opts *bind.FilterOpts) (*TokenVaultWithdrawnIterator, error) {

	logs, sub, err := _TokenVault.contract.FilterLogs(opts, "Withdrawn")
	if err != nil {
		return nil, err
	}
	return &TokenVaultWithdrawnIterator{contract: _TokenVault.contract, event: "Withdrawn", logs: logs, sub: sub}, nil
}

// WatchWithdrawn is a free log subscription operation binding the contract event 0xc20f8288cc0b746ccfa1837a99fcdc5225b43ab191419bf6b43fe3802c482956.
//
// Solidity: event Withdrawn(bytes32 withdrawId, address receiver, address token, uint256 amount, bytes32 refId, address burnAccount)
func (_TokenVault *TokenVaultFilterer) WatchWithdrawn(opts *bind.WatchOpts, sink chan<- *TokenVaultWithdrawn) (event.Subscription, error) {

	logs, sub, err := _TokenVault.contract.WatchLogs(opts, "Withdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TokenVaultWithdrawn)
				if err := _TokenVault.contract.UnpackLog(event, "Withdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdrawn is a log parse operation binding the contract event 0xc20f8288cc0b746ccfa1837a99fcdc5225b43ab191419bf6b43fe3802c482956.
//
// Solidity: event Withdrawn(bytes32 withdrawId, address receiver, address token, uint256 amount, bytes32 refId, address burnAccount)
func (_TokenVault *TokenVaultFilterer) ParseWithdrawn(log types.Log) (*TokenVaultWithdrawn, error) {
	event := new(TokenVaultWithdrawn)
	if err := _TokenVault.contract.UnpackLog(event, "Withdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TxMetaData contains all meta data concerning the Tx contract.
var TxMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"txRaw\",\"type\":\"bytes\"}],\"name\":\"decodeTx\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"gasTipCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasFeeCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"internalType\":\"structTx.TxInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
	Bin: "0x6080806040523461001a57610e3a908161001f823930815050f35b5f80fdfe6040608081526004361015610012575f80fd5b5f90813560e01c63dae029d314610027575f80fd5b602090816003193601126103d55767ffffffffffffffff916004358381116103d157366023820112156103d15780600401359384116103d157602481019060248536920101116103d1576102e4946102da926102c992610085610526565b9660ff926100ba6002856100b36100ad61009f8789610591565b356001600160f81b03191690565b60f81c90565b16146105ae565b6100df6100da6100d56100ce8580886105fa565b36916106a7565b6109ff565b610a66565b926101136101056100f86100f2876106dd565b51610b79565b67ffffffffffffffff1690565b67ffffffffffffffff168b52565b6101356101256100f86100f2876106ea565b67ffffffffffffffff168b840152565b6101416100f2856106fa565b898b01526101516100f28561070a565b60608b01526101626100f28561071a565b60808b015261018c61017c6101768661072a565b51610b5b565b6001600160a01b031660a08c0152565b6101986100f28561073a565b60c08b01526101af6101a98561074a565b51610be7565b60e08b01526101c96101c36100f28661075b565b60ff1690565b956101ed6101e26101a96101e76101e26101a98a61076c565b6107a2565b9761077d565b958a6102076102026100ad61009f898861059f565b6107d8565b9582871660010361039b576102336101c361022e6100ad610228858a610637565b90610865565b6107f0565b965b61ffff8816603781116102e85750506102bd939261029d8761028f6102b5958561028961027a6102686102a5998e610648565b9d909361027481610891565b91610656565b929093519c8d968701916108f8565b916108f8565b03601f1981018852876104f5565b859716610814565b60f81b6001600160f81b03191690565b901a91610971565b535b8151910120610981565b6001600160a01b0316610100840152565b5191829182610417565b0390f35b909697945083959391925011155f146103615761035b93828261031d61031761009f61032f9661034d98610591565b98610803565b9261032782610891565b931691610673565b8c5195869491929160f81b6001600160f81b03191690888601610940565b03601f1981018352826104f5565b906102bf565b61035b93828261031d61031761009f61037d9661034d98610591565b8c5195869491929160f01b6001600160f01b03191690888601610905565b6103cb6103c66103c06103ba6103b36101c38c610803565b858a61061a565b90610825565b60f01c90565b610851565b96610235565b8480fd5b8280fd5b91908251928382525f5b848110610403575050825f602080949584010152601f8019910116010190565b6020818301810151848301820152016103e3565b6104bd906020815261043660208201845167ffffffffffffffff169052565b602083015167ffffffffffffffff1660408201526040830151606082015260608301516080820152608083015160a082015261048260a084015160c08301906001600160a01b03169052565b60c083015160e082015260e0830151610120906104ac6101009183838601526101408501906103d9565b9401516001600160a01b0316910152565b90565b634e487b7160e01b5f52604160045260245ffd5b6040810190811067ffffffffffffffff8211176104f057604052565b6104c0565b90601f8019910116810190811067ffffffffffffffff8211176104f057604052565b60405190610524826104d4565b565b60405190610120820182811067ffffffffffffffff8211176104f057604052816101005f918281528260208201528260408201528260608201528260808201528260a08201528260c0820152606060e08201520152565b634e487b7160e01b5f52603260045260245ffd5b901561059a5790565b61057d565b906001101561059a5760010190565b156105b557565b60405162461bcd60e51b815260206004820152601660248201527f6e6f7420612044796e616d6963466565547854797065000000000000000000006044820152606490fd5b909291928360011161061657831161061657600101915f190190565b5f80fd5b909291928360021161061657831161061657600201916001190190565b906003116106165760020190600190565b906002116106165790600290565b909291928360031161061657831161061657600301916002190190565b90939293848311610616578411610616578101920390565b67ffffffffffffffff81116104f057601f01601f191660200190565b9291926106b38261068b565b916106c160405193846104f5565b829481845281830111610616578281602093845f960137010152565b80511561059a5760200190565b80516001101561059a5760400190565b80516002101561059a5760600190565b80516003101561059a5760800190565b80516004101561059a5760a00190565b80516005101561059a5760c00190565b80516006101561059a5760e00190565b80516007101561059a576101000190565b80516009101561059a576101400190565b8051600a101561059a576101600190565b8051600b101561059a576101800190565b805182101561059a5760209160051b010190565b6020815191015190602081106107b6575090565b5f199060200360031b1b1690565b634e487b7160e01b5f52601160045260245ffd5b60ff60f6199116019060ff82116107eb57565b6107c4565b60ff6042199116019060ff82116107eb57565b60ff166002019060ff82116107eb57565b60ff1660c0019060ff82116107eb57565b6001600160f01b0319903581811693926002811061084257505050565b60020360031b82901b16169150565b61ffff90811660421901919082116107eb57565b6001600160f81b0319903581811693926001811061088257505050565b60010360031b82901b16169150565b6042198101919082116107eb57565b60bf198101919082116107eb57565b607f198101919082116107eb57565b60200390602082116107eb57565b5f198101919082116107eb57565b60f6198101919082116107eb57565b60b6198101919082116107eb57565b908092918237015f815290565b6001600160f81b0319909116815260f960f81b60018201526001600160f01b031990911660028201526004929182908483013701015f815290565b6001600160f81b03199182168152601f60fb1b6001820152911660028201526003929182908483013701015f815290565b80516001101561059a5760210190565b919260ff8116601b81106109cd575b509160209360809260ff5f9560405194855216868401526040830152606082015282805260015afa156109c2575f5190565b6040513d5f823e3d90fd5b601b9150929192019060ff82116107eb5791906020610990565b604051906109f4826104d4565b5f6020838281520152565b610a076109e7565b50602081519160405192610a1a846104d4565b835201602082015290565b67ffffffffffffffff81116104f05760051b60200190565b90600182018092116107eb57565b919082018092116107eb57565b5f1981146107eb5760010190565b610a6f81610b37565b1561061657610a7d81610c34565b610a8681610a25565b91610a9460405193846104f5565b818352601f19610aa383610a25565b015f5b818110610b20575050610ac7602080920151610ac181610d1a565b90610a4b565b5f905b838210610ad8575050505090565b610b1481610ae8610b1a93610c95565b90610af1610517565b8281528187820152610b03868a61078e565b52610b0e858961078e565b50610a4b565b91610a58565b90610aca565b602090610b2b6109e7565b82828801015201610aa6565b805115610b5657602060c0910151515f1a10610b5257600190565b5f90565b505f90565b601581510361061657610b756001600160a01b0391610b79565b1690565b80518015159081610baf575b501561061657610b9490610bbb565b90519060208110610ba3575090565b6020036101000a900490565b6021915011155f610b85565b906020820191610bcb8351610d1a565b9251908382018092116107eb57519283039283116107eb579190565b80511561061657610bfa6104bd91610bbb565b610c068193929361068b565b92610c1460405194856104f5565b818452601f19610c238361068b565b013660208601378360200190610d87565b805115610b56575f9060208101908151610c4d81610d1a565b81018091116107eb579151905181018091116107eb5791905b828110610c735750905090565b610c7c81610c95565b81018091116107eb57610c8f9091610a58565b90610c66565b80515f1a906080821015610caa575050600190565b60b8821015610cc55750610cc06104bd916108af565b610a3d565b9060c0811015610ce95760b51991600160b783602003016101000a91015104010190565b9060f8821015610d005750610cc06104bd916108a0565b60010151602082900360f7016101000a90040160f5190190565b515f1a6080811015610d2b57505f90565b60b881108015610d62575b15610d415750600190565b60c0811015610d5657610cc06104bd916108e9565b610cc06104bd916108da565b5060c08110158015610d36575060f88110610d36565b601f81116107eb576101000a90565b929091928315610dfe5792915b602093848410610dc957805182528481018091116107eb579381018091116107eb5791601f1981019081116107eb5791610d94565b9193509180610dd757505050565b610deb610de6610df0926108be565b610d78565b6108cc565b905182518216911916179052565b5091505056fea2646970667358221220b0183dd97ea486f2b69822c7d03649cdc28bec01cab615e97c1033df72afe28264736f6c63430008150033",
}

// TxABI is the input ABI used to generate the binding from.
// Deprecated: Use TxMetaData.ABI instead.
var TxABI = TxMetaData.ABI

// TxBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TxMetaData.Bin instead.
var TxBin = TxMetaData.Bin

// DeployTx deploys a new Ethereum contract, binding an instance of Tx to it.
func DeployTx(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Tx, error) {
	parsed, err := TxMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TxBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Tx{TxCaller: TxCaller{contract: contract}, TxTransactor: TxTransactor{contract: contract}, TxFilterer: TxFilterer{contract: contract}}, nil
}

// Tx is an auto generated Go binding around an Ethereum contract.
type Tx struct {
	TxCaller     // Read-only binding to the contract
	TxTransactor // Write-only binding to the contract
	TxFilterer   // Log filterer for contract events
}

// TxCaller is an auto generated read-only Go binding around an Ethereum contract.
type TxCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TxTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TxTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TxFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TxFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TxSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TxSession struct {
	Contract     *Tx               // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TxCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TxCallerSession struct {
	Contract *TxCaller     // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// TxTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TxTransactorSession struct {
	Contract     *TxTransactor     // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TxRaw is an auto generated low-level Go binding around an Ethereum contract.
type TxRaw struct {
	Contract *Tx // Generic contract binding to access the raw methods on
}

// TxCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TxCallerRaw struct {
	Contract *TxCaller // Generic read-only contract binding to access the raw methods on
}

// TxTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TxTransactorRaw struct {
	Contract *TxTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTx creates a new instance of Tx, bound to a specific deployed contract.
func NewTx(address common.Address, backend bind.ContractBackend) (*Tx, error) {
	contract, err := bindTx(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Tx{TxCaller: TxCaller{contract: contract}, TxTransactor: TxTransactor{contract: contract}, TxFilterer: TxFilterer{contract: contract}}, nil
}

// NewTxCaller creates a new read-only instance of Tx, bound to a specific deployed contract.
func NewTxCaller(address common.Address, caller bind.ContractCaller) (*TxCaller, error) {
	contract, err := bindTx(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TxCaller{contract: contract}, nil
}

// NewTxTransactor creates a new write-only instance of Tx, bound to a specific deployed contract.
func NewTxTransactor(address common.Address, transactor bind.ContractTransactor) (*TxTransactor, error) {
	contract, err := bindTx(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TxTransactor{contract: contract}, nil
}

// NewTxFilterer creates a new log filterer instance of Tx, bound to a specific deployed contract.
func NewTxFilterer(address common.Address, filterer bind.ContractFilterer) (*TxFilterer, error) {
	contract, err := bindTx(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TxFilterer{contract: contract}, nil
}

// bindTx binds a generic wrapper to an already deployed contract.
func bindTx(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TxMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Tx *TxRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Tx.Contract.TxCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Tx *TxRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Tx.Contract.TxTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Tx *TxRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Tx.Contract.TxTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Tx *TxCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Tx.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Tx *TxTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Tx.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Tx *TxTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Tx.Contract.contract.Transact(opts, method, params...)
}

// DecodeTx is a free data retrieval call binding the contract method 0xdae029d3.
//
// Solidity: function decodeTx(bytes txRaw) pure returns((uint64,uint64,uint256,uint256,uint256,address,uint256,bytes,address) info)
func (_Tx *TxCaller) DecodeTx(opts *bind.CallOpts, txRaw []byte) (TxTxInfo, error) {
	var out []interface{}
	err := _Tx.contract.Call(opts, &out, "decodeTx", txRaw)

	if err != nil {
		return *new(TxTxInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(TxTxInfo)).(*TxTxInfo)

	return out0, err

}

// DecodeTx is a free data retrieval call binding the contract method 0xdae029d3.
//
// Solidity: function decodeTx(bytes txRaw) pure returns((uint64,uint64,uint256,uint256,uint256,address,uint256,bytes,address) info)
func (_Tx *TxSession) DecodeTx(txRaw []byte) (TxTxInfo, error) {
	return _Tx.Contract.DecodeTx(&_Tx.CallOpts, txRaw)
}

// DecodeTx is a free data retrieval call binding the contract method 0xdae029d3.
//
// Solidity: function decodeTx(bytes txRaw) pure returns((uint64,uint64,uint256,uint256,uint256,address,uint256,bytes,address) info)
func (_Tx *TxCallerSession) DecodeTx(txRaw []byte) (TxTxInfo, error) {
	return _Tx.Contract.DecodeTx(&_Tx.CallOpts, txRaw)
}

// TxVerifierMetaData contains all meta data concerning the TxVerifier contract.
var TxVerifierMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blockChunks\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdateBlockChunks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdateVerifierAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"VerifiedTx\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"blockChunks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"txRaw\",\"type\":\"bytes\"}],\"name\":\"decodeTx\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"gasTipCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasFeeCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"blkNum\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"blkHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blkTime\",\"type\":\"uint64\"}],\"internalType\":\"structITxVerifier.TxInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blockChunks\",\"type\":\"address\"}],\"name\":\"updateBlockChunks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_verifierAddress\",\"type\":\"address\"}],\"name\":\"updateVerifierAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"verifierAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"txRaw\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"auxiBlkVerifyInfo\",\"type\":\"bytes\"}],\"name\":\"verifyTx\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"gasTipCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasFeeCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"blkNum\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"blkHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blkTime\",\"type\":\"uint64\"}],\"internalType\":\"structITxVerifier.TxInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"txRaw\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"auxiBlkVerifyInfo\",\"type\":\"bytes\"}],\"name\":\"verifyTxAndLog\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"gasTipCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasFeeCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"blkNum\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"blkHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"blkTime\",\"type\":\"uint64\"}],\"internalType\":\"structITxVerifier.TxInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080346100a457601f611d3a38819003918201601f19168301916001600160401b038311848410176100a8578084926020946040528339810103126100a457516001600160a01b0390818116908190036100a4575f5460018060a01b03199033828216175f55604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a36002541617600255611c7d90816100bd8239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60806040526004361015610011575f80fd5b5f803560e01c9081631eeb86da146100b757508063361108de146100b2578063715018a6146100ad578063724796ed146100a85780638da5cb5b146100a3578063a8da8d691461009e578063dae029d314610099578063ec4ffc5214610094578063f2fde38b1461008f5763f5cec6af1461008a575f80fd5b6105fd565b610551565b6104bc565b610468565b61043c565b610417565b6103f1565b610394565b610309565b34610127576020366003190112610127577f0addee9cb6aa9328bbfbe8282179a6737af344619320736b6918af70b6a94a9860206100f361012a565b6001600160a01b039061010a82865416331461063f565b16806001600160a01b03196002541617600255604051908152a180f35b80fd5b600435906001600160a01b038216820361014057565b5f80fd5b9181601f840112156101405782359167ffffffffffffffff8311610140576020838186019501011161014057565b9060606003198301126101405767ffffffffffffffff600435818111610140578361019f91600401610144565b9390939260243583811161014057826101ba91600401610144565b93909392604435918211610140576101d491600401610144565b9091565b5f5b8381106101e95750505f910152565b81810151838201526020016101da565b90602091610212815180928185528580860191016101d8565b601f01601f1916010190565b610306906020815261023d60208201845167ffffffffffffffff169052565b602083015167ffffffffffffffff1660408201526040830151606082015260608301516080820152608083015160a082015261028960a084015160c08301906001600160a01b03169052565b60c083015160e082015260e083015192610180906102b46101009583878601526101a08501906101f9565b948101516102d061012091828601906001600160a01b03169052565b8101516102e8610140918286019063ffffffff169052565b81015161016084810191909152015167ffffffffffffffff16910152565b90565b34610140576103906103727fe1df3a08ea1a2c110c3f833d615f7e02814f32a3418b98f011888d0516669888604061035d61034336610172565b92610355999599969496929192610710565b50868a610993565b9467ffffffffffffffff865116923691610798565b6020815191012082519182526020820152a16040519182918261021e565b0390f35b34610140575f80600319360112610127578080546001600160a01b03196001600160a01b038216916103c733841461063f565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b34610140575f3660031901126101405760206001600160a01b0360025416604051908152f35b34610140575f3660031901126101405760206001600160a01b035f5416604051908152f35b346101405761039061045c61045036610172565b94939093929192610993565b6040519182918261021e565b346101405760203660031901126101405760043567ffffffffffffffff81116101405761045c61049f610390923690600401610144565b90611193565b6004359067ffffffffffffffff8216820361014057565b34610140576040366003190112610140576104d56104a5565b602435906001600160a01b03918281168091036101405767ffffffffffffffff6040926105277ffd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f955f5416331461063f565b1690815f526001602052825f20816001600160a01b031982541617905582519182526020820152a1005b346101405760203660031901126101405761056a61012a565b6001600160a01b03610580815f5416331461063f565b81161561059257610590906117e5565b005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b346101405760203660031901126101405767ffffffffffffffff61061f6104a5565b165f52600160205260206001600160a01b0360405f205416604051908152f35b1561064657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b634e487b7160e01b5f52604160045260245ffd5b6040810190811067ffffffffffffffff8211176106ba57604052565b61068a565b90601f8019910116810190811067ffffffffffffffff8211176106ba57604052565b6040519060c0820182811067ffffffffffffffff8211176106ba57604052565b6040519061070e8261069e565b565b60405190610180820182811067ffffffffffffffff8211176106ba57604052816101605f918281528260208201528260408201528260608201528260808201528260a08201528260c0820152606060e08201528261010082015282610120820152826101408201520152565b67ffffffffffffffff81116106ba57601f01601f191660200190565b9291926107a48261077c565b916107b260405193846106bf565b829481845281830111610140578281602093845f960137010152565b156107d557565b60405162461bcd60e51b815260206004820152600f60248201527f70726f6f66206e6f742076616c696400000000000000000000000000000000006044820152606490fd5b908092918237015f815290565b6020908361070e93959495604051968361084a89955180928880890191016101d8565b84019185830137015f838201520380855201836106bf565b1561086957565b60405162461bcd60e51b815260206004820152601260248201527f6c65616648617368206e6f74206d6174636800000000000000000000000000006044820152606490fd5b90816020910312610140575180151581036101405790565b91909161018081019267ffffffffffffffff815116825260a0806020928381015163ffffffff8091168587015260408201516040870152606082015160608701526080820151166080860152015192015f905b600782106109275750505050565b82806001928651815201940191019092610919565b6040513d5f823e3d90fd5b1561094e57565b60405162461bcd60e51b815260206004820152600f60248201527f696e76616c696420626c6b4861736800000000000000000000000000000000006044820152606490fd5b909391959492956109a2610710565b506109ad8583611193565b96818189516109c39067ffffffffffffffff1690565b916109cd92611560565b6109d6906107ce565b6109df916116d3565b936080850151916109ef92610827565b918251602080940120845114610a0490610862565b610a0d91610dff565b86519293919267ffffffffffffffff169060408601938451610a329063ffffffff1690565b9584880196875190610a426106e1565b67ffffffffffffffff909616865263ffffffff16858701526040850152606084015263ffffffff16608083015260a082015260025482906001600160a01b03166001600160a01b03166001600160a01b0316604051631513dce960e21b81529283919082908190610ab690600483016108c6565b03915afa908115610b525761070e95610b1795610ae5610afb94606094610b0d975f92610b25575b5050610947565b516101408a0152015167ffffffffffffffff1690565b67ffffffffffffffff16610160870152565b5163ffffffff1690565b63ffffffff16610120840152565b610b449250803d10610b4b575b610b3c81836106bf565b8101906108ae565b5f80610ade565b503d610b32565b61093c565b15610b5e57565b60405162461bcd60e51b815260206004820152601b60248201527f696e636f72726563742061757869426c6b566572696679496e666f00000000006044820152606490fd5b906020116101405790602090565b906024116101405760200190600490565b90610104116101405760e40190602090565b909291928360011161014057831161014057600101915f190190565b909291928360021161014057831161014057600201916001190190565b906003116101405760020190600190565b906002116101405790600290565b909291928360031161014057831161014057600301916002190190565b9061016011610140576101400190602090565b9061018011610140576101700190601090565b906101a011610140576101800190602090565b906101c011610140576101b00190601090565b906101e011610140576101dc0190600490565b9061020011610140576101f80190600890565b929192610200918483116101405784116101405701916101ff190190565b90939293848311610140578411610140578101920390565b359060208110610cff575090565b5f199060200360031b1b1690565b7fffffffff000000000000000000000000000000000000000000000000000000009035818116939260048110610d4257505050565b60040360031b82901b16169150565b634e487b7160e01b5f52601160045260245ffd5b60ff1660ff8114610d765760010190565b610d51565b60051b90611fe060e0831692168203610d7657565b60ff166024019060ff8211610d7657565b60ff60019116019060ff8211610d7657565b60ff166002019060ff8211610d7657565b60ff1660c0019060ff8211610d7657565b634e487b7160e01b5f52603260045260245ffd5b906007811015610dfa5760051b0190565b610dd5565b916040519060e0820182811067ffffffffffffffff8211176106ba5760405260e036833781610e316101048514610b57565b610e44610e3e8587610ba3565b90610cf1565b93610e61610e5b610e558389610bb1565b90610d0d565b60e01c90565b945f5b60ff808216906006821015610ec65790610ebb610eb4610e3e85948d89610e95610e90610ec19a610d7b565b610d90565b9280610eab610e90610ea68c610da1565b610d7b565b16931691610cd9565b9189610de9565b52610d65565b610e64565b50505095610e3e60c092610edc92969496610bc2565b910152565b9015610dfa5790565b9060011015610dfa5760010190565b15610f0057565b60405162461bcd60e51b815260206004820152601660248201527f6e6f7420612044796e616d6963466565547854797065000000000000000000006044820152606490fd5b805115610dfa5760200190565b805160011015610dfa5760400190565b805160021015610dfa5760600190565b805160031015610dfa5760800190565b805160041015610dfa5760a00190565b805160051015610dfa5760c00190565b805160061015610dfa5760e00190565b805160071015610dfa576101000190565b805160091015610dfa576101400190565b8051600a1015610dfa576101600190565b8051600b1015610dfa576101800190565b8051821015610dfa5760209160051b010190565b602081519101519060208110610cff575090565b60ff60f6199116019060ff8211610d7657565b60ff6042199116019060ff8211610d7657565b6001600160f01b0319903581811693926002811061106157505050565b60020360031b82901b16169150565b61ffff9081166042190191908211610d7657565b6001600160f81b031990358181169392600181106110a157505050565b60010360031b82901b16169150565b604219810191908211610d7657565b60bf19810191908211610d7657565b607f19810191908211610d7657565b6020039060208211610d7657565b5f19810191908211610d7657565b60f619810191908211610d7657565b60b619810191908211610d7657565b6001600160f81b0319909116815260f960f81b60018201526001600160f01b031990911660028201526004929182908483013701015f815290565b6001600160f81b03199182168152601f60fb1b6001820152911660028201526003929182908483013701015f815290565b805160011015610dfa5760210190565b91906113e961070e916111a4610710565b9460ff906111d96002836111d26111cc6111be8887610ee1565b356001600160f81b03191690565b60f81c90565b1614610ef9565b6111fe6111f96111f46111ed868086610bd4565b3691610798565b611842565b6118a9565b9061123261122461121761121185610f45565b516119bc565b67ffffffffffffffff1690565b67ffffffffffffffff168952565b61125561124461121761121185610f52565b67ffffffffffffffff1660208a0152565b61126161121183610f62565b604089015261127261121183610f72565b606089015261128361121183610f82565b60808901526112ad61129d61129784610f92565b5161199e565b6001600160a01b031660a08a0152565b6112b961121183610fa2565b60c08901526112d06112ca83610fb2565b51611a2a565b60e08901526112ea6112e461121184610fc3565b60ff1690565b9361130e6113036112ca6113086113036112ca88610fd4565b61100a565b95610fe5565b936113276113226111cc6111be8587610eea565b61101e565b928184166001036114a8576113536112e461134e6111cc6113488786610c0d565b90611084565b611031565b935b61ffff8516603781116113fa5750506113c36113db926113bb836113ad611394611382896113d398610c1e565b93909961138e816110b0565b91610c2c565b6113a76040519a8b95602087019161081a565b9161081a565b03601f1981018752866106bf565b849516610dc4565b60f81b6001600160f81b03191690565b5f1a91611183565b535b602081519101206114de565b6001600160a01b0316610100840152565b9094929390841061146c576114679382826114276114216111be6114399661145998610ee1565b98610db3565b92611431826110b0565b931691610cd9565b60405195869491929160f81b6001600160f81b0319169060208601611152565b03601f1981018352826106bf565b6113dd565b6114679382826114276114216111be6114889661145998610ee1565b60405195869491929160f01b6001600160f01b0319169060208601611117565b6114d86114d36114cd6114c76114c06112e489610db3565b8786610bf0565b90611044565b60f01c90565b611070565b93611355565b919260ff8116601b811061151f575b509160209360809260ff5f9560405194855216868401526040830152606082015282805260015afa15610b52575f5190565b601b9150929192019060ff8211610d7657919060206114ed565b90918060409360208452816020850152848401375f828201840152601f01601f1916010190565b909167ffffffffffffffff82165f5260016020526001600160a01b0360405f20541615611615576115e8926115cb6115bf6115bf6115b260209667ffffffffffffffff165f52600160205260405f2090565b546001600160a01b031690565b6001600160a01b031690565b906040518095819482936322bb937360e11b845260048401611539565b03915afa908115610b52575f916115fd575090565b610306915060203d8111610b4b57610b3c81836106bf565b60405162461bcd60e51b815260206004820152601660248201527f636861696e207665726966696572206e6f7420736574000000000000000000006044820152606490fd5b6fffffffffffffffffffffffffffffffff19903581811693926010811061168057505050565b60100360031b82901b16169150565b7fffffffffffffffff00000000000000000000000000000000000000000000000090358181169392600881106116c457505050565b60080360031b82901b16169150565b604051929160a0840167ffffffffffffffff8111858210176106ba576117e1916111ed916040525f86528060208701945f86526117dc604089015f81526117b260608b01915f835260808c019960608b528c61173b611735610e3e8a8a610c49565b60801b90565b61176f61175a61175461174e8c8c610c5c565b9061165a565b60801c90565b6fffffffffffffffffffffffffffffffff1690565b179052611782611735610e3e8989610c6f565b61179561175a61175461174e8b8b610c82565b1790526117a8610e5b610e558888610c95565b63ffffffff169052565b6117ce6117c86117c28686610ca8565b9061168f565b60c01c90565b67ffffffffffffffff169052565b610cbb565b9052565b5f54906001600160a01b0380911691826001600160a01b03198216175f55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b604051906118378261069e565b5f6020838281520152565b61184a61182a565b5060208151916040519261185d8461069e565b835201602082015290565b67ffffffffffffffff81116106ba5760051b60200190565b9060018201809211610d7657565b91908201809211610d7657565b5f198114610d765760010190565b6118b28161197a565b15610140576118c081611a77565b6118c981611868565b916118d760405193846106bf565b818352601f196118e683611868565b015f5b81811061196357505061190a60208092015161190481611b5d565b9061188e565b5f905b83821061191b575050505090565b6119578161192b61195d93611ad8565b90611934610701565b8281528187820152611946868a610ff6565b526119518589610ff6565b5061188e565b9161189b565b9061190d565b60209061196e61182a565b828288010152016118e9565b80511561199957602060c0910151515f1a1061199557600190565b5f90565b505f90565b6015815103610140576119b86001600160a01b03916119bc565b1690565b805180151590816119f2575b5015610140576119d7906119fe565b905190602081106119e6575090565b6020036101000a900490565b6021915011155f6119c8565b906020820191611a0e8351611b5d565b925190838201809211610d765751928303928311610d76579190565b80511561014057611a3d610306916119fe565b611a498193929361077c565b92611a5760405194856106bf565b818452601f19611a668361077c565b013660208601378360200190611bca565b805115611999575f9060208101908151611a9081611b5d565b8101809111610d7657915190518101809111610d765791905b828110611ab65750905090565b611abf81611ad8565b8101809111610d7657611ad2909161189b565b90611aa9565b80515f1a906080821015611aed575050600190565b60b8821015611b085750611b03610306916110ce565b611880565b9060c0811015611b2c5760b51991600160b783602003016101000a91015104010190565b9060f8821015611b435750611b03610306916110bf565b60010151602082900360f7016101000a90040160f5190190565b515f1a6080811015611b6e57505f90565b60b881108015611ba5575b15611b845750600190565b60c0811015611b9957611b0361030691611108565b611b03610306916110f9565b5060c08110158015611b79575060f88110611b79565b601f8111610d76576101000a90565b929091928315611c415792915b602093848410611c0c5780518252848101809111610d7657938101809111610d765791601f198101908111610d765791611bd7565b9193509180611c1a57505050565b611c2e611c29611c33926110dd565b611bbb565b6110eb565b905182518216911916179052565b5091505056fea2646970667358221220e53fab3bf367559242dc910f3bdd7f85977c02712a119a90b675b113008211bc64736f6c63430008150033",
}

// TxVerifierABI is the input ABI used to generate the binding from.
// Deprecated: Use TxVerifierMetaData.ABI instead.
var TxVerifierABI = TxVerifierMetaData.ABI

// TxVerifierBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TxVerifierMetaData.Bin instead.
var TxVerifierBin = TxVerifierMetaData.Bin

// DeployTxVerifier deploys a new Ethereum contract, binding an instance of TxVerifier to it.
func DeployTxVerifier(auth *bind.TransactOpts, backend bind.ContractBackend, _blockChunks common.Address) (common.Address, *types.Transaction, *TxVerifier, error) {
	parsed, err := TxVerifierMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TxVerifierBin), backend, _blockChunks)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TxVerifier{TxVerifierCaller: TxVerifierCaller{contract: contract}, TxVerifierTransactor: TxVerifierTransactor{contract: contract}, TxVerifierFilterer: TxVerifierFilterer{contract: contract}}, nil
}

// TxVerifier is an auto generated Go binding around an Ethereum contract.
type TxVerifier struct {
	TxVerifierCaller     // Read-only binding to the contract
	TxVerifierTransactor // Write-only binding to the contract
	TxVerifierFilterer   // Log filterer for contract events
}

// TxVerifierCaller is an auto generated read-only Go binding around an Ethereum contract.
type TxVerifierCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TxVerifierTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TxVerifierTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TxVerifierFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TxVerifierFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TxVerifierSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TxVerifierSession struct {
	Contract     *TxVerifier       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TxVerifierCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TxVerifierCallerSession struct {
	Contract *TxVerifierCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// TxVerifierTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TxVerifierTransactorSession struct {
	Contract     *TxVerifierTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// TxVerifierRaw is an auto generated low-level Go binding around an Ethereum contract.
type TxVerifierRaw struct {
	Contract *TxVerifier // Generic contract binding to access the raw methods on
}

// TxVerifierCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TxVerifierCallerRaw struct {
	Contract *TxVerifierCaller // Generic read-only contract binding to access the raw methods on
}

// TxVerifierTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TxVerifierTransactorRaw struct {
	Contract *TxVerifierTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTxVerifier creates a new instance of TxVerifier, bound to a specific deployed contract.
func NewTxVerifier(address common.Address, backend bind.ContractBackend) (*TxVerifier, error) {
	contract, err := bindTxVerifier(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TxVerifier{TxVerifierCaller: TxVerifierCaller{contract: contract}, TxVerifierTransactor: TxVerifierTransactor{contract: contract}, TxVerifierFilterer: TxVerifierFilterer{contract: contract}}, nil
}

// NewTxVerifierCaller creates a new read-only instance of TxVerifier, bound to a specific deployed contract.
func NewTxVerifierCaller(address common.Address, caller bind.ContractCaller) (*TxVerifierCaller, error) {
	contract, err := bindTxVerifier(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TxVerifierCaller{contract: contract}, nil
}

// NewTxVerifierTransactor creates a new write-only instance of TxVerifier, bound to a specific deployed contract.
func NewTxVerifierTransactor(address common.Address, transactor bind.ContractTransactor) (*TxVerifierTransactor, error) {
	contract, err := bindTxVerifier(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TxVerifierTransactor{contract: contract}, nil
}

// NewTxVerifierFilterer creates a new log filterer instance of TxVerifier, bound to a specific deployed contract.
func NewTxVerifierFilterer(address common.Address, filterer bind.ContractFilterer) (*TxVerifierFilterer, error) {
	contract, err := bindTxVerifier(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TxVerifierFilterer{contract: contract}, nil
}

// bindTxVerifier binds a generic wrapper to an already deployed contract.
func bindTxVerifier(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TxVerifierMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TxVerifier *TxVerifierRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TxVerifier.Contract.TxVerifierCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TxVerifier *TxVerifierRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TxVerifier.Contract.TxVerifierTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TxVerifier *TxVerifierRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TxVerifier.Contract.TxVerifierTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TxVerifier *TxVerifierCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TxVerifier.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TxVerifier *TxVerifierTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TxVerifier.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TxVerifier *TxVerifierTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TxVerifier.Contract.contract.Transact(opts, method, params...)
}

// BlockChunks is a free data retrieval call binding the contract method 0x724796ed.
//
// Solidity: function blockChunks() view returns(address)
func (_TxVerifier *TxVerifierCaller) BlockChunks(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TxVerifier.contract.Call(opts, &out, "blockChunks")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BlockChunks is a free data retrieval call binding the contract method 0x724796ed.
//
// Solidity: function blockChunks() view returns(address)
func (_TxVerifier *TxVerifierSession) BlockChunks() (common.Address, error) {
	return _TxVerifier.Contract.BlockChunks(&_TxVerifier.CallOpts)
}

// BlockChunks is a free data retrieval call binding the contract method 0x724796ed.
//
// Solidity: function blockChunks() view returns(address)
func (_TxVerifier *TxVerifierCallerSession) BlockChunks() (common.Address, error) {
	return _TxVerifier.Contract.BlockChunks(&_TxVerifier.CallOpts)
}

// DecodeTx is a free data retrieval call binding the contract method 0xdae029d3.
//
// Solidity: function decodeTx(bytes txRaw) pure returns((uint64,uint64,uint256,uint256,uint256,address,uint256,bytes,address,uint32,bytes32,uint64) info)
func (_TxVerifier *TxVerifierCaller) DecodeTx(opts *bind.CallOpts, txRaw []byte) (ITxVerifierTxInfo, error) {
	var out []interface{}
	err := _TxVerifier.contract.Call(opts, &out, "decodeTx", txRaw)

	if err != nil {
		return *new(ITxVerifierTxInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(ITxVerifierTxInfo)).(*ITxVerifierTxInfo)

	return out0, err

}

// DecodeTx is a free data retrieval call binding the contract method 0xdae029d3.
//
// Solidity: function decodeTx(bytes txRaw) pure returns((uint64,uint64,uint256,uint256,uint256,address,uint256,bytes,address,uint32,bytes32,uint64) info)
func (_TxVerifier *TxVerifierSession) DecodeTx(txRaw []byte) (ITxVerifierTxInfo, error) {
	return _TxVerifier.Contract.DecodeTx(&_TxVerifier.CallOpts, txRaw)
}

// DecodeTx is a free data retrieval call binding the contract method 0xdae029d3.
//
// Solidity: function decodeTx(bytes txRaw) pure returns((uint64,uint64,uint256,uint256,uint256,address,uint256,bytes,address,uint32,bytes32,uint64) info)
func (_TxVerifier *TxVerifierCallerSession) DecodeTx(txRaw []byte) (ITxVerifierTxInfo, error) {
	return _TxVerifier.Contract.DecodeTx(&_TxVerifier.CallOpts, txRaw)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TxVerifier *TxVerifierCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TxVerifier.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TxVerifier *TxVerifierSession) Owner() (common.Address, error) {
	return _TxVerifier.Contract.Owner(&_TxVerifier.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TxVerifier *TxVerifierCallerSession) Owner() (common.Address, error) {
	return _TxVerifier.Contract.Owner(&_TxVerifier.CallOpts)
}

// VerifierAddresses is a free data retrieval call binding the contract method 0xf5cec6af.
//
// Solidity: function verifierAddresses(uint64 ) view returns(address)
func (_TxVerifier *TxVerifierCaller) VerifierAddresses(opts *bind.CallOpts, arg0 uint64) (common.Address, error) {
	var out []interface{}
	err := _TxVerifier.contract.Call(opts, &out, "verifierAddresses", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VerifierAddresses is a free data retrieval call binding the contract method 0xf5cec6af.
//
// Solidity: function verifierAddresses(uint64 ) view returns(address)
func (_TxVerifier *TxVerifierSession) VerifierAddresses(arg0 uint64) (common.Address, error) {
	return _TxVerifier.Contract.VerifierAddresses(&_TxVerifier.CallOpts, arg0)
}

// VerifierAddresses is a free data retrieval call binding the contract method 0xf5cec6af.
//
// Solidity: function verifierAddresses(uint64 ) view returns(address)
func (_TxVerifier *TxVerifierCallerSession) VerifierAddresses(arg0 uint64) (common.Address, error) {
	return _TxVerifier.Contract.VerifierAddresses(&_TxVerifier.CallOpts, arg0)
}

// VerifyTx is a free data retrieval call binding the contract method 0xa8da8d69.
//
// Solidity: function verifyTx(bytes txRaw, bytes proofData, bytes auxiBlkVerifyInfo) view returns((uint64,uint64,uint256,uint256,uint256,address,uint256,bytes,address,uint32,bytes32,uint64) info)
func (_TxVerifier *TxVerifierCaller) VerifyTx(opts *bind.CallOpts, txRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (ITxVerifierTxInfo, error) {
	var out []interface{}
	err := _TxVerifier.contract.Call(opts, &out, "verifyTx", txRaw, proofData, auxiBlkVerifyInfo)

	if err != nil {
		return *new(ITxVerifierTxInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(ITxVerifierTxInfo)).(*ITxVerifierTxInfo)

	return out0, err

}

// VerifyTx is a free data retrieval call binding the contract method 0xa8da8d69.
//
// Solidity: function verifyTx(bytes txRaw, bytes proofData, bytes auxiBlkVerifyInfo) view returns((uint64,uint64,uint256,uint256,uint256,address,uint256,bytes,address,uint32,bytes32,uint64) info)
func (_TxVerifier *TxVerifierSession) VerifyTx(txRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (ITxVerifierTxInfo, error) {
	return _TxVerifier.Contract.VerifyTx(&_TxVerifier.CallOpts, txRaw, proofData, auxiBlkVerifyInfo)
}

// VerifyTx is a free data retrieval call binding the contract method 0xa8da8d69.
//
// Solidity: function verifyTx(bytes txRaw, bytes proofData, bytes auxiBlkVerifyInfo) view returns((uint64,uint64,uint256,uint256,uint256,address,uint256,bytes,address,uint32,bytes32,uint64) info)
func (_TxVerifier *TxVerifierCallerSession) VerifyTx(txRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (ITxVerifierTxInfo, error) {
	return _TxVerifier.Contract.VerifyTx(&_TxVerifier.CallOpts, txRaw, proofData, auxiBlkVerifyInfo)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TxVerifier *TxVerifierTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TxVerifier.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TxVerifier *TxVerifierSession) RenounceOwnership() (*types.Transaction, error) {
	return _TxVerifier.Contract.RenounceOwnership(&_TxVerifier.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TxVerifier *TxVerifierTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TxVerifier.Contract.RenounceOwnership(&_TxVerifier.TransactOpts)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TxVerifier *TxVerifierTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TxVerifier.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TxVerifier *TxVerifierSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TxVerifier.Contract.TransferOwnership(&_TxVerifier.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TxVerifier *TxVerifierTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TxVerifier.Contract.TransferOwnership(&_TxVerifier.TransactOpts, newOwner)
}

// UpdateBlockChunks is a paid mutator transaction binding the contract method 0x1eeb86da.
//
// Solidity: function updateBlockChunks(address _blockChunks) returns()
func (_TxVerifier *TxVerifierTransactor) UpdateBlockChunks(opts *bind.TransactOpts, _blockChunks common.Address) (*types.Transaction, error) {
	return _TxVerifier.contract.Transact(opts, "updateBlockChunks", _blockChunks)
}

// UpdateBlockChunks is a paid mutator transaction binding the contract method 0x1eeb86da.
//
// Solidity: function updateBlockChunks(address _blockChunks) returns()
func (_TxVerifier *TxVerifierSession) UpdateBlockChunks(_blockChunks common.Address) (*types.Transaction, error) {
	return _TxVerifier.Contract.UpdateBlockChunks(&_TxVerifier.TransactOpts, _blockChunks)
}

// UpdateBlockChunks is a paid mutator transaction binding the contract method 0x1eeb86da.
//
// Solidity: function updateBlockChunks(address _blockChunks) returns()
func (_TxVerifier *TxVerifierTransactorSession) UpdateBlockChunks(_blockChunks common.Address) (*types.Transaction, error) {
	return _TxVerifier.Contract.UpdateBlockChunks(&_TxVerifier.TransactOpts, _blockChunks)
}

// UpdateVerifierAddress is a paid mutator transaction binding the contract method 0xec4ffc52.
//
// Solidity: function updateVerifierAddress(uint64 _chainId, address _verifierAddress) returns()
func (_TxVerifier *TxVerifierTransactor) UpdateVerifierAddress(opts *bind.TransactOpts, _chainId uint64, _verifierAddress common.Address) (*types.Transaction, error) {
	return _TxVerifier.contract.Transact(opts, "updateVerifierAddress", _chainId, _verifierAddress)
}

// UpdateVerifierAddress is a paid mutator transaction binding the contract method 0xec4ffc52.
//
// Solidity: function updateVerifierAddress(uint64 _chainId, address _verifierAddress) returns()
func (_TxVerifier *TxVerifierSession) UpdateVerifierAddress(_chainId uint64, _verifierAddress common.Address) (*types.Transaction, error) {
	return _TxVerifier.Contract.UpdateVerifierAddress(&_TxVerifier.TransactOpts, _chainId, _verifierAddress)
}

// UpdateVerifierAddress is a paid mutator transaction binding the contract method 0xec4ffc52.
//
// Solidity: function updateVerifierAddress(uint64 _chainId, address _verifierAddress) returns()
func (_TxVerifier *TxVerifierTransactorSession) UpdateVerifierAddress(_chainId uint64, _verifierAddress common.Address) (*types.Transaction, error) {
	return _TxVerifier.Contract.UpdateVerifierAddress(&_TxVerifier.TransactOpts, _chainId, _verifierAddress)
}

// VerifyTxAndLog is a paid mutator transaction binding the contract method 0x361108de.
//
// Solidity: function verifyTxAndLog(bytes txRaw, bytes proofData, bytes auxiBlkVerifyInfo) returns((uint64,uint64,uint256,uint256,uint256,address,uint256,bytes,address,uint32,bytes32,uint64) info)
func (_TxVerifier *TxVerifierTransactor) VerifyTxAndLog(opts *bind.TransactOpts, txRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (*types.Transaction, error) {
	return _TxVerifier.contract.Transact(opts, "verifyTxAndLog", txRaw, proofData, auxiBlkVerifyInfo)
}

// VerifyTxAndLog is a paid mutator transaction binding the contract method 0x361108de.
//
// Solidity: function verifyTxAndLog(bytes txRaw, bytes proofData, bytes auxiBlkVerifyInfo) returns((uint64,uint64,uint256,uint256,uint256,address,uint256,bytes,address,uint32,bytes32,uint64) info)
func (_TxVerifier *TxVerifierSession) VerifyTxAndLog(txRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (*types.Transaction, error) {
	return _TxVerifier.Contract.VerifyTxAndLog(&_TxVerifier.TransactOpts, txRaw, proofData, auxiBlkVerifyInfo)
}

// VerifyTxAndLog is a paid mutator transaction binding the contract method 0x361108de.
//
// Solidity: function verifyTxAndLog(bytes txRaw, bytes proofData, bytes auxiBlkVerifyInfo) returns((uint64,uint64,uint256,uint256,uint256,address,uint256,bytes,address,uint32,bytes32,uint64) info)
func (_TxVerifier *TxVerifierTransactorSession) VerifyTxAndLog(txRaw []byte, proofData []byte, auxiBlkVerifyInfo []byte) (*types.Transaction, error) {
	return _TxVerifier.Contract.VerifyTxAndLog(&_TxVerifier.TransactOpts, txRaw, proofData, auxiBlkVerifyInfo)
}

// TxVerifierOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TxVerifier contract.
type TxVerifierOwnershipTransferredIterator struct {
	Event *TxVerifierOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TxVerifierOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TxVerifierOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TxVerifierOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TxVerifierOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TxVerifierOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TxVerifierOwnershipTransferred represents a OwnershipTransferred event raised by the TxVerifier contract.
type TxVerifierOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TxVerifier *TxVerifierFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TxVerifierOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TxVerifier.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TxVerifierOwnershipTransferredIterator{contract: _TxVerifier.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TxVerifier *TxVerifierFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TxVerifierOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TxVerifier.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TxVerifierOwnershipTransferred)
				if err := _TxVerifier.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TxVerifier *TxVerifierFilterer) ParseOwnershipTransferred(log types.Log) (*TxVerifierOwnershipTransferred, error) {
	event := new(TxVerifierOwnershipTransferred)
	if err := _TxVerifier.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TxVerifierUpdateBlockChunksIterator is returned from FilterUpdateBlockChunks and is used to iterate over the raw logs and unpacked data for UpdateBlockChunks events raised by the TxVerifier contract.
type TxVerifierUpdateBlockChunksIterator struct {
	Event *TxVerifierUpdateBlockChunks // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TxVerifierUpdateBlockChunksIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TxVerifierUpdateBlockChunks)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TxVerifierUpdateBlockChunks)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TxVerifierUpdateBlockChunksIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TxVerifierUpdateBlockChunksIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TxVerifierUpdateBlockChunks represents a UpdateBlockChunks event raised by the TxVerifier contract.
type TxVerifierUpdateBlockChunks struct {
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateBlockChunks is a free log retrieval operation binding the contract event 0x0addee9cb6aa9328bbfbe8282179a6737af344619320736b6918af70b6a94a98.
//
// Solidity: event UpdateBlockChunks(address newAddress)
func (_TxVerifier *TxVerifierFilterer) FilterUpdateBlockChunks(opts *bind.FilterOpts) (*TxVerifierUpdateBlockChunksIterator, error) {

	logs, sub, err := _TxVerifier.contract.FilterLogs(opts, "UpdateBlockChunks")
	if err != nil {
		return nil, err
	}
	return &TxVerifierUpdateBlockChunksIterator{contract: _TxVerifier.contract, event: "UpdateBlockChunks", logs: logs, sub: sub}, nil
}

// WatchUpdateBlockChunks is a free log subscription operation binding the contract event 0x0addee9cb6aa9328bbfbe8282179a6737af344619320736b6918af70b6a94a98.
//
// Solidity: event UpdateBlockChunks(address newAddress)
func (_TxVerifier *TxVerifierFilterer) WatchUpdateBlockChunks(opts *bind.WatchOpts, sink chan<- *TxVerifierUpdateBlockChunks) (event.Subscription, error) {

	logs, sub, err := _TxVerifier.contract.WatchLogs(opts, "UpdateBlockChunks")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TxVerifierUpdateBlockChunks)
				if err := _TxVerifier.contract.UnpackLog(event, "UpdateBlockChunks", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateBlockChunks is a log parse operation binding the contract event 0x0addee9cb6aa9328bbfbe8282179a6737af344619320736b6918af70b6a94a98.
//
// Solidity: event UpdateBlockChunks(address newAddress)
func (_TxVerifier *TxVerifierFilterer) ParseUpdateBlockChunks(log types.Log) (*TxVerifierUpdateBlockChunks, error) {
	event := new(TxVerifierUpdateBlockChunks)
	if err := _TxVerifier.contract.UnpackLog(event, "UpdateBlockChunks", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TxVerifierUpdateVerifierAddressIterator is returned from FilterUpdateVerifierAddress and is used to iterate over the raw logs and unpacked data for UpdateVerifierAddress events raised by the TxVerifier contract.
type TxVerifierUpdateVerifierAddressIterator struct {
	Event *TxVerifierUpdateVerifierAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TxVerifierUpdateVerifierAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TxVerifierUpdateVerifierAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TxVerifierUpdateVerifierAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TxVerifierUpdateVerifierAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TxVerifierUpdateVerifierAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TxVerifierUpdateVerifierAddress represents a UpdateVerifierAddress event raised by the TxVerifier contract.
type TxVerifierUpdateVerifierAddress struct {
	ChainId    uint64
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateVerifierAddress is a free log retrieval operation binding the contract event 0xfd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f.
//
// Solidity: event UpdateVerifierAddress(uint64 chainId, address newAddress)
func (_TxVerifier *TxVerifierFilterer) FilterUpdateVerifierAddress(opts *bind.FilterOpts) (*TxVerifierUpdateVerifierAddressIterator, error) {

	logs, sub, err := _TxVerifier.contract.FilterLogs(opts, "UpdateVerifierAddress")
	if err != nil {
		return nil, err
	}
	return &TxVerifierUpdateVerifierAddressIterator{contract: _TxVerifier.contract, event: "UpdateVerifierAddress", logs: logs, sub: sub}, nil
}

// WatchUpdateVerifierAddress is a free log subscription operation binding the contract event 0xfd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f.
//
// Solidity: event UpdateVerifierAddress(uint64 chainId, address newAddress)
func (_TxVerifier *TxVerifierFilterer) WatchUpdateVerifierAddress(opts *bind.WatchOpts, sink chan<- *TxVerifierUpdateVerifierAddress) (event.Subscription, error) {

	logs, sub, err := _TxVerifier.contract.WatchLogs(opts, "UpdateVerifierAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TxVerifierUpdateVerifierAddress)
				if err := _TxVerifier.contract.UnpackLog(event, "UpdateVerifierAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateVerifierAddress is a log parse operation binding the contract event 0xfd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f.
//
// Solidity: event UpdateVerifierAddress(uint64 chainId, address newAddress)
func (_TxVerifier *TxVerifierFilterer) ParseUpdateVerifierAddress(log types.Log) (*TxVerifierUpdateVerifierAddress, error) {
	event := new(TxVerifierUpdateVerifierAddress)
	if err := _TxVerifier.contract.UnpackLog(event, "UpdateVerifierAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TxVerifierVerifiedTxIterator is returned from FilterVerifiedTx and is used to iterate over the raw logs and unpacked data for VerifiedTx events raised by the TxVerifier contract.
type TxVerifierVerifiedTxIterator struct {
	Event *TxVerifierVerifiedTx // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TxVerifierVerifiedTxIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TxVerifierVerifiedTx)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TxVerifierVerifiedTx)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TxVerifierVerifiedTxIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TxVerifierVerifiedTxIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TxVerifierVerifiedTx represents a VerifiedTx event raised by the TxVerifier contract.
type TxVerifierVerifiedTx struct {
	ChainId uint64
	TxHash  [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterVerifiedTx is a free log retrieval operation binding the contract event 0xe1df3a08ea1a2c110c3f833d615f7e02814f32a3418b98f011888d0516669888.
//
// Solidity: event VerifiedTx(uint64 chainId, bytes32 txHash)
func (_TxVerifier *TxVerifierFilterer) FilterVerifiedTx(opts *bind.FilterOpts) (*TxVerifierVerifiedTxIterator, error) {

	logs, sub, err := _TxVerifier.contract.FilterLogs(opts, "VerifiedTx")
	if err != nil {
		return nil, err
	}
	return &TxVerifierVerifiedTxIterator{contract: _TxVerifier.contract, event: "VerifiedTx", logs: logs, sub: sub}, nil
}

// WatchVerifiedTx is a free log subscription operation binding the contract event 0xe1df3a08ea1a2c110c3f833d615f7e02814f32a3418b98f011888d0516669888.
//
// Solidity: event VerifiedTx(uint64 chainId, bytes32 txHash)
func (_TxVerifier *TxVerifierFilterer) WatchVerifiedTx(opts *bind.WatchOpts, sink chan<- *TxVerifierVerifiedTx) (event.Subscription, error) {

	logs, sub, err := _TxVerifier.contract.WatchLogs(opts, "VerifiedTx")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TxVerifierVerifiedTx)
				if err := _TxVerifier.contract.UnpackLog(event, "VerifiedTx", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifiedTx is a log parse operation binding the contract event 0xe1df3a08ea1a2c110c3f833d615f7e02814f32a3418b98f011888d0516669888.
//
// Solidity: event VerifiedTx(uint64 chainId, bytes32 txHash)
func (_TxVerifier *TxVerifierFilterer) ParseVerifiedTx(log types.Log) (*TxVerifierVerifiedTx, error) {
	event := new(TxVerifierVerifiedTx)
	if err := _TxVerifier.contract.UnpackLog(event, "VerifiedTx", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UniswapSumVolumeMetaData contains all meta data concerning the UniswapSumVolume contract.
var UniswapSumVolumeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractISMT\",\"name\":\"_smtContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"fromChain\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"volume\",\"type\":\"uint256\"}],\"name\":\"SumVolume\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractISMT\",\"name\":\"smtContract\",\"type\":\"address\"}],\"name\":\"UpdateSmtContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdateVerifierAddress\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"batchTierVkHashes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"}],\"name\":\"getAttestedSwapSumVolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"hashes\",\"type\":\"bytes\"}],\"name\":\"setBatchTierVkHashes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smtContract\",\"outputs\":[{\"internalType\":\"contractISMT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"submitUniswapSumVolumeProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractISMT\",\"name\":\"_smtContract\",\"type\":\"address\"}],\"name\":\"updateSmtContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_verifierAddress\",\"type\":\"address\"}],\"name\":\"updateVerifierAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"verifierAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"volumes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x6080346100a457601f610be838819003918201601f19168301916001600160401b038311848410176100a8578084926020946040528339810103126100a457516001600160a01b0390818116908190036100a4575f5460018060a01b03199033828216175f55604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a36009541617600955610b2b90816100bd8239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60406080815260049081361015610014575f80fd5b5f91823560e01c9081631396511e146109685781633221aec6146109405781633f220b9414610914578163715018a6146108b45781638d35aa9d146104215781638da5cb5b146103fb578163950650c1146103c4578163b1ec4c40146103c4578163bd88d14614610261578163ec4ffc52146101c9578163f2fde38b146100e7575063f5cec6af146100a4575f80fd5b346100e35760203660031901126100e3576001600160a01b038160209367ffffffffffffffff6100d26109db565b168152600885522054169051908152f35b5080fd5b9050346101c55760203660031901126101c557610102610a24565b908354906001600160a01b038083169361011d338614610aaa565b1693841561015c5750506001600160a01b031916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b5050346100e357806003193601126100e3576101e36109db565b906024356001600160a01b0380821680920361025d577ffd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f9361023267ffffffffffffffff928754163314610aaa565b16908185526008602052828520816001600160a01b031982541617905582519182526020820152a180f35b8480fd5b919050346101c557602090816003193601126103c057823567ffffffffffffffff811161025d5761029590369085016109f6565b90916102ac6001600160a01b038754163314610aaa565b60059382851c9460069283871161037e5750875b8681106102cb578880f35b80821b81810484148215171561036b576001908183018084116103585780851b9080820487149015171561035857808211610354578781116103545788820135919003858110610344575b5090858310156103315782015561032c90610a88565b6102c0565b634e487b7160e01b8b5260328a5260248bfd5b5f1990860360031b1b165f610316565b8b80fd5b634e487b7160e01b8c5260118b5260248cfd5b634e487b7160e01b8a526011895260248afd5b5162461bcd60e51b8152808801839052601160248201527f65786365656473206d61782074696572730000000000000000000000000000006044820152606490fd5b8380fd5b5050346100e35760203660031901126100e357806020926001600160a01b036103eb610a24565b1681526007845220549051908152f35b5050346100e357816003193601126100e3576001600160a01b0360209254169051908152f35b9050346101c557816003193601126101c55761043b6109db565b9160249182359367ffffffffffffffff948581116108b0576104618691369085016109f6565b9690921692838852602095600887526001600160a01b039384878b2054161561086e57908891868b526008895285888c205416898c8a51928380926322bb937360e11b8252848a8301528888830152816044998a92818a85850137828201840152601f01601f191681010301915afa908115610864578c91610847575b50156108065787519460c08601908111868210176107f4578852888501998886019160a087019180610160116107f0576101408201356080890152610180918183116107e35761016c81013560601c89526101a0918083116107ec578e93820135809452806101c0116107ec576101e0928184116107e7576101d083013560801c9083013560801b178652610200928184116107e75782013560608b0152610220116107e35701358252156107a25780511561076157518b908c5b6006811061073b575b5050156106fa57858551168b5260078952878b20546106b9578886600954169151848a518094819363080cdb0b60e11b83528c8a840152878301525afa9081156106af578b91610682575b501561064157897fb7f36b9639c04a7740988446e70ac14b79468c98e600ae501a19320c9307756e60608b8b8b8b8b8b8551828251168a5260078652848a205551169351928251948552840152820152a180f35b865162461bcd60e51b81529283018890526012908301527f736d7420726f6f74206e6f742076616c6964000000000000000000000000000090820152606490fd5b6106a29150893d8b116106a8575b61069a8183610a3a565b810190610a70565b5f6105ed565b503d610690565b88513d8d823e3d90fd5b875162461bcd60e51b81528085018a9052601c818401527f616c72656164792070726f76656420666f72207468697320757365720000000081850152606490fd5b875162461bcd60e51b81528085018a90526013818401527f766b48617368206973206e6f742076616c69640000000000000000000000000081850152606490fd5b6001818101548314610756575061075190610a88565b610599565b925050505f806105a2565b885162461bcd60e51b81528086018b9052601e818501527f766b486173682073686f756c64206265206c6172676572207468616e2030000081860152606490fd5b885162461bcd60e51b81528086018b9052601e818501527f766f6c756d652073686f756c64206265206c6172676572207468616e2030000081860152606490fd5b8e80fd5b508f80fd5b8f80fd5b8d80fd5b634e487b7160e01b8c5260418552828cfd5b875162461bcd60e51b81528085018a9052600f818401527f70726f6f66206e6f742076616c6964000000000000000000000000000000000081850152606490fd5b61085e91508a3d8c116106a85761069a8183610a3a565b5f6104de565b89513d8e823e3d90fd5b865162461bcd60e51b81528084018990526016818401527f636861696e207665726966696572206e6f7420736574000000000000000000006044820152606490fd5b8680fd5b83346109115780600319360112610911578080546001600160a01b03196001600160a01b038216916108e7338414610aaa565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b9050346101c55760203660031901126101c5573560068110156101c55760209250600101549051908152f35b5050346100e357816003193601126100e3576020906001600160a01b03600954169051908152f35b9050346101c55760203660031901126101c557356001600160a01b03908181168091036103c0577fe93557923617d976d723e8cea6746c85a3a16814eda1d638dcfb7a1fffef0042926109c16020938654163314610aaa565b816001600160a01b0319600954161760095551908152a180f35b6004359067ffffffffffffffff821682036109f257565b5f80fd5b9181601f840112156109f25782359167ffffffffffffffff83116109f257602083818601950101116109f257565b600435906001600160a01b03821682036109f257565b90601f8019910116810190811067ffffffffffffffff821117610a5c57604052565b634e487b7160e01b5f52604160045260245ffd5b908160209103126109f2575180151581036109f25790565b5f198114610a965760010190565b634e487b7160e01b5f52601160045260245ffd5b15610ab157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fdfea26469706673582212208a1b86c95875c2ebf56d810a512d35110da486a124a8191f7bac5f5cdb9037d464736f6c63430008150033",
}

// UniswapSumVolumeABI is the input ABI used to generate the binding from.
// Deprecated: Use UniswapSumVolumeMetaData.ABI instead.
var UniswapSumVolumeABI = UniswapSumVolumeMetaData.ABI

// UniswapSumVolumeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use UniswapSumVolumeMetaData.Bin instead.
var UniswapSumVolumeBin = UniswapSumVolumeMetaData.Bin

// DeployUniswapSumVolume deploys a new Ethereum contract, binding an instance of UniswapSumVolume to it.
func DeployUniswapSumVolume(auth *bind.TransactOpts, backend bind.ContractBackend, _smtContract common.Address) (common.Address, *types.Transaction, *UniswapSumVolume, error) {
	parsed, err := UniswapSumVolumeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(UniswapSumVolumeBin), backend, _smtContract)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UniswapSumVolume{UniswapSumVolumeCaller: UniswapSumVolumeCaller{contract: contract}, UniswapSumVolumeTransactor: UniswapSumVolumeTransactor{contract: contract}, UniswapSumVolumeFilterer: UniswapSumVolumeFilterer{contract: contract}}, nil
}

// UniswapSumVolume is an auto generated Go binding around an Ethereum contract.
type UniswapSumVolume struct {
	UniswapSumVolumeCaller     // Read-only binding to the contract
	UniswapSumVolumeTransactor // Write-only binding to the contract
	UniswapSumVolumeFilterer   // Log filterer for contract events
}

// UniswapSumVolumeCaller is an auto generated read-only Go binding around an Ethereum contract.
type UniswapSumVolumeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UniswapSumVolumeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UniswapSumVolumeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UniswapSumVolumeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UniswapSumVolumeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UniswapSumVolumeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UniswapSumVolumeSession struct {
	Contract     *UniswapSumVolume // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// UniswapSumVolumeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UniswapSumVolumeCallerSession struct {
	Contract *UniswapSumVolumeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// UniswapSumVolumeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UniswapSumVolumeTransactorSession struct {
	Contract     *UniswapSumVolumeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// UniswapSumVolumeRaw is an auto generated low-level Go binding around an Ethereum contract.
type UniswapSumVolumeRaw struct {
	Contract *UniswapSumVolume // Generic contract binding to access the raw methods on
}

// UniswapSumVolumeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UniswapSumVolumeCallerRaw struct {
	Contract *UniswapSumVolumeCaller // Generic read-only contract binding to access the raw methods on
}

// UniswapSumVolumeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UniswapSumVolumeTransactorRaw struct {
	Contract *UniswapSumVolumeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUniswapSumVolume creates a new instance of UniswapSumVolume, bound to a specific deployed contract.
func NewUniswapSumVolume(address common.Address, backend bind.ContractBackend) (*UniswapSumVolume, error) {
	contract, err := bindUniswapSumVolume(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UniswapSumVolume{UniswapSumVolumeCaller: UniswapSumVolumeCaller{contract: contract}, UniswapSumVolumeTransactor: UniswapSumVolumeTransactor{contract: contract}, UniswapSumVolumeFilterer: UniswapSumVolumeFilterer{contract: contract}}, nil
}

// NewUniswapSumVolumeCaller creates a new read-only instance of UniswapSumVolume, bound to a specific deployed contract.
func NewUniswapSumVolumeCaller(address common.Address, caller bind.ContractCaller) (*UniswapSumVolumeCaller, error) {
	contract, err := bindUniswapSumVolume(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UniswapSumVolumeCaller{contract: contract}, nil
}

// NewUniswapSumVolumeTransactor creates a new write-only instance of UniswapSumVolume, bound to a specific deployed contract.
func NewUniswapSumVolumeTransactor(address common.Address, transactor bind.ContractTransactor) (*UniswapSumVolumeTransactor, error) {
	contract, err := bindUniswapSumVolume(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UniswapSumVolumeTransactor{contract: contract}, nil
}

// NewUniswapSumVolumeFilterer creates a new log filterer instance of UniswapSumVolume, bound to a specific deployed contract.
func NewUniswapSumVolumeFilterer(address common.Address, filterer bind.ContractFilterer) (*UniswapSumVolumeFilterer, error) {
	contract, err := bindUniswapSumVolume(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UniswapSumVolumeFilterer{contract: contract}, nil
}

// bindUniswapSumVolume binds a generic wrapper to an already deployed contract.
func bindUniswapSumVolume(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := UniswapSumVolumeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UniswapSumVolume *UniswapSumVolumeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UniswapSumVolume.Contract.UniswapSumVolumeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UniswapSumVolume *UniswapSumVolumeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UniswapSumVolume.Contract.UniswapSumVolumeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UniswapSumVolume *UniswapSumVolumeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UniswapSumVolume.Contract.UniswapSumVolumeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UniswapSumVolume *UniswapSumVolumeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UniswapSumVolume.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UniswapSumVolume *UniswapSumVolumeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UniswapSumVolume.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UniswapSumVolume *UniswapSumVolumeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UniswapSumVolume.Contract.contract.Transact(opts, method, params...)
}

// BatchTierVkHashes is a free data retrieval call binding the contract method 0x3f220b94.
//
// Solidity: function batchTierVkHashes(uint256 ) view returns(uint256)
func (_UniswapSumVolume *UniswapSumVolumeCaller) BatchTierVkHashes(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _UniswapSumVolume.contract.Call(opts, &out, "batchTierVkHashes", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BatchTierVkHashes is a free data retrieval call binding the contract method 0x3f220b94.
//
// Solidity: function batchTierVkHashes(uint256 ) view returns(uint256)
func (_UniswapSumVolume *UniswapSumVolumeSession) BatchTierVkHashes(arg0 *big.Int) (*big.Int, error) {
	return _UniswapSumVolume.Contract.BatchTierVkHashes(&_UniswapSumVolume.CallOpts, arg0)
}

// BatchTierVkHashes is a free data retrieval call binding the contract method 0x3f220b94.
//
// Solidity: function batchTierVkHashes(uint256 ) view returns(uint256)
func (_UniswapSumVolume *UniswapSumVolumeCallerSession) BatchTierVkHashes(arg0 *big.Int) (*big.Int, error) {
	return _UniswapSumVolume.Contract.BatchTierVkHashes(&_UniswapSumVolume.CallOpts, arg0)
}

// GetAttestedSwapSumVolume is a free data retrieval call binding the contract method 0x950650c1.
//
// Solidity: function getAttestedSwapSumVolume(address swapper) view returns(uint256)
func (_UniswapSumVolume *UniswapSumVolumeCaller) GetAttestedSwapSumVolume(opts *bind.CallOpts, swapper common.Address) (*big.Int, error) {
	var out []interface{}
	err := _UniswapSumVolume.contract.Call(opts, &out, "getAttestedSwapSumVolume", swapper)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAttestedSwapSumVolume is a free data retrieval call binding the contract method 0x950650c1.
//
// Solidity: function getAttestedSwapSumVolume(address swapper) view returns(uint256)
func (_UniswapSumVolume *UniswapSumVolumeSession) GetAttestedSwapSumVolume(swapper common.Address) (*big.Int, error) {
	return _UniswapSumVolume.Contract.GetAttestedSwapSumVolume(&_UniswapSumVolume.CallOpts, swapper)
}

// GetAttestedSwapSumVolume is a free data retrieval call binding the contract method 0x950650c1.
//
// Solidity: function getAttestedSwapSumVolume(address swapper) view returns(uint256)
func (_UniswapSumVolume *UniswapSumVolumeCallerSession) GetAttestedSwapSumVolume(swapper common.Address) (*big.Int, error) {
	return _UniswapSumVolume.Contract.GetAttestedSwapSumVolume(&_UniswapSumVolume.CallOpts, swapper)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_UniswapSumVolume *UniswapSumVolumeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _UniswapSumVolume.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_UniswapSumVolume *UniswapSumVolumeSession) Owner() (common.Address, error) {
	return _UniswapSumVolume.Contract.Owner(&_UniswapSumVolume.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_UniswapSumVolume *UniswapSumVolumeCallerSession) Owner() (common.Address, error) {
	return _UniswapSumVolume.Contract.Owner(&_UniswapSumVolume.CallOpts)
}

// SmtContract is a free data retrieval call binding the contract method 0x3221aec6.
//
// Solidity: function smtContract() view returns(address)
func (_UniswapSumVolume *UniswapSumVolumeCaller) SmtContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _UniswapSumVolume.contract.Call(opts, &out, "smtContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// SmtContract is a free data retrieval call binding the contract method 0x3221aec6.
//
// Solidity: function smtContract() view returns(address)
func (_UniswapSumVolume *UniswapSumVolumeSession) SmtContract() (common.Address, error) {
	return _UniswapSumVolume.Contract.SmtContract(&_UniswapSumVolume.CallOpts)
}

// SmtContract is a free data retrieval call binding the contract method 0x3221aec6.
//
// Solidity: function smtContract() view returns(address)
func (_UniswapSumVolume *UniswapSumVolumeCallerSession) SmtContract() (common.Address, error) {
	return _UniswapSumVolume.Contract.SmtContract(&_UniswapSumVolume.CallOpts)
}

// VerifierAddresses is a free data retrieval call binding the contract method 0xf5cec6af.
//
// Solidity: function verifierAddresses(uint64 ) view returns(address)
func (_UniswapSumVolume *UniswapSumVolumeCaller) VerifierAddresses(opts *bind.CallOpts, arg0 uint64) (common.Address, error) {
	var out []interface{}
	err := _UniswapSumVolume.contract.Call(opts, &out, "verifierAddresses", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// VerifierAddresses is a free data retrieval call binding the contract method 0xf5cec6af.
//
// Solidity: function verifierAddresses(uint64 ) view returns(address)
func (_UniswapSumVolume *UniswapSumVolumeSession) VerifierAddresses(arg0 uint64) (common.Address, error) {
	return _UniswapSumVolume.Contract.VerifierAddresses(&_UniswapSumVolume.CallOpts, arg0)
}

// VerifierAddresses is a free data retrieval call binding the contract method 0xf5cec6af.
//
// Solidity: function verifierAddresses(uint64 ) view returns(address)
func (_UniswapSumVolume *UniswapSumVolumeCallerSession) VerifierAddresses(arg0 uint64) (common.Address, error) {
	return _UniswapSumVolume.Contract.VerifierAddresses(&_UniswapSumVolume.CallOpts, arg0)
}

// Volumes is a free data retrieval call binding the contract method 0xb1ec4c40.
//
// Solidity: function volumes(address ) view returns(uint256)
func (_UniswapSumVolume *UniswapSumVolumeCaller) Volumes(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _UniswapSumVolume.contract.Call(opts, &out, "volumes", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Volumes is a free data retrieval call binding the contract method 0xb1ec4c40.
//
// Solidity: function volumes(address ) view returns(uint256)
func (_UniswapSumVolume *UniswapSumVolumeSession) Volumes(arg0 common.Address) (*big.Int, error) {
	return _UniswapSumVolume.Contract.Volumes(&_UniswapSumVolume.CallOpts, arg0)
}

// Volumes is a free data retrieval call binding the contract method 0xb1ec4c40.
//
// Solidity: function volumes(address ) view returns(uint256)
func (_UniswapSumVolume *UniswapSumVolumeCallerSession) Volumes(arg0 common.Address) (*big.Int, error) {
	return _UniswapSumVolume.Contract.Volumes(&_UniswapSumVolume.CallOpts, arg0)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_UniswapSumVolume *UniswapSumVolumeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UniswapSumVolume.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_UniswapSumVolume *UniswapSumVolumeSession) RenounceOwnership() (*types.Transaction, error) {
	return _UniswapSumVolume.Contract.RenounceOwnership(&_UniswapSumVolume.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_UniswapSumVolume *UniswapSumVolumeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _UniswapSumVolume.Contract.RenounceOwnership(&_UniswapSumVolume.TransactOpts)
}

// SetBatchTierVkHashes is a paid mutator transaction binding the contract method 0xbd88d146.
//
// Solidity: function setBatchTierVkHashes(bytes hashes) returns()
func (_UniswapSumVolume *UniswapSumVolumeTransactor) SetBatchTierVkHashes(opts *bind.TransactOpts, hashes []byte) (*types.Transaction, error) {
	return _UniswapSumVolume.contract.Transact(opts, "setBatchTierVkHashes", hashes)
}

// SetBatchTierVkHashes is a paid mutator transaction binding the contract method 0xbd88d146.
//
// Solidity: function setBatchTierVkHashes(bytes hashes) returns()
func (_UniswapSumVolume *UniswapSumVolumeSession) SetBatchTierVkHashes(hashes []byte) (*types.Transaction, error) {
	return _UniswapSumVolume.Contract.SetBatchTierVkHashes(&_UniswapSumVolume.TransactOpts, hashes)
}

// SetBatchTierVkHashes is a paid mutator transaction binding the contract method 0xbd88d146.
//
// Solidity: function setBatchTierVkHashes(bytes hashes) returns()
func (_UniswapSumVolume *UniswapSumVolumeTransactorSession) SetBatchTierVkHashes(hashes []byte) (*types.Transaction, error) {
	return _UniswapSumVolume.Contract.SetBatchTierVkHashes(&_UniswapSumVolume.TransactOpts, hashes)
}

// SubmitUniswapSumVolumeProof is a paid mutator transaction binding the contract method 0x8d35aa9d.
//
// Solidity: function submitUniswapSumVolumeProof(uint64 _chainId, bytes _proof) returns()
func (_UniswapSumVolume *UniswapSumVolumeTransactor) SubmitUniswapSumVolumeProof(opts *bind.TransactOpts, _chainId uint64, _proof []byte) (*types.Transaction, error) {
	return _UniswapSumVolume.contract.Transact(opts, "submitUniswapSumVolumeProof", _chainId, _proof)
}

// SubmitUniswapSumVolumeProof is a paid mutator transaction binding the contract method 0x8d35aa9d.
//
// Solidity: function submitUniswapSumVolumeProof(uint64 _chainId, bytes _proof) returns()
func (_UniswapSumVolume *UniswapSumVolumeSession) SubmitUniswapSumVolumeProof(_chainId uint64, _proof []byte) (*types.Transaction, error) {
	return _UniswapSumVolume.Contract.SubmitUniswapSumVolumeProof(&_UniswapSumVolume.TransactOpts, _chainId, _proof)
}

// SubmitUniswapSumVolumeProof is a paid mutator transaction binding the contract method 0x8d35aa9d.
//
// Solidity: function submitUniswapSumVolumeProof(uint64 _chainId, bytes _proof) returns()
func (_UniswapSumVolume *UniswapSumVolumeTransactorSession) SubmitUniswapSumVolumeProof(_chainId uint64, _proof []byte) (*types.Transaction, error) {
	return _UniswapSumVolume.Contract.SubmitUniswapSumVolumeProof(&_UniswapSumVolume.TransactOpts, _chainId, _proof)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_UniswapSumVolume *UniswapSumVolumeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _UniswapSumVolume.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_UniswapSumVolume *UniswapSumVolumeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _UniswapSumVolume.Contract.TransferOwnership(&_UniswapSumVolume.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_UniswapSumVolume *UniswapSumVolumeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _UniswapSumVolume.Contract.TransferOwnership(&_UniswapSumVolume.TransactOpts, newOwner)
}

// UpdateSmtContract is a paid mutator transaction binding the contract method 0x1396511e.
//
// Solidity: function updateSmtContract(address _smtContract) returns()
func (_UniswapSumVolume *UniswapSumVolumeTransactor) UpdateSmtContract(opts *bind.TransactOpts, _smtContract common.Address) (*types.Transaction, error) {
	return _UniswapSumVolume.contract.Transact(opts, "updateSmtContract", _smtContract)
}

// UpdateSmtContract is a paid mutator transaction binding the contract method 0x1396511e.
//
// Solidity: function updateSmtContract(address _smtContract) returns()
func (_UniswapSumVolume *UniswapSumVolumeSession) UpdateSmtContract(_smtContract common.Address) (*types.Transaction, error) {
	return _UniswapSumVolume.Contract.UpdateSmtContract(&_UniswapSumVolume.TransactOpts, _smtContract)
}

// UpdateSmtContract is a paid mutator transaction binding the contract method 0x1396511e.
//
// Solidity: function updateSmtContract(address _smtContract) returns()
func (_UniswapSumVolume *UniswapSumVolumeTransactorSession) UpdateSmtContract(_smtContract common.Address) (*types.Transaction, error) {
	return _UniswapSumVolume.Contract.UpdateSmtContract(&_UniswapSumVolume.TransactOpts, _smtContract)
}

// UpdateVerifierAddress is a paid mutator transaction binding the contract method 0xec4ffc52.
//
// Solidity: function updateVerifierAddress(uint64 _chainId, address _verifierAddress) returns()
func (_UniswapSumVolume *UniswapSumVolumeTransactor) UpdateVerifierAddress(opts *bind.TransactOpts, _chainId uint64, _verifierAddress common.Address) (*types.Transaction, error) {
	return _UniswapSumVolume.contract.Transact(opts, "updateVerifierAddress", _chainId, _verifierAddress)
}

// UpdateVerifierAddress is a paid mutator transaction binding the contract method 0xec4ffc52.
//
// Solidity: function updateVerifierAddress(uint64 _chainId, address _verifierAddress) returns()
func (_UniswapSumVolume *UniswapSumVolumeSession) UpdateVerifierAddress(_chainId uint64, _verifierAddress common.Address) (*types.Transaction, error) {
	return _UniswapSumVolume.Contract.UpdateVerifierAddress(&_UniswapSumVolume.TransactOpts, _chainId, _verifierAddress)
}

// UpdateVerifierAddress is a paid mutator transaction binding the contract method 0xec4ffc52.
//
// Solidity: function updateVerifierAddress(uint64 _chainId, address _verifierAddress) returns()
func (_UniswapSumVolume *UniswapSumVolumeTransactorSession) UpdateVerifierAddress(_chainId uint64, _verifierAddress common.Address) (*types.Transaction, error) {
	return _UniswapSumVolume.Contract.UpdateVerifierAddress(&_UniswapSumVolume.TransactOpts, _chainId, _verifierAddress)
}

// UniswapSumVolumeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the UniswapSumVolume contract.
type UniswapSumVolumeOwnershipTransferredIterator struct {
	Event *UniswapSumVolumeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UniswapSumVolumeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UniswapSumVolumeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UniswapSumVolumeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UniswapSumVolumeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UniswapSumVolumeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UniswapSumVolumeOwnershipTransferred represents a OwnershipTransferred event raised by the UniswapSumVolume contract.
type UniswapSumVolumeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_UniswapSumVolume *UniswapSumVolumeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*UniswapSumVolumeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _UniswapSumVolume.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &UniswapSumVolumeOwnershipTransferredIterator{contract: _UniswapSumVolume.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_UniswapSumVolume *UniswapSumVolumeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *UniswapSumVolumeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _UniswapSumVolume.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UniswapSumVolumeOwnershipTransferred)
				if err := _UniswapSumVolume.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_UniswapSumVolume *UniswapSumVolumeFilterer) ParseOwnershipTransferred(log types.Log) (*UniswapSumVolumeOwnershipTransferred, error) {
	event := new(UniswapSumVolumeOwnershipTransferred)
	if err := _UniswapSumVolume.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UniswapSumVolumeSumVolumeIterator is returned from FilterSumVolume and is used to iterate over the raw logs and unpacked data for SumVolume events raised by the UniswapSumVolume contract.
type UniswapSumVolumeSumVolumeIterator struct {
	Event *UniswapSumVolumeSumVolume // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UniswapSumVolumeSumVolumeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UniswapSumVolumeSumVolume)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UniswapSumVolumeSumVolume)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UniswapSumVolumeSumVolumeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UniswapSumVolumeSumVolumeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UniswapSumVolumeSumVolume represents a SumVolume event raised by the UniswapSumVolume contract.
type UniswapSumVolumeSumVolume struct {
	User      common.Address
	FromChain uint64
	Volume    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSumVolume is a free log retrieval operation binding the contract event 0xb7f36b9639c04a7740988446e70ac14b79468c98e600ae501a19320c9307756e.
//
// Solidity: event SumVolume(address user, uint64 fromChain, uint256 volume)
func (_UniswapSumVolume *UniswapSumVolumeFilterer) FilterSumVolume(opts *bind.FilterOpts) (*UniswapSumVolumeSumVolumeIterator, error) {

	logs, sub, err := _UniswapSumVolume.contract.FilterLogs(opts, "SumVolume")
	if err != nil {
		return nil, err
	}
	return &UniswapSumVolumeSumVolumeIterator{contract: _UniswapSumVolume.contract, event: "SumVolume", logs: logs, sub: sub}, nil
}

// WatchSumVolume is a free log subscription operation binding the contract event 0xb7f36b9639c04a7740988446e70ac14b79468c98e600ae501a19320c9307756e.
//
// Solidity: event SumVolume(address user, uint64 fromChain, uint256 volume)
func (_UniswapSumVolume *UniswapSumVolumeFilterer) WatchSumVolume(opts *bind.WatchOpts, sink chan<- *UniswapSumVolumeSumVolume) (event.Subscription, error) {

	logs, sub, err := _UniswapSumVolume.contract.WatchLogs(opts, "SumVolume")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UniswapSumVolumeSumVolume)
				if err := _UniswapSumVolume.contract.UnpackLog(event, "SumVolume", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSumVolume is a log parse operation binding the contract event 0xb7f36b9639c04a7740988446e70ac14b79468c98e600ae501a19320c9307756e.
//
// Solidity: event SumVolume(address user, uint64 fromChain, uint256 volume)
func (_UniswapSumVolume *UniswapSumVolumeFilterer) ParseSumVolume(log types.Log) (*UniswapSumVolumeSumVolume, error) {
	event := new(UniswapSumVolumeSumVolume)
	if err := _UniswapSumVolume.contract.UnpackLog(event, "SumVolume", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UniswapSumVolumeUpdateSmtContractIterator is returned from FilterUpdateSmtContract and is used to iterate over the raw logs and unpacked data for UpdateSmtContract events raised by the UniswapSumVolume contract.
type UniswapSumVolumeUpdateSmtContractIterator struct {
	Event *UniswapSumVolumeUpdateSmtContract // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UniswapSumVolumeUpdateSmtContractIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UniswapSumVolumeUpdateSmtContract)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UniswapSumVolumeUpdateSmtContract)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UniswapSumVolumeUpdateSmtContractIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UniswapSumVolumeUpdateSmtContractIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UniswapSumVolumeUpdateSmtContract represents a UpdateSmtContract event raised by the UniswapSumVolume contract.
type UniswapSumVolumeUpdateSmtContract struct {
	SmtContract common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterUpdateSmtContract is a free log retrieval operation binding the contract event 0xe93557923617d976d723e8cea6746c85a3a16814eda1d638dcfb7a1fffef0042.
//
// Solidity: event UpdateSmtContract(address smtContract)
func (_UniswapSumVolume *UniswapSumVolumeFilterer) FilterUpdateSmtContract(opts *bind.FilterOpts) (*UniswapSumVolumeUpdateSmtContractIterator, error) {

	logs, sub, err := _UniswapSumVolume.contract.FilterLogs(opts, "UpdateSmtContract")
	if err != nil {
		return nil, err
	}
	return &UniswapSumVolumeUpdateSmtContractIterator{contract: _UniswapSumVolume.contract, event: "UpdateSmtContract", logs: logs, sub: sub}, nil
}

// WatchUpdateSmtContract is a free log subscription operation binding the contract event 0xe93557923617d976d723e8cea6746c85a3a16814eda1d638dcfb7a1fffef0042.
//
// Solidity: event UpdateSmtContract(address smtContract)
func (_UniswapSumVolume *UniswapSumVolumeFilterer) WatchUpdateSmtContract(opts *bind.WatchOpts, sink chan<- *UniswapSumVolumeUpdateSmtContract) (event.Subscription, error) {

	logs, sub, err := _UniswapSumVolume.contract.WatchLogs(opts, "UpdateSmtContract")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UniswapSumVolumeUpdateSmtContract)
				if err := _UniswapSumVolume.contract.UnpackLog(event, "UpdateSmtContract", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateSmtContract is a log parse operation binding the contract event 0xe93557923617d976d723e8cea6746c85a3a16814eda1d638dcfb7a1fffef0042.
//
// Solidity: event UpdateSmtContract(address smtContract)
func (_UniswapSumVolume *UniswapSumVolumeFilterer) ParseUpdateSmtContract(log types.Log) (*UniswapSumVolumeUpdateSmtContract, error) {
	event := new(UniswapSumVolumeUpdateSmtContract)
	if err := _UniswapSumVolume.contract.UnpackLog(event, "UpdateSmtContract", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UniswapSumVolumeUpdateVerifierAddressIterator is returned from FilterUpdateVerifierAddress and is used to iterate over the raw logs and unpacked data for UpdateVerifierAddress events raised by the UniswapSumVolume contract.
type UniswapSumVolumeUpdateVerifierAddressIterator struct {
	Event *UniswapSumVolumeUpdateVerifierAddress // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UniswapSumVolumeUpdateVerifierAddressIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UniswapSumVolumeUpdateVerifierAddress)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UniswapSumVolumeUpdateVerifierAddress)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UniswapSumVolumeUpdateVerifierAddressIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UniswapSumVolumeUpdateVerifierAddressIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UniswapSumVolumeUpdateVerifierAddress represents a UpdateVerifierAddress event raised by the UniswapSumVolume contract.
type UniswapSumVolumeUpdateVerifierAddress struct {
	ChainId    uint64
	NewAddress common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUpdateVerifierAddress is a free log retrieval operation binding the contract event 0xfd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f.
//
// Solidity: event UpdateVerifierAddress(uint64 chainId, address newAddress)
func (_UniswapSumVolume *UniswapSumVolumeFilterer) FilterUpdateVerifierAddress(opts *bind.FilterOpts) (*UniswapSumVolumeUpdateVerifierAddressIterator, error) {

	logs, sub, err := _UniswapSumVolume.contract.FilterLogs(opts, "UpdateVerifierAddress")
	if err != nil {
		return nil, err
	}
	return &UniswapSumVolumeUpdateVerifierAddressIterator{contract: _UniswapSumVolume.contract, event: "UpdateVerifierAddress", logs: logs, sub: sub}, nil
}

// WatchUpdateVerifierAddress is a free log subscription operation binding the contract event 0xfd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f.
//
// Solidity: event UpdateVerifierAddress(uint64 chainId, address newAddress)
func (_UniswapSumVolume *UniswapSumVolumeFilterer) WatchUpdateVerifierAddress(opts *bind.WatchOpts, sink chan<- *UniswapSumVolumeUpdateVerifierAddress) (event.Subscription, error) {

	logs, sub, err := _UniswapSumVolume.contract.WatchLogs(opts, "UpdateVerifierAddress")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UniswapSumVolumeUpdateVerifierAddress)
				if err := _UniswapSumVolume.contract.UnpackLog(event, "UpdateVerifierAddress", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpdateVerifierAddress is a log parse operation binding the contract event 0xfd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f.
//
// Solidity: event UpdateVerifierAddress(uint64 chainId, address newAddress)
func (_UniswapSumVolume *UniswapSumVolumeFilterer) ParseUpdateVerifierAddress(log types.Log) (*UniswapSumVolumeUpdateVerifierAddress, error) {
	event := new(UniswapSumVolumeUpdateVerifierAddress)
	if err := _UniswapSumVolume.contract.UnpackLog(event, "UpdateVerifierAddress", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UniswapVolumeMetaData contains all meta data concerning the UniswapVolume contract.
var UniswapVolumeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractITxVerifier\",\"name\":\"_txVerifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enumUniswapVolume.TierName\",\"name\":\"tier\",\"type\":\"uint8\"}],\"name\":\"VerifiedSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumUniswapVolume.TierName[]\",\"name\":\"_names\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"_nfts\",\"type\":\"address[]\"}],\"name\":\"setTierNFTs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractITxVerifier\",\"name\":\"_txVerifier\",\"type\":\"address\"}],\"name\":\"setTxVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimal\",\"type\":\"uint8\"}],\"name\":\"setUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"setUniversalRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"name\":\"setWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_tx\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_auxiBlkVerifyInfo\",\"type\":\"bytes\"}],\"name\":\"submitUniswapTxProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enumUniswapVolume.TierName\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tierNFTs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txVerifier\",\"outputs\":[{\"internalType\":\"contractITxVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"universalRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"usdcSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enumUniswapVolume.TierName\",\"name\":\"tier\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userTier\",\"outputs\":[{\"internalType\":\"enumUniswapVolume.TierName\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60803461012d57601f61186538819003918201601f19168301916001600160401b038311848410176101315780849260209460405283398101031261012d57516001600160a01b038082169182900361012d575f5460018060a01b03199133838316175f553391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3601e6020610097610145565b828152017f657865637574652862797465732c62797465735b5d2c75696e7432353629000081522060e01c6006549067ffffffff00000000601660206100db610145565b828152017f657865637574652862797465732c62797465735b5d290000000000000000000081522060c01c169160018060401b0319161717600655600154161760015560405161170090816101658239f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b60408051919082016001600160401b038111838210176101315760405256fe60806040526004361015610011575f80fd5b5f3560e01c80630f2ef5661461011457806321c7557c1461010f57806323a45c931461010a57806327c5fc1314610105578063337ad58f14610100578063488c8719146100fb5780634cf88b22146100f65780634de359e8146100f1578063715018a6146100ec5780638da5cb5b146100e757806395123685146100e2578063953cadad146100dd5780639f38dbf9146100d8578063a6806682146100d3578063e36fc1eb146100ce5763f2fde38b146100c9575f80fd5b610ac8565b610a82565b610a4e565b6109e3565b61098b565b610870565b61081a565b6107ba565b610774565b6104a8565b6103e6565b6102e8565b61027a565b610254565b610204565b610140565b67ffffffffffffffff81160361012b57565b5f80fd5b6001600160a01b0381160361012b57565b3461012b57606036600319011261012b5760043561015d81610119565b6024356101698161012f565b6044359060ff821680920361012b576101c39067ffffffffffffffff5f9461019c6001600160a01b038754163314610e43565b168452600460205260408420906001600160a01b03166001600160a01b0319825416179055565b6005602052604082209060ff1982541617905580f35b600711156101e357565b634e487b7160e01b5f52602160045260245ffd5b9060078210156101e35752565b3461012b57602036600319011261012b576001600160a01b036004356102298161012f565b165f526008602052602060ff60405f20541661024860405180926101f7565bf35b5f91031261012b57565b3461012b575f36600319011261012b5760206001600160a01b0360015416604051908152f35b3461012b57602036600319011261012b5767ffffffffffffffff6004356102a081610119565b165f52600460205260206001600160a01b0360405f205416604051908152f35b604090600319011261012b576004356102d881610119565b906024356102e58161012f565b90565b3461012b5761034067ffffffffffffffff610302366102c0565b91906103196001600160a01b035f54163314610e43565b165f52600260205260405f20906001600160a01b03166001600160a01b0319825416179055565b005b634e487b7160e01b5f52604160045260245ffd5b67ffffffffffffffff811161036a57604052565b610342565b90601f8019910116810190811067ffffffffffffffff82111761036a57604052565b60405190610180820182811067ffffffffffffffff82111761036a57604052565b67ffffffffffffffff811161036a57601f01601f191660200190565b9081526040810192916103e491602001906101f7565b565b3461012b57604036600319011261012b5760043561040381610119565b6024359067ffffffffffffffff821161012b573660238301121561012b57816004013590610430826103b2565b9161043e604051938461036f565b808352366024828601011161012b576020815f92602461046697018387013784010152611159565b90610476604051928392836103ce565b0390f35b9181601f8401121561012b5782359167ffffffffffffffff831161012b576020838186019501011161012b57565b3461012b57606036600319011261012b5767ffffffffffffffff6004803582811161012b576104da903690830161047a565b929060243582811161012b576104f3903690850161047a565b909260443590811161012b5761050c903690860161047a565b939091856105316105256001546001600160a01b031690565b6001600160a01b031690565b9261055660405197889687958694631b08846f60e11b86525f9d8e9b8c988801610d05565b03925af1908115610749578391610752575b506105d061058060a08301516001600160a01b031690565b6001600160a01b036105c86105256105bb6105a3875167ffffffffffffffff1690565b67ffffffffffffffff165f52600260205260405f2090565b546001600160a01b031690565b911614610d4a565b610100810161061c61060d6106066105ef84516001600160a01b031690565b6001600160a01b03165f52600860205260405f2090565b5460ff1690565b610616816101d9565b15610d96565b61063c610631835167ffffffffffffffff1690565b60e084015190611159565b610659816106546105ef86516001600160a01b031690565b610dec565b8561066c6105256105256105bb85610a37565b84516001600160a01b031690803b1561074e576106ae9783604051809a819582946335313c2160e11b845283019190916001600160a01b036020820193169052565b03925af1918215610749577fbb5393be0f0ddf4fc1bad219916823c8ae4d5b88379239a2f761043b51a8a63b9561072a93610730575b5061071e61016061070e610700885167ffffffffffffffff1690565b96516001600160a01b031690565b96015167ffffffffffffffff1690565b60405195869586610e04565b0390a180f35b8061073d61074392610356565b8061024a565b5f6106e4565b610d3f565b8280fd5b61076e91503d8085833e610766818361036f565b810190610bfd565b5f610568565b3461012b57602036600319011261012b5767ffffffffffffffff60043561079a81610119565b165f52600260205260206001600160a01b0360405f205416604051908152f35b3461012b575f80600319360112610817578080546001600160a01b03196001600160a01b038216916107ed338414610e43565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b3461012b575f36600319011261012b5760206001600160a01b035f5416604051908152f35b9181601f8401121561012b5782359167ffffffffffffffff831161012b576020808501948460051b01011161012b57565b3461012b57604036600319011261012b5767ffffffffffffffff60043581811161012b576108a290369060040161083f565b9160243590811161012b576108bb90369060040161083f565b6108d36001600160a01b035f94939454163314610e43565b808403610946575f5b8481106108e557005b6109316108fb6108f6838588610eb6565b610ecb565b61091661091161090c858a89610eb6565b610ed5565b610a37565b906001600160a01b03166001600160a01b0319825416179055565b5f198114610941576001016108dc565b610e8e565b60405162461bcd60e51b815260206004820152600f60248201527f6c656e677468206d69736d6174636800000000000000000000000000000000006044820152606490fd5b3461012b5761034067ffffffffffffffff6109a5366102c0565b91906109bc6001600160a01b035f54163314610e43565b165f52600360205260405f20906001600160a01b03166001600160a01b0319825416179055565b3461012b57602036600319011261012b57600435610a008161012f565b6001600160a01b0390610a17825f54163314610e43565b166001600160a01b031960015416176001555f80f35b6007111561012b57565b60078110156101e3575f52600760205260405f2090565b3461012b57602036600319011261012b5760206001600160a01b03610a7860043561091181610a2d565b5416604051908152f35b3461012b57602036600319011261012b5767ffffffffffffffff600435610aa881610119565b165f52600360205260206001600160a01b0360405f205416604051908152f35b3461012b57602036600319011261012b57600435610ae58161012f565b6001600160a01b03610afb815f54163314610e43565b811615610b0b5761034090611477565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b51906103e482610119565b51906103e48261012f565b919080601f8401121561012b57825190610ba5826103b2565b91610bb3604051938461036f565b80835260209182828701011161012b575f5b818110610bd95750825f9394955001015290565b8581018301518482018401528201610bc5565b519063ffffffff8216820361012b57565b60208183031261012b57805167ffffffffffffffff9182821161012b5701906101808284031261012b57610c2f610391565b92610c3983610b76565b8452610c4760208401610b76565b6020850152604083015160408501526060830151606085015260808301516080850152610c7660a08401610b81565b60a085015260c083015160c085015260e083015191821161012b57610c9c918301610b8c565b60e0830152610100610caf818301610b81565b90830152610120610cc1818301610bec565b908301526101408082015190830152610cde610160809201610b76565b9082015290565b908060209392818452848401375f828201840152601f01601f1916010190565b94929093610d236102e59795610d3194606089526060890191610ce5565b918683036020880152610ce5565b926040818503910152610ce5565b6040513d5f823e3d90fd5b15610d5157565b60405162461bcd60e51b815260206004820152601260248201527f696e76616c696420746f206164647265737300000000000000000000000000006044820152606490fd5b15610d9d57565b60405162461bcd60e51b815260206004820152602160248201527f7377617020616c72656164792070726f76656420666f722074686973207573656044820152603960f91b6064820152608490fd5b9060078110156101e35760ff80198354169116179055565b90936103e4946080939796946001600160a01b0360a085019967ffffffffffffffff8094168652166020850152166040830152606082015201906101f7565b15610e4a57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b9190811015610ec65760051b0190565b610ea2565b356102e58161012f565b356102e581610a2d565b15610ee657565b60405162461bcd60e51b815260206004820152600c60248201527f77726f6e67206d6574686f6400000000000000000000000000000000000000006044820152606490fd5b60031981019190821161094157565b909160608284031261012b57815167ffffffffffffffff9081811161012b5784610f65918501610b8c565b936020908185015183811161012b57850181601f8201121561012b5780519380851161036a578460051b9060405195610fa08684018861036f565b865284808701928401019380851161012b57858401925b858410610fce575050505050505060409092015190565b835183811161012b578791610fe8848480948a0101610b8c565b815201930192610fb7565b805115610ec65760200190565b805160011015610ec65760210190565b805160011015610ec65760400190565b1561102757565b60405162461bcd60e51b815260206004820152601360248201527f756e737570706f7274656420636f6d6d616e64000000000000000000000000006044820152606490fd5b919060a08382031261012b5782516110838161012f565b92602081015192604082015192606083015167ffffffffffffffff811161012b576080916110b2918501610b8c565b920151801515810361012b5790565b156110c857565b60405162461bcd60e51b815260206004820152601060248201527f756e737570706f727465642070616972000000000000000000000000000000006044820152606490fd5b1561111457565b60405162461bcd60e51b815260206004820152601060248201527f7a65726f207573646320616d6f756e74000000000000000000000000000000006044820152606490fd5b91906112556111b76111a86112619361119860208201516006549063ffffffff60e01b80911690808360e01b168214928315611364575b505050610edf565b6111a28151610f2b565b90611570565b60208082518301019101610f3a565b5090603f6111ed6111c783610ff3565b517fff000000000000000000000000000000000000000000000000000000000000001690565b60f81c16600b8114801561135a575b15611344575061123361122d611227611246936112206111c7603f60f81b92611000565b1660f81c90565b60ff1690565b92611010565b51915b8015908115611339575b50611020565b6020808251830101910161106c565b509092509290926115fa565b50926112856105256105bb8867ffffffffffffffff165f52600360205260405f2090565b6001600160a01b039283169081036112de5750506102e5926112cb916112c36105256105bb8967ffffffffffffffff165f52600460205260405f2090565b9116146110c1565b80935b6112d982151561110d565b6113df565b9092506113036105256105bb8867ffffffffffffffff165f52600460205260405f2090565b036110c8576102e592611332916112c36105256105bb8967ffffffffffffffff165f52600360205260405f2090565b80936112ce565b60019150145f611240565b91611246915061135390610ff3565b5191611236565b50600a81146111fc565b60c01b161490505f8080611190565b60ff16604d811161094157600a0a90565b90620f4240918083029283040361094157565b90620186a0918083029283040361094157565b90612710918083029283040361094157565b906103e8918083029283040361094157565b908160640291606483040361094157565b6114016106066114069267ffffffffffffffff165f52600560205260405f2090565b611373565b61140f81611384565b821061141c575050600690565b61142581611397565b8210611432575050600590565b61143b816113aa565b8210611448575050600490565b611451816113bc565b821061145e575050600390565b611467906113ce565b111561147257600190565b600290565b5f54906001600160a01b0380911691826001600160a01b03198216175f55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b90601f820180921161094157565b600401908160041161094157565b156114df57565b60405162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606490fd5b1561152b57565b60405162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606490fd5b6115848261157d816114bc565b10156114d8565b6115998151611592846114ca565b1115611524565b816115b05750506040515f81526020810160405290565b60405191601f8116916004831560051b80858701019484860193010101905b8084106115e75750508252601f01601f191660405290565b90928351815260208091019301906115cf565b9061160960148351101561167e565b602082015160601c916017815110611639576037601782015191611631602b8251101561167e565b015160601c91565b60405162461bcd60e51b815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e64730000000000000000000000006044820152606490fd5b1561168557565b60405162461bcd60e51b815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e647300000000000000000000006044820152606490fdfea264697066735822122036774e1ebacaf095fac79c3533dcd1a9fda792f58c99c677bb5c54e26d74dc7564736f6c63430008150033",
}

// UniswapVolumeABI is the input ABI used to generate the binding from.
// Deprecated: Use UniswapVolumeMetaData.ABI instead.
var UniswapVolumeABI = UniswapVolumeMetaData.ABI

// UniswapVolumeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use UniswapVolumeMetaData.Bin instead.
var UniswapVolumeBin = UniswapVolumeMetaData.Bin

// DeployUniswapVolume deploys a new Ethereum contract, binding an instance of UniswapVolume to it.
func DeployUniswapVolume(auth *bind.TransactOpts, backend bind.ContractBackend, _txVerifier common.Address) (common.Address, *types.Transaction, *UniswapVolume, error) {
	parsed, err := UniswapVolumeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(UniswapVolumeBin), backend, _txVerifier)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UniswapVolume{UniswapVolumeCaller: UniswapVolumeCaller{contract: contract}, UniswapVolumeTransactor: UniswapVolumeTransactor{contract: contract}, UniswapVolumeFilterer: UniswapVolumeFilterer{contract: contract}}, nil
}

// UniswapVolume is an auto generated Go binding around an Ethereum contract.
type UniswapVolume struct {
	UniswapVolumeCaller     // Read-only binding to the contract
	UniswapVolumeTransactor // Write-only binding to the contract
	UniswapVolumeFilterer   // Log filterer for contract events
}

// UniswapVolumeCaller is an auto generated read-only Go binding around an Ethereum contract.
type UniswapVolumeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UniswapVolumeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UniswapVolumeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UniswapVolumeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UniswapVolumeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UniswapVolumeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UniswapVolumeSession struct {
	Contract     *UniswapVolume    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// UniswapVolumeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UniswapVolumeCallerSession struct {
	Contract *UniswapVolumeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// UniswapVolumeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UniswapVolumeTransactorSession struct {
	Contract     *UniswapVolumeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// UniswapVolumeRaw is an auto generated low-level Go binding around an Ethereum contract.
type UniswapVolumeRaw struct {
	Contract *UniswapVolume // Generic contract binding to access the raw methods on
}

// UniswapVolumeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UniswapVolumeCallerRaw struct {
	Contract *UniswapVolumeCaller // Generic read-only contract binding to access the raw methods on
}

// UniswapVolumeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UniswapVolumeTransactorRaw struct {
	Contract *UniswapVolumeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUniswapVolume creates a new instance of UniswapVolume, bound to a specific deployed contract.
func NewUniswapVolume(address common.Address, backend bind.ContractBackend) (*UniswapVolume, error) {
	contract, err := bindUniswapVolume(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UniswapVolume{UniswapVolumeCaller: UniswapVolumeCaller{contract: contract}, UniswapVolumeTransactor: UniswapVolumeTransactor{contract: contract}, UniswapVolumeFilterer: UniswapVolumeFilterer{contract: contract}}, nil
}

// NewUniswapVolumeCaller creates a new read-only instance of UniswapVolume, bound to a specific deployed contract.
func NewUniswapVolumeCaller(address common.Address, caller bind.ContractCaller) (*UniswapVolumeCaller, error) {
	contract, err := bindUniswapVolume(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UniswapVolumeCaller{contract: contract}, nil
}

// NewUniswapVolumeTransactor creates a new write-only instance of UniswapVolume, bound to a specific deployed contract.
func NewUniswapVolumeTransactor(address common.Address, transactor bind.ContractTransactor) (*UniswapVolumeTransactor, error) {
	contract, err := bindUniswapVolume(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UniswapVolumeTransactor{contract: contract}, nil
}

// NewUniswapVolumeFilterer creates a new log filterer instance of UniswapVolume, bound to a specific deployed contract.
func NewUniswapVolumeFilterer(address common.Address, filterer bind.ContractFilterer) (*UniswapVolumeFilterer, error) {
	contract, err := bindUniswapVolume(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UniswapVolumeFilterer{contract: contract}, nil
}

// bindUniswapVolume binds a generic wrapper to an already deployed contract.
func bindUniswapVolume(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := UniswapVolumeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UniswapVolume *UniswapVolumeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UniswapVolume.Contract.UniswapVolumeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UniswapVolume *UniswapVolumeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UniswapVolume.Contract.UniswapVolumeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UniswapVolume *UniswapVolumeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UniswapVolume.Contract.UniswapVolumeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UniswapVolume *UniswapVolumeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UniswapVolume.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UniswapVolume *UniswapVolumeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UniswapVolume.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UniswapVolume *UniswapVolumeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UniswapVolume.Contract.contract.Transact(opts, method, params...)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_UniswapVolume *UniswapVolumeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _UniswapVolume.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_UniswapVolume *UniswapVolumeSession) Owner() (common.Address, error) {
	return _UniswapVolume.Contract.Owner(&_UniswapVolume.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_UniswapVolume *UniswapVolumeCallerSession) Owner() (common.Address, error) {
	return _UniswapVolume.Contract.Owner(&_UniswapVolume.CallOpts)
}

// TierNFTs is a free data retrieval call binding the contract method 0xa6806682.
//
// Solidity: function tierNFTs(uint8 ) view returns(address)
func (_UniswapVolume *UniswapVolumeCaller) TierNFTs(opts *bind.CallOpts, arg0 uint8) (common.Address, error) {
	var out []interface{}
	err := _UniswapVolume.contract.Call(opts, &out, "tierNFTs", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TierNFTs is a free data retrieval call binding the contract method 0xa6806682.
//
// Solidity: function tierNFTs(uint8 ) view returns(address)
func (_UniswapVolume *UniswapVolumeSession) TierNFTs(arg0 uint8) (common.Address, error) {
	return _UniswapVolume.Contract.TierNFTs(&_UniswapVolume.CallOpts, arg0)
}

// TierNFTs is a free data retrieval call binding the contract method 0xa6806682.
//
// Solidity: function tierNFTs(uint8 ) view returns(address)
func (_UniswapVolume *UniswapVolumeCallerSession) TierNFTs(arg0 uint8) (common.Address, error) {
	return _UniswapVolume.Contract.TierNFTs(&_UniswapVolume.CallOpts, arg0)
}

// TxVerifier is a free data retrieval call binding the contract method 0x23a45c93.
//
// Solidity: function txVerifier() view returns(address)
func (_UniswapVolume *UniswapVolumeCaller) TxVerifier(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _UniswapVolume.contract.Call(opts, &out, "txVerifier")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TxVerifier is a free data retrieval call binding the contract method 0x23a45c93.
//
// Solidity: function txVerifier() view returns(address)
func (_UniswapVolume *UniswapVolumeSession) TxVerifier() (common.Address, error) {
	return _UniswapVolume.Contract.TxVerifier(&_UniswapVolume.CallOpts)
}

// TxVerifier is a free data retrieval call binding the contract method 0x23a45c93.
//
// Solidity: function txVerifier() view returns(address)
func (_UniswapVolume *UniswapVolumeCallerSession) TxVerifier() (common.Address, error) {
	return _UniswapVolume.Contract.TxVerifier(&_UniswapVolume.CallOpts)
}

// UniversalRouter is a free data retrieval call binding the contract method 0x4de359e8.
//
// Solidity: function universalRouter(uint64 ) view returns(address)
func (_UniswapVolume *UniswapVolumeCaller) UniversalRouter(opts *bind.CallOpts, arg0 uint64) (common.Address, error) {
	var out []interface{}
	err := _UniswapVolume.contract.Call(opts, &out, "universalRouter", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UniversalRouter is a free data retrieval call binding the contract method 0x4de359e8.
//
// Solidity: function universalRouter(uint64 ) view returns(address)
func (_UniswapVolume *UniswapVolumeSession) UniversalRouter(arg0 uint64) (common.Address, error) {
	return _UniswapVolume.Contract.UniversalRouter(&_UniswapVolume.CallOpts, arg0)
}

// UniversalRouter is a free data retrieval call binding the contract method 0x4de359e8.
//
// Solidity: function universalRouter(uint64 ) view returns(address)
func (_UniswapVolume *UniswapVolumeCallerSession) UniversalRouter(arg0 uint64) (common.Address, error) {
	return _UniswapVolume.Contract.UniversalRouter(&_UniswapVolume.CallOpts, arg0)
}

// Usdc is a free data retrieval call binding the contract method 0x27c5fc13.
//
// Solidity: function usdc(uint64 ) view returns(address)
func (_UniswapVolume *UniswapVolumeCaller) Usdc(opts *bind.CallOpts, arg0 uint64) (common.Address, error) {
	var out []interface{}
	err := _UniswapVolume.contract.Call(opts, &out, "usdc", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Usdc is a free data retrieval call binding the contract method 0x27c5fc13.
//
// Solidity: function usdc(uint64 ) view returns(address)
func (_UniswapVolume *UniswapVolumeSession) Usdc(arg0 uint64) (common.Address, error) {
	return _UniswapVolume.Contract.Usdc(&_UniswapVolume.CallOpts, arg0)
}

// Usdc is a free data retrieval call binding the contract method 0x27c5fc13.
//
// Solidity: function usdc(uint64 ) view returns(address)
func (_UniswapVolume *UniswapVolumeCallerSession) Usdc(arg0 uint64) (common.Address, error) {
	return _UniswapVolume.Contract.Usdc(&_UniswapVolume.CallOpts, arg0)
}

// UsdcSwapAmount is a free data retrieval call binding the contract method 0x488c8719.
//
// Solidity: function usdcSwapAmount(uint64 _chainId, bytes _data) view returns(uint256 amount, uint8 tier)
func (_UniswapVolume *UniswapVolumeCaller) UsdcSwapAmount(opts *bind.CallOpts, _chainId uint64, _data []byte) (struct {
	Amount *big.Int
	Tier   uint8
}, error) {
	var out []interface{}
	err := _UniswapVolume.contract.Call(opts, &out, "usdcSwapAmount", _chainId, _data)

	outstruct := new(struct {
		Amount *big.Int
		Tier   uint8
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Amount = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Tier = *abi.ConvertType(out[1], new(uint8)).(*uint8)

	return *outstruct, err

}

// UsdcSwapAmount is a free data retrieval call binding the contract method 0x488c8719.
//
// Solidity: function usdcSwapAmount(uint64 _chainId, bytes _data) view returns(uint256 amount, uint8 tier)
func (_UniswapVolume *UniswapVolumeSession) UsdcSwapAmount(_chainId uint64, _data []byte) (struct {
	Amount *big.Int
	Tier   uint8
}, error) {
	return _UniswapVolume.Contract.UsdcSwapAmount(&_UniswapVolume.CallOpts, _chainId, _data)
}

// UsdcSwapAmount is a free data retrieval call binding the contract method 0x488c8719.
//
// Solidity: function usdcSwapAmount(uint64 _chainId, bytes _data) view returns(uint256 amount, uint8 tier)
func (_UniswapVolume *UniswapVolumeCallerSession) UsdcSwapAmount(_chainId uint64, _data []byte) (struct {
	Amount *big.Int
	Tier   uint8
}, error) {
	return _UniswapVolume.Contract.UsdcSwapAmount(&_UniswapVolume.CallOpts, _chainId, _data)
}

// UserTier is a free data retrieval call binding the contract method 0x21c7557c.
//
// Solidity: function userTier(address ) view returns(uint8)
func (_UniswapVolume *UniswapVolumeCaller) UserTier(opts *bind.CallOpts, arg0 common.Address) (uint8, error) {
	var out []interface{}
	err := _UniswapVolume.contract.Call(opts, &out, "userTier", arg0)

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// UserTier is a free data retrieval call binding the contract method 0x21c7557c.
//
// Solidity: function userTier(address ) view returns(uint8)
func (_UniswapVolume *UniswapVolumeSession) UserTier(arg0 common.Address) (uint8, error) {
	return _UniswapVolume.Contract.UserTier(&_UniswapVolume.CallOpts, arg0)
}

// UserTier is a free data retrieval call binding the contract method 0x21c7557c.
//
// Solidity: function userTier(address ) view returns(uint8)
func (_UniswapVolume *UniswapVolumeCallerSession) UserTier(arg0 common.Address) (uint8, error) {
	return _UniswapVolume.Contract.UserTier(&_UniswapVolume.CallOpts, arg0)
}

// Weth is a free data retrieval call binding the contract method 0xe36fc1eb.
//
// Solidity: function weth(uint64 ) view returns(address)
func (_UniswapVolume *UniswapVolumeCaller) Weth(opts *bind.CallOpts, arg0 uint64) (common.Address, error) {
	var out []interface{}
	err := _UniswapVolume.contract.Call(opts, &out, "weth", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Weth is a free data retrieval call binding the contract method 0xe36fc1eb.
//
// Solidity: function weth(uint64 ) view returns(address)
func (_UniswapVolume *UniswapVolumeSession) Weth(arg0 uint64) (common.Address, error) {
	return _UniswapVolume.Contract.Weth(&_UniswapVolume.CallOpts, arg0)
}

// Weth is a free data retrieval call binding the contract method 0xe36fc1eb.
//
// Solidity: function weth(uint64 ) view returns(address)
func (_UniswapVolume *UniswapVolumeCallerSession) Weth(arg0 uint64) (common.Address, error) {
	return _UniswapVolume.Contract.Weth(&_UniswapVolume.CallOpts, arg0)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_UniswapVolume *UniswapVolumeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UniswapVolume.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_UniswapVolume *UniswapVolumeSession) RenounceOwnership() (*types.Transaction, error) {
	return _UniswapVolume.Contract.RenounceOwnership(&_UniswapVolume.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_UniswapVolume *UniswapVolumeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _UniswapVolume.Contract.RenounceOwnership(&_UniswapVolume.TransactOpts)
}

// SetTierNFTs is a paid mutator transaction binding the contract method 0x95123685.
//
// Solidity: function setTierNFTs(uint8[] _names, address[] _nfts) returns()
func (_UniswapVolume *UniswapVolumeTransactor) SetTierNFTs(opts *bind.TransactOpts, _names []uint8, _nfts []common.Address) (*types.Transaction, error) {
	return _UniswapVolume.contract.Transact(opts, "setTierNFTs", _names, _nfts)
}

// SetTierNFTs is a paid mutator transaction binding the contract method 0x95123685.
//
// Solidity: function setTierNFTs(uint8[] _names, address[] _nfts) returns()
func (_UniswapVolume *UniswapVolumeSession) SetTierNFTs(_names []uint8, _nfts []common.Address) (*types.Transaction, error) {
	return _UniswapVolume.Contract.SetTierNFTs(&_UniswapVolume.TransactOpts, _names, _nfts)
}

// SetTierNFTs is a paid mutator transaction binding the contract method 0x95123685.
//
// Solidity: function setTierNFTs(uint8[] _names, address[] _nfts) returns()
func (_UniswapVolume *UniswapVolumeTransactorSession) SetTierNFTs(_names []uint8, _nfts []common.Address) (*types.Transaction, error) {
	return _UniswapVolume.Contract.SetTierNFTs(&_UniswapVolume.TransactOpts, _names, _nfts)
}

// SetTxVerifier is a paid mutator transaction binding the contract method 0x9f38dbf9.
//
// Solidity: function setTxVerifier(address _txVerifier) returns()
func (_UniswapVolume *UniswapVolumeTransactor) SetTxVerifier(opts *bind.TransactOpts, _txVerifier common.Address) (*types.Transaction, error) {
	return _UniswapVolume.contract.Transact(opts, "setTxVerifier", _txVerifier)
}

// SetTxVerifier is a paid mutator transaction binding the contract method 0x9f38dbf9.
//
// Solidity: function setTxVerifier(address _txVerifier) returns()
func (_UniswapVolume *UniswapVolumeSession) SetTxVerifier(_txVerifier common.Address) (*types.Transaction, error) {
	return _UniswapVolume.Contract.SetTxVerifier(&_UniswapVolume.TransactOpts, _txVerifier)
}

// SetTxVerifier is a paid mutator transaction binding the contract method 0x9f38dbf9.
//
// Solidity: function setTxVerifier(address _txVerifier) returns()
func (_UniswapVolume *UniswapVolumeTransactorSession) SetTxVerifier(_txVerifier common.Address) (*types.Transaction, error) {
	return _UniswapVolume.Contract.SetTxVerifier(&_UniswapVolume.TransactOpts, _txVerifier)
}

// SetUSDC is a paid mutator transaction binding the contract method 0x0f2ef566.
//
// Solidity: function setUSDC(uint64 _chainId, address _usdc, uint8 _decimal) returns()
func (_UniswapVolume *UniswapVolumeTransactor) SetUSDC(opts *bind.TransactOpts, _chainId uint64, _usdc common.Address, _decimal uint8) (*types.Transaction, error) {
	return _UniswapVolume.contract.Transact(opts, "setUSDC", _chainId, _usdc, _decimal)
}

// SetUSDC is a paid mutator transaction binding the contract method 0x0f2ef566.
//
// Solidity: function setUSDC(uint64 _chainId, address _usdc, uint8 _decimal) returns()
func (_UniswapVolume *UniswapVolumeSession) SetUSDC(_chainId uint64, _usdc common.Address, _decimal uint8) (*types.Transaction, error) {
	return _UniswapVolume.Contract.SetUSDC(&_UniswapVolume.TransactOpts, _chainId, _usdc, _decimal)
}

// SetUSDC is a paid mutator transaction binding the contract method 0x0f2ef566.
//
// Solidity: function setUSDC(uint64 _chainId, address _usdc, uint8 _decimal) returns()
func (_UniswapVolume *UniswapVolumeTransactorSession) SetUSDC(_chainId uint64, _usdc common.Address, _decimal uint8) (*types.Transaction, error) {
	return _UniswapVolume.Contract.SetUSDC(&_UniswapVolume.TransactOpts, _chainId, _usdc, _decimal)
}

// SetUniversalRouter is a paid mutator transaction binding the contract method 0x337ad58f.
//
// Solidity: function setUniversalRouter(uint64 _chainId, address _router) returns()
func (_UniswapVolume *UniswapVolumeTransactor) SetUniversalRouter(opts *bind.TransactOpts, _chainId uint64, _router common.Address) (*types.Transaction, error) {
	return _UniswapVolume.contract.Transact(opts, "setUniversalRouter", _chainId, _router)
}

// SetUniversalRouter is a paid mutator transaction binding the contract method 0x337ad58f.
//
// Solidity: function setUniversalRouter(uint64 _chainId, address _router) returns()
func (_UniswapVolume *UniswapVolumeSession) SetUniversalRouter(_chainId uint64, _router common.Address) (*types.Transaction, error) {
	return _UniswapVolume.Contract.SetUniversalRouter(&_UniswapVolume.TransactOpts, _chainId, _router)
}

// SetUniversalRouter is a paid mutator transaction binding the contract method 0x337ad58f.
//
// Solidity: function setUniversalRouter(uint64 _chainId, address _router) returns()
func (_UniswapVolume *UniswapVolumeTransactorSession) SetUniversalRouter(_chainId uint64, _router common.Address) (*types.Transaction, error) {
	return _UniswapVolume.Contract.SetUniversalRouter(&_UniswapVolume.TransactOpts, _chainId, _router)
}

// SetWETH is a paid mutator transaction binding the contract method 0x953cadad.
//
// Solidity: function setWETH(uint64 _chainId, address _weth) returns()
func (_UniswapVolume *UniswapVolumeTransactor) SetWETH(opts *bind.TransactOpts, _chainId uint64, _weth common.Address) (*types.Transaction, error) {
	return _UniswapVolume.contract.Transact(opts, "setWETH", _chainId, _weth)
}

// SetWETH is a paid mutator transaction binding the contract method 0x953cadad.
//
// Solidity: function setWETH(uint64 _chainId, address _weth) returns()
func (_UniswapVolume *UniswapVolumeSession) SetWETH(_chainId uint64, _weth common.Address) (*types.Transaction, error) {
	return _UniswapVolume.Contract.SetWETH(&_UniswapVolume.TransactOpts, _chainId, _weth)
}

// SetWETH is a paid mutator transaction binding the contract method 0x953cadad.
//
// Solidity: function setWETH(uint64 _chainId, address _weth) returns()
func (_UniswapVolume *UniswapVolumeTransactorSession) SetWETH(_chainId uint64, _weth common.Address) (*types.Transaction, error) {
	return _UniswapVolume.Contract.SetWETH(&_UniswapVolume.TransactOpts, _chainId, _weth)
}

// SubmitUniswapTxProof is a paid mutator transaction binding the contract method 0x4cf88b22.
//
// Solidity: function submitUniswapTxProof(bytes _tx, bytes _proof, bytes _auxiBlkVerifyInfo) returns()
func (_UniswapVolume *UniswapVolumeTransactor) SubmitUniswapTxProof(opts *bind.TransactOpts, _tx []byte, _proof []byte, _auxiBlkVerifyInfo []byte) (*types.Transaction, error) {
	return _UniswapVolume.contract.Transact(opts, "submitUniswapTxProof", _tx, _proof, _auxiBlkVerifyInfo)
}

// SubmitUniswapTxProof is a paid mutator transaction binding the contract method 0x4cf88b22.
//
// Solidity: function submitUniswapTxProof(bytes _tx, bytes _proof, bytes _auxiBlkVerifyInfo) returns()
func (_UniswapVolume *UniswapVolumeSession) SubmitUniswapTxProof(_tx []byte, _proof []byte, _auxiBlkVerifyInfo []byte) (*types.Transaction, error) {
	return _UniswapVolume.Contract.SubmitUniswapTxProof(&_UniswapVolume.TransactOpts, _tx, _proof, _auxiBlkVerifyInfo)
}

// SubmitUniswapTxProof is a paid mutator transaction binding the contract method 0x4cf88b22.
//
// Solidity: function submitUniswapTxProof(bytes _tx, bytes _proof, bytes _auxiBlkVerifyInfo) returns()
func (_UniswapVolume *UniswapVolumeTransactorSession) SubmitUniswapTxProof(_tx []byte, _proof []byte, _auxiBlkVerifyInfo []byte) (*types.Transaction, error) {
	return _UniswapVolume.Contract.SubmitUniswapTxProof(&_UniswapVolume.TransactOpts, _tx, _proof, _auxiBlkVerifyInfo)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_UniswapVolume *UniswapVolumeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _UniswapVolume.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_UniswapVolume *UniswapVolumeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _UniswapVolume.Contract.TransferOwnership(&_UniswapVolume.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_UniswapVolume *UniswapVolumeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _UniswapVolume.Contract.TransferOwnership(&_UniswapVolume.TransactOpts, newOwner)
}

// UniswapVolumeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the UniswapVolume contract.
type UniswapVolumeOwnershipTransferredIterator struct {
	Event *UniswapVolumeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UniswapVolumeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UniswapVolumeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UniswapVolumeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UniswapVolumeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UniswapVolumeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UniswapVolumeOwnershipTransferred represents a OwnershipTransferred event raised by the UniswapVolume contract.
type UniswapVolumeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_UniswapVolume *UniswapVolumeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*UniswapVolumeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _UniswapVolume.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &UniswapVolumeOwnershipTransferredIterator{contract: _UniswapVolume.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_UniswapVolume *UniswapVolumeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *UniswapVolumeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _UniswapVolume.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UniswapVolumeOwnershipTransferred)
				if err := _UniswapVolume.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_UniswapVolume *UniswapVolumeFilterer) ParseOwnershipTransferred(log types.Log) (*UniswapVolumeOwnershipTransferred, error) {
	event := new(UniswapVolumeOwnershipTransferred)
	if err := _UniswapVolume.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UniswapVolumeVerifiedSwapIterator is returned from FilterVerifiedSwap and is used to iterate over the raw logs and unpacked data for VerifiedSwap events raised by the UniswapVolume contract.
type UniswapVolumeVerifiedSwapIterator struct {
	Event *UniswapVolumeVerifiedSwap // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *UniswapVolumeVerifiedSwapIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(UniswapVolumeVerifiedSwap)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(UniswapVolumeVerifiedSwap)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *UniswapVolumeVerifiedSwapIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *UniswapVolumeVerifiedSwapIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// UniswapVolumeVerifiedSwap represents a VerifiedSwap event raised by the UniswapVolume contract.
type UniswapVolumeVerifiedSwap struct {
	ChainId    uint64
	Trader     common.Address
	Timestamp  uint64
	UsdcAmount *big.Int
	Tier       uint8
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterVerifiedSwap is a free log retrieval operation binding the contract event 0xbb5393be0f0ddf4fc1bad219916823c8ae4d5b88379239a2f761043b51a8a63b.
//
// Solidity: event VerifiedSwap(uint64 chainId, address trader, uint64 timestamp, uint256 usdcAmount, uint8 tier)
func (_UniswapVolume *UniswapVolumeFilterer) FilterVerifiedSwap(opts *bind.FilterOpts) (*UniswapVolumeVerifiedSwapIterator, error) {

	logs, sub, err := _UniswapVolume.contract.FilterLogs(opts, "VerifiedSwap")
	if err != nil {
		return nil, err
	}
	return &UniswapVolumeVerifiedSwapIterator{contract: _UniswapVolume.contract, event: "VerifiedSwap", logs: logs, sub: sub}, nil
}

// WatchVerifiedSwap is a free log subscription operation binding the contract event 0xbb5393be0f0ddf4fc1bad219916823c8ae4d5b88379239a2f761043b51a8a63b.
//
// Solidity: event VerifiedSwap(uint64 chainId, address trader, uint64 timestamp, uint256 usdcAmount, uint8 tier)
func (_UniswapVolume *UniswapVolumeFilterer) WatchVerifiedSwap(opts *bind.WatchOpts, sink chan<- *UniswapVolumeVerifiedSwap) (event.Subscription, error) {

	logs, sub, err := _UniswapVolume.contract.WatchLogs(opts, "VerifiedSwap")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(UniswapVolumeVerifiedSwap)
				if err := _UniswapVolume.contract.UnpackLog(event, "VerifiedSwap", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseVerifiedSwap is a log parse operation binding the contract event 0xbb5393be0f0ddf4fc1bad219916823c8ae4d5b88379239a2f761043b51a8a63b.
//
// Solidity: event VerifiedSwap(uint64 chainId, address trader, uint64 timestamp, uint256 usdcAmount, uint8 tier)
func (_UniswapVolume *UniswapVolumeFilterer) ParseVerifiedSwap(log types.Log) (*UniswapVolumeVerifiedSwap, error) {
	event := new(UniswapVolumeVerifiedSwap)
	if err := _UniswapVolume.contract.UnpackLog(event, "VerifiedSwap", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// UnsafeMathMetaData contains all meta data concerning the UnsafeMath contract.
var UnsafeMathMetaData = &bind.MetaData{
	ABI: "[]",
	Bin: "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212209cba3cb7d4f8f04a9feeea341736aadc490f233141661a01dcb506a2947a53c664736f6c63430008150033",
}

// UnsafeMathABI is the input ABI used to generate the binding from.
// Deprecated: Use UnsafeMathMetaData.ABI instead.
var UnsafeMathABI = UnsafeMathMetaData.ABI

// UnsafeMathBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use UnsafeMathMetaData.Bin instead.
var UnsafeMathBin = UnsafeMathMetaData.Bin

// DeployUnsafeMath deploys a new Ethereum contract, binding an instance of UnsafeMath to it.
func DeployUnsafeMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *UnsafeMath, error) {
	parsed, err := UnsafeMathMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(UnsafeMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &UnsafeMath{UnsafeMathCaller: UnsafeMathCaller{contract: contract}, UnsafeMathTransactor: UnsafeMathTransactor{contract: contract}, UnsafeMathFilterer: UnsafeMathFilterer{contract: contract}}, nil
}

// UnsafeMath is an auto generated Go binding around an Ethereum contract.
type UnsafeMath struct {
	UnsafeMathCaller     // Read-only binding to the contract
	UnsafeMathTransactor // Write-only binding to the contract
	UnsafeMathFilterer   // Log filterer for contract events
}

// UnsafeMathCaller is an auto generated read-only Go binding around an Ethereum contract.
type UnsafeMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UnsafeMathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type UnsafeMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UnsafeMathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type UnsafeMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// UnsafeMathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type UnsafeMathSession struct {
	Contract     *UnsafeMath       // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// UnsafeMathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type UnsafeMathCallerSession struct {
	Contract *UnsafeMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts     // Call options to use throughout this session
}

// UnsafeMathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type UnsafeMathTransactorSession struct {
	Contract     *UnsafeMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// UnsafeMathRaw is an auto generated low-level Go binding around an Ethereum contract.
type UnsafeMathRaw struct {
	Contract *UnsafeMath // Generic contract binding to access the raw methods on
}

// UnsafeMathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type UnsafeMathCallerRaw struct {
	Contract *UnsafeMathCaller // Generic read-only contract binding to access the raw methods on
}

// UnsafeMathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type UnsafeMathTransactorRaw struct {
	Contract *UnsafeMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewUnsafeMath creates a new instance of UnsafeMath, bound to a specific deployed contract.
func NewUnsafeMath(address common.Address, backend bind.ContractBackend) (*UnsafeMath, error) {
	contract, err := bindUnsafeMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &UnsafeMath{UnsafeMathCaller: UnsafeMathCaller{contract: contract}, UnsafeMathTransactor: UnsafeMathTransactor{contract: contract}, UnsafeMathFilterer: UnsafeMathFilterer{contract: contract}}, nil
}

// NewUnsafeMathCaller creates a new read-only instance of UnsafeMath, bound to a specific deployed contract.
func NewUnsafeMathCaller(address common.Address, caller bind.ContractCaller) (*UnsafeMathCaller, error) {
	contract, err := bindUnsafeMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &UnsafeMathCaller{contract: contract}, nil
}

// NewUnsafeMathTransactor creates a new write-only instance of UnsafeMath, bound to a specific deployed contract.
func NewUnsafeMathTransactor(address common.Address, transactor bind.ContractTransactor) (*UnsafeMathTransactor, error) {
	contract, err := bindUnsafeMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &UnsafeMathTransactor{contract: contract}, nil
}

// NewUnsafeMathFilterer creates a new log filterer instance of UnsafeMath, bound to a specific deployed contract.
func NewUnsafeMathFilterer(address common.Address, filterer bind.ContractFilterer) (*UnsafeMathFilterer, error) {
	contract, err := bindUnsafeMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &UnsafeMathFilterer{contract: contract}, nil
}

// bindUnsafeMath binds a generic wrapper to an already deployed contract.
func bindUnsafeMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := UnsafeMathMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UnsafeMath *UnsafeMathRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UnsafeMath.Contract.UnsafeMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UnsafeMath *UnsafeMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UnsafeMath.Contract.UnsafeMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UnsafeMath *UnsafeMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UnsafeMath.Contract.UnsafeMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_UnsafeMath *UnsafeMathCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _UnsafeMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_UnsafeMath *UnsafeMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _UnsafeMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_UnsafeMath *UnsafeMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _UnsafeMath.Contract.contract.Transact(opts, method, params...)
}
